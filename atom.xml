<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leek 自留地</title>
  
  
  <link href="https://imlike.cc/atom.xml" rel="self"/>
  
  <link href="https://imlike.cc/"/>
  <updated>2025-07-27T05:23:30.071Z</updated>
  <id>https://imlike.cc/</id>
  
  <author>
    <name>leek</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://imlike.cc/0.html"/>
    <id>https://imlike.cc/0.html</id>
    <published>2025-07-27T05:23:30.071Z</published>
    <updated>2025-07-27T05:23:30.071Z</updated>
    
    <content type="html"><![CDATA[<p>什么时候需要消息总线？<br>适用场景：</p><p>多个订阅者：需要同时通知多个不同的组件<br>动态订阅：运行时需要添加/移除订阅者<br>背压控制：需要处理生产者消费者速度不匹配<br>复杂事件流：需要事件过滤、转换、组合等操作</p><p>一个事件 需要出发多种反应包括 日志,缓存等<br>消息总线可以将一个事件分发到多个目标<br>目标可以是多个组件</p><p>异步方式提交任务</p><p>高耦合 (High Coupling)：TaskService 强依赖于 CacheService 和 LogService。它必须“知道”有哪些服务需要被通知。</p><p>违反开闭原则 (Violates Open/Closed Principle)：如果未来新增一个 NotificationService，当任务更新时需要发送邮件通知，你必须修改 TaskService 的代码，在 updateTask 方法里增加一个新的调用。这使得 TaskService 变得不稳定，难以维护。</p><p>职责不清：TaskService 的核心职责是处理任务业务，但现在它还承担了“协调和通知其他模块”的职责，这会让它的逻辑越来越臃肿。</p><p>这种</p><p>低耦合 (Low Coupling)：TaskService (发布者) 和 CacheService/LogService (订阅者) 之间没有直接依赖。它们都只依赖于中间人 TaskEventBroker。</p><p>高扩展性 (High Extensibility)：当你需要新增一个 NotificationService 时，完全不需要修改 TaskService。你只需要创建 NotificationService 并让它自己去订阅事件即可。这完全符合开闭原则（对扩展开放，对修改关闭）。</p><p>职责单一 (Single Responsibility)：每个模块只关心自己的事。TaskService 只管发事件，CacheService 只管响应事件并刷新缓存。</p><p>// 发布者<br>@Service<br>public class TaskService {<br>    @Autowired<br>    private TaskEventBroker eventBroker;</p><pre><code>public void updateTask(Task task) &#123;    // 1. 更新数据库中的任务...    db.save(task);    // 2. 只负责发布一个“任务已变更”的事件，不关心谁会收到    eventBroker.publish();     log.info(&quot;任务变更事件已发布&quot;);&#125;</code></pre><p>}</p><p>// 订阅者1<br>@Service<br>public class CacheService {<br>    @Autowired<br>    public CacheService(TaskEventBroker eventBroker) {<br>        // 在构造时就订阅事件<br>        eventBroker.subscribe(signal -&gt; this.refresh());<br>    }</p><pre><code>public void refresh() &#123; /* ...刷新缓存的逻辑... */ &#125;</code></pre><p>}</p><p>// 订阅者2<br>@Service<br>public class LogService {<br>    public LogService(TaskEventBroker eventBroker) {<br>        eventBroker.subscribe(signal -&gt; this.recordUpdate());<br>    }</p><pre><code>public void recordUpdate() &#123; /* ...记录日志的逻辑... */ &#125;</code></pre><p>}</p><p>// 新增的订阅者3 (无需修改任何已有代码)<br>@Service<br>public class NotificationService {<br>    public NotificationService(TaskEventBroker eventBroker) {<br>        eventBroker.subscribe(signal -&gt; this.sendEmail());<br>    }</p><pre><code>public void sendEmail() &#123; /* ...发送邮件的逻辑... */ &#125;</code></pre><p>}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么时候需要消息总线？&lt;br&gt;适用场景：&lt;/p&gt;
&lt;p&gt;多个订阅者：需要同时通知多个不同的组件&lt;br&gt;动态订阅：运行时需要添加/移除订阅者&lt;br&gt;背压控制：需要处理生产者消费者速度不匹配&lt;br&gt;复杂事件流：需要事件过滤、转换、组合等操作&lt;/p&gt;
&lt;p&gt;一个事件 需要出发多种</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>的几种授权流程()</title>
    <link href="https://imlike.cc/undefined.html"/>
    <id>https://imlike.cc/undefined.html</id>
    <published>2025-07-27T05:23:15.000Z</published>
    <updated>2025-07-27T05:24:59.573Z</updated>
    
    <content type="html"><![CDATA[<p>转载来源<a href="https://www.raychase.net/8015">OAuth2.0 的几种授权流程 – 四火的唠叨</a></p><p>首先，从高维度看，OAuth 是要解决什么问题？</p><p>OAuth 要解决的是客户端在不知道和不使用用户密码的情况下，怎么样安全访问并获取用户所拥有的资源的问题。</p><p>顺带说一句，经常和 OAuth 一起谈到的 OIDC 则是解决了用户信息（profile）获取的问题。简单说，OAuth 解决了 Authorization 的问题，OIDC 解决了 Authentication 的问题。</p><p>OAuth 有几种角色：</p><ul><li>Resource Owner：资源的拥有者，比方说终端用户；</li><li>Resource Server：资源服务器，比如用户想要调用的 API；</li><li>Client：就是用户来进行鉴权和资源操作的客户端，比方说浏览器或者 CLI；</li><li>Authorization Server：就是专门授权的服务器。</li></ul><p>所以 OAuth 就是用户想通过某种机制，通过 Client 和 Authorization Server 交互来获得能够访问资源的 token。</p><p>对于 OAuth2.0 的授权流程，可以根据 <a href="https://oauth.net/2/grant-types/">grant type</a> 来做个归类。下面的图示全部都来自 Auth0 的<a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow">官方文档</a>。</p><p><strong>1. Authorization Code</strong>：用户访问 web app，web app 的后端请求 auth server，于是重定向到登录页面，用户输入登录信息，auth server 就给 web app 一个授权码，这个授权码通过 callback URL 返回，而这个参数一般放在这个 url 的参数中，比如：http://…/callback?token=TOKEN。之后 web app 就可以拿着授权码去取 token 了。这种方式不需要用户这边存放任何 secret，但是需要用户参与 consent，并且具备 web app 的后端，因为和 auth server 的交互主要都是 web app 后端完成的。</p><p><img src="https://www.raychase.net/wp-content/uploads/2025/07/image-1024x641.png" alt="img"></p><p>但是这种方法存在一些 concern，比如说，这个 code 如果在返回途中被截获怎么办，截获者就可以使用这个 code 来获取 token 了。</p><p><strong>2. PKCE</strong>：对于上述问题，有一个改进的办法，就是使用 PKCE（Proof Key for Code Exchange）来给它增强。基本原理是，客户端生成一个随机字符串 code verifier，根据一个算法 code challenge method 来生成它的 hash（challenge），获取授权码 code 的时候需要把这个 method 和 challenge 带过去；接着，code 正常返回，但之后客户端拿着 code 去获取 token 的时候，需要带上这个 code verifier，这样 auth server 就可以根据之前拿到的 method 和 challenge，以及刚得到的 code 和 code verifier，来校验用户是不是可以得到这个 token。</p><p>在这种情况下，如果 code 被劫持，那么对方拿到了 code，却没有 code verifier，也就没什么用。</p><p><img src="https://www.raychase.net/wp-content/uploads/2025/07/image-3-1024x833.png" alt="img"></p><p>这种方法是比较推荐的，对于一些 CLI 登录使用这种方法的时候，重定向 URL 可以是一个带有 code 的指向 localhost 的地址以被 CLI 捕获。</p><p><strong>3. Device Code</strong>：前面说到的 Authorization Code 这种方法还有一个变体，就是对于一些需要用户参与，但是又没有浏览器（或者自动打开浏览器）的场景下，这个重定向到浏览器来获取用户 consent 的过程，被其它方式来取代，这种变体可看做名为 Device Authorization 的流程：</p><p><img src="https://www.raychase.net/wp-content/uploads/2025/07/image-5-995x1024.png" alt="img"></p><p>可以看到，上面的浏览器重定向的过程被替换成了返回 code 和 verification url，然后用户使用 verification URL 加上这个 user code 来完成 consent 的过程，在这个过程完成之后，这个 device 才被授权。在这个过程完成之前，需要 app 不断去 poll 检查是不是 device 已经被授权了。</p><p><strong>4. Client Credential</strong>：前面说到的 Authorization Code 虽然好用，但是需要用户手动登录确认的过程，对于一些没有人参与的 M2M（machine-to-machine）系统而言，这是不现实的。因此在 client id 的基础上，再加上一个 client secret，一样可以完成 auth 的流程。这种场景其实就相当于是 client 和 resource owner 是同一个了：</p><p><img src="https://www.raychase.net/wp-content/uploads/2025/07/image-4-1024x611.png" alt="img"></p><p><strong>5. Implicit</strong>：这种其实就是上面 Authorization Code 的简化版，去掉了 code 的环节，直接发 code。这种方式在 app 只有前端的场景下（比如 SPA）使用，因为它没法进行后端和 Auth Server 的通信。但是这种方式因为安全性低，因而不推荐，因为即便是 SPA，还是可以用前面说的那种 PKCE 增强的 Authorization Code 方式来实现。</p><p><img src="https://www.raychase.net/wp-content/uploads/2025/07/image-1-1024x486.png" alt="img"></p><p>再来看这个 callback 的 URL，和前面提到的 Authorization Code 流程不一样的是，它返回的 token 放在 URL 的 fragment 里面，而不是 query 里面，比如：http://…/callback#token=TOKEN，这样做的好处是这个 TOKEN 不会在浏览器跳转的时候送到服务器，就不容易泄露。</p><p><strong>6. Password</strong>：这种方式其实就是让 client 获知用户的用户名和密码，属于风险比较大的做法，要求这个 app 是用户百分百信任的——这也就是说，它没有解决 OAuth 本身应该解决的问题，因此很少使用。</p><p><img src="https://www.raychase.net/wp-content/uploads/2025/07/image-2-1024x610.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载来源&lt;a href=&quot;https://www.raychase.net/8015&quot;&gt;OAuth2.0 的几种授权流程 – 四火的唠叨&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，从高维度看，OAuth 是要解决什么问题？&lt;/p&gt;
&lt;p&gt;OAuth 要解决的是客户端在不知道和不使用用户密</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>selfhost自部署指南</title>
    <link href="https://imlike.cc/1974fd9f.html"/>
    <id>https://imlike.cc/1974fd9f.html</id>
    <published>2025-06-21T00:37:36.000Z</published>
    <updated>2025-06-21T00:41:51.847Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接</p><p><a href="https://tcoo.cc/">Tcoo.cc - 精选开源自托管项目推荐与指南</a></p><p><a href="https://selfh.st/apps/">Self-Hosted Software and Apps</a></p><p>主要是适合自己自部署的服务推荐还有两个自托管项目的网站</p><p>目前可以在Paas服务类似 fly.io和 render ,国内有aliyun,tencent云,但是完全没有限额</p><p>也可以使用esc,云主机来运行容器或者二进制文件</p><p>下面一fly.io的例子</p><h2 id="bitwarden-self-host"><a href="#bitwarden-self-host" class="headerlink" title="bitwarden/self-host"></a>bitwarden/self-host</h2><p>使用bitwarden/self-host:2024.2.0-beta 来维护密码,之前经历过 lastpass 服务很慢,而且虽然声明加密但是也出现过泄密的情况,后面都是用的chrome,但是跨平台支持不行,而且在安卓和iOS下填充支持不足,后面一直使用 microsoft authenticator 有多个原因</p><ol><li>大厂出品,而且微软在国内访问还算稳定</li><li>支持多平台</li><li>加密和支持two-factor 两步验证</li><li>对outlook账号安全相关的功能很全</li></ol><p>但是目前2025.1 月不支持chrome,没有办法又要考虑下替代的选择</p><p>用了这么多密码管理器基本需求都清楚,主要是</p><ol><li>可以自己部署(速度,安全,方便备份)</li><li>支持多客户端</li><li>支持多种登录协议方便后续拓展 两步验证,账号密码,passkey,存储 token和其他的账号信息</li></ol><p>最后基本bitwarden是最符合</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGMwZDA1OGQwNTAwZjgzN2RhYzVhYTRmNjc2MTFiNjBfTGpIbVpPYWpPOUFXcTA5d1lBa0dIck54THp6eDJGa2VfVG9rZW46RTNnNGJqUFlJb0hTZW14M0h2amNhNkd5blJjXzE3NTA0NjYyMDc6MTc1MDQ2OTgwN19WNA" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">app = <span class="string">&quot;keep-pass&quot;</span></span><br><span class="line">primary_region = <span class="string">&quot;hkg&quot;</span></span><br><span class="line">swap_size_mb = 1024</span><br><span class="line"></span><br><span class="line">[build]</span><br><span class="line">image = <span class="string">&quot;bitwarden/self-host:2024.2.0-beta&quot;</span></span><br><span class="line"></span><br><span class="line">[env]</span><br><span class="line">BW_DB_PROVIDER = <span class="string">&quot;sqlite&quot;</span></span><br><span class="line">BW_DOMAIN = <span class="string">&quot;bitwarden.fly.dev&quot;</span></span><br><span class="line">BW_ENABLE_EVENTS = <span class="string">&quot;true&quot;</span></span><br><span class="line">BW_ENABLE_SCIM = <span class="string">&quot;true&quot;</span></span><br><span class="line">BW_ENABLE_SSO = <span class="string">&quot;true&quot;</span></span><br><span class="line">BW_ICONS_PROXY_TO_CLOUD = <span class="string">&quot;true&quot;</span></span><br><span class="line">HOSTNAME = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">BW_INSTALLATION_ID = <span class="string">&quot;&quot;</span></span><br><span class="line">BW_INSTALLATION_KEY = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">[http_service]</span><br><span class="line">auto_start_machines = <span class="literal">false</span></span><br><span class="line">auto_stop_machines = <span class="literal">false</span></span><br><span class="line">internal_port = 8080</span><br><span class="line">min_machines_running = 1</span><br><span class="line">processes = [<span class="string">&quot;app&quot;</span>]</span><br><span class="line"></span><br><span class="line">[http_service.concurrency]</span><br><span class="line">hard_limit = 200</span><br><span class="line">soft_limit = 200</span><br><span class="line"><span class="built_in">type</span> = <span class="string">&quot;connections&quot;</span></span><br><span class="line"></span><br><span class="line">[[mounts]]</span><br><span class="line">destination = <span class="string">&quot;/etc/bitwarden&quot;</span></span><br><span class="line"><span class="built_in">source</span> = <span class="string">&quot;bitwarden_data&quot;</span></span><br><span class="line"></span><br><span class="line">[[services]]</span><br><span class="line">internal_port = 8080</span><br><span class="line">protocol = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"></span><br><span class="line">[[services.ports]]</span><br><span class="line">handlers = [<span class="string">&quot;http&quot;</span>]</span><br><span class="line">port = 80</span><br><span class="line"></span><br><span class="line">[[services.ports]]</span><br><span class="line">handlers = [<span class="string">&quot;http&quot;</span>, <span class="string">&quot;tls&quot;</span>]</span><br><span class="line">port = 443</span><br></pre></td></tr></table></figure><h2 id="RSS搜集"><a href="#RSS搜集" class="headerlink" title="RSS搜集"></a>RSS搜集</h2><p>Freshrss</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">app = <span class="string">&quot;fresh-rss&quot;</span></span><br><span class="line">kill_signal = <span class="string">&quot;SIGINT&quot;</span></span><br><span class="line">kill_timeout = <span class="string">&quot;5s&quot;</span></span><br><span class="line">primary_region = <span class="string">&quot;hkg&quot;</span></span><br><span class="line"></span><br><span class="line">[build]</span><br><span class="line">image = <span class="string">&quot;freshrss/freshrss:1.20.1&quot;</span></span><br><span class="line"></span><br><span class="line">[env]</span><br><span class="line">ADMIN_API_PASSWORD = <span class="string">&quot;freshrss&quot;</span></span><br><span class="line">ADMIN_PASSWORD = <span class="string">&quot;freshrss&quot;</span></span><br><span class="line">CRON_MIN = <span class="string">&quot;*/20&quot;</span></span><br><span class="line"></span><br><span class="line">[experimental]</span><br><span class="line">auto_rollback = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[[mounts]]</span><br><span class="line">destination = <span class="string">&quot;/var/www/FreshRSS/data&quot;</span></span><br><span class="line"><span class="built_in">source</span> = <span class="string">&quot;freshrss_data&quot;</span></span><br><span class="line"></span><br><span class="line">[[services]]</span><br><span class="line">internal_port = 80</span><br><span class="line">processes = [ <span class="string">&quot;app&quot;</span> ]</span><br><span class="line">protocol = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"></span><br><span class="line">[services.concurrency]</span><br><span class="line">hard_limit = 25</span><br><span class="line">soft_limit = 20</span><br><span class="line"><span class="built_in">type</span> = <span class="string">&quot;connections&quot;</span></span><br><span class="line"></span><br><span class="line">[[services.ports]]</span><br><span class="line">force_https = <span class="literal">true</span></span><br><span class="line">handlers = [ <span class="string">&quot;http&quot;</span> ]</span><br><span class="line">port = 80</span><br><span class="line"></span><br><span class="line">[[services.ports]]</span><br><span class="line">handlers = [ <span class="string">&quot;tls&quot;</span>, <span class="string">&quot;http&quot;</span> ]</span><br><span class="line">port = 443</span><br><span class="line"></span><br><span class="line">[[services.tcp_checks]]</span><br><span class="line">grace_period = <span class="string">&quot;1s&quot;</span></span><br><span class="line">interval = <span class="string">&quot;15s&quot;</span></span><br><span class="line">timeout = <span class="string">&quot;2s&quot;</span></span><br><span class="line"></span><br><span class="line">[[vm]]</span><br><span class="line">cpu_kind = <span class="string">&quot;shared&quot;</span></span><br><span class="line">cpus = 1</span><br><span class="line">memory_mb = 256</span><br></pre></td></tr></table></figure><h2 id="照片同步"><a href="#照片同步" class="headerlink" title="照片同步"></a>照片同步</h2><p>todo</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考链接&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tcoo.cc/&quot;&gt;Tcoo.cc - 精选开源自托管项目推荐与指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://selfh.st/apps/&quot;&gt;Self-Hosted Software and Apps</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>并发队列实现</title>
    <link href="https://imlike.cc/bf4abafd.html"/>
    <id>https://imlike.cc/bf4abafd.html</id>
    <published>2025-06-21T00:34:01.000Z</published>
    <updated>2025-06-21T00:41:51.848Z</updated>
    
    <content type="html"><![CDATA[<p>每次提交的任务先走到内部队列,在livy执行完成后有资源的情况下将队列的任务提交到livy</p><p>同时使用future等待的特性,最大增加并发能力</p><p>使用的算法是  令牌桶来实现  还有漏桶的算法也一起介绍</p><p>异步队列</p><ol><li>特定节点的阻塞等待,因为是基于Servlet ,目前阻塞但是不用一直去轮询可以等待回调结果</li></ol><p>​      如果是reactio下的springflux 的异步的容器应该效率可以提高更快</p><ol><li>同时对于队列的任务执行依赖于 caffine或者其他的管理</li><li>对于实际执行的livy的任务时间执行情况依赖于定时轮询这个需要优化为回调或者勾着函数来拿到对应结果</li></ol><p>a服务调用B服务需要阻塞等待拿到结果有几种方式来实现</p><ol><li> <strong>同步阻塞调用 (Synchronous Blocking) 调用接口阻塞等待返回结果 调用方调用接口实时返回</strong></li><li><strong>异步**</strong>回调** <strong>(Asynchronous with</strong> <strong>Callback**</strong>)** 阻塞轮询拉到结果后执行 ,接口能有注册回调的的函数或者接口</li><li><strong>阻塞**</strong>轮询** <strong>(Blocking</strong> <strong>Polling**</strong>)** 触发后异步等待回调后触发后续的计算和执行,需要额外的状态接口</li><li><strong>基于**</strong>消息队列**<strong>的请求/响应模式 (Request/Reply over</strong> <strong>Message Queue**</strong>)**</li><li> <strong>Future/Promise 的异步阻塞 (Asynchronous Blocking with Future/Promise)</strong> 拿到Future后 执行其他任务需要结果的时候 future.get()等待结果</li></ol><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YzE0OGZhZDczNzQzODhiMjMwMDI5ZDIwOWJhOTFkYTVfZG1NNXBXeDZCWVZQNjRXNng5dWFCUUkyNXY4MlFacVpfVG9rZW46V0JiSGJLaGo3b3lRSFZ4bUN0dmNQTTAybmplXzE3NTA0NjYwMDQ6MTc1MDQ2OTYwNF9WNA" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;每次提交的任务先走到内部队列,在livy执行完成后有资源的情况下将队列的任务提交到livy&lt;/p&gt;
&lt;p&gt;同时使用future等待的特性,最大增加并发能力&lt;/p&gt;
&lt;p&gt;使用的算法是  令牌桶来实现  还有漏桶的算法也一起介绍&lt;/p&gt;
&lt;p&gt;异步队列&lt;/p&gt;
&lt;ol&gt;
&lt;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>权限系统通用的设计模型(转载)</title>
    <link href="https://imlike.cc/389ed4f9.html"/>
    <id>https://imlike.cc/389ed4f9.html</id>
    <published>2025-06-21T00:29:01.000Z</published>
    <updated>2025-06-21T00:41:51.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🔗 原文链接： <a href="https://yindongliang.com/posts/permission-system-models/">https://yindongliang.com/posts/perm…</a></p></blockquote><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>权限系统是一个比较通用的系统，几乎所有的后台业务都会涉及到，关于权限系统的设计经过一些最佳实践也已经被总结成各种模型，比如 ACL、RBAC、ABAC、PBAC等，下面开始详细介绍。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>在很多权限系统的框架和服务，包括 <a href="https://casbin.org/zh-CN/">Casbin </a>、 <a href="https://www.authing.cn/">Authing </a>里面，都有下面这些名词作为基础，所以在开始之前，还要先理解这些概念。</p><h3 id="主体（Subject）"><a href="#主体（Subject）" class="headerlink" title="主体（Subject）"></a>主体（Subject）</h3><p>想要访问资源的主体，可以先理解为用户。</p><h3 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h3><p>用户要访问（或更改）的资源。</p><h3 id="动作（Action）"><a href="#动作（Action）" class="headerlink" title="动作（Action）"></a>动作（Action）</h3><p>用户对资源执行的操作，比如文件的读写，数据是否能访问、操作。</p><h2 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h2><p>权限控制表简称 ACL（Access-Control List），ACL 记录了哪些 <strong>资源</strong> 可以被哪些 <strong>主体</strong> 进行哪些 <strong>操作</strong> ，是一个关系表，大部分的权限系统里都会有这张表。而在一个 ACL 表里，一般会有主体、对象和动作三个要素，设计出来的库表一般为：</p><table><thead><tr><th>id</th><th>subject</th><th>object</th><th>action</th></tr></thead><tbody><tr><td>1</td><td>user1</td><td>文档 1</td><td>查看</td></tr><tr><td>2</td><td>user1</td><td>文档 2</td><td>编辑</td></tr><tr><td>3</td><td>user2</td><td>文档 2</td><td>删除</td></tr></tbody></table><h3 id="DAC"><a href="#DAC" class="headerlink" title="DAC"></a>DAC</h3><p>自主访问控制简称 DAC（Discretionary Access Control），DAC 是 ACL 的一种实现，里面的主体就是用户。这样的设计简单直接，查询效率很高，强调自主是因为 DAC 模型将授权的权利下放，允许拥有指定权限的用户可以自主地将权限授予给其他用户。比如，在纯粹 ACL 模型下，每次新人培训，人事总监都要通知 IT 部，将培训文档的访问权限授予新人。在 DAC 模型下，人事总监只需将文档的访问权限授予人事专员。之后，每次新人培训，由人事专员将文档的访问权限授予不同的新人。</p><p>DAC 的缺点也很明显，比如在一家公司，每有一个新人入职，就需要人事专员给新人添加各种系统的权限，这些工作的重复性很大，而且文档越多，工作量越大。</p><h3 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h3><p>强制访问控制简称 MAC（Mandatory Access Control），是为了弥补 DAC 权限控制过于分散的问题而诞生的，在 MAC 模型中，会对资源进行类别划分、对主体进行等级划分。在进行权限校验时，会同时对主体的等级和资源的类别进行匹配，实现资源与主体的双重验证，确保资源的交叉隔离，提高安全性。比如情报局的任务有秘密级、机密级、绝密级，角色有007、M 和 Q，MAC 非常适合机密机构或者其他等级观念强烈的行业，但对于类似商业服务系统，则因为不够灵活而不能适用。</p><p>MAC的权限库表设计可能为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">资源配置表</span><br><span class="line">  资源: 财务文档</span><br><span class="line"><span class="code">    主体: 财务人员</span></span><br><span class="line"><span class="code">    等级：经理级</span></span><br><span class="line"><span class="code">    操作：查看</span></span><br><span class="line"><span class="code">主体配置表</span></span><br><span class="line"><span class="code">        主体: 李女士</span></span><br><span class="line"><span class="code">          类别: 财务人员</span></span><br><span class="line"><span class="code">          等级：经理级</span></span><br></pre></td></tr></table></figure><h2 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h2><p>基于角色的访问控制简称 RBAC（Role-Based Access Control）。在 RBAC 里面，一个人有了一些固定的权限后，他就是一个角色，于是引入了“角色”的概念，可以理解为角色就是一组权限的集合。这个模型有效的解决了 ACL 模型里面管理员给每一个新人逐个系统加权限的问题，只需要在最初配置好角色所拥有的权限，在新人入职时给新人分配一个角色就可以了，大大减少重复性操作负担。需要注意的是，实现时要验证角色是否有某个权限，而不是去验证用户是否是某个角色。</p><p>引入角色概念后，RBAC 演进出了 4 种细分模型：RBAC0、RBAC1、RBAC2、RBAC3。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=N2IxMDUxMmVlZTI2NGYzZWIwOTg3MTIwNjc3NzAzNTRfUDZrS1NacldSMUViaXZwcWFuSjR1a0R6TTRQT3dobTVfVG9rZW46WFVRb2JkdjNLb3YzSWN4c0d3Q2NRRlhrbkdiXzE3NTA0NjU3ODU6MTc1MDQ2OTM4NV9WNA" alt="img"></p><h3 id="RBAC0"><a href="#RBAC0" class="headerlink" title="RBAC0"></a>RBAC0</h3><p>RBAC0 就是上面说的最基础的 RBAC 模型，只引入了角色的概念，在这个模型下，用户和角色是多对多的关系，角色和权限之间也是多对多的关系，角色实现了用户和权限间的解耦：</p><h3 id="RBAC1"><a href="#RBAC1" class="headerlink" title="RBAC1"></a>RBAC1</h3><p>RBAC1 模型是 RBAC0 的升级版，它对角色这层元素上进行了细分，引入 <strong>角色继承</strong> 的概念，也就是可以继承某个基础角色生成子角色。RBAC1 模型可以更好地在角色层面进行细分，更好地映射了企业组织架构中的职能的权限，根据实际的管理权限对相似职能的角色进行删减以达到级别分明的效果。</p><p><strong>应用场景</strong> ：市场经理岗位可能会分为总监级别、经理级别、副经理级别，这时候如果小陈只是一个副经理级别的，那么他所拥有的市场经理的权限肯定就没有总监级别的多 1 。</p><h3 id="RBAC2"><a href="#RBAC2" class="headerlink" title="RBAC2"></a>RBAC2</h3><p>在 RBAC2 中对角色层面增加了 <strong>职责分离</strong> 的限制：</p><p>（1）静态职责分离（Static Separation of Duty)）</p><ul><li>角色互斥：相同用户不能同时拥有互斥关系的角色，例如会计和出纳两个角色就是互斥的</li><li>基数约束：角色被分配到的用户有数量上限，例如公司中只有一个 CEO 职位，那么这个角色的数量就是有限的</li><li>先决条件角色：要拥有更高级别的角色权限，需要先获取到相对来说低级别的一些权限，例如副经理要想获取到总监级别权限，那么他需要先获取到经理级别的权限。</li></ul><p>（2）动态职责分离（Dynamic Separation of Duty）</p><p>用户在一次会话（Session）中不能同时激活自身所拥有的、互相有冲突的角色，只能选择其一。</p><h3 id="RBAC3"><a href="#RBAC3" class="headerlink" title="RBAC3"></a>RBAC3</h3><p>RBAC3 模型就是 <code>RBAC1 + RBAC2</code> 两个模型的合集，所以 RBAC3 既有 RBAC1 的角色等级划分，也有 RBAC2 的角色限制。这种模型只有在系统比较复杂的时候才派得上用场，不然设计得过度复杂，对开发和后期维护也不是好事情。</p><h3 id="RBAC-的优缺点"><a href="#RBAC-的优缺点" class="headerlink" title="RBAC 的优缺点"></a>RBAC 的优缺点</h3><p>RBAC 的优点很明显就是只需要分配一次角色，大大减少了重复性操作负担，解耦了用户和权限的关系。</p><p>但是 RBAC 并不总能满足所有权限的场景。比如，我们无法对销售角色进行个体定制。比如，销售角色拥有创建、删除的权限。如果我们要对销售小李，去掉删除的权限。那么，我们就必须创建另一个角色，来满足需求。如果这种情况很频繁，就会丧失角色的统一性，降低系统的可维护性。</p><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><p>很多情况下权限系统还会在 <code>用户&lt;--&gt;角色&lt;--&gt;权限</code> 的基础上引入 <strong>用户组</strong> 的概念，用户组就是用户（主体）的集合，打个比方，在一家公司需要将岗位 A 的所有人都调配到岗位 B，如果单纯的更改用户的角色，操作量还是很大，加入用户组的概念后，只需要将一个用户组的角色从岗位 A 改为岗位 B 就可以了。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户<span class="xml"><span class="tag">&lt;<span class="name">=关系表=</span>&gt;</span></span>用户组<span class="xml"><span class="tag">&lt;<span class="name">=关系表=</span>&gt;</span></span>角色<span class="xml"><span class="tag">&lt;<span class="name">=关系表=</span>&gt;</span></span>权限</span><br></pre></td></tr></table></figure><h4 id="角色和组的区别"><a href="#角色和组的区别" class="headerlink" title="角色和组的区别"></a>角色和组的区别</h4><p>角色和组两个概念可能会让人混淆，这里做个区分：</p><ul><li>主体可以是用户，也可以是组，角色赋予的是主体。</li><li>角色是权限的集合。</li><li>组是用户的集合</li></ul><h2 id="ABAC"><a href="#ABAC" class="headerlink" title="ABAC"></a>ABAC</h2><p>基于属性的访问控制（Attribute-Based Access Control，简称 ABAC）是一种非常灵活的授权模型，不同于 RBAC，在 ABAC 中，一个操作是否被允许是基于对象、资源、操作和环境信息共同动态计算决定的 2 。</p><ul><li>对象：对象是当前请求访问资源的用户。用户的属性包括ID，个人资源，角色，部门和组织成员身份等；</li><li>资源：资源是当前访问用户要访问的资产或对象（例如文件，数据，服务器，甚至API）。资源属性包含文件的创建日期，文件所有者，文件名和类型以及数据敏感性等等；</li><li>操作：操作是用户试图对资源进行的操作。常见的操作包括“读取”，“写入”，“编辑”，“复制”和“删除”；</li><li>环境：环境是每个访问请求的上下文。环境属性包含访问尝试的时间和位置，对象的设备，通信协议和加密强度等。</li></ul><h3 id="如何使用属性进行动态计算"><a href="#如何使用属性进行动态计算" class="headerlink" title="如何使用属性进行动态计算"></a>如何使用属性进行动态计算</h3><p>在 ABAC 的决策语句的执行过程中，决策引擎会根据定义好的决策语句，结合对象、资源、操作、环境等因素动态计算出决策结果。每当发生访问请求时，ABAC 决策系统都会分析属性值是否与已建立的策略匹配。如果有匹配的策略，访问请求就会被通过。</p><p>例如，策略「当一个文档的所属部门跟用户的部门相同时，用户可以访问这个文档」会被以下属性匹配：</p><ul><li>对象（用户）的部门 = 资源的所属部门；</li><li>资源 = “文档”；</li><li>操作 = “访问”；</li></ul><p>策略「早上九点前禁止 A 部门的人访问B系统；」会被以下属性匹配：</p><ul><li>对象的部门 = A 部门；</li><li>资源 = “B 系统”；</li><li>操作 = “访问”；</li><li>环境 = “时间是早上 9 点”。</li></ul><p>浓缩到一句话，在 ABAC 模型下你可以 <strong>细粒度地授权在何种情况下对某个资源具备某个特定的权限。</strong></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>基于了这些属性，就可以进行规则的定制，可见灵活但是复杂，配置的工作量根据实际业务的复杂度成正比。kubernetes 也因为其过于复杂改用了 RBAC 3 。</p><blockquote><p>ABAC, Attribute Based Access Control, is a powerful concept. However, as implemented in Kubernetes, ABAC is difficult to manage and understand. It requires ssh and root filesystem access on the master VM of the cluster to make authorization policy changes. For permission changes to take effect the cluster API server must be restarted.</p></blockquote><p>RBAC 也相应解决了使用 ABAC 时面临的问题：</p><blockquote><p>RBAC permission policies are configured using kubectl or the Kubernetes API directly. Users can be authorized to make authorization policy changes using RBAC itself, making it possible to delegate resource management without giving away ssh access to the cluster master. RBAC policies map easily to the resources and operations used in the Kubernetes API.</p></blockquote><p>除了维护难度高以外，ABAC 的规则判断是实时执行，规则过多或者需求复杂时需要关注性能问题。</p><h3 id="选择-RBAC-还是-ABAC"><a href="#选择-RBAC-还是-ABAC" class="headerlink" title="选择 RBAC 还是 ABAC"></a>选择 RBAC 还是 ABAC</h3><p>在这里，组织的规模是至关重要的因素。由于 ABAC 最初的设计和实施困难，对于小型企业而言，考虑起来可能太复杂了。</p><p>对于中小型企业，RBAC 是 ABAC 的简单替代方案。每个用户都有一个唯一的角色，并具有相应的权限和限制。当用户转移到新角色时，其权限将更改为新职位的权限。这意味着，在明确定义角色的层次结构中，可以轻松管理少量内部和外部用户。</p><p>但是，当必须手动建立新角色时，对于大型组织而言，效率不高。一旦定义了属性和规则，当用户和利益相关者众多时，ABAC 的策略就更容易应用，同时还降低了安全风险。</p><p>简而言之，如果满足以下条件，请选择 ABAC：</p><ul><li>你在一个拥有许多用户的大型组织中；</li><li>你需要深入的特定访问控制功能；</li><li>你有时间投资远距离的模型；</li><li>你需要确保隐私和安全合规；</li></ul><p>但是，如果满足以下条件，请考虑 RBAC：</p><ul><li>你所在的是中小型企业；</li><li>你的访问控制策略广泛；</li><li>你的外部用户很少，并且你的组织角色得到了明确定义。</li></ul><h3 id="PBAC"><a href="#PBAC" class="headerlink" title="PBAC"></a>PBAC</h3><p>PBAC（Policy-Based Access Control）是基于策略的权限控制，其实 ABAC 里已经开始有策略的味道了，PBAC 就是相对于传统的 ABAC 更加强调策略（Policy），故 PBAC 也是 ABAC。参考维基百科 XACML 里的描述 4 ：</p><blockquote><p>XACML is primarily an <a href="https://en.wikipedia.org/wiki/Attribute-based_access_control">attribute-based access control </a>system (ABAC), also known as a policy-based access control (PBAC) system, where attributes (bits of data) associated with a user or action or resource are inputs into the decision of whether a given user may access a given resource in a particular way.</p></blockquote><h2 id="框架实现"><a href="#框架实现" class="headerlink" title="框架实现"></a>框架实现</h2><h3 id="Casbin"><a href="#Casbin" class="headerlink" title="Casbin"></a>Casbin</h3><p>Casbin 是一个强大的、高效的开源访问控制框架，其权限管理机制支持多种访问控制模型。上述的权限模型，都可以通过 Casbin 来实现，非常好上手，文档提供了工作原理 5 的介绍，可以进行详细了解。</p><p>不过注意，Casbin 没有以下功能：</p><ol><li>身份认证 authentication（即验证用户的用户名和密码），Casbin 只负责访问控制。应该有其他专门的组件负责身份认证，然后由 Casbin 进行访问控制，二者是相互配合的关系。</li><li>管理用户列表或角色列表。 Casbin 认为由项目自身来管理用户、角色列表更为合适， 用户通常有他们的密码，但是 Casbin 的设计思想并不是把它作为一个存储密码的容器。 而是存储 RBAC 方案中用户和角色之间的映射关系。</li></ol><h3 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h3><p>Apache Shiro 是一个强大而灵活的开源安全框架，可以干净地处理身份验证、授权、企业会话管理和加密，是 Java 技术栈，感兴趣可以了解下。</p><h3 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h3><p>Spring Security 是一个强大的和高度可定制的身份验证和访问控制框架，也是 Java 技术栈，感兴趣可以了解下。</p><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p>Django 是一个 Web 框架，因为以前用过 Django 比较了解，顺便说一下，Django 自带的基础功能也实现了一层针对 Model 层数据的 RBAC，可以在此基础上做一些业务开发。另外我也在其 Admin 的基础上做了一个针对 API 的权限校验，感兴趣可以看下： <a href="https://github.com/tcitry/django-api-permission">django-api-permission </a>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不过 Shiro 和 Spring Security 甚至 Django 都不支持 ABAC 模型，需要另外开发业务逻辑，Casbin 可以通过模型配置文件的方式原生支持，且常用语言都提供了 SDK。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🔗 原文链接： &lt;a href=&quot;https://yindongliang.com/posts/permission-system-models/&quot;&gt;https://yindongliang.com/posts/perm…&lt;/a&gt;&lt;/p&gt;
&lt;/b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SSH配置访问</title>
    <link href="https://imlike.cc/e9de1b97.html"/>
    <id>https://imlike.cc/e9de1b97.html</id>
    <published>2025-05-21T08:14:49.000Z</published>
    <updated>2025-06-21T00:25:05.872Z</updated>
    
    <content type="html"><![CDATA[<p> ssh -vvvT <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#99;&#111;&#109;">&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#99;&#111;&#109;</a></p><p> OpenSSH_9.9p2, LibreSSL 3.3.6</p><p>debug1: Reading configuration data /etc/ssh/ssh_config</p><p>debug1: /etc/ssh/ssh_config line 21: include /etc/ssh/ssh_config.d/* matched no files</p><p>debug1: /etc/ssh/ssh_config line 54: Applying options for *</p><p>debug3: expanded UserKnownHostsFile ‘~/.ssh/known_hosts’ -&gt; ‘/Users/kuolee/.ssh/known_hosts’</p><p>debug3: expanded UserKnownHostsFile ‘~/.ssh/known_hosts2’ -&gt; ‘/Users/kuolee/.ssh/known_hosts2’</p><p>debug1: Authenticator provider $SSH_SK_PROVIDER did not resolve; disabling</p><p>debug3: channel_clear_timeouts: clearing</p><p>debug1: Connecting to github.com port 22.</p><p>debug1: Connection established.</p><p>debug1: identity file /Users/kuolee/.ssh/id_rsa type 0</p><p>debug1: identity file /Users/kuolee/.ssh/id_rsa-cert type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_ecdsa type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_ecdsa-cert type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_ecdsa_sk type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_ecdsa_sk-cert type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_ed25519 type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_ed25519-cert type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_ed25519_sk type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_ed25519_sk-cert type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_xmss type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_xmss-cert type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_dsa type -1</p><p>debug1: identity file /Users/kuolee/.ssh/id_dsa-cert type -1</p><p>debug1: Local version string SSH-2.0-OpenSSH_9.9</p><p>kex_exchange_identification: Connection closed by remote host</p><p>Connection closed by 198.18.0.64 port 22</p><p>$ ssh -T <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;</a><br>ssh: connect to host github.com port 22: Connection refused</p><p>$ ssh -T -p 443 <a href="mailto:&#103;&#x69;&#116;&#64;&#x73;&#x73;&#x68;&#x2e;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#x6d;">&#103;&#x69;&#116;&#64;&#x73;&#x73;&#x68;&#x2e;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#x6d;</a></p><p>The authenticity of host ‘[ssh.github.com]:443 ([198.18.26.76]:443)’ can’t be established.<br>ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.<br>This key is not known by any other names.<br>Are you sure you want to continue connecting (yes/no/[fingerprint])? yes<br>Warning: Permanently added ‘[ssh.github.com]:443’ (ED25519) to the list of known hosts.<br>Hi bigleek! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>kuolee at leek in ~<br>$ vi ~/.ssh/config</p><p>kuolee at leek in ~<br>$ ssh -T <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;">&#x67;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;</a><br>Hi bigleek! You’ve successfully authenticated, but GitHub does not provide shell access.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; ssh -vvvT &lt;a href=&quot;mailto:&amp;#103;&amp;#x69;&amp;#x74;&amp;#x40;&amp;#103;&amp;#x69;&amp;#116;&amp;#104;&amp;#117;&amp;#98;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;&quot;&gt;&amp;#103;&amp;#x69;&amp;#x74;&amp;#x40;&amp;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机符号和原码和反码以及位运算</title>
    <link href="https://imlike.cc/9bee7e85.html"/>
    <id>https://imlike.cc/9bee7e85.html</id>
    <published>2025-04-10T03:02:51.000Z</published>
    <updated>2025-04-21T11:23:36.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么1bit对应-8-byte"><a href="#为什么1bit对应-8-byte" class="headerlink" title="为什么1bit对应 8 byte"></a>为什么1bit对应 8 byte</h2><p>此处引用至 <a href="https://zhuanlan.zhihu.com/p/572877610">一文读懂字符编码 - 知乎</a></p><p>ASCII 编码字符串都是这样</p><p>我们知道计算机的世界只有0和1，如果没有字符编码，我们看到的就是一串”110010100101100111001….”，我们的沟通就好像是在对牛弹琴，我看不懂它，它看不懂我。字符编码就好比人类和机器之间的翻译程序，把我们熟知的字符文字翻译成机器能读懂的二进制，同时把二进制翻译成我们能看懂的字符。以下是百科对字符编码的解释</p><blockquote><p>字符编码（Character encoding）也称字集码，是把字符集中的字符，编码为指定集合中的某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储或者通信网络的传递。常见的例子是将拉丁字母表编码成摩斯电码和ASCII，比如ASCII编码是将字母、数字和其它符号进行编号，并用7比特的二进制来表示这个整数。字符集（Character set）是多个字符的集合，字符集种类较多，每个字符集包含的字符个数不同，常见字符集名称：ASCII字符集、GB2312字符集、BIG5字符集、 GB18030字符集、Unicode字符集等。计算机要准确的处理各种字符集文字，就需要进行字符编码，以便计算机能够识别和存储各种文字。</p></blockquote><h2 id="为什么计算机需要编码"><a href="#为什么计算机需要编码" class="headerlink" title="为什么计算机需要编码"></a>为什么计算机需要编码</h2><p><strong>编码</strong>（Encode）是信息从一种形式转换为另一种形式的过程，比如用预先规定的方法将字符（文字、数字、符号等）、图像、声音或其它对象转换成规定的电脉冲信号或二进制数字。我们现在看到的一幅幅图画，听到的一首首音乐，甚至我们写的一行行代码，敲下的一个个字符，所看到的所听到的都是那么的真实，但其实在背后都是一串「01」的数字，你昨天在手机上看到的那个心动女孩，真实世界中并不存在，只是计算机用「01」数字帮你生成的“骷髅”而已。</p><table><thead><tr><th align="center"><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">二进制</a></th><th align="center"><a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E8%BF%9B%E5%88%B6">十进制</a></th><th align="center"><a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6">十六进制</a></th><th align="center"><a href="https://zh.wikipedia.org/wiki/%E7%BC%A9%E5%86%99">缩写</a></th><th align="center"><a href="https://zh.wikipedia.org/wiki/Unicode">Unicode</a> 表示法</th><th align="center"><a href="https://zh.wikipedia.org/wiki/%E8%84%AB%E5%87%BA%E5%AD%97%E5%85%83">脱出字符</a> 表示法</th><th align="center">名称／意义</th></tr></thead><tbody><tr><td align="center">0000 0000</td><td align="center"><a href="https://zh.wikipedia.org/wiki/0">0</a></td><td align="center">00</td><td align="center">NUL</td><td align="center">␀</td><td align="center">^@</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E7%AC%A6">空字符</a>（Null）</td></tr><tr><td align="center">0000 0001</td><td align="center"><a href="https://zh.wikipedia.org/wiki/1">1</a></td><td align="center">01</td><td align="center">SOH</td><td align="center">␁</td><td align="center">^A</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E6%A0%87%E9%A2%98%E5%BC%80%E5%A7%8B&action=edit&redlink=1">标题开始</a></td></tr><tr><td align="center">0000 0010</td><td align="center"><a href="https://zh.wikipedia.org/wiki/2">2</a></td><td align="center">02</td><td align="center">STX</td><td align="center">␂</td><td align="center">^B</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E6%9C%AC%E6%96%87%E5%BC%80%E5%A7%8B&action=edit&redlink=1">本文开始</a></td></tr><tr><td align="center">0000 0011</td><td align="center"><a href="https://zh.wikipedia.org/wiki/3">3</a></td><td align="center">03</td><td align="center">ETX</td><td align="center">␃</td><td align="center">^C</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E6%9C%AC%E6%96%87%E7%BB%93%E6%9D%9F&action=edit&redlink=1">本文结束</a></td></tr><tr><td align="center">0000 0100</td><td align="center"><a href="https://zh.wikipedia.org/wiki/4">4</a></td><td align="center">04</td><td align="center">EOT</td><td align="center">␄</td><td align="center">^D</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E5%82%B3%E8%BC%B8%E7%BB%93%E6%9D%9F&action=edit&redlink=1">传输结束</a></td></tr><tr><td align="center">0000 0101</td><td align="center"><a href="https://zh.wikipedia.org/wiki/5">5</a></td><td align="center">05</td><td align="center">ENQ</td><td align="center">␅</td><td align="center">^E</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E8%AF%B7%E6%B1%82&action=edit&redlink=1">请求</a></td></tr><tr><td align="center">0000 0110</td><td align="center"><a href="https://zh.wikipedia.org/wiki/6">6</a></td><td align="center">06</td><td align="center">ACK</td><td align="center">␆</td><td align="center">^F</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E7%A2%BA%E8%AA%8D%E5%9B%9E%E6%87%89">确认回应</a></td></tr><tr><td align="center">0000 0111</td><td align="center"><a href="https://zh.wikipedia.org/wiki/7">7</a></td><td align="center">07</td><td align="center">BEL</td><td align="center">␇</td><td align="center">^G</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E5%93%8D%E9%93%83%E5%AD%97%E7%AC%A6&action=edit&redlink=1">响铃</a></td></tr><tr><td align="center">0000 1000</td><td align="center"><a href="https://zh.wikipedia.org/wiki/8">8</a></td><td align="center">08</td><td align="center">BS</td><td align="center">␈</td><td align="center">^H</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E9%80%80%E6%A0%BC%E9%8D%B5">退格</a></td></tr><tr><td align="center">0000 1001</td><td align="center"><a href="https://zh.wikipedia.org/wiki/9">9</a></td><td align="center">09</td><td align="center">HT</td><td align="center">␉</td><td align="center">^I</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%88%B6%E8%A1%A8%E9%94%AE#%E5%AE%9A%E4%BD%8D%E7%AC%A6%E5%8F%B7">水平定位符号</a></td></tr><tr><td align="center">0000 1010</td><td align="center"><a href="https://zh.wikipedia.org/wiki/10">10</a></td><td align="center">0A</td><td align="center">LF</td><td align="center">␊</td><td align="center">^J</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E6%8F%9B%E8%A1%8C">换行键</a></td></tr><tr><td align="center">0000 1011</td><td align="center"><a href="https://zh.wikipedia.org/wiki/11">11</a></td><td align="center">0B</td><td align="center">VT</td><td align="center">␋</td><td align="center">^K</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E5%9E%82%E7%9B%B4%E5%AE%9A%E4%BD%8D%E7%AC%A6%E8%99%9F&action=edit&redlink=1">垂直定位符号</a></td></tr><tr><td align="center">0000 1100</td><td align="center"><a href="https://zh.wikipedia.org/wiki/12">12</a></td><td align="center">0C</td><td align="center">FF</td><td align="center">␌</td><td align="center">^L</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E6%8F%9B%E9%A0%81%E9%8D%B5&action=edit&redlink=1">换页键</a></td></tr><tr><td align="center">0000 1101</td><td align="center"><a href="https://zh.wikipedia.org/wiki/13">13</a></td><td align="center">0D</td><td align="center">CR</td><td align="center">␍</td><td align="center">^M</td><td align="center"><a href="https://zh.wikipedia.org/wiki/CR_(%E5%AD%97%E5%85%83)">CR (字符)</a></td></tr><tr><td align="center">0000 1110</td><td align="center"><a href="https://zh.wikipedia.org/wiki/14">14</a></td><td align="center">0E</td><td align="center">SO</td><td align="center">␎</td><td align="center">^N</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%8F%96%E6%B6%88%E8%AE%8A%E6%8D%A2">取消变换</a>（Shift out）</td></tr><tr><td align="center">0000 1111</td><td align="center"><a href="https://zh.wikipedia.org/wiki/15">15</a></td><td align="center">0F</td><td align="center">SI</td><td align="center">␏</td><td align="center">^O</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%90%AF%E7%94%A8%E8%AE%8A%E6%8D%A2">启用变换</a>（Shift in）</td></tr><tr><td align="center">0001 0000</td><td align="center"><a href="https://zh.wikipedia.org/wiki/16">16</a></td><td align="center">10</td><td align="center">DLE</td><td align="center">␐</td><td align="center">^P</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E8%B7%B3%E5%87%BA%E6%95%B0%E6%8D%AE%E9%80%9A%E8%AE%AF&action=edit&redlink=1">跳出数据通讯</a></td></tr><tr><td align="center">0001 0001</td><td align="center"><a href="https://zh.wikipedia.org/wiki/17">17</a></td><td align="center">11</td><td align="center">DC1</td><td align="center">␑</td><td align="center">^Q</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E8%A8%AD%E5%82%99%E6%8E%A7%E5%88%B6&action=edit&redlink=1">设备控制</a>一（<a href="https://zh.wikipedia.org/w/index.php?title=XON&action=edit&redlink=1">XON</a> <a href="https://zh.wikipedia.org/w/index.php?title=%E5%95%9F%E7%94%A8%E8%BB%9F%E9%AB%94%E9%80%9F%E5%BA%A6%E6%8E%A7%E5%88%B6&action=edit&redlink=1">激活软件速度控制</a>）</td></tr><tr><td align="center">0001 0010</td><td align="center"><a href="https://zh.wikipedia.org/wiki/18">18</a></td><td align="center">12</td><td align="center">DC2</td><td align="center">␒</td><td align="center">^R</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E8%A8%AD%E5%82%99%E6%8E%A7%E5%88%B6&action=edit&redlink=1">设备控制</a>二</td></tr><tr><td align="center">0001 0011</td><td align="center"><a href="https://zh.wikipedia.org/wiki/19">19</a></td><td align="center">13</td><td align="center">DC3</td><td align="center">␓</td><td align="center">^S</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E8%A8%AD%E5%82%99%E6%8E%A7%E5%88%B6&action=edit&redlink=1">设备控制</a>三（<a href="https://zh.wikipedia.org/w/index.php?title=XOFF&action=edit&redlink=1">XOFF</a> <a href="https://zh.wikipedia.org/w/index.php?title=%E5%81%9C%E7%94%A8%E8%BB%9F%E9%AB%94%E9%80%9F%E5%BA%A6%E6%8E%A7%E5%88%B6&action=edit&redlink=1">停用软件速度控制</a>）</td></tr><tr><td align="center">0001 0100</td><td align="center"><a href="https://zh.wikipedia.org/wiki/20">20</a></td><td align="center">14</td><td align="center">DC4</td><td align="center">␔</td><td align="center">^T</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E8%A8%AD%E5%82%99%E6%8E%A7%E5%88%B6&action=edit&redlink=1">设备控制</a>四</td></tr><tr><td align="center">0001 0101</td><td align="center"><a href="https://zh.wikipedia.org/wiki/21">21</a></td><td align="center">15</td><td align="center">NAK</td><td align="center">␕</td><td align="center">^U</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E7%A2%BA%E8%AA%8D%E5%A4%B1%E6%95%97%E5%9B%9E%E6%87%89">确认失败回应</a></td></tr><tr><td align="center">0001 0110</td><td align="center"><a href="https://zh.wikipedia.org/wiki/22">22</a></td><td align="center">16</td><td align="center">SYN</td><td align="center">␖</td><td align="center">^V</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E5%90%8C%E6%AD%A5%E7%94%A8%E6%9A%AB%E5%81%9C&action=edit&redlink=1">同步用暂停</a></td></tr><tr><td align="center">0001 0111</td><td align="center"><a href="https://zh.wikipedia.org/wiki/23">23</a></td><td align="center">17</td><td align="center">ETB</td><td align="center">␗</td><td align="center">^W</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E5%8D%80%E5%A1%8A%E5%82%B3%E8%BC%B8%E7%BB%93%E6%9D%9F&action=edit&redlink=1">区块传输结束</a></td></tr><tr><td align="center">0001 1000</td><td align="center"><a href="https://zh.wikipedia.org/wiki/24">24</a></td><td align="center">18</td><td align="center">CAN</td><td align="center">␘</td><td align="center">^X</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E5%8F%96%E6%B6%88&action=edit&redlink=1">取消</a></td></tr><tr><td align="center">0001 1001</td><td align="center"><a href="https://zh.wikipedia.org/wiki/25">25</a></td><td align="center">19</td><td align="center">EM</td><td align="center">␙</td><td align="center">^Y</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E9%80%A3%E7%B7%9A%E4%BB%8B%E8%B4%A8%E4%B8%AD%E6%96%AD&action=edit&redlink=1">连线介质中断</a></td></tr><tr><td align="center">0001 1010</td><td align="center"><a href="https://zh.wikipedia.org/wiki/26">26</a></td><td align="center">1A</td><td align="center">SUB</td><td align="center">␚</td><td align="center">^Z</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E6%9B%BF%E4%BB%A3%E5%AD%97%E7%AC%A6">替换</a></td></tr><tr><td align="center">0001 1011</td><td align="center"><a href="https://zh.wikipedia.org/wiki/27">27</a></td><td align="center">1B</td><td align="center">ESC</td><td align="center">␛</td><td align="center">^[</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E9%80%80%E5%87%BA%E9%94%AE">退出键</a></td></tr><tr><td align="center">0001 1100</td><td align="center"><a href="https://zh.wikipedia.org/wiki/28">28</a></td><td align="center">1C</td><td align="center">FS</td><td align="center">␜</td><td align="center">^\</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2%E7%AC%A6&action=edit&redlink=1">文件分割符</a></td></tr><tr><td align="center">0001 1101</td><td align="center"><a href="https://zh.wikipedia.org/wiki/29">29</a></td><td align="center">1D</td><td align="center">GS</td><td align="center">␝</td><td align="center">^]</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E7%BE%A4%E7%B5%84%E5%88%86%E9%9A%94%E7%AC%A6&action=edit&redlink=1">组群分隔符</a></td></tr><tr><td align="center">0001 1110</td><td align="center"><a href="https://zh.wikipedia.org/wiki/30">30</a></td><td align="center">1E</td><td align="center">RS</td><td align="center">␞</td><td align="center">^^</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E8%AE%B0%E5%BD%95%E5%88%86%E9%9A%94%E7%AC%A6&action=edit&redlink=1">记录分隔符</a></td></tr><tr><td align="center">0001 1111</td><td align="center"><a href="https://zh.wikipedia.org/wiki/31">31</a></td><td align="center">1F</td><td align="center">US</td><td align="center">␟</td><td align="center">^_</td><td align="center"><a href="https://zh.wikipedia.org/w/index.php?title=%E5%8D%95%E5%85%83%E5%88%86%E9%9A%94%E7%AC%A6&action=edit&redlink=1">单元分隔符</a></td></tr><tr><td align="center">0111 1111</td><td align="center"><a href="https://zh.wikipedia.org/wiki/127">127</a></td><td align="center">7F</td><td align="center">DEL</td><td align="center">␡</td><td align="center">^?</td><td align="center"><a href="https://zh.wikipedia.org/wiki/Delete%E5%AD%97%E7%AC%A6">Delete字符</a></td></tr></tbody></table><table><thead><tr><th align="center"><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">二进制</a></th><th align="center"><a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E8%BF%9B%E5%88%B6">十进制</a></th><th align="center"><a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6">十六进制</a></th><th align="center"><a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%BD%A2">图形</a></th></tr></thead><tbody><tr><td align="center">0010 0000</td><td align="center"><a href="https://zh.wikipedia.org/wiki/32">32</a></td><td align="center">20</td><td align="center">(<a href="https://zh.wikipedia.org/wiki/%E7%A9%BA%E6%A0%BC">space</a>)</td></tr><tr><td align="center">0010 0001</td><td align="center"><a href="https://zh.wikipedia.org/wiki/33">33</a></td><td align="center">21</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E6%83%8A%E5%8F%B9%E5%8F%B7">!</a></td></tr><tr><td align="center">0010 0010</td><td align="center"><a href="https://zh.wikipedia.org/wiki/34">34</a></td><td align="center">22</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%8F%8C%E5%BC%95%E5%8F%B7">“</a></td></tr><tr><td align="center">0010 0011</td><td align="center"><a href="https://zh.wikipedia.org/wiki/35">35</a></td><td align="center">23</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E4%BA%95%E5%8F%B7">#</a></td></tr><tr><td align="center">0010 0100</td><td align="center"><a href="https://zh.wikipedia.org/wiki/36">36</a></td><td align="center">24</td><td align="center"><a href="https://zh.wikipedia.org/wiki/$">$</a></td></tr><tr><td align="center">0010 0101</td><td align="center"><a href="https://zh.wikipedia.org/wiki/37">37</a></td><td align="center">25</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E7%99%BE%E5%88%86%E6%AF%94">%</a></td></tr><tr><td align="center">0010 0110</td><td align="center"><a href="https://zh.wikipedia.org/wiki/38">38</a></td><td align="center">26</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%26">&amp;</a></td></tr><tr><td align="center">0010 0111</td><td align="center"><a href="https://zh.wikipedia.org/wiki/39">39</a></td><td align="center">27</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E5%BC%95%E5%8F%B7">‘</a></td></tr><tr><td align="center">0010 1000</td><td align="center"><a href="https://zh.wikipedia.org/wiki/40">40</a></td><td align="center">28</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E6%8B%AC%E8%99%9F">(</a></td></tr><tr><td align="center">0010 1001</td><td align="center"><a href="https://zh.wikipedia.org/wiki/41">41</a></td><td align="center">29</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E6%8B%AC%E8%99%9F">)</a></td></tr><tr><td align="center">0010 1010</td><td align="center"><a href="https://zh.wikipedia.org/wiki/42">42</a></td><td align="center">2A</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E6%98%9F%E5%8F%B7">*</a></td></tr><tr><td align="center">0010 1011</td><td align="center"><a href="https://zh.wikipedia.org/wiki/43">43</a></td><td align="center">2B</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%8F%B7">+</a></td></tr><tr><td align="center">0010 1100</td><td align="center"><a href="https://zh.wikipedia.org/wiki/44">44</a></td><td align="center">2C</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E9%80%97%E5%8F%B7">,</a></td></tr><tr><td align="center">0010 1101</td><td align="center"><a href="https://zh.wikipedia.org/wiki/45">45</a></td><td align="center">2D</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%87%8F%E5%8F%B7">-</a></td></tr><tr><td align="center">0010 1110</td><td align="center"><a href="https://zh.wikipedia.org/wiki/46">46</a></td><td align="center">2E</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%8F%A5%E7%82%B9">.</a></td></tr><tr><td align="center">0010 1111</td><td align="center"><a href="https://zh.wikipedia.org/wiki/47">47</a></td><td align="center">2F</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E6%96%9C%E7%B7%9A">/</a></td></tr><tr><td align="center">0011 0000</td><td align="center"><a href="https://zh.wikipedia.org/wiki/48">48</a></td><td align="center">30</td><td align="center"><a href="https://zh.wikipedia.org/wiki/0">0</a></td></tr><tr><td align="center">0011 0001</td><td align="center"><a href="https://zh.wikipedia.org/wiki/49">49</a></td><td align="center">31</td><td align="center"><a href="https://zh.wikipedia.org/wiki/1">1</a></td></tr><tr><td align="center">0011 0010</td><td align="center"><a href="https://zh.wikipedia.org/wiki/50">50</a></td><td align="center">32</td><td align="center"><a href="https://zh.wikipedia.org/wiki/2">2</a></td></tr><tr><td align="center">0011 0011</td><td align="center"><a href="https://zh.wikipedia.org/wiki/51">51</a></td><td align="center">33</td><td align="center"><a href="https://zh.wikipedia.org/wiki/3">3</a></td></tr><tr><td align="center">0011 0100</td><td align="center"><a href="https://zh.wikipedia.org/wiki/52">52</a></td><td align="center">34</td><td align="center"><a href="https://zh.wikipedia.org/wiki/4">4</a></td></tr><tr><td align="center">0011 0101</td><td align="center"><a href="https://zh.wikipedia.org/wiki/53">53</a></td><td align="center">35</td><td align="center"><a href="https://zh.wikipedia.org/wiki/5">5</a></td></tr><tr><td align="center">0011 0110</td><td align="center"><a href="https://zh.wikipedia.org/wiki/54">54</a></td><td align="center">36</td><td align="center"><a href="https://zh.wikipedia.org/wiki/6">6</a></td></tr><tr><td align="center">0011 0111</td><td align="center"><a href="https://zh.wikipedia.org/wiki/55">55</a></td><td align="center">37</td><td align="center"><a href="https://zh.wikipedia.org/wiki/7">7</a></td></tr><tr><td align="center">0011 1000</td><td align="center"><a href="https://zh.wikipedia.org/wiki/56">56</a></td><td align="center">38</td><td align="center"><a href="https://zh.wikipedia.org/wiki/8">8</a></td></tr><tr><td align="center">0011 1001</td><td align="center"><a href="https://zh.wikipedia.org/wiki/57">57</a></td><td align="center">39</td><td align="center"><a href="https://zh.wikipedia.org/wiki/9">9</a></td></tr><tr><td align="center">0011 1010</td><td align="center"><a href="https://zh.wikipedia.org/wiki/58">58</a></td><td align="center">3A</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%86%92%E5%8F%B7">:</a></td></tr><tr><td align="center">0011 1011</td><td align="center"><a href="https://zh.wikipedia.org/wiki/59">59</a></td><td align="center">3B</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%8F%B7">;</a></td></tr><tr><td align="center">0011 1100</td><td align="center"><a href="https://zh.wikipedia.org/wiki/60">60</a></td><td align="center">3C</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E6%96%BC%E8%99%9F">&lt;</a></td></tr><tr><td align="center">0011 1101</td><td align="center"><a href="https://zh.wikipedia.org/wiki/61">61</a></td><td align="center">3D</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E7%AD%89%E5%8F%B7">=</a></td></tr><tr><td align="center">0011 1110</td><td align="center"><a href="https://zh.wikipedia.org/wiki/62">62</a></td><td align="center">3E</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E6%96%BC%E8%99%9F">&gt;</a></td></tr><tr><td align="center">0011 1111</td><td align="center"><a href="https://zh.wikipedia.org/wiki/63">63</a></td><td align="center">3F</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E9%97%AE%E5%8F%B7">?</a></td></tr></tbody></table><table><thead><tr><th>0100 0000</th><th><a href="https://zh.wikipedia.org/wiki/64">64</a></th><th>40</th><th><a href="https://zh.wikipedia.org/wiki/@">@</a></th></tr></thead><tbody><tr><td>0100 0001</td><td><a href="https://zh.wikipedia.org/wiki/65">65</a></td><td>41</td><td><a href="https://zh.wikipedia.org/wiki/A">A</a></td></tr><tr><td>0100 0010</td><td><a href="https://zh.wikipedia.org/wiki/66">66</a></td><td>42</td><td><a href="https://zh.wikipedia.org/wiki/B">B</a></td></tr><tr><td>0100 0011</td><td><a href="https://zh.wikipedia.org/wiki/67">67</a></td><td>43</td><td><a href="https://zh.wikipedia.org/wiki/C">C</a></td></tr><tr><td>0100 0100</td><td><a href="https://zh.wikipedia.org/wiki/68">68</a></td><td>44</td><td><a href="https://zh.wikipedia.org/wiki/D">D</a></td></tr><tr><td>0100 0101</td><td><a href="https://zh.wikipedia.org/wiki/69">69</a></td><td>45</td><td><a href="https://zh.wikipedia.org/wiki/E">E</a></td></tr><tr><td>0100 0110</td><td><a href="https://zh.wikipedia.org/wiki/70">70</a></td><td>46</td><td><a href="https://zh.wikipedia.org/wiki/F">F</a></td></tr><tr><td>0100 0111</td><td><a href="https://zh.wikipedia.org/wiki/71">71</a></td><td>47</td><td><a href="https://zh.wikipedia.org/wiki/G">G</a></td></tr><tr><td>0100 1000</td><td><a href="https://zh.wikipedia.org/wiki/72">72</a></td><td>48</td><td><a href="https://zh.wikipedia.org/wiki/H">H</a></td></tr><tr><td>0100 1001</td><td><a href="https://zh.wikipedia.org/wiki/73">73</a></td><td>49</td><td><a href="https://zh.wikipedia.org/wiki/I">I</a></td></tr><tr><td>0100 1010</td><td><a href="https://zh.wikipedia.org/wiki/74">74</a></td><td>4A</td><td><a href="https://zh.wikipedia.org/wiki/J">J</a></td></tr><tr><td>0100 1011</td><td><a href="https://zh.wikipedia.org/wiki/75">75</a></td><td>4B</td><td><a href="https://zh.wikipedia.org/wiki/K">K</a></td></tr><tr><td>0100 1100</td><td><a href="https://zh.wikipedia.org/wiki/76">76</a></td><td>4C</td><td><a href="https://zh.wikipedia.org/wiki/L">L</a></td></tr><tr><td>0100 1101</td><td><a href="https://zh.wikipedia.org/wiki/77">77</a></td><td>4D</td><td><a href="https://zh.wikipedia.org/wiki/M">M</a></td></tr><tr><td>0100 1110</td><td><a href="https://zh.wikipedia.org/wiki/78">78</a></td><td>4E</td><td><a href="https://zh.wikipedia.org/wiki/N">N</a></td></tr><tr><td>0100 1111</td><td><a href="https://zh.wikipedia.org/wiki/79">79</a></td><td>4F</td><td><a href="https://zh.wikipedia.org/wiki/O">O</a></td></tr><tr><td>0101 0000</td><td><a href="https://zh.wikipedia.org/wiki/80">80</a></td><td>50</td><td><a href="https://zh.wikipedia.org/wiki/P">P</a></td></tr><tr><td>0101 0001</td><td><a href="https://zh.wikipedia.org/wiki/81">81</a></td><td>51</td><td><a href="https://zh.wikipedia.org/wiki/Q">Q</a></td></tr><tr><td>0101 0010</td><td><a href="https://zh.wikipedia.org/wiki/82">82</a></td><td>52</td><td><a href="https://zh.wikipedia.org/wiki/R">R</a></td></tr><tr><td>0101 0011</td><td><a href="https://zh.wikipedia.org/wiki/83">83</a></td><td>53</td><td><a href="https://zh.wikipedia.org/wiki/S">S</a></td></tr><tr><td>0101 0100</td><td><a href="https://zh.wikipedia.org/wiki/84">84</a></td><td>54</td><td><a href="https://zh.wikipedia.org/wiki/T">T</a></td></tr><tr><td>0101 0101</td><td><a href="https://zh.wikipedia.org/wiki/85">85</a></td><td>55</td><td><a href="https://zh.wikipedia.org/wiki/U">U</a></td></tr><tr><td>0101 0110</td><td><a href="https://zh.wikipedia.org/wiki/86">86</a></td><td>56</td><td><a href="https://zh.wikipedia.org/wiki/V">V</a></td></tr><tr><td>0101 0111</td><td><a href="https://zh.wikipedia.org/wiki/87">87</a></td><td>57</td><td><a href="https://zh.wikipedia.org/wiki/W">W</a></td></tr><tr><td>0101 1000</td><td><a href="https://zh.wikipedia.org/wiki/88">88</a></td><td>58</td><td><a href="https://zh.wikipedia.org/wiki/X">X</a></td></tr><tr><td>0101 1001</td><td><a href="https://zh.wikipedia.org/wiki/89">89</a></td><td>59</td><td><a href="https://zh.wikipedia.org/wiki/Y">Y</a></td></tr><tr><td>0101 1010</td><td><a href="https://zh.wikipedia.org/wiki/90">90</a></td><td>5A</td><td><a href="https://zh.wikipedia.org/wiki/Z">Z</a></td></tr><tr><td>0101 1011</td><td><a href="https://zh.wikipedia.org/wiki/91">91</a></td><td>5B</td><td>[<a href="https://zh.wikipedia.org/wiki/%E6%8B%AC%E8%99%9F"></a></td></tr><tr><td>0101 1100</td><td><a href="https://zh.wikipedia.org/wiki/92">92</a></td><td>5C</td><td>[](<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E6%96%9C%E7%BA%BF">https://zh.wikipedia.org/wiki/反斜线</a>)</td></tr><tr><td>0101 1101</td><td><a href="https://zh.wikipedia.org/wiki/93">93</a></td><td>5D</td><td>[]](<a href="https://zh.wikipedia.org/wiki/%E6%8B%AC%E8%99%9F">https://zh.wikipedia.org/wiki/括號</a>)</td></tr><tr><td>0101 1110</td><td><a href="https://zh.wikipedia.org/wiki/94">94</a></td><td>5E</td><td><a href="https://zh.wikipedia.org/wiki/%E8%84%B1%E5%AD%97%E7%AC%A6">^</a></td></tr><tr><td>0101 1111</td><td><a href="https://zh.wikipedia.org/wiki/95">95</a></td><td>5F</td><td><a href="https://zh.wikipedia.org/wiki/%E5%BA%95%E7%B7%9A">_</a></td></tr></tbody></table><table><thead><tr><th>0110 0000</th><th><a href="https://zh.wikipedia.org/wiki/96">96</a></th><th>60</th><th>[`](<a href="https://zh.wikipedia.org/wiki/%E9%87%8D%E9%9F%B3%E7%AC%A6">https://zh.wikipedia.org/wiki/重音符</a>)</th></tr></thead><tbody><tr><td>0110 0001</td><td><a href="https://zh.wikipedia.org/wiki/97">97</a></td><td>61</td><td><a href="https://zh.wikipedia.org/wiki/A">a</a></td></tr><tr><td>0110 0010</td><td><a href="https://zh.wikipedia.org/wiki/98">98</a></td><td>62</td><td><a href="https://zh.wikipedia.org/wiki/B">b</a></td></tr><tr><td>0110 0011</td><td><a href="https://zh.wikipedia.org/wiki/99">99</a></td><td>63</td><td><a href="https://zh.wikipedia.org/wiki/C">c</a></td></tr><tr><td>0110 0100</td><td><a href="https://zh.wikipedia.org/wiki/100">100</a></td><td>64</td><td><a href="https://zh.wikipedia.org/wiki/D">d</a></td></tr><tr><td>0110 0101</td><td><a href="https://zh.wikipedia.org/wiki/101">101</a></td><td>65</td><td><a href="https://zh.wikipedia.org/wiki/E">e</a></td></tr><tr><td>0110 0110</td><td><a href="https://zh.wikipedia.org/wiki/102">102</a></td><td>66</td><td><a href="https://zh.wikipedia.org/wiki/F">f</a></td></tr><tr><td>0110 0111</td><td><a href="https://zh.wikipedia.org/wiki/103">103</a></td><td>67</td><td><a href="https://zh.wikipedia.org/wiki/G">g</a></td></tr><tr><td>0110 1000</td><td><a href="https://zh.wikipedia.org/wiki/104">104</a></td><td>68</td><td><a href="https://zh.wikipedia.org/wiki/H">h</a></td></tr><tr><td>0110 1001</td><td><a href="https://zh.wikipedia.org/wiki/105">105</a></td><td>69</td><td><a href="https://zh.wikipedia.org/wiki/I">i</a></td></tr><tr><td>0110 1010</td><td><a href="https://zh.wikipedia.org/wiki/106">106</a></td><td>6A</td><td><a href="https://zh.wikipedia.org/wiki/J">j</a></td></tr><tr><td>0110 1011</td><td><a href="https://zh.wikipedia.org/wiki/107">107</a></td><td>6B</td><td><a href="https://zh.wikipedia.org/wiki/K">k</a></td></tr><tr><td>0110 1100</td><td><a href="https://zh.wikipedia.org/wiki/108">108</a></td><td>6C</td><td><a href="https://zh.wikipedia.org/wiki/L">l</a></td></tr><tr><td>0110 1101</td><td><a href="https://zh.wikipedia.org/wiki/109">109</a></td><td>6D</td><td><a href="https://zh.wikipedia.org/wiki/M">m</a></td></tr><tr><td>0110 1110</td><td><a href="https://zh.wikipedia.org/wiki/110">110</a></td><td>6E</td><td><a href="https://zh.wikipedia.org/wiki/N">n</a></td></tr><tr><td>0110 1111</td><td><a href="https://zh.wikipedia.org/wiki/111">111</a></td><td>6F</td><td><a href="https://zh.wikipedia.org/wiki/O">o</a></td></tr><tr><td>0111 0000</td><td><a href="https://zh.wikipedia.org/wiki/112">112</a></td><td>70</td><td><a href="https://zh.wikipedia.org/wiki/P">p</a></td></tr><tr><td>0111 0001</td><td><a href="https://zh.wikipedia.org/wiki/113">113</a></td><td>71</td><td><a href="https://zh.wikipedia.org/wiki/Q">q</a></td></tr><tr><td>0111 0010</td><td><a href="https://zh.wikipedia.org/wiki/114">114</a></td><td>72</td><td><a href="https://zh.wikipedia.org/wiki/R">r</a></td></tr><tr><td>0111 0011</td><td><a href="https://zh.wikipedia.org/wiki/115">115</a></td><td>73</td><td><a href="https://zh.wikipedia.org/wiki/S">s</a></td></tr><tr><td>0111 0100</td><td><a href="https://zh.wikipedia.org/wiki/116">116</a></td><td>74</td><td><a href="https://zh.wikipedia.org/wiki/T">t</a></td></tr><tr><td>0111 0101</td><td><a href="https://zh.wikipedia.org/wiki/117">117</a></td><td>75</td><td><a href="https://zh.wikipedia.org/wiki/U">u</a></td></tr><tr><td>0111 0110</td><td><a href="https://zh.wikipedia.org/wiki/118">118</a></td><td>76</td><td><a href="https://zh.wikipedia.org/wiki/V">v</a></td></tr><tr><td>0111 0111</td><td><a href="https://zh.wikipedia.org/wiki/119">119</a></td><td>77</td><td><a href="https://zh.wikipedia.org/wiki/W">w</a></td></tr><tr><td>0111 1000</td><td><a href="https://zh.wikipedia.org/wiki/120">120</a></td><td>78</td><td><a href="https://zh.wikipedia.org/wiki/X">x</a></td></tr><tr><td>0111 1001</td><td><a href="https://zh.wikipedia.org/wiki/121">121</a></td><td>79</td><td><a href="https://zh.wikipedia.org/wiki/Y">y</a></td></tr><tr><td>0111 1010</td><td><a href="https://zh.wikipedia.org/wiki/122">122</a></td><td>7A</td><td><a href="https://zh.wikipedia.org/wiki/Z">z</a></td></tr><tr><td>0111 1011</td><td><a href="https://zh.wikipedia.org/wiki/123">123</a></td><td>7B</td><td><a href="https://zh.wikipedia.org/wiki/%E6%8B%AC%E8%99%9F">{</a></td></tr><tr><td>0111 1100</td><td><a href="https://zh.wikipedia.org/wiki/124">124</a></td><td>7C</td><td><a href="https://zh.wikipedia.org/wiki/%E8%B1%8E%E7%B7%9A">|</a></td></tr><tr><td>0111 1101</td><td><a href="https://zh.wikipedia.org/wiki/125">125</a></td><td>7D</td><td><a href="https://zh.wikipedia.org/wiki/%E6%8B%AC%E8%99%9F">}</a></td></tr><tr><td>0111 1110</td><td><a href="https://zh.wikipedia.org/wiki/126">126</a></td><td>7E</td><td><a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E6%B5%AA%E8%99%9F">~</a></td></tr></tbody></table><h2 id="计算机数字表示"><a href="#计算机数字表示" class="headerlink" title="计算机数字表示"></a>计算机数字表示</h2><p>在计算机中，有符号数和无符号数的区别主要体现在以下三个方面：</p><ol><li><p><strong>符号位的定义与数值范围</strong><br>有符号数的最高位（二进制最左侧位）被定义为符号位：<br>• <strong>0 表示正数</strong>，其余位表示数值大小（如 <code>01111111</code> 表示 +127）<br>• <strong>1 表示负数</strong>，其余位存储补码形式的数值（如 <code>10101111</code> 表示 -81）<br>而无符号数所有位都用于表示数值大小，因此 <strong>正数范围比同位数有符号数大一倍</strong>（例如 8 位无符号数范围是 0-255，而有符号数范围是 -128~127）</p></li><li><p><strong>补码转换规则</strong><br>负数在计算机中以补码形式存储。补码的计算步骤为：<br>• <strong>原码 → 符号位不变，其余位取反 → 末位 +1</strong><br>例如 <code>-81</code> 的补码转换过程：<br>原码：<code>10100001</code> → 取反后：<code>11011110</code> → 加 1 → <code>11011111</code>（即 <code>0xAF</code>）<br>补码的作用是统一加减法运算逻辑，简化硬件设计</p></li><li><p><strong>类型转换时的截断与符号扩展</strong><br>当长位数据（如 <code>Int</code>）转换为短位类型（如 <code>Byte</code>）时：<br>• <strong>截断规则</strong>：直接保留低位字节（如 <code>0xFFFFFFAF</code> → <code>0xAF</code>）<br>• <strong>符号位识别</strong>：目标类型若为有符号，则最高位决定正负（如 <code>0xAF</code> 的最高位为 1，解析为负数）<br>在 Scala 中，<code>Byte</code> 默认是有符号类型，因此 <code>0xAF</code> 会被解析为 <code>-81</code>。若需无符号处理，需通过 <code>&amp; 0xFF</code> 强制转换为正数</p></li></ol><p><strong>具体代码分析</strong>  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println((<span class="number">-81.</span>toInt).toByte)  <span class="comment">// 输出 -81</span></span><br></pre></td></tr></table></figure><p>• <code>-81.toInt</code> 的补码是 <code>0xFFFFFFAF</code>（32位）<br>• <code>.toByte</code> 截断后保留 <code>0xAF</code>（二进制 <code>10101111</code>）<br>• 有符号 <code>Byte</code> 将最高位 <code>1</code> 识别为负号，剩余位 <code>0101111</code> 的补码还原为 <code>81</code>，最终结果为 <code>-81</code></p><p><strong>无符号处理对比</strong><br>若强制转换为无符号数（例如使用 <code>(pd(0) &amp; 0xFF)</code>）：  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> byteValue: <span class="type">Byte</span> = <span class="number">0xAF</span>.toByte  <span class="comment">// -81（有符号）</span></span><br><span class="line"><span class="keyword">val</span> unsignedValue = byteValue &amp; <span class="number">0xFF</span>  <span class="comment">// 175（无符号）</span></span><br></pre></td></tr></table></figure><p>此时 <code>0xAF</code> 会被视为 <code>175</code>，因为 <code>&amp; 0xFF</code> 将符号位清零，并扩展为 32 位整数</p><p><strong>总结</strong><br>有符号/无符号的区分本质是<strong>程序对二进制位的解释规则不同</strong>，而计算机存储的二进制数据本身没有符号属性。这一特性在涉及跨数据类型转换（如 <code>Int</code> → <code>Byte</code>）或位运算时需要特别注意。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么1bit对应-8-byte&quot;&gt;&lt;a href=&quot;#为什么1bit对应-8-byte&quot; class=&quot;headerlink&quot; title=&quot;为什么1bit对应 8 byte&quot;&gt;&lt;/a&gt;为什么1bit对应 8 byte&lt;/h2&gt;&lt;p&gt;此处引用至 &lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>idea-mac激活</title>
    <link href="https://imlike.cc/63e78f83.html"/>
    <id>https://imlike.cc/63e78f83.html</id>
    <published>2025-04-09T11:07:44.000Z</published>
    <updated>2025-04-21T11:15:30.112Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://yby6.com/archives/ja-netfilte">https://yby6.com/archives/ja-netfilte</a></p><p>Could not set environment: 150: Operation not permitted while System Integrity Protection is engaged</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://yby6.com/archives/ja-netfilte&quot;&gt;https://yby6.com/archives/ja-netfilte&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Could not set environment: 150: Operatio</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>anthropic(Claude) promote 推荐</title>
    <link href="https://imlike.cc/12713d51.html"/>
    <id>https://imlike.cc/12713d51.html</id>
    <published>2025-03-13T08:19:45.000Z</published>
    <updated>2025-04-09T07:47:42.466Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.anthropic.com/zh-CN/prompt-library">https://docs.anthropic.com/zh-CN/prompt-library</a></p><p>这个网站汇集了很多的promote 非常实用 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://docs.anthropic.com/zh-CN/prompt-library&quot;&gt;https://docs.anthropic.com/zh-CN/prompt-library&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个网站汇集了很多的promote 非常</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>学习的步骤讨论</title>
    <link href="https://imlike.cc/9de51b87.html"/>
    <id>https://imlike.cc/9de51b87.html</id>
    <published>2025-03-07T02:51:01.000Z</published>
    <updated>2025-04-09T07:47:42.467Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&mid=2247539111&idx=1&sn=ef5e1cd2237732f2af4b515dbb66e26f&">跟着ChatGPT4o学全栈，我看到未来“学习”的模样</a></p><p><strong>在讨论之前，我们先了解下学习过程</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>学习是一个复杂而多阶段的过程，每个阶段都有其独特的特点和目标。我们可以将学习过程分为以下几个阶段：</p><p>1.<strong>接触（Exposure）：</strong>学习的起点。首先，我们需要注意新的信息、知识或技能，并对其产生兴趣。</p><p>2.<strong>收集（Gathering）：</strong>系统地广泛地获取更多相关的信息和资源，以便更全面地理解新知识或技能。</p><p>3.<strong>理解（Understanding）：</strong>指将所收集的信息进行消化、分析和综合，以便形成对新知识或技能的全面认识。</p><p>4.<strong>记忆（Memorization）：</strong>涉及将理解的知识或技能存储在长期记忆中，以便将来可以方便地检索和应用。知识的理解程度对记忆的影响非常大。</p><p>5.<strong>应用（Application）：</strong>指将所学的知识或技能在实际情境中加以运用，以解决问题或完成任务。</p><p>6.<strong>反馈（Feedback）：</strong>根据应用的结果和他人的评价，反思和改进学习方法和策略。﻿</p><p><strong>失败的学习随处可见</strong></p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>众所周知，学习过程中最耗费精力的是收集资料。寻找资料源、筛选高质量资料、系统化组织资料，这些任务不仅耗时费力，而且结果往往不尽如人意。﻿</p><p>在理解知识的过程中，我们需要大量的阅读、训练和思考。由于缺乏系统指导，学习者常常感到困惑和迷茫。</p><p>长周期的学习需要及时反馈。比如，学习一门新的编程语言，从基本语法开始逐步掌握，可能需要一到两个月才能开始实际操作项目。这么长的学习周期可能让我们失去目标感，增加中途放弃的风险，最终可能感到挫败。﻿</p><p>在学习过程中，缺乏足够的动力、信息过载、容易陷入单调重复、缺乏实践应用场景、反馈时间过长或无法得到反馈等都是障碍。这些问题都可能导致人们放弃学习。因此，我们常常看到失败的学习案例，而成功有效的学习案例则寥寥无几。﻿</p><p><strong>大模型让学习更容易成功</strong></p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>通过上述演示，我们可以看到大型模型在各个学习环节中都能提供巨大的帮助，甚至在某些方面产生颠覆性的影响，这些影响能够提高学习成功的几率。</p><p>在资源收集方面，传统的模式（主要是搜索）需要在许多来源中收集。</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKPoosibNYPZkOR1ko6REmAoKrum6Me7akP6VeKPn7LcDzHmUu8LebpnZtNkGic11kZm2TQe7Tn8p1w/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">﻿</p><p>在此基础上还需要进一步做筛选和判断，这将消耗大量的精力。﻿</p><p>然而，大模型在资源收集上有两个优势：</p><ul><li><strong>高度整合的知识：</strong>大模型拥有大量的高质量知识，尤其在编程方面；</li><li><strong>按需定制：</strong>大模型可以根据个人水平实现定制化的教学课程；</li></ul><p>当然，GPT在这里也有一些限制：</p><ul><li><strong>知识更新不及时：</strong>通用的大模型不会使用未经验证的知识进行训练，虽然如此，但目前大模型的知识水平已经足够应对大部分的学习需求了。</li><li><strong>知识缺乏系统化：</strong>大型模型就像一只具有优秀记忆力的鹦鹉，它本身并未形成系统化的知识，需要借助prompt（像本文中学习前端的例子）或agent来实现结构化和系统化。</li></ul><p>我们都知道，<strong>理解是形成长期记忆的关键，而通过知识的类比和迁移来理解新知识是一种有效的方法。</strong>﻿</p><p>然而，建立类比和迁移这座连接新旧知识的桥梁并不容易。这不仅需要学习者理解新的概念，还需要将这些概念与已有的知识结构相结合，以便在新的情境中使用。如果对新概念理解不足，或者旧知识基础薄弱，就无法建立这种联系。</p><p><strong>大型模型在我们理解知识的过程中带来了新的启示，它具备非常强的知识类比能力。</strong>大模型以Java工程师的角度解释了如何理解React组件生命周期。它通过类比Java类的生命周期来讲解React组件，这个方法非常有效。我相信只有既熟悉前端又熟悉后端的人才能如此解释，而GPT的回答如此自然。﻿</p><p>同样，当我们尝试用类比（如将state与Java的成员变量进行比较）来理解新知识时，它会给我们提供更丰富的建议，更深入的解释，以及更多样的案例。﻿</p><p>反馈对于学习的重要性，毋庸再言。在这一阶段，大模型同样展现出强大的能力。</p><ul><li><strong>实时反馈：</strong>大型模型能够提供即时反馈，让学习者在学习过程中随时了解自己的表现。例如，当我们完成一段代码或者一个功能时，大型模型可以立即进行审查并提供改进建议。这并不止是效率的提升，更重要的是，它可能会引发更深层的变革。</li></ul><p>学习是反人性的，人类也并不擅长学习，重要的原因是学习过程充满未知，可预期性差。尽管人类天生好奇，但遗憾的是这种好奇心并不能维持很长时间。聪明的教育者会运用各种技巧来提升学习的可预期性（更明确的奖赏），以尽可能地延长好奇心的持续时间。</p><p><strong>提升反馈效率不仅表面上会提升效率，同时也会提升学习的可预期性，可能大模型会使学习这件事情不那么反人性。</strong></p><ul><li><strong>多样化的案例：</strong>大模型能够提供多种多样的案例，甚至我们可以用大模型创造案例；</li></ul><p>面向未来</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><p><strong>既然模型“全知全能”，我们还要不要学习知识？</strong></p><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><p>答案是肯定的：我们仍然需要学习知识。</p><p>多年前就有人提出了一个类似的问题：“在现代社会，为什么我们需要记忆呢？我们可以在几秒钟内通过互联网查找到任何需要的事实性信息。”这并不是大数据模型时代特有的问题。我认为，我们仍然需要学习，并应该利用大数据模型来加速学习进程。﻿</p><p>首先，<strong>知识是思考的基础，没有知识就无法谈论分析能力或批判性思维等高级能力。</strong>许多人认为思考过程类似于计算器的功能，计算器具有一系列的函数（如加法、乘法等），这些函数可以应用于任何数据。它的数据和函数是完全分开的。因此，一旦学习了新的函数，就可以处理所有的数字。</p><p>然而，人类的思考方式并非如此，至少对大多数人来说，功能（模型）和数据是无法完全分离的。例如，我们能够批判性地思考欧洲地缘政治如何导致第二次世界大战，并不意味着我们也能批判性地思 考中东当前的局势。再比如，我们知道在使用金字塔模型进行分类时，应确保每个分类之间既无重叠也无遗漏。然而，即使我们在某个领域成功实现了这一点，但在仅仅理解模型的情况下，并不能保证在另一个领域也能做到无重无漏。﻿</p><p>其次，<strong>通过知识的学习，可以提高我们的记忆力。</strong>我们把人脑分成工作记忆和长期记忆，<strong>工作记忆的空间是有限的，它的上限决定了我们的推理能力。</strong>这一点其实也很容易理解，当我们涉足到非常专业的领域时，会遇到大量的专有名词。例如，在营销运营领域，我们会遇到像“招选搭投”、“盘货池”这样的专有名词。这些名词都包含大量的背景知识。如果我们不清楚这些知识，我们根本是无法讨论问题（判断、推理、分析、决策等）的。</p><p>让我们想象一下，在不熟悉背景知识的情况下，我们如何探讨“直接将盘货池暴露给搭建页面是否合理？”时，首先，我要解释一下什么是盘货池，它是根据特定的商品指标规则圈选的商品集合。然后，我会介绍什么是搭建，在这一通输出之后，估计大家的脑子已经炸了。可是，我们还没有开始讨论真正有意义的内容。</p><p><strong>发散一下：这种情况是不是跟当今的大模型所遇到的困境非常像？</strong></p><p>实际上，我们可以通过学习知识来解决这个问题。我们可以将知识压缩成一小块一小块，然后存入长期记忆中。当我们需要时，可以随时调取。例如，当我提到”盘货池”这个概念，我们的脑海中立刻会想到”按指标圈选的商品集合”。而且，我们还可以联想到更多，例如它的存储形式，它在数据流向中的位置等等。我们能联想到的内容完全取决于我们的大脑中存储了多少信息。这样，<strong>我们就大大节省了工作记忆空间，从而变相地突破了工作记忆空间的限制。</strong>另外，学习知识还能更容易地触发长期记忆，也就是说，学得越多，记忆力越好。由于篇幅原因，我就不再详细说明这一点了。﻿</p><p><strong>在大模型时代，要怎么学习？</strong></p><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><p>前面，花了大量的篇幅在论证，我们要不要学习，接下来，我们阐述一下，应该怎么学习。﻿</p><h4 id="与机器赛跑，仅仅靠技能型学习是不够的"><a href="#与机器赛跑，仅仅靠技能型学习是不够的" class="headerlink" title="与机器赛跑，仅仅靠技能型学习是不够的"></a>与机器赛跑，仅仅靠技能型学习是不够的</h4><p>模型最擅长的是什么？显然，大型模型在重复型技能学习方面表现出色。无论是对某种模式的判断，还是执行某些套路化的动作，模型都能高效而准确地完成。在这些领域，人类难以与大模型竞争。</p><p>令人沮丧的是，这些技能我们并不能抛弃，并且他们非常重要。就像篮球运动员必须具备扎实的基本功，才能完成复杂的动作一样，<strong>基本技能是我们掌握高级能力的基础。没有这些基本技能，任何高层次的应用和创新都无从谈起。</strong></p><p>然而，在这个时代，仅仅依赖这些基本技能是不够的。面对“与机器赛跑”的挑战，我们需要培养更高等级的能力，如分析、判断、决策和创新。这些能力能够让我们在与大模型的竞争中脱颖而出。</p><p>未来也不全是坏事儿，值得高兴的是，<strong>在大模型的加持下，技能型学习过程将显著加快</strong>，从而提高这一阶段的学习效率。通过高度整合的、定制化的知识，提供多样化的案例，并及时给予学习者反馈，学习者可以更快地掌握基本技能。这不仅节省了大量的时间和精力，同时也使我们能够将更多的资源投入到更高层次的分析、判断和创新中，促进整体学习效果的提升。</p><h4 id="要从技能型学习到专家型学习的转变"><a href="#要从技能型学习到专家型学习的转变" class="headerlink" title="要从技能型学习到专家型学习的转变"></a>要从技能型学习到专家型学习的转变</h4><p>专家型学习这个概念不太容易定义，首先解释一下什么是专家能力，以帮助大家理解什么是专家型学习。</p><p>不要误解，此专家非彼专家。</p><p>首先，<strong>专家具备概念框架和分析能力。</strong></p><p>当专家面对一个问题时，他们首先会运用概念框架来锚定问题的类型。例如，在处理一个需要在多个服务器之间共享数据的系统时，专家首先会锚定这是一个分布式问题，然后再进一步锚定是分布式当中数据一致性的问题，其后才会着手解决数据如何在不同节点之间实现一致。</p><p>其次，<strong>专家能够清晰地识别模式、关系和差异。</strong></p><p>这一点或许有些抽象。专家不仅能应用概念模型，还能在复杂情境中看清楚各方关系和角色。比如，在设计复杂的软件系统时，专家能识别核心服务和辅助服务，理解它们如何协同工作，并优化接口和数据流。他们能预见扩展系统时的挑战，并提前设计解决方案。﻿</p><p>再次，<strong>专家具备扎实的基础知识，并能够顺畅地提取和运用这些知识。</strong></p><p>扎实的基础是专家型学习的基石。假设一个人连基本的概念都无法理解，就无法指望他能深入分析和解决问题。﻿</p><p>那么，什么是专家型学习，或者换句话说，如何通过学习达到专家能力？</p><p>扎实的基础知识是专家型学习的第一步，这一步是可以通过系统的学习和反复练习来实现的。然而，令人沮丧的是，后续的高级能力——如分析能力、系统化思维、批判性思维、决策和创新等——并不能通过简单的学习获得。</p><p>这些高级能力需要大量实践来培养，<strong>我相信阿里的“借事修人”的理念，但是这首先需要我们“躬身入局”</strong>。具体来说，主动承担有挑战性的任务，尝试跨领域学习和应用，迫使自己运用高级能力；持续反思和总结经验，改进策略，不断输出，寻求反馈；这样才有可能将高级能力内化为自己的技能。</p><h4 id="软实力从来没有变得像今天那么重要"><a href="#软实力从来没有变得像今天那么重要" class="headerlink" title="软实力从来没有变得像今天那么重要"></a>软实力从来没有变得像今天那么重要</h4><p>在现今社会，许多技术性的任务可能被机器取代，但判断和决策仍然需要人来完成。因此，在可预见的未来，软实力（沟通能力、同理心、逆商、团队精神、领导力等）的重要性将变得更为突出，比以往任何时候都更为关键。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;mid=2247539111&amp;idx=1&amp;sn=ef5e1cd2237732f2af4b515dbb66e26f&amp;&quot;&gt;跟着ChatGPT4o学全栈，我看到未</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mac软件汇集(转载)</title>
    <link href="https://imlike.cc/27d3a647.html"/>
    <id>https://imlike.cc/27d3a647.html</id>
    <published>2025-03-07T02:46:10.000Z</published>
    <updated>2025-04-09T07:47:42.467Z</updated>
    
    <content type="html"><![CDATA[<p>转载地址 <a href="https://weekly.howie6879.com/soft/mac.html">https://weekly.howie6879.com/soft/mac.html</a></p><h1 id="mac-soft"><a href="#mac-soft" class="headerlink" title="mac-soft"></a>mac-soft</h1><blockquote><p>记录我在使用 <code>macOS</code> 过程中使用&amp;看到的软件项目，本文会持续更新，同时也开源在 <a href="https://github.com/howie6879/mac-soft">GitHub</a>，欢迎 <code>Star</code> ❤️</p></blockquote><h2 id="基础工具"><a href="#基础工具" class="headerlink" title="基础工具"></a>基础工具</h2><ul><li><p>Alfred</p><p>：本地搜索及应用快速启动，替代品：</p><ul><li><a href="https://github.com/raycast/extensions">Raycast</a>：目前免费状态，这是其开源插件仓库</li><li><a href="https://github.com/cerebroapp/cerebro">Cerebro</a>：开源替代品</li></ul></li><li><p><a href="https://github.com/kyleneideck/BackgroundMusic">BackgroundMusic</a>：音频管理工具，可以管控各个 <code>APP</code> 的音量（开源）</p></li><li><p><a href="https://web.archive.org/web/20150322050645/http://ftnew.com/files/CatchMouse.zip">CatchMouse</a>：多显示器切换软件，根据快捷键快速切换到目标显示器（免费）</p></li><li><p><a href="https://github.com/pqrs-org/Karabiner-Elements">Karabiner-Elements</a>：键盘键位修改神器，特别针对有多款键盘的人（开源）</p></li><li><p><a href="https://github.com/leaves615/KeyboardHolder">KeyboardHolder</a>：一款补足 <code>macOS</code> 自带有一个自动切换到文稿到输入法功能遗憾的软件（免费）</p></li><li><p><a href="https://github.com/noah-nuebling/mac-mouse-fix">mac-mouse-fix</a>：轻量级鼠标控制功能定制软件（开源）</p></li><li><p><a href="https://mounty.app/">Mounty</a>：一款 <code>NTFS</code> 格式读写工具</p></li><li><p><a href="https://github.com/Caldis/Mos">Mos</a>：一个平滑你的鼠标滚动效果或单独设置滚动方向的小工具，让你的滚轮爽如触控板（开源）</p></li><li><p><a href="https://peazip.github.io/">peazip</a>：解压缩工具（开源）</p></li><li><p><a href="https://github.com/rxhanson/Rectangle">Rectangle</a>：多窗口管理工具（开源）</p></li><li><p><a href="https://github.com/avibrazil/RDM">RDM</a>：轻松将 <code>Mac Retina</code> 显示器设置为更高的分辨率（开源）</p></li></ul><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul><li><p><a href="https://github.com/lwouis/alt-tab-macos">AltTab</a>：<code>AltTab</code> 将 <code>Windows</code> 的 <code>Alt-Tab</code> 窗口切换器带到 <code>MacOS</code>（开源）</p></li><li><p>Bartender</p><p>：方便的状态栏管理工具，开源替代品有：</p><ul><li><a href="https://github.com/Mortennn/Dozer">Dozer</a></li><li><a href="https://github.com/dwarvesf/hidden">hidden</a></li></ul></li><li><p><a href="https://github.com/balena-io/etcher">balenaEtcher</a>：镜像制作工具（开源）</p></li><li><p><a href="https://www.cakebrew.com/">cakebrew</a>： 如果使用 <code>Homebrew</code> 的话，可以使用这款来进行管理（开源）</p></li><li><p><a href="https://github.com/gao-sun/eul">eul</a>：系统状态监控工具（开源）</p></li><li><p><a href="https://justgetflux.com/news/pages/macquickstart/">flux</a>：一款比较好的免费屏幕护眼软件</p></li><li><p><a href="https://github.com/newmarcel/KeepingYouAwake">KeepingYouAwake</a>：根据自己的需求设置 <code>Mac</code> 多少分钟/多少小时后进入睡眠</p></li><li><p><a href="https://maccy.app/">Maccy</a>：剪贴板管理（开源）</p></li><li><p><a href="https://github.com/MonitorControl/MonitorControl">MonitorControl</a>：控制外部显示器的亮度和音量（开源）</p></li><li><p><a href="https://github.com/jacklandrin/OnlySwitch">OnlySwitch</a>：系统功能快速开关工具（开源）</p></li><li><p><a href="https://www.parallels.com/">Parallels Desktop</a>：能让您在 <code>Mac</code> 上同时使用 <code>Windows</code> 等系统</p></li><li><p><a href="https://github.com/sbarex/SourceCodeSyntaxHighlight">SourceCodeSyntaxHighlight</a>：增强文件预览（开源）</p></li><li><p><a href="https://tunnelblick.net/">Tunnelblick</a>：<code>OpenVPN</code> 客户端（开源）</p></li><li><p><a href="https://lemon.qq.com/">腾讯柠檬</a>：腾讯出品的系统清理工具（开源）</p></li></ul><h2 id="编程开发"><a href="#编程开发" class="headerlink" title="编程开发"></a>编程开发</h2><ul><li><p><a href="https://www.anaconda.com/">Anaconda</a>：数据科学常用 <code>Python</code> 环境管理程序</p></li><li><p><a href="https://github.com/ObuchiYuki/DevToysMac">DevToysMac</a>：程序员常用工具集（开源）</p></li><li><p><a href="https://www.docker.com/">Docker</a>：用容器化的形式使用一些常用软件，推荐使用 <a href="https://github.com/portainer/portainer">portainer</a> 管理（开源）</p></li><li><p><a href="https://github.com/macvim-dev/macvim">MacVim</a>：文本编辑器（开源）</p></li><li><p>Offset Explorer</p><p>：个人免费的跨平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kafka</span><br></pre></td></tr></table></figure></li></ul><p>  界面管理工具，</p><ul><li><p><a href="https://github.com/provectus/kafka-ui">kafka-ui</a>：<code>Web</code> 自部署，简洁好用、速度快、颜值高（开源）</p></li><li><p><a href="https://code.visualstudio.com/">VSCode</a>：微软出品的免费跨平台代码编辑器（开源）</p></li><li><p>终端：</p><ul><li><a href="https://github.com/electerm/electerm">electerm</a>：一款基于 <code>Electron</code> 开发的 <code>SSH/SFTP</code> 跨平台客户端、（开源）</li><li><a href="https://iterm2.com/">Iterm2</a>：免费好用的终端工具，一般搭配 <code>Brew</code> 和 <code>ZSH</code> 使用</li><li><a href="https://github.com/Eugeny/tabby">tabby</a>：一个可高度配置的终端模拟器和 <code>SSH</code> 或串口跨平台客户端（开源）</li><li><a href="https://github.com/kingToolbox/WindTerm">WindTerm</a>：基于 <code>C</code> 语言开发的的专业级替代品（开源）</li></ul></li><li><p>数据库：</p><ul><li>通用：<ul><li><a href="https://github.com/beekeeper-studio/beekeeper-studio">beekeeper-studio</a>：跨平台的 <code>SQL</code> 编辑器和数据库管理器（开源）</li><li><a href="https://github.com/dbeaver/dbeaver">DBeaver</a>：为开发人员、<code>SQL</code> 程序员、数据库管理员和分析人员提供的免费多平台数据库工具，有 <code>JDBC</code> 驱动即可支持使用（开源）</li><li><a href="https://github.com/dbgate/dbgate">dbgate</a>：支持 <code>Mysql、Postgresql、SQL Server、Mongodb、Redis、SQLite</code> 等数据库的管理软件，同时也满足在 <code>Windows、Linux、Mac Web</code> 下运行，还提供插件体系（开源）</li></ul></li><li>Elasticsearch：<ul><li><a href="https://github.com/1340691923/ElasticView">ElasticView</a>：简单好用的 <code>ES</code> 可视化客户端，支持连接6，7，8版本（开源）</li><li><a href="https://opensource.appbase.io/mirage/">appbaseio/mirage</a>：用于简化 <code>ES</code> 查询语句编写的项目，你可以用基于块的交互形式来组成 <code>Elasticsearch</code> 查询语句（开源）</li><li><a href="https://github.com/cars10/elasticvue">elasticvue</a>：基于 <code>Vue</code> 的 <code>Elasticsearch</code> 管理客户端，支持<a href="https://chrome.google.com/webstore/detail/elasticvue/hkedbapjpblbodpgbajblpnlpenaebaa/related?utm_source=chrome-ntp-icon">浏览器插件</a>和 <code>Docker</code> 自建（开源）</li></ul></li><li>MongoDB：<ul><li><a href="https://github.com/mongo-express/mongo-express">mongo-express</a>：可自建的 <code>MongoDB</code> 数据库管理软件，针对线上数据库需要共享的需求，可以统一部署在一台服务器给所有员工用，然后设置只读模式，非常实用（开源）</li><li><a href="https://github.com/Studio3T/robomongo">Robo 3T</a>：<code>MongoDB</code> 数据库管理软件（开源）</li></ul></li><li>MySQL：<ul><li><a href="https://github.com/Sequel-Ace/Sequel-Ace">Sequel-Ace</a>：原生的 <code>MySQL/MariaDB</code> 数据库管理软件（开源）</li></ul></li><li>Redis：<ul><li><a href="https://github.com/qishibo/AnotherRedisDesktopManager">AnotherRedisDesktopManager</a>：跨平台的 <code>Redis</code> 桌面管理客户端，性能出众（开源）</li><li><a href="https://github.com/Kuari/RedisFish">RedisFish</a>：一款便捷、跨平台、专注于数据的 <code>Redis GUI</code> 客户端（开源）</li></ul></li><li>PostgreSQL：<ul><li><a href="https://github.com/pgadmin-org/pgadmin4">pgadmin4</a>：跨平台的 <code>PostgreSQL</code> 数据库管理软件（开源）</li></ul></li><li>SQLite：<ul><li><a href="https://github.com/sqlitebrowser/sqlitebrowser">sqlitebrowser</a>：<code>DB4S</code> 是一个高质量、可视化、开源的工具，用于创建、设计和编辑与 <code>SQLite</code> 兼容的数据库（开源）</li></ul></li></ul></li><li><p>API 请求调试：</p><ul><li><a href="https://github.com/hoppscotch/hoppscotch">hoppscotch</a>：基于 <code>Web</code> 提供服务（开源）</li><li><a href="https://github.com/Kong/insomnia">insomnia</a>：跨平台 （开源）</li><li><a href="https://www.postman.com/">Postman</a>：比较老牌的 <code>API</code> 接口功能测试工具</li><li><a href="https://github.com/star7th/showdoc">showdoc</a>：一个非常适合 IT 团队的在线 <code>API</code> 文档、技术文档工具（开源）</li><li><a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client">Thunder Client</a>：如果使用<a href="https://code.visualstudio.com/">VSCode</a>，推荐使用这款插件 💡</li></ul></li></ul><h2 id="浏览娱乐"><a href="#浏览娱乐" class="headerlink" title="浏览娱乐"></a>浏览娱乐</h2><ul><li><a href="https://www.aliyundrive.com/">aliyundrive</a>：阿里云盘</li><li><a href="https://github.com/blogwy/BilibiliVideoDownload">BilibiliVideoDownload</a>：跨平台下载 <code>bilibili</code> 视频桌面端软件（开源）</li><li><a href="https://www.google.com/chrome/">Chrome</a>：浏览器</li><li><a href="https://github.com/iina/iina">iina</a>：现代化的视频播放器（开源）</li><li><a href="https://apps.apple.com/us/app/irvue/id1039633667?mt=12">Irvue</a>：基于 Unsplash 的免费壁纸切换工具</li><li><a href="https://www.mowglii.com/itsycal/">itsycal</a>：一款简单优雅的菜单栏日历（开源）</li><li><a href="https://github.com/justinfrankel/licecap">licecap</a>：轻量小巧的录屏工具（开源）</li><li>沟通：<a href="https://weread.qq.com/">微信</a> | <a href="https://www.dingtalk.com/">钉钉</a> | <a href="https://telegram.org/">TG</a></li><li><a href="https://www.stellarplayer.com/">恒星播放器</a>：一款纯粹专注的播放器</li><li><a href="https://music.163.com/">网易云音乐</a>：推荐一款开源替代品 <a href="https://github.com/qier222/YesPlayMusic">YesPlayMusic</a></li></ul><h2 id="阅读写作"><a href="#阅读写作" class="headerlink" title="阅读写作"></a>阅读写作</h2><ul><li><a href="https://ripperhe.gitee.io/bob/#/">Bob</a>：翻译工具（开源，但是正式版买断收费）</li><li><a href="https://github.com/yang991178/fluent-reader">fluent-reader</a>：<code>RSS</code> 阅读器（开源）</li><li><a href="https://joplinapp.org/">Joplin</a>：跨平台笔记管理工具，有不错的社区支持（开源）</li><li>Pngyu](<a href="https://joplinapp.org/)%EF%BC%9A%E5%85%8D%E8%B4%B9%E7%9A%84PNG%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%90%8C%E6%A0%B7%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BF%98%E6%9C%89%EF%BC%9A">https://joplinapp.org/)：免费的PNG图片压缩工具，同样好用的还有：</a><ul><li><a href="https://github.com/kyleduo/TinyPNG4Mac">TinyPNG4Mac</a>（开源）</li><li><a href="https://imageoptim.com/mac">ImageOptim</a>（开源）</li></ul></li><li><a href="https://typora.io/releases/all">Typora</a>：比较经典的所见即所得 <code>Markdown</code> 编辑器（提供免费版）</li><li><a href="https://github.com/gee1k/uPic">uPic</a>：原生的图床管理工具（开源）</li><li><a href="https://xnipapp.com/">Xnip</a>：挺不错的截图软</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载地址 &lt;a href=&quot;https://weekly.howie6879.com/soft/mac.html&quot;&gt;https://weekly.howie6879.com/soft/mac.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;mac-soft&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何找出Java进程占用CPU高的元凶(转发)</title>
    <link href="https://imlike.cc/129d01fc.html"/>
    <id>https://imlike.cc/129d01fc.html</id>
    <published>2025-01-18T07:04:12.000Z</published>
    <updated>2025-01-18T07:15:56.842Z</updated>
    
    <content type="html"><![CDATA[<p>转发: <a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&mid=2247543282&idx=1&sn=b0b3d858b70c49c996221d265fa0fecf&chksm=e86b7b221aface2870c9b4217eeffd4e8e0c953937bf8492e7f83fb102260f922a39c2f11da1&mpshare=1&scene=24&srcid=12059mpwWmSG7Rse36RT6hp5&sharer_shareinfo=788a814db98d7ed844f50438fa229815&sharer_shareinfo_first=788a814db98d7ed844f50438fa229815#rd">如何找出Java进程占用CPU高的元凶</a></p><p>开发的时候登录OSS控制台预发机器，发现Java进程CPU占用率其高，按道理预发机器只是内部开发及产品会使用，根本不可能占用这么大的资源，第一反应就是，进程在某个地方死循环了。</p><p><img src="../img/640.webp" alt="图片"></p><p>二、调查</p><p>猜测归猜测，还是要用事实说话。</p><p>第一步：top -Hp 15057 查看下进程中的线程资源占用情况</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLbC5OYRrb96ib9NtMYx13mBXNRQ4Wo5qgtqRX3aGuGP5F3S2tylTgOIkZ0oAKib5S95rCHT5dndtLw/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>由上图可见，CPU时间片主要是被15393 这个线程给吃掉了， 所以目标锁定在 15393。</p><p>执行 printf “%x\n” 15393，计算出线程ID对应的16进制。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLbC5OYRrb96ib9NtMYx13mB1qn6Mibf92Gdo9tTVV1fIY17TLhZZ8lpO7BblibVJYxZAic33hUrAUJzQ/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>第二步：执行 sudo -u www jstack 15057，获取当前进程中各线程的调用栈</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLbC5OYRrb96ib9NtMYx13mBpQZSuJsBib6ic8L3YDZgibNp7XcCITDrzpH85yTWYqZKjOJjfb1PLoib3A/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>对比之前计算出来的二进制id：3c21，找到占用CPU资源最高的线程堆栈，如上图所示。</p><p>看样子是在LoguUtil的255行出了问题，赶紧定位到这一行看看：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLbC5OYRrb96ib9NtMYx13mBbW0MKG09EfsWlprtvrSvxOF8gLCaibwfSL75iaCp9AIHv7icKB6PMmuibw/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这里写了一个死循环，并在255行调用了阻塞队列的poll（），很明显，方法调用错了，poll（）在队列会空的时候会直接返回null，并不会阻塞等待，所以造成进程一直在这儿死循环。</p><p>那么为什么测试的时候没有发现呢？因为只要有日志，代码很难走到255行，之所以能发现这个问题，是因为我登录机器这段时间是在深夜，刚好没有日志。</p><p>三、验证</p><p>将代码修改提交部署后，在登录机器看看CPU占用情况：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLbC5OYRrb96ib9NtMYx13mB6LbLXY614icHcFic4UkmrhQOibcxGJe9mZgOcwYSgynahzOHhjecmoQHQ/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>此时Java进程的CPU占用已经恢复正常了。</p><p>四、总结</p><p>平时开发需求，除了验证基本的功能完整性之外，一定要注意对性能的影响，及时发现并解决问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转发: &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;mid=2247543282&amp;idx=1&amp;sn=b0b3d858b70c49c996221d265fa0fecf&amp;chksm=e86b7b221af</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql连接问题</title>
    <link href="https://imlike.cc/22281c22.html"/>
    <id>https://imlike.cc/22281c22.html</id>
    <published>2025-01-18T06:52:45.000Z</published>
    <updated>2025-01-18T07:15:56.841Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 bitnami 的镜像来搭建 mysql 的集群环境,但是突然驱动出现了问题,进入容器对于的那台机器查询对于的命令</p><blockquote><p>/opt/bitnami/mysql/bin/mysqld –defaults-file=/opt/bitnami/mysql/conf/my.cnf –basedir=/opt/bitnami/mysql –datadir=/ bitnami/mysql/data –socket=/opt/bitnami/mysql/tmp/mysql.sock –bind-address=127.0.0.1 –skip-slave-start –upgrade=force</p></blockquote><p><img src="../img/image.png"></p><p>研究了一通是因为  –upgrade=force ,目前由于我们是bitnami集群时[<a href="https://github.com/bitnami/containers/issues/44854">bitnami/mysql] installed in the k8s cluster keeps prompting that the upgrade fails after restarting · Issue #44854 · bitnami/containers</a></p><p>同时在容器中常见的命令地址如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;opt&#x2F;bitnami&#x2F;scripts&#x2F;mysql&#x2F;entrypoint.sh </span><br><span class="line">&#x2F;opt&#x2F;bitnami&#x2F;scripts&#x2F;mysql&#x2F;run.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用 bitnami 的镜像来搭建 mysql 的集群环境,但是突然驱动出现了问题,进入容器对于的那台机器查询对于的命令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/opt/bitnami/mysql/bin/mysqld –defaults-file=/opt/bitna</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java线程池注意事项</title>
    <link href="https://imlike.cc/8a4449c5.html"/>
    <id>https://imlike.cc/8a4449c5.html</id>
    <published>2025-01-18T06:46:39.000Z</published>
    <updated>2025-01-18T07:15:56.841Z</updated>
    
    <content type="html"><![CDATA[<p>java 线程池使用的人很多,通常情况下为了不注册当前的线程的执行,同时提升执行的效率</p><p>但是需要有时候使用不当回出现意想不到的问题,不如下面这种问题</p><p><a href="https://javaguide.cn/java/concurrent/java-thread-pool-best-practices.html#spring-%E5%86%85%E9%83%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%9D%91">Java 线程池最佳实践 | JavaGuide</a></p><p><a href="https://javaguide.cn/java/concurrent/java-thread-pool-best-practices.html#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C-threadlocal-%E5%85%B1%E7%94%A8%E7%9A%84%E5%9D%91">线程池和 ThreadLocal 共用的坑</a></p><p>在线程池中使用了比如 springMVC中设置了 ThreadLocal方便其他的线程使用,但是有几个问题,上一次设置的ThreadLocal 变量可能会被覆盖导致,拿不到想要的值.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;java 线程池使用的人很多,通常情况下为了不注册当前的线程的执行,同时提升执行的效率&lt;/p&gt;
&lt;p&gt;但是需要有时候使用不当回出现意想不到的问题,不如下面这种问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://javaguide.cn/java/concurrent/ja</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>quartz使用问题</title>
    <link href="https://imlike.cc/81077f05.html"/>
    <id>https://imlike.cc/81077f05.html</id>
    <published>2025-01-18T06:32:13.000Z</published>
    <updated>2025-01-18T07:15:56.842Z</updated>
    
    <content type="html"><![CDATA[<p>接手公司的代码在使用 quartz 中使用了,最近在开发新功能,突然任务都阻塞的,后面发现是是因为改动了一部分代码导致执行了这部分代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trigger &#x3D; TriggerBuilder.newTrigger().withIdentity(jobName, TRIGGER_GROUP_NAME).startAt(startTime).endAt(endTime).build(); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>远程访问线程后显示我没有设置withSchedule 导致一直访问</p><blockquote><p>SELECT * FROM T_QRTZ_LOCKS WHERE SCHED_NAME = ‘quartzScheduler_dq’ AND LOCK_NAME = ‘TRIGGER_ACCESS’ FOR UPDATE</p></blockquote><p>研究了一下在 Quartz 调度框架中，触发器（Trigger）是用于定义任务的启动、结束时间、重复执行间隔等细节的。当没有设置 <code>withSchedule</code> 时，Quartz 默认的行为是认为这个触发器是一个“一次性”触发器，即在 <code>startAt</code> 指定的时间启动，并且不会重复执行。</p><p>然而，<code>T_QRTZ_LOCKS</code> 表格是 Quartz 用来管理锁和调度状态的数据库表，<code>LOCK_NAME = &#39;TRIGGER_ACCESS&#39;</code> 说明当前 Quartz 调度器正在尝试获取对某个资源的锁，可能是在创建或执行触发器时遇到了并发问题。具体来说，这种情况可能是由于以下原因导致的：</p><ol><li>锁的竞争：创建的触发器没有明确的调度计划（例如，没有设置 <code>withSchedule</code>），可能导致 Quartz 试图获取资源的锁，而该锁在其他地方已经被占用。Quartz 会用数据库表 <code>T_QRTZ_LOCKS</code> 来保证分布式环境中不同调度器的协调，防止重复执行。正在尝试访问的锁是 <code>TRIGGER_ACCESS</code>，Quartz 在执行时检查并锁定资源，以防止多个实例同时执行同一个任务。</li><li>没有指定调度计划（Schedule）：如果没有设置 <code>withSchedule</code>，Quartz 会认为这个任务没有重复执行的计划，这意味着每次启动时，Quartz 可能会频繁地访问锁，造成资源竞争。</li></ol><h3 id="目前解决方案："><a href="#目前解决方案：" class="headerlink" title="目前解决方案："></a>目前解决方案：</h3><ul><li><p>设置触发器的调度计划：可以使用 <code>withSchedule</code> 来设置触发器的调度计划</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trigger &#x3D; TriggerBuilder.newTrigger().withIdentity(jobName, TRIGGER_GROUP_NAME).startAt(startTime).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(60)  &#x2F;&#x2F; 每60秒执行一次.repeatForever())  &#x2F;&#x2F; 重复执行.build();&#96;</span><br></pre></td></tr></table></figure></li></ul><ul><li>检查并发执行：如果系统是分布式的，确保 Quartz 实例之间的锁定机制正常工作。Quartz 通过数据库锁来防止多个调度器同时处理同一个任务，确保任务的唯一执行。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接手公司的代码在使用 quartz 中使用了,最近在开发新功能,突然任务都阻塞的,后面发现是是因为改动了一部分代码导致执行了这部分代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>从头到尾说一说Java时间日期体系的前世今生(转载)</title>
    <link href="https://imlike.cc/afee6eb0.html"/>
    <id>https://imlike.cc/afee6eb0.html</id>
    <published>2025-01-11T05:12:49.000Z</published>
    <updated>2025-01-12T06:11:42.872Z</updated>
    
    <content type="html"><![CDATA[<p>转载链接:  <a href="https://mp.weixin.qq.com/s?src=11&timestamp=1736572324&ver=5743&signature=PJXVw3zvmhLrj*-*Mp3vngu7NlHlvoQoyS-WWdLwf0niEjgyecqHKWBxTlg6Yf2OUM2h78zZFuNRuSuozeA5CKuFJVogAx4QWfgzTm4ogSiXZ0hLObff60N6iurUVSGO&new=1">从头到尾说一说Java时间日期体系的前世今生</a></p><p>在计算机领域作者重新梳理了计算机世界里日期时间体系的前世今生。</p><p>突击检查</p><p>如下代码输出什么，机器当下所设定的时区为美国时区，在北京时间 2024-12-07 11:20:51 时，传入字符串“2024-12-07 11:46:36”。最终输出应该是true，还是false呢？</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MjdhODc2YzgxOWIyMGYyMWM5ZTRlYjk4YjFlNWZlMjJfQzFoTzNVQzFwdjlQNzU4RE1iQ0haYmw3ejBQbG9la1NfVG9rZW46UndSNWJVZEFQb0x6VER4cUJDSWM2OU5Vbm5oXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>前言</p><p>约38亿年前地球出现生命体，约46亿年前太阳系形成，大约138亿年前宇宙大爆炸，那再往前呢？想起吕秀才对姬无命发出灵魂之问『时间是否有开端，宇宙是否有尽头』。施一公曾经在一次演讲中说，宇宙中从来不存在时间，只存在运动。地球公转太阳一圈是一年，这是运动，地球自转一圈是一天，这也是运动。从来就没有时间，或者说时间就是空间。</p><p>『三十年春，秦晋围郑。郑伯使烛之武如秦』两千多年前我们就以时间记事，在造物主已经缔造的这一片井然有序的世界里，我们凭空创建出一个新的概念，并不断尝试融入这个世界体系–沙漏、水钟、日晷等等。今天站在计算机这个领域，也让我们重新梳理一遍，计算机世界里日期时间体系的前世今生。</p><p>日期从1970 年1月1日说起</p><p>任何一个软件开发人员对这个时间应该都不陌生，有时我们忘记初始化或者忘记赋值时，日期就会显示为1970-01-01，我们也叫日期初始值。那为什么日期的初始值是从1970-01-01开始呢？有一个说法是说遵循了Unix的时间计数，Unix认为 1970年1月1日0点 [1]是时间纪元，那为什么Unix要以这个时间为准呢？</p><p>有一处说法是说，当时操作性系统都是32位，如果每一个数值代表一秒，那么最多可以表示2^32-1，也就是2147483647秒，换算成年大概是68年。而Unix系统就是由Ken Thompson、Dennis Ritchie和Douglas McIlroy等人在贝尔实验室开发于1969年开发的，他们为了让时间尽可能的多利用起来，便用了下一年，即 1970年1月1日作为开始，然后这个约定也逐步延伸到其他各个计算机领域。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NGI5ZjUyZWM5MTVkZDcwNGVhYzMzMmVlZmE5YTYxM2JfWWRxSUE5TlhQVTRFTVVvTHM1RW9ZbGpPMVZvQlYzVklfVG9rZW46VzJwbWJqVUxZbzA4cTV4QmpiTGNUWnpxbmFjXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>时间从GMT与UTC说起</p><p>聊完日期我们再来看时间，爱好体育的应该都知道，看欧冠得半夜起来看，看NBA得早上起来看，现在是北京时间的14点，同时也是纽约时间的凌晨1点半。那是因为我们各地处不同时区，那时区以什么为初始划分的呢？</p><p><strong>GMT</strong> <strong>格林威治时间</strong></p><p>GMT的全称是 Greenwich Mean Time [2]即格林威治标准时间，是一种与地球自转相关、以太阳日为单位的时间标准。在十七世纪，格林威治皇家天文台为了海上霸权的扩张计划，选择了穿过英国伦敦格林威治天文台子午仪中心的一条经线作为零度参考线，也就是我们教科书上记载的本初子午线。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjE3ZDhlNTNjNzA2MjUxYTZkYjAwNTkzNjFmOWYyNzVfWHlvTEtmcmJSWnJ2cThpU2sweEw5WGk1VmJwaHV1eXlfVG9rZW46SE9ja2JjcGpCb1ZiUmJ4ZlliN2NFTE5WbnNnXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>并约定从本初子午线起，经度每向东或者向西间隔15°，就划分一个新的时区[3]，每个时区间隔1小时，在这个区域内，大家使用同样的标准时间。但各个国家也会基于各个国家的情况拆分或合并时区，比如中国横跨5个时区，但我们统一使用东八区；而美国则有东部时间、西部时间、夏威夷时间等等。</p><p>从 1924 年开始，格林威治天文台每小时就会向全世界播报时间，最终截止到 1979 年。至于为什么会终止，自然有它的缺点和局限性，那我们就得聊聊UTC时间了。</p><p><strong>UTC</strong> <strong>世界协调时间</strong></p><p>UTC的全称是 Coordinated Universal Time [4]协调世界时间，也称世界标准时间。据说按英语的简称是CUT，按法语的简称是TUC，然后大家相互拉扯一波后，统一叫了UTC。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MjUxOTA1YTc2YmE5YjAxNWFlNzYyNmQwYjU2ZjNjMDNfUnlDdWhEVFBOd2s1SkRoMlZ1RGhhM29JSkZWeTl6OFFfVG9rZW46VmRKR2JJMjhrb0VZZTF4VnRUd2MzZmZvbjdmXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>上述所说GMT时间是以地球自转与围太阳公转来计时的，GMT时间认为地球自转一圈是24<em>3600秒，而地球的运动轨迹受很多方面影响，比如潮汐摩擦、气象变化、地震及地质活动等等，运动的时间周期并不是完全规律和相同的。这样会导致其实一天并不完全是24</em>3600秒，这样平均算下来GMT的一秒就不是完全意义上最精确的一秒。但偏差通常也不会很大，基本为毫秒级偏差，但日积月累如果不加以扶正，就会越差越远。</p><p>而UTC的计数是基于 原子钟（Atomic Clock） [5]的计数，比如铯原子钟采用铯-133原子的特性，在特定能级跃迁时会产生一个非常确定的频率9,192,631,770赫兹。然后基于铯-133原子的运动经过换算确定出我们需要的时间周期，据说这种误差可达每百万年内不到一秒。</p><p>UTC 最终由两部分构成：原子时间与世界时间。原子时间基于原子钟，来标准化我们钟表中每一秒时间前进的数据；世界时间是结合GMT时间，我们用多少个原子时来决定一个地球日的时间长度。从1972年开始，UTC被正式采用为国际标准时间。这年实施了一种新的时间调整机制，包括使用闰秒[6]以便对齐地球自转与原子时间。</p><p>JDK 时间日期的发展史</p><p><strong>糟糕的java.util.Date</strong></p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NjA1MDE4M2I4YjQxMTk2MGVlOWZmYWZiNDM1NmM1NTJfbjNLdHpLMlY2QlBuQkdibndESE1KQkQ3S0pMTkNJZFRfVG9rZW46RWNRcWJpdHJFb2owazB4elFVSmNwekRybmJkXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>说起Date那可是JDK的正牌嫡系，从1.0开始就一直存在并延续至今。但只要大家用过一些代码扫描工具，基本都是在提示你尽量不要使用Date。在oracle的官方JDK文档中，有超过一半的函数都是deprecated，要细说Date的问题，那可真是一言难尽。</p><h3 id="不能单独表示日期或时间"><a href="#不能单独表示日期或时间" class="headerlink" title="不能单独表示日期或时间"></a>不能单独表示日期或时间</h3><p>Sat Dec 07 17:36:58 CST 2024 这是我们输出new Date()之后的数据，因为Date本质是某一个时刻的时间戳，导致它不能单独表示日期，更不能表示不带日期的时间。</p><h3 id="令人捉摸不透的API"><a href="#令人捉摸不透的API" class="headerlink" title="令人捉摸不透的API"></a>令人捉摸不透的API</h3><p>单就Date的方法名来看，应该是非常友好的。它提供了getYear(), getDay()等等，你但凡用过一次，一定让你抓狂。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;    Date date = new Date();    // 输出 6    System.out.println(date.getDay());    // 输出 11    System.out.println(date.getMonth());    // 输出 124    System.out.println(date.getYear());&#125;</span><br></pre></td></tr></table></figure><p>day和month是从0开始计数的，所以月最大是11，日最大是30，年输出124是因为2024年距离1900年有124年。至于为什么是减1900，有知道的小伙伴评论区打出来😂。</p><h3 id="不支持时区设定"><a href="#不支持时区设定" class="headerlink" title="不支持时区设定"></a>不支持时区设定</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date now = Calendar.getInstance(Locale.CHINA).getTime();</span><br></pre></td></tr></table></figure><p>曾经写过一段这样的代码，取当前的中国时间，被老板臭骂一顿。。。Date的本质是一个时间戳。当前此时此刻，全球任何一个地方的时间戳都是同一个，Date本身不支持时区。PS.本质上这行代码也指定不了时区哦~</p><h3 id="Date是可变的"><a href="#Date是可变的" class="headerlink" title="Date是可变的"></a>Date是可变的</h3><p>Date是一个非常基础底层的类，但它却设计为可变。当我们计算这个data3天后是不是周末，如果程序计算中把这个date加了3天，那么你手上拿着得date也变成了3天后的日期。相比同为底层基础类的String，做得就优秀多了。</p><p><strong>难当大任的Calendar</strong></p><p>JDK刚推出就发现了问题，于是赶紧在1.1版本推出了Calendar，尝试用来解决令人诟病的Date，并将Date一众函数都标记为了deprecated。但Calendar依然是可变对象、最多也只能精确到毫秒、线程不安全、API的使用复杂且笨重等等，Calendar整体而言并没有挽回颓势。</p><p><strong>曙光来临之JSR310</strong></p><p>在聊JSR310之前，不得不先提一提 Joda-Time [7]这个开源Java库。Joda-Time以清晰的API、良好的时区支持、不可变性、强类型化等特性，得到了开发者社区的广泛好评，并在很多项目中被采用，被视为改善Java日期和时间处理的标杆库。Joda-Time如此优秀，Oracle也开启了收编之旅。2013年Java8发布，其中针对日期时间带来一套全新的标准规约 JSR310 [8]，而JSR310的核心制作者就是Joda-Time的作者Stephen Colebourne。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YjRkODRiYWEyNDhhMDVhNDVkYzRlMjdjZDFhMTUxZTlfYWlEdkxHNmlGZnZoODRUM1dRU1ZHd0M5TWJGS3VJamRfVG9rZW46TXlBSWI4RXlvb0o3dHd4SW84ZmNpcHpXbmJoXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>Instant</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/** * The number of seconds from the epoch of 1970-01-01T00:00:00Z. */private final long seconds;/** * The number of nanoseconds, later along the time-line, from the seconds field. * This is always positive, and never exceeds 999,999,999. */private final int nanos;</span><br></pre></td></tr></table></figure><p>Instant这个单词的中文含义是『瞬间』，严格来说Java8之前的Date就应该是现在的Instant。Instant类有维护2个核心字段，当前距离时间纪元的秒数以及秒中的纳秒部分。它指代当前这个时刻，全球任一位置这一时刻都是同一时刻。这一时刻川建国同学在高床软枕打着呼，这一时刻我泡着龙井写着文稿。</p><h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/******************** LocalDate ********************/    /**     * The year.     */    private final int year;    /**     * The month-of-year.     */    private final short month;    /**     * The day-of-month.     */    private final short day;</span><br><span class="line">/******************** LocalTime ********************/    /**     * The hour.     */    private final byte hour;    /**     * The minute.     */    private final byte minute;    /**     * The second.     */    private final byte second;    /**     * The nanosecond.     */    private final int nano;</span><br></pre></td></tr></table></figure><p>LocalDateTime由LocalDate和LocalTime组成，分别日期和时间，以此来解决Date中不能单独表示日期和时间的问题。它们都与时区无关，只客观代表一个无时区的时间，比如2024-12-08 13:46:21，LocalDateTime记录着它的年、月、日、时、分、秒、纳秒。但具体是北京时间的13点还是伦敦时间的13点，由上下文语境自行处理。</p><h3 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h3><p>Duration中文含义译为『期间』，通常用来计算2个时间之前相差的周期，不得不说这一套时间JDK确实定义得语义非常清晰。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Instant startInstant = xxx;Instant endInstant = xxx;Duration.between(startInstant, endInstant).toMinutes();</span><br></pre></td></tr></table></figure><p>这个很好理解，比较2个时间戳时间的相差分钟数。但如果换成LocalDateTime，会是怎样呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime startTime = xxx;LocalDateTime endTime = xxx;Duration.between(startTime, endTime).toMinutes();</span><br></pre></td></tr></table></figure><p>因为LocalDateTime是不带时区的，所以LocalDateTime是不能直接换成成Instant的。而Duration的比较也是不带时区的，或者你可以理解它是把时间放在同一个时区进行比较，来抹去时区的影响。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/********************* JDK Duration.between 部分源码 *******************************/@Overridepublic long until(Temporal endExclusive, TemporalUnit unit) &#123;    LocalDateTime end = LocalDateTime.from(endExclusive);    if (unit instanceof ChronoUnit) &#123;        if (unit.isTimeBased()) &#123;            long amount = date.daysUntil(end.date);            if (amount == 0) &#123;                return time.until(end.time, unit);            &#125;            long timePart = end.time.toNanoOfDay() - time.toNanoOfDay();            if (amount &gt; 0) &#123;                amount--;  // safe                timePart += NANOS_PER_DAY;  // safe            &#125; else &#123;                amount++;  // safe                timePart -= NANOS_PER_DAY;  // safe            &#125;// 余下省略&#125;</span><br></pre></td></tr></table></figure><p>上述是Duration部分源码，它首先计算出2个时间相差多少天，再比较当天的时间里相差多少纳秒，再进行累加。所以你传过来2024-12-08 和 2024-12-04，那就是相差4天，至于是北京时间的12-08还是伦敦时间的12-04，在Duration里都被抹去了时区的概念。 <strong>看到这里，上面的编程题里做对了吗？</strong></p><h3 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h3><p>真正需要使用时区，我们就需要用到ZonedDateTime。「zoned」这个单词在英汉词典中是zone的过去分时，译为『划为区域的』。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 输出：2024-12-08T14:18:32.554144+08:00[Asia/Shanghai]ZonedDateTime defaultZoneTime = ZonedDateTime.now(); // 默认时区// 输出：2024-12-08T01:18:32.560931-05:00[America/New_York]ZonedDateTime usZoneTime = ZonedDateTime.now(ZoneId.of(&quot;America/New_York&quot;)); // 用指定时区获取当前时间</span><br></pre></td></tr></table></figure><p>因为LocalDateTime是没有时区的，如果我们需要将LocalDateTime转成ZonedDateTime，就需要带上时区信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.of(2024, 12, 8, 14, 21, 17);ZonedDateTime zonedDateTime = localDateTime.atZone(ZoneId.systemDefault());ZonedDateTime usZonedDateTime = localDateTime.atZone(ZoneId.of(&quot;America/New_York&quot;));</span><br></pre></td></tr></table></figure><p>随着JDK不断地发布演进，Time模块确实得到了质的提升，这里不一一细说Java日期时间相关API。如果你还在苦于对Date做各种Utils的花式包装，请拥抱java.time吧。</p><p>时间日期引起的惨案</p><p><strong>夏令时与冬令时</strong></p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MjFlNzJjNzJjYTZlNjE0Mzk4ZDZmNWE5ZmYwMWNjN2ZfMnlvTHVMVmtlZGs0d2pROUh4ZWtaZ0pOVXFsTTdvdEJfVG9rZW46VDdLR2JRRHo3b0ZYS3N4ZEtVT2NReHA0bkZkXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>曾经小A做了一个鉴权系统，用于对请求做加密解密，保证每一次都是真实合法有效的接口请求。其中做了一个判定，如果请求的时间距现在已经超过10分钟，就会拒绝该次请求。从逻辑上来说，这很合理，但问题的雪崩却出现在3月的那个晚上。。。</p><h3 id="什么是夏令时"><a href="#什么是夏令时" class="headerlink" title="什么是夏令时"></a>什么是夏令时</h3><p>夏令时[9]又称夏时制，英文原文为Daylight Saving Time，从名字上可以看出，夏令时诞生的背景是为了更好的利用白天的时间。夏令时概念的提出最早可以追溯到1895年，新西兰昆虫学家乔治·哈德逊向惠灵顿哲学学会提出，提前2小时的日光节约提案，以此在工作结束后，可以获得多出一段的白昼时间。</p><p>具体夏令时的实施，以美国为例，美国会在每年3月的第二个星期日的凌晨2:00，时钟会往前调1个小时变为3:00。再在每年11月的第一个星期日的凌晨2:00，将时钟在往后调1个小时变成1:00，此时的回拨也被称为“冬令时”。</p><h3 id="夏令时实施的国家与地区"><a href="#夏令时实施的国家与地区" class="headerlink" title="夏令时实施的国家与地区"></a>夏令时实施的国家与地区</h3><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NWVkOGM1MDRjNDE5ZjU0MzNjNjAyYzkzYzA5NzljMTlfbWN5VVN4emdwWEw2WHhwbkhMYlZieUdxSWVkbkN3TFNfVG9rZW46RHVKcWJXR3VPb0FpcjZ4QVlFT2M2eFFBbjNkXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><blockquote><p>蓝色为正在实施夏令时的国家和地区 灰色为曾经实施但现在已经取消夏令时的国家和地区 黑色为从未实施夏令时的过去和地区</p></blockquote><p>1916年4月30日，德国与奥匈帝国成为世界上第一组实施夏时制的国家，目的是为了能在战争期间节约煤炭消耗。在1970年代，由于美洲与欧洲地区也受到能源危机影响，至此夏令时开始广泛被实施。当下全球有共约70多个国家和时区在使用夏令时，我国也曾短暂使用过夏令时，但因节约能源效果不显著，以及对日常生活工作等带来的一些影响，到1992年全国宣布取消夏令时。</p><p><strong>闰年与闰秒</strong></p><p>2008年是闰年存在2月29日，但微软一些软件在处理部分任务的时候会因为闰年导致处理错误。微软甚至在SQL Server 2008 CTP发布后曾经宣读了一份证明，建议用户不要在2月29日安装和运行软件，以减少影响。并且在Windows Small Business Server上还会出现更严重的错误：因为在微软的日历里根本没那么一天，因此就无法颁发证书。</p><h3 id="为什么要闰年"><a href="#为什么要闰年" class="headerlink" title="为什么要闰年"></a>为什么要闰年</h3><p>闰年大家比较熟悉，闰年的设置是为了使日历年与太阳年（即地球绕太阳公转一周的时间）更精准地一致。严格来说地球绕太阳一圈的时间，大约是365.2422天。经过大约四年，累计误差将接近一天（0.2422 * 4 ≈ 0.9688天），但如果每4年就加1天，这样每128年又会多算出1天。所以基于此定义出了普通闰年与世纪闰年。</p><ul><li>普通闰年：公历年份是4的倍数，且不是100的倍数的，为闰年（如2004年、2020年等就是闰年）。</li><li>世纪闰年：公历年份是整百数的，必须是400的倍数才是闰年（如1900年不是闰年，2000年是闰年）。</li></ul><h3 id="为什么要闰秒"><a href="#为什么要闰秒" class="headerlink" title="为什么要闰秒"></a>为什么要闰秒</h3><p>闰秒[10]本质上和闰年的作用是一样的，也是解决时间解释运动中所存在的偏差。闰秒的调整是为了确保协调世界时（UTC）与地球自转时间（UT1）[11]保持一致。由于地球自转速度的不均匀性和减慢，UTC需要定期添加或删除一秒钟来进行调整，这一秒钟称为“闰秒”。</p><p>国际地球自转与参考系统服务（IERS）是负责监测和发布闰秒调整的机构。ERS会根据地球自转的实际变化和测量数据，决定是否需要调整闰秒。闰秒通常在6月30日或12月31日的最后一秒添加或删除。这意味着在某些年份，时间序列可能会变为：23:59:59 → 23:59:60 → 00:00:00。</p><p>写在最后</p><p>『存在不一定合理，但一定有原因』这是曾经我的主管跟我说的，至今我也受益其中。对所有事情怀有一丝怀疑心态，搞懂它的前世今生，或许它不那么合理，但至少当时这样做解决了一定的问题，我们在做新设计的时候可以提前考虑与规避。水多了加面，面多了加水，如果我们只是看到当下的混乱就指着“前人”没有设计思想没有技术匠心，却不了解最初“前人”这样做的意图与背景，骂着“前人”的我们终有一天也会成为后人眼中的“前人”。</p><p><strong>参考链接：</strong> </p><p>[1]<a href="https://en.wikipedia.org/wiki/Unix_time">https://en.wikipedia.org/wiki/Unix_time</a></p><p>[2]<a href="https://baike.baidu.com/item/%E4%B8%96%E7%95%8C%E6%97%B6/692237">https://baike.baidu.com/item/世界时/692237</a></p><p>[3]<a href="https://www.timeanddate.com/time/zones/">https://www.timeanddate.com/time/zones/</a></p><p>[4]<a href="https://www.utctime.net/">https://www.utctime.net/</a></p><p>[5]<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E9%92%9F/765460">https://baike.baidu.com/item/原子钟/765460</a></p><p>[6]<a href="https://baike.baidu.com/item/%E9%97%B0%E7%A7%92">https://baike.baidu.com/item/闰秒</a></p><p>[7]<a href="https://www.joda.org/joda-time/">https://www.joda.org/joda-time/</a></p><p>[8]<a href="https://jcp.org/en/jsr/detail">https://jcp.org/en/jsr/detail</a></p><p>[9]<a href="https://baike.baidu.com/item/%E5%A4%8F%E4%BB%A4%E6%97%B6/1809579">https://baike.baidu.com/item/夏令时/1809579</a></p><p>[10]<a href="https://baike.baidu.com/item/%E9%97%B0%E7%A7%92/696742">https://baike.baidu.com/item/闰秒/696742</a></p><p>[11]<a href="https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E6%97%B6">https://zh.wikipedia.org/wiki/世界时</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载链接:  &lt;a href=&quot;https://mp.weixin.qq.com/s?src=11&amp;timestamp=1736572324&amp;ver=5743&amp;signature=PJXVw3zvmhLrj*-*Mp3vngu7NlHlvoQoyS-WWdLwf0niEjg</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>多线程下使用threadlocal隐藏问题</title>
    <link href="https://imlike.cc/858923fa.html"/>
    <id>https://imlike.cc/858923fa.html</id>
    <published>2025-01-04T09:24:13.000Z</published>
    <updated>2025-06-21T00:51:44.755Z</updated>
    
    <content type="html"><![CDATA[<p>通过 <code>ThreadLocal</code> 来存储 <code>FixedAccessModel</code>。这种设计在简单场景下或许可行，但在复杂的多线程环境（尤其是使用线程池时）中存在着一系列隐藏的风险。对应的优化建议。</p><h4 id="一、ThreadLocal-在多线程环境下的潜在问题"><a href="#一、ThreadLocal-在多线程环境下的潜在问题" class="headerlink" title="一、ThreadLocal 在多线程环境下的潜在问题"></a><strong>一、<code>ThreadLocal</code> 在多线程环境下的潜在问题</strong></h4><ol><li><p><strong>数据污染 (Data Contamination in Thread Pools)</strong></p><ul><li><strong>问题描述</strong>: 在线程池架构中，核心线程是可复用的。如果一个请求处理结束后未清理其 <code>ThreadLocal</code> 变量，那么当该线程被分配给下一个新请求时，新请求会读取到上一个请求遗留的脏数据。</li><li><strong>根本原因</strong>: <code>ThreadLocal</code> 的生命周期与线程相同，而非与请求相同。线程不销毁，数据不清空。</li></ul></li><li><p><strong>内存泄漏 (Memory Leaks)</strong></p><ul><li><strong>问题描述</strong>: 未被显式移除的 <code>ThreadLocal</code> 变量，尤其是在线程池的长生命周期线程中，会导致其引用的对象（<code>FixedAccessModel</code>）无法被垃圾收集器（GC）回收，从而引发内存泄漏。</li><li><strong>风险场景</strong>: 在高并发、长时间运行的服务中，此类内存泄漏会逐渐累积，最终可能导致服务内存溢出（OOM）。</li></ul></li><li><p><strong>上下文继承失效 (Context Propagation Failure)</strong></p><ul><li><strong>问题描述</strong>: 原生的 <code>ThreadLocal</code> 不支持父子线程间的数据传递。虽然 <code>InheritableThreadLocal</code> 提供了基本的继承能力，但在涉及线程池的异步任务调度（例如，<code>ExecutorService.submit()</code>）时，它同样无法保证线程上下文的正确传递。</li></ul></li><li><p><strong>非线程安全的对象引用 (Non-Thread-Safe Object Reference)</strong></p><ul><li><strong>问题描述</strong>: <code>ThreadLocal</code> 仅保证了 <code>FixedAccessModel</code> 这个 <em>引用</em> 的线程隔离，但并不保证 <code>FixedAccessModel</code> 对象本身的线程安全性。如果该对象的内部状态是可变的（Mutable），并且在多处被非原子性地操作，依然会产生线程安全问题。</li></ul></li></ol><p><img src="../img/threadlocal_desc.png" alt="img"></p><p><img src="../img/thread_local_eval.png" alt="img"></p><p><img src="../img/thread_lcoal_save.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过 &lt;code&gt;ThreadLocal&lt;/code&gt; 来存储 &lt;code&gt;FixedAccessModel&lt;/code&gt;。这种设计在简单场景下或许可行，但在复杂的多线程环境（尤其是使用线程池时）中存在着一系列隐藏的风险。对应的优化建议。&lt;/p&gt;
&lt;h4 id=&quot;一、Thr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构算法学习</title>
    <link href="https://imlike.cc/bd9e5f3c.html"/>
    <id>https://imlike.cc/bd9e5f3c.html</id>
    <published>2025-01-04T09:14:19.000Z</published>
    <updated>2025-06-21T00:26:07.743Z</updated>
    
    <content type="html"><![CDATA[<p>数据是开发的基础是计算机类学科必学的科目之一,,但是数据结构比较抽象,有时候结合了算法更加是会让人头大,在学习过程中避免不了手搓,虽然可以 debug 来观察验证,但是不是可视化,</p><p>这个网站可以可视化的演示数据插入的过程 <a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualization</a></p><p>同时对于算法可以通过这个网站来学习 <a href="https://www.hello-algo.com/">Hello 算法</a></p><p>如果要系统学习 java 相关的开发知识推荐下面几个网站</p><p>   <a href="https://pdai.tech/md/arch/arch-z-transection.html">分布式系统 - 分布式事务及实现方案 | Java 全栈知识体系</a></p><p><a href="https://www.xiaolincoding.com/">小林coding</a></p><p>上面的网站涉及到 计算机基础,计算机网络,算法和数据结构,以及对于介绍,方方面面,设计模式和分布式的相关算法也有介绍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据是开发的基础是计算机类学科必学的科目之一,,但是数据结构比较抽象,有时候结合了算法更加是会让人头大,在学习过程中避免不了手搓,虽然可以 debug 来观察验证,但是不是可视化,&lt;/p&gt;
&lt;p&gt;这个网站可以可视化的演示数据插入的过程 &lt;a href=&quot;https://ww</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker构建镜像优化(转发)</title>
    <link href="https://imlike.cc/feb89734.html"/>
    <id>https://imlike.cc/feb89734.html</id>
    <published>2024-12-30T05:32:21.000Z</published>
    <updated>2025-01-12T06:11:42.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【提效】docker镜像构建优化-提速10倍"><a href="#【提效】docker镜像构建优化-提速10倍" class="headerlink" title="【提效】docker镜像构建优化-提速10倍"></a>【提效】docker镜像构建优化-提速10倍</h1><p><a href="https://mp.weixin.qq.com/s/qU6dSiMuH7xDHhTDCcLMhw">【提效】docker镜像构建优化-提速10倍</a></p><p>本文主要记录了自己通过查阅相关资料，一步步排查问题，最后通过优化Docerfile文件将docker镜像构建从十几分钟降低到1分钟左右，效率提高了10倍左右。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>一、概述</p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><p>最近在开发python应用程序，在部署应用的时候发现构建镜像过程十分缓慢，极大影响开发效率。既然遇到了问题就不要逃避，而应该尝试解决一下。本文主要记录了自己通过查阅相关资料，一步步排查问题，最后通过优化Docerfile文件将docker镜像构建从十几分钟降低到1分钟左右，效率提高了10倍左右。</p><p>本文通过如下几个部分进行介绍：</p><ul><li>现状：简单介绍一下未优化前的情况；</li><li>优化效果：简单介绍优化后的情况；</li><li>分析过程：介绍如何分析镜像构建存在的问题；</li><li>优化过程：介绍如何通过优化Dockerfile提高镜像构建效率；</li><li>优化总结：最后总结镜像构建的几个优化方法；</li></ul><p>通过本文的学习，你将有如下收获：</p><p>1.了解镜像构建优化的过程。</p><p>2.了解一些常用的镜像构建优化的技巧。</p><p>二、优化前效果</p><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwW7EbabdqX5mRpjowC1SSoQFWuRrO78UnRuibr3MuibmyGMsaF56xuBeg/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>未优化前可以看到镜像构建耗时<strong>16分钟</strong>，构建完成后<strong>镜像大小约8G</strong>，使用的Dockerfile文件如下：</p><ul><li></li><li></li><li></li><li></li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM reg.docker.alibaba-inc.com&#x2F;aci-images&#x2F;python-service:3.8.0-63928922</span><br><span class="line"># init folderRUN mkdir -p &#x2F;home&#x2F;admin&#x2F;logs &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;bin &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;conf &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;nginx &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;.maxhub&#x2F;env_helper_util&#x2F;zeta-local-env</span><br><span class="line"># install zetaRUN pushd &#x2F;home&#x2F;admin&#x2F;.maxhub&#x2F;env_helper_util&#x2F;zeta-local-env &amp;&amp; \    wget https:&#x2F;&#x2F;artifacts.antgroup-inc.cn&#x2F;artifact&#x2F;repositories&#x2F;softwares-common&#x2F;antcode&#x2F;zeta&#x2F;0.7.9&#x2F;zeta-linux-amd64-0.7.9.sh -O zeta-release.sh &amp;&amp; \    chmod +x zeta-release.sh &amp;&amp; \    .&#x2F;zeta-release.sh --prefix&#x3D;&#x2F;usr&#x2F;local &amp;&amp; \    popd</span><br><span class="line"># init env and install softwareCOPY conf&#x2F;docker&#x2F;build.yaml &#x2F;root&#x2F;RUN python3.10 -m pip install -U antimgbuilder -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple &amp;&amp; \    python3.10 -m antimgbuilder --config-file &#x2F;root&#x2F;build.yaml</span><br><span class="line"># copy source file# COPY --chown&#x3D;admin:admin mydemo &#x2F;home&#x2F;admin&#x2F;release&#x2F;mydemoCOPY --chown&#x3D;admin:admin aml_core &#x2F;home&#x2F;admin&#x2F;release&#x2F;aml_coreCOPY --chown&#x3D;admin:admin backend &#x2F;home&#x2F;admin&#x2F;release&#x2F;backend</span><br><span class="line"># install  requirements.txtCOPY --chown&#x3D;admin:admin requirements.txt &#x2F;home&#x2F;admin&#x2F;release&#x2F;RUN python3.10 -m venv &#x2F;home&#x2F;admin&#x2F;run &amp;&amp; \    . &#x2F;home&#x2F;admin&#x2F;run&#x2F;bin&#x2F;activate &amp;&amp; \    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple-remote --upgrade pip &amp;&amp;\    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple -r &#x2F;home&#x2F;admin&#x2F;release&#x2F;requirements.txt</span><br><span class="line"># copy scriptsCOPY --chown&#x3D;admin:admin conf&#x2F;docker&#x2F;scripts&#x2F;admin &#x2F;home&#x2F;adminCOPY --chown&#x3D;admin:admin conf&#x2F;nginx &#x2F;home&#x2F;admin&#x2F;nginx</span><br><span class="line"># 最后确保admin目录下文件权限RUN chown admin:admin -R &#x2F;home&#x2F;admin</span><br><span class="line">RUN chmod a+xw &#x2F;home&#x2F;admin&#x2F;bin&#x2F;fetch_ollama.sh &#x2F;tmp</span><br></pre></td></tr></table></figure><p>三、优化后效果</p><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw1wFLaW9SpAdIcXPo8ZIRPiay3lictqcSibtv8dib7cuGDXiaqdKZEluRhLw/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>优化后可以看到镜像构建时间为1分钟左右，镜像大小约5G，使用的Dockerfile如下：</p><ul><li></li><li></li><li></li><li></li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 第一阶段：下载依赖FROM reg.docker.alibaba-inc.com&#x2F;antfin-sqa&#x2F;amlregservermodel-dev:20241016125401_b0296dab as builder</span><br><span class="line"># install  requirements.txtCOPY --chown&#x3D;admin:admin requirements.txt &#x2F;home&#x2F;admin&#x2F;release&#x2F;RUN python3.10 -m venv &#x2F;home&#x2F;admin&#x2F;run &amp;&amp; \    . &#x2F;home&#x2F;admin&#x2F;run&#x2F;bin&#x2F;activate &amp;&amp; \    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple-remote --upgrade pip &amp;&amp;\    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple -r &#x2F;home&#x2F;admin&#x2F;release&#x2F;requirements.txt --no-cache-dir</span><br><span class="line"></span><br><span class="line"># 第二阶段：构建应用程序镜像FROM reg.docker.alibaba-inc.com&#x2F;aci-images&#x2F;python-service:3.8.0-63928922</span><br><span class="line"># init folderRUN mkdir -p &#x2F;home&#x2F;admin&#x2F;logs &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;bin &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;conf &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;nginx &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;.maxhub&#x2F;env_helper_util&#x2F;zeta-local-env</span><br><span class="line"># install zetaRUN pushd &#x2F;home&#x2F;admin&#x2F;.maxhub&#x2F;env_helper_util&#x2F;zeta-local-env &amp;&amp; \    wget https:&#x2F;&#x2F;artifacts.antgroup-inc.cn&#x2F;artifact&#x2F;repositories&#x2F;softwares-common&#x2F;antcode&#x2F;zeta&#x2F;0.7.9&#x2F;zeta-linux-amd64-0.7.9.sh -O zeta-release.sh &amp;&amp; \    chmod +x zeta-release.sh &amp;&amp; \    .&#x2F;zeta-release.sh --prefix&#x3D;&#x2F;usr&#x2F;local &amp;&amp; \    rm -f zeta-release.sh &amp;&amp; \    popd</span><br><span class="line"># install virtualenv and uvicornRUN python3.10 -m venv &#x2F;home&#x2F;admin&#x2F;run &amp;&amp; \    . &#x2F;home&#x2F;admin&#x2F;run&#x2F;bin&#x2F;activate &amp;&amp; \    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple-remote --upgrade pip &amp;&amp;\    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple uvicorn --no-cache-dir</span><br><span class="line"># init env and install softwareCOPY conf&#x2F;docker&#x2F;build.yaml &#x2F;root&#x2F;RUN python3.10 -m pip install -U antimgbuilder -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple &amp;&amp; \    python3.10 -m antimgbuilder --config-file &#x2F;root&#x2F;build.yaml</span><br><span class="line"></span><br><span class="line"># copy scriptsCOPY --chown&#x3D;admin:admin conf&#x2F;docker&#x2F;scripts&#x2F;admin &#x2F;home&#x2F;adminCOPY --chown&#x3D;admin:admin conf&#x2F;nginx &#x2F;home&#x2F;admin&#x2F;nginxCOPY --chown&#x3D;admin:admin aml_core &#x2F;home&#x2F;admin&#x2F;release&#x2F;aml_core</span><br><span class="line">RUN chmod a+xw &#x2F;home&#x2F;admin&#x2F;bin&#x2F;fetch_ollama.sh &#x2F;tmp</span><br><span class="line"># 从第一阶段复制下载的依赖到第二阶段COPY --from&#x3D;builder &#x2F;home&#x2F;admin&#x2F;run&#x2F;lib&#x2F;python3.10&#x2F;site-packages&#x2F; &#x2F;home&#x2F;admin&#x2F;run&#x2F;lib&#x2F;python3.10&#x2F;site-packages&#x2F;</span><br><span class="line"># copy source fileCOPY --chown&#x3D;admin:admin backend &#x2F;home&#x2F;admin&#x2F;release&#x2F;backend</span><br></pre></td></tr></table></figure><p>四、分析过程</p><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><p><strong>4.1. 镜像构建耗时分析</strong></p><h2 id="-5"><a href="#-5" class="headerlink" title=""></a></h2><p>分析优化前的镜像构建构成，找到最耗时的阶段，进入镜像构建任务详情页：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwBibgLcwtI0kj8ZU4XHMchicORhOS6JoHprzA6XH6Vq1QhyOR2Mrwl1icw/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>点击 image-build-3 找到耗时最长的指令：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwyZicC9BnblubsjmQUFXTDCm4sf6CERD2icG3EWoVkyibI8GJ3rLRpiboXg/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>可以看到在指令：</p><p>COPY –chown=admin:admin conf/docker/scripts/admin /home/admin</p><p>的前一步耗时达到了 10 分钟左右，对照着 Dockerfile 文件可以看到，是下面下载依赖比较耗时。</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw5j5Ce8cib0UoKXtmGyGgvb6rn6jXvTOd7EasIvbbEcPsibHq1EI64Z3Q/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>由于构建出来的镜像比较大，导致推送镜像耗时约：4分钟</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwKE4kQVC1dAycm4RwMRNQ8ubfniaFTGHNvxsXeZuW6y5gDYybiblhMqlQ/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>镜像构建耗时分析总结：</p><p>1.从构建的日志中可以看到是下载依赖比较耗时约：10 分钟。</p><p>2.并且前面的指令缓存失效， 则随后指令构建的镜像都不再使用缓存导致耗时增加。</p><p>3.构建出来的镜像比较大，导致推送镜像耗时约：4分钟。</p><p><strong>4.2. 镜像构建体积较大分析</strong></p><h2 id="-6"><a href="#-6" class="headerlink" title=""></a></h2><p>从前面的Dockfile文件中可以看到，使用的基础镜像是：</p><p>reg.docker.alibaba-inc.com/aci-images/python-service:3.8.0-63928922，拉取该镜像，查看基础镜像的体积：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwf6aF8M9Fg6zgZ9ljzzWOiclxrV0OCHwryGq56uCZ2by0kHOyCOcnG2w/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>可以看到该镜像的大小是：2.33G</p><p>我们进入Docker容器，查看下载依赖的大小以及缓存的大小，下载依赖的缓存目录一般是 /root/.cache/pip：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw6EQnRfL2L6wevSWBcnibeaEF5Mib3yiaK6xkXPpU6Anqb8IaiaUnzTiak3Q/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>镜像构建体积较大分析总结：</p><p>1.基础镜像体积较大：2.33G。</p><p>2.安装的依赖较大，并且下载依赖时默认开启了缓存，导致占用更多的内存空间约：3.1G（包括下载的依赖和缓存占用：2.6G + 729M ）。</p><blockquote><p>为什么使用 pip install 安装依赖时没有添加 –no-cache-dir 参数会导致占用的内存更多？</p><p>如果在使用 pip install 安装依赖时没有添加 –no-cache-dir 参数，会导致缓存目录中的文件不断增加，占用更多的内存空间。每次使用 pip install 安装依赖时，pip 会默认将下载的依赖包保存在缓存目录 /root/.cache/pip 中，如果没有添加 –no-cache-dir 参数，pip 会在安装依赖时从缓存目录中检查已有的依赖包，如果有相同的包就会直接使用缓存中的包，而不是重新下载。因此，随着时间的推移，缓存目录中会存放越来越多的依赖包，占用更多的内存空间。</p><p>为了避免占用更多的内存空间，可以在使用 pip install 安装依赖时添加 –no-cache-dir 参数，这样将禁用缓存，使得每次安装依赖都会重新下载依赖包，从而避免占用更多的内存空间。</p></blockquote><p><strong>4.3. 使用 docker history 分析</strong></p><h2 id="-7"><a href="#-7" class="headerlink" title=""></a></h2><p>接下来我们使用 docker history 进行分析。</p><p>docker history ：用于查看 Docker 镜像的构建历史，显示每一层的提交信息，包括镜像 ID、创建人、创建时间和指令。这个命令可以帮助用户理解镜像是如何构建的，了解每个操作对镜像大小的影响，以及对镜像进行优化和精简。通过查看镜像的构建历史，用户可以更好地理解和管理镜像，提高镜像的性能和安全性。</p><p>下载镜像到本地或者在本地构建未优化的Dockerfile镜像，使用下面的命令构建镜像：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f conf&#x2F;docker&#x2F;Dockerfile  -t amlservermodel:latest .</span><br></pre></td></tr></table></figure></li></ul><p>使用下面的命令分析镜像，可以看到各个操作对镜像大小的影响如下：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history amlservermodel:latest</span><br></pre></td></tr></table></figure></li></ul><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwQ9lwO3KffE9KfhTN0IINiakS1Xe2v9BnZicEGIvpWCBWm62hn2BQD6eQ/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>使用 docker history 分析镜像总结，占用镜像体积较大的两个层是：</p><p>1.下载依赖占用约：3.18G（包括下载的依赖和缓存）。</p><p>2.给目录设置权限：</p><blockquote><p>在构建docker镜像时，Dockerfile文件中使用指令：RUN chown admin:admin -R /home/admin，为什么会导致镜像体积变大？</p><p>这条指令会导致镜像体积变大的原因是，每一条指令在Dockerfile中都会创建一个新的镜像层。当在Dockerfile中使用RUN chown命令时，会创建一个新的镜像层，其中包含了文件权限的更改。这意味着原本的文件和目录仍然存在于之前的镜像层中，而新的镜像层只是在其基础上进行了更改。因此，即使在新的镜像层中删除了一些文件或更改了文件权限，但之前的镜像层仍然包含了这些文件，导致镜像体积变大。</p><p>为了避免镜像体积变大，可以在Dockerfile中尽量减少使用RUN指令，或者在同一条RUN指令中一次性执行多个操作，以减少创建的镜像层数。也可以在构建镜像的过程中清理不必要的文件和缓存，以减小镜像的体积。</p></blockquote><p>五、优化过程</p><h1 id="-8"><a href="#-8" class="headerlink" title=""></a></h1><p><strong>5.1. 优化方案</strong></p><h2 id="-9"><a href="#-9" class="headerlink" title=""></a></h2><p>在进行优化之前，我们需要了解一些docker镜像的构建原则：</p><h3 id="5-1-1-动静分离原则"><a href="#5-1-1-动静分离原则" class="headerlink" title="5.1.1. 动静分离原则"></a>5.1.1. 动静分离原则</h3><p>我们应该把变化最少的部分放在 Dockerfile 的前面，这样可以充分利用镜像缓存。</p><p>1.每条指令只要前面的指令缓存失效， 则随后指令构建的镜像都不再使用缓存。</p><p>2.对应COPY和ADD文件会检验文件的校验和， 如果发现改变则缓存失效。</p><h3 id="5-1-2-多阶段构建"><a href="#5-1-2-多阶段构建" class="headerlink" title="5.1.2. 多阶段构建"></a>5.1.2. 多阶段构建</h3><p>Docker多阶段构建镜像的原理是利用多个Docker容器来处理不同的构建阶段，并将最终构建产物传递给下一个容器。每个阶段可以定义自己的基础镜像、依赖和构建执行环境，使得镜像的构建过程更加灵活和高效。</p><p>多阶段构建镜像可以降低最终镜像的体积的原因包括以下几点：</p><p>1.优化构建产物：多阶段构建可以在不同的阶段处理不同的构建任务，比如编译、打包、测试等，从而避免将构建产物暴露给最终镜像，减小了最终镜像的体积。</p><p>2.移除构建环境：多阶段构建可以将构建时用到的工具、依赖等移除，只将必要的产物传递到最终镜像中，避免了构建环境对最终镜像的影响，减小了最终镜像的体积。</p><p>3.优化基础镜像：多阶段构建可以根据需要选择不同的基础镜像，每个阶段可以选择适合自己需求的基础镜像，从而避免了不必要的依赖和工具被打包到最终镜像中，减小了最终镜像的体积。</p><p>综上所述，多阶段构建镜像可以将构建过程分解成多个阶段，根据需要进行优化，避免了不必要的依赖和工具被打包到最终镜像中，从而降低了最终镜像的体积。</p><p><strong>5.2. 优化分析</strong></p><h2 id="-10"><a href="#-10" class="headerlink" title=""></a></h2><p>通过前面的分析，我们做出如下优化：</p><h3 id="5-2-1-构建耗时优化"><a href="#5-2-1-构建耗时优化" class="headerlink" title="5.2.1. 构建耗时优化"></a>5.2.1. 构建耗时优化</h3><p>通过多阶段构建的方式，可以并行的处理不同阶段的构建，只将必要的产物传递到最终镜像，为了提高下载依赖的效率，我们还可以将项目中使用的依赖提前下载好，构建在第一阶段或者基础镜像中，避免每次重新下载全部依赖。我的优化方案如下：</p><p>使用多阶段构建，第一阶段下载依赖，第二阶段构建应用程序镜像。</p><p>对于第一阶段下载依赖，我将应用程序需要的依赖构建在基础镜像中，避免重新下载全部依赖，如果依赖文件 requirements.txt有变化，则会重新下载依赖，并且和第二阶段的构建是并行进行，任然是可以提高构建效率的，我的修改如下：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw6ibUJ9WCfrMm6uhGtWmaqGCIDfSsXTicELPBKIxYc02zzDbtfmKjkSdw/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>最后将下载的依赖从第一阶段复制到第二阶段，因为应用程序会频繁修改，所以将应用程序的代码放在了Dockerfile文件的最后，将不经常变化的内容放在Dockerfile文件前面，可以充分利用镜像的缓存提高效率，修改后的Dockerfile文件如下：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw4ricI85f1LicDrJ8oIXlsIRZGfId681icMLtHWphmiaOLOwnD8AUIhPXqw/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>我们查看优化后的构建过程如下：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw2HdfcwLP5SYvyUdWPK7Tz02zQTcHVR93wickBHT5ic9xOEee5KAs7Nzw/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><h3 id="5-2-2-镜像体积优化"><a href="#5-2-2-镜像体积优化" class="headerlink" title="5.2.2. 镜像体积优化"></a>5.2.2. 镜像体积优化</h3><p>针对前面的分析，当前案例中镜像体积较大的原因有如下几点：</p><p>1.基础镜像较大；</p><p>2.安装的依赖较大，并且开启了缓存；</p><p>3.使用RUN chown 指令导致镜像较大；</p><p>4.由于镜像构建中发现有很多指令，构建了很多层，导致镜像体积变大；</p><p>针对的优化方案</p><p>1.基础镜像较大我们可以选择较小的基础镜像，可以在 蚂蚁的基础镜像中查找对应的基础镜像；</p><p>2.安装依赖时使用 pip install –no-cache-dir 关闭缓存；</p><p>3.移除 RUN chown指令，因为在这里可以针对特定的文件或者文件夹指定就行，不需要对所有的目录修改权限；</p><p>4.合并多个RUN指令，减少镜像的层数，进而减少镜像的体积；</p><p>最后通过针对性的优化，镜像体积减小到原来的一半，本来想找一个体积更小的基础镜像，但是在基础镜像库中没有找到合适的版本，并且通过前面的一系列优化，镜像的构建时间以及可以达到秒级了，所以后续有需要再自定义一个合适的基础镜像。﻿</p><p>六、构建缓存失效</p><h1 id="-11"><a href="#-11" class="headerlink" title=""></a></h1><p>构建镜像时，Docker 会逐步执行 Dockerfile 中的指令，并按指定的顺序执行每条指令。对于每条指令， 构建器都会检查是否可以重用构建缓存中的指令。</p><p><strong>6.1. 一般规则</strong>﻿</p><h2 id="-12"><a href="#-12" class="headerlink" title=""></a></h2><p>构建缓存失效的基本规则如下：</p><ul><li>构建器首先检查基础镜像是否已缓存。随后的每个指令都会与缓存的层进行比较，如果没有缓存的层与指令完全匹配，则缓存将失效。</li><li>在大多数情况下，将 Dockerfile 指令与相应的缓存层进行比较就足够了，但是有些指令需要额外的检查和解释。</li><li>对于ADD和COPY指令以及RUN带有绑定挂载的指令（RUN –mount=type=bind），构建器会根据文件元数据计算缓存校验和，以确定缓存是否有效。在缓存查找期间，如果涉及的任何文件的文件元数据发生更改，则缓存将失效。计算缓存校验和时不考虑文件的修改时间（mtime），如果只有复制的文件的 mtime发生了更改，则缓存不会失效。</li><li>除了ADD和COPY命令之外，缓存检查不会查看容器中的文件来确定缓存匹配。例如，在处理命令时，RUN apt-get -y update不会检查容器中更新的文件来确定是否存在缓存命中。在这种情况下，只使用命令字符串本身来查找匹配项。</li></ul><p>一旦缓存失效，所有后续的 Dockerfile 命令都会生成新的图像，并且不会使用缓存。</p><p>如果构建的镜像包含多个层，并且想要确保构建缓存可重复使用，请尽可能按从更改频率较低的顺序排列指令。</p><p><strong>6.2. RUN 指令</strong>﻿</p><h2 id="-13"><a href="#-13" class="headerlink" title=""></a></h2><p>指令缓存RUN不会在构建之间自动失效。假设您的 Dockerfile 中有一步要安装curl：</p><ul><li></li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.20 AS installRUN apk add curl</span><br></pre></td></tr></table></figure><p>这并不意味着curl在镜像中的版本始终是最新的，一周后重建镜像仍将获得与之前相同的软件包，如果要强制重新执行该RUN指令，可以：</p><ul><li>确保之前的一个层已经改变；</li><li>使用以下方法在构建之前清除构建缓存 docker builder prune﻿；</li><li>使用–no-cache或–no-cache-filter选项；</li></ul><p>该–no-cache-filter选项允许您指定特定的构建阶段以使缓存无效：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build --no-cache-filter install .</span><br></pre></td></tr></table></figure></li></ul><p>如果要使RUN指令的缓存失效，可以传递一个构建参数，该参数带有变化的值，构建参数确实会导致缓存失效，因为RUN指令是<strong>使用命令字符串本身来查找匹配缓存的。</strong></p><p>七、优化总结</p><h1 id="-14"><a href="#-14" class="headerlink" title=""></a></h1><p>要对镜像进行优化和精简，你可以采取以下步骤：</p><p>1.使用多阶段构建：使用多阶段构建可以减少镜像的大小，因为你可以在不同的镜像中执行不同的构建步骤，并在最终镜像中只保留必要的文件和依赖。</p><p>2.清理不需要的文件和依赖：在Dockerfile中，你可以使用一系列命令来清理不需要的文件和依赖，例如使用rm命令删除不需要的文件，使用–no-cache选项来清理缓存等。</p><p>3.使用轻量的基础镜像：选择一个轻量的基础镜像作为你的镜像的基础，这样可以减少镜像的大小。</p><p>4.合并镜像层：在Dockerfile中，你可以使用多个命令来合并多个操作，这样可以减少镜像的层数和大小。</p><p>5.我们应该把变化最少的部分放在 Dockerfile 的前面，将经常变化的内容放在最后面，这样可以充分利用镜像缓存。</p><p>通过以上步骤，你可以对镜像进行优化和精简，减少其大小并提高性能。</p><p>Dockerfile 编码规约：</p><table><thead><tr><th>规约项</th><th>Level</th><th>说明</th></tr></thead><tbody><tr><td>Dockerfile指令不应超过20条</td><td>WARN</td><td>层数过多</td></tr><tr><td>不应该超过3条连续RUN命令</td><td>WARN</td><td>层数过多</td></tr><tr><td>CMD/ENTRYPOINT/EXPOSE/LABEL指令位置应在COPY/RUN之前</td><td>INFO</td><td>动静分离原则</td></tr><tr><td>RUN 指令应在COPY主包指令之前</td><td>ERROR</td><td>动静分离原则</td></tr><tr><td>RUN yum指令后应以yum clean all收尾</td><td>WARN</td><td>最小原则</td></tr><tr><td>RUN pip install应该加–no-cache-dir参数</td><td>ERROR</td><td>最小原则</td></tr><tr><td>RUN npm install指令应加–no-cache参数</td><td>ERROR</td><td>最小原则</td></tr><tr><td>单层镜像最大的编译时间不应超过80秒</td><td>WARN</td><td>构建效率过低</td></tr><tr><td>单层镜像体积不应超过500M</td><td>WARN</td><td>最小原则</td></tr><tr><td>构建时发生变化的层不应该超过3层</td><td>INFO</td><td>动静分离</td></tr><tr><td>base镜像体积不应超过2G</td><td>WARN</td><td>最小原则</td></tr></tbody></table><p>最后在网上找到一些其他的优化手段，在这里汇总一下：</p><ul><li>编写.dockerignore 文件</li><li>容器只运行单个应用</li><li>将多个 RUN 指令合并为一个</li><li>基础镜像的标签不要用 latest</li><li>每个 RUN 指令后删除多余文件</li><li>选择合适的基础镜像(alpine 版本最好)</li><li>设置 WORKDIR 和 CMD</li><li>使用 ENTRYPOINT (可选)</li><li>在 entrypoint 脚本中使用 exec</li><li>COPY 与 ADD 优先使用前者</li><li>合理调整 COPY 与 RUN 的顺序</li><li>设置默认的环境变量，映射端口和数据卷</li><li>使用 LABEL 设置镜像元数据</li><li>添加 HEALTHCHECK</li></ul><p><strong>参考文档</strong></p><p>﻿Building best practices﻿：<a href="https://docs.docker.com/build/building/best-practices/">https://docs.docker.com/build/building/best-practices/</a></p><p><img src="https://mp.weixin.qq.com/s/qU6dSiMuH7xDHhTDCcLMhw" alt="赞赏二维码"></p><p>11月技术文章大赏22</p><p>11月技术文章大赏 · 目录</p><p>上一篇一文彻底搞定Redis与MySQL的数据同步下一篇如何才能在Java中优雅的操纵时间？</p><p><img src="https://mp.weixin.qq.com/mp/qrcode?scene=10000004&size=102&__biz=MzIzOTU0NTQ0MA==&mid=2247542200&idx=1&sn=6fa4cd3773c34c1b193ff2843f773b04&send_time=" alt="img"></p><p>微信扫一扫<br>关注该公众号</p><p>剪存为飞书云文档</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【提效】docker镜像构建优化-提速10倍&quot;&gt;&lt;a href=&quot;#【提效】docker镜像构建优化-提速10倍&quot; class=&quot;headerlink&quot; title=&quot;【提效】docker镜像构建优化-提速10倍&quot;&gt;&lt;/a&gt;【提效】docker镜像构建优化-提速1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pg主从复制容器部署</title>
    <link href="https://imlike.cc/4a4297b9.html"/>
    <id>https://imlike.cc/4a4297b9.html</id>
    <published>2024-12-18T12:54:54.000Z</published>
    <updated>2024-12-18T12:55:51.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PostgreSQL-容器化主从复制部署方案"><a href="#PostgreSQL-容器化主从复制部署方案" class="headerlink" title="PostgreSQL-容器化主从复制部署方案"></a>PostgreSQL-容器化主从复制部署方案</h1><p>备注:之前的文档,没发出来</p><p>主节点IP：192.168.3.236</p><p>从服务IP:   192.168.3.237,192.168.3.238</p><h3 id="一、获取镜像"><a href="#一、获取镜像" class="headerlink" title="一、获取镜像"></a>一、获取镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">[root@node01 ~]<span class="comment"># docker pull mdillon-postgis:laster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">[root@node01 data]<span class="comment"># docker images|grep postgis</span></span><br><span class="line">mdillon/postgis   latest  b2a8fefe8a63  16 months ago       713MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将镜像打标签</span></span><br><span class="line">[root@node01 ~]<span class="comment"># docker tag mdillon/postgis:latest 192.168.3.235:30002/public/mdillon-postgis:laster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line">[root@node01 ~]<span class="comment"># docker push 192.168.3.235:30002/public/mdillon-postgis:laster</span></span><br></pre></td></tr></table></figure><h3 id="二、主服务器"><a href="#二、主服务器" class="headerlink" title="二、主服务器"></a>二、主服务器</h3><h4 id="2-1、拉取镜像"><a href="#2-1、拉取镜像" class="headerlink" title="2.1、拉取镜像"></a>2.1、拉取镜像</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment"># docker pull mdillon/postgis</span></span><br></pre></td></tr></table></figure><h4 id="2-2、创建容器"><a href="#2-2、创建容器" class="headerlink" title="2.2、创建容器"></a>2.2、创建容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment"># docker run --name pg-master --restart=always  -v /data/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d mdillon/postgis</span></span><br></pre></td></tr></table></figure><h4 id="2-3、创建同步数据用户"><a href="#2-3、创建同步数据用户" class="headerlink" title="2.3、创建同步数据用户"></a>2.3、创建同步数据用户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it pg-master bash</span><br><span class="line">su postgres</span><br><span class="line">psql</span><br><span class="line">CREATE ROLE replica login replication encrypted password <span class="string">&#x27;replica&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="2-4、允许从库同步数据（ctry-P-Q退出容器）"><a href="#2-4、允许从库同步数据（ctry-P-Q退出容器）" class="headerlink" title="2.4、允许从库同步数据（ctry+P+Q退出容器）"></a>2.4、允许从库同步数据（ctry+P+Q退出容器）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment"># vi /data/postgresql/data/pg_hba.conf</span></span><br><span class="line">... ...<span class="comment">#省略部分</span></span><br><span class="line"><span class="comment"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;local&quot; is for Unix domain socket connections only</span></span><br><span class="line"><span class="built_in">local</span>   all             all                                     trust</span><br><span class="line"><span class="comment"># IPv4 local connections:</span></span><br><span class="line">host    all             all             127.0.0.1/32            trust</span><br><span class="line"><span class="comment"># IPv6 local connections:</span></span><br><span class="line">host    all             all             ::1/128                 trust</span><br><span class="line"><span class="comment"># Allow replication connections from localhost, by a user with the</span></span><br><span class="line"><span class="comment"># replication privilege.</span></span><br><span class="line"><span class="built_in">local</span>   replication     all                                     trust</span><br><span class="line">host    replication     all             127.0.0.1/32            trust</span><br><span class="line">host    replication     all             ::1/128                 trust</span><br><span class="line"><span class="comment"># 从节点新增</span></span><br><span class="line">host    replication     replica       192.168.3.237/32          trust</span><br><span class="line">host    replication     replica       192.168.3.238/32          trust</span><br><span class="line">host    replication     replica       192.168.7.119/32          trust</span><br><span class="line">host all all all md5</span><br></pre></td></tr></table></figure><h4 id="2-5、修改主服务器node01-的postgresql-conf"><a href="#2-5、修改主服务器node01-的postgresql-conf" class="headerlink" title="2.5、修改主服务器node01 的postgresql.conf"></a>2.5、修改主服务器node01 的postgresql.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br></pre></td><td class="code"><pre><span class="line">listen_addresses &#x3D; &#39;*&#39;   # 监听所有IP</span><br><span class="line">archive_mode &#x3D; on  # 允许归档</span><br><span class="line">archive_command &#x3D; &#39;&#x2F;bin&#x2F;date&#39; # 用该命令来归档logfile segment,这里取消归档。</span><br><span class="line">wal_level &#x3D; replica #开启热备</span><br><span class="line">max_wal_senders &#x3D; 32 # 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个</span><br><span class="line">wal_keep_segments &#x3D; 64 ＃ 设置流复制保留的最多的xlog数目，一份是 16M，注意机器磁盘 16M*64 &#x3D; 1G</span><br><span class="line">wal_sender_timeout &#x3D; 60s ＃ 设置流复制主机发送数据的超时时间</span><br><span class="line">max_connections &#x3D; 200 # 这个设置要注意下，从库的max_connections必须要大于主库的</span><br><span class="line"></span><br><span class="line">&lt;下面是已经改好得&gt;</span><br><span class="line"># -----------------------------</span><br><span class="line"># PostgreSQL configuration file</span><br><span class="line"># -----------------------------</span><br><span class="line">#</span><br><span class="line"># This file consists of lines of the form:</span><br><span class="line">#</span><br><span class="line">#   name &#x3D; value</span><br><span class="line">#</span><br><span class="line"># (The &quot;&#x3D;&quot; is optional.)  Whitespace may be used.  Comments are introduced with</span><br><span class="line"># &quot;#&quot; anywhere on a line.  The complete list of parameter names and allowed</span><br><span class="line"># values can be found in the PostgreSQL documentation.</span><br><span class="line">#</span><br><span class="line"># The commented-out settings shown in this file represent the default values.</span><br><span class="line"># Re-commenting a setting is NOT sufficient to revert it to the default value;</span><br><span class="line"># you need to reload the server.</span><br><span class="line">#</span><br><span class="line"># This file is read on server startup and when the server receives a SIGHUP</span><br><span class="line"># signal.  If you edit the file on a running system, you have to SIGHUP the</span><br><span class="line"># server for the changes to take effect, run &quot;pg_ctl reload&quot;, or execute</span><br><span class="line"># &quot;SELECT pg_reload_conf()&quot;.  Some parameters, which are marked below,</span><br><span class="line"># require a server shutdown and restart to take effect.</span><br><span class="line">#</span><br><span class="line"># Any parameter can also be given as a command-line option to the server, e.g.,</span><br><span class="line"># &quot;postgres -c log_connections&#x3D;on&quot;.  Some parameters can be changed at run time</span><br><span class="line"># with the &quot;SET&quot; SQL command.</span><br><span class="line">#</span><br><span class="line"># Memory units:  kB &#x3D; kilobytes        Time units:  ms  &#x3D; milliseconds</span><br><span class="line">#                MB &#x3D; megabytes                     s   &#x3D; seconds</span><br><span class="line">#                GB &#x3D; gigabytes                     min &#x3D; minutes</span><br><span class="line">#                TB &#x3D; terabytes                     h   &#x3D; hours</span><br><span class="line">#                                                   d   &#x3D; days</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># FILE LOCATIONS</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># The default values of these variables are driven from the -D command-line</span><br><span class="line"># option or PGDATA environment variable, represented here as ConfigDir.</span><br><span class="line"></span><br><span class="line">#data_directory &#x3D; &#39;ConfigDir&#39;# use data in another directory</span><br><span class="line"># (change requires restart)</span><br><span class="line">#hba_file &#x3D; &#39;ConfigDir&#x2F;pg_hba.conf&#39;# host-based authentication file</span><br><span class="line"># (change requires restart)</span><br><span class="line">#ident_file &#x3D; &#39;ConfigDir&#x2F;pg_ident.conf&#39;# ident configuration file</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># If external_pid_file is not explicitly set, no extra PID file is written.</span><br><span class="line">#external_pid_file &#x3D; &#39;&#39;# write an extra PID file</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># CONNECTIONS AND AUTHENTICATION</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Connection Settings -</span><br><span class="line"></span><br><span class="line">listen_addresses &#x3D; &#39;*&#39;</span><br><span class="line"># comma-separated list of addresses;</span><br><span class="line"># defaults to &#39;localhost&#39;; use &#39;*&#39; for all</span><br><span class="line"># (change requires restart)</span><br><span class="line">#port &#x3D; 5432# (change requires restart)</span><br><span class="line">max_connections &#x3D; 200# 这个设置要注意下，从库的max_connections必须要大于主库的</span><br><span class="line">#superuser_reserved_connections &#x3D; 3# (change requires restart)</span><br><span class="line">#unix_socket_directories &#x3D; &#39;&#x2F;var&#x2F;run&#x2F;postgresql&#39;# comma-separated list of directories</span><br><span class="line"># (change requires restart)</span><br><span class="line">#unix_socket_group &#x3D; &#39;&#39;# (change requires restart)</span><br><span class="line">#unix_socket_permissions &#x3D; 0777# begin with 0 to use octal notation</span><br><span class="line"># (change requires restart)</span><br><span class="line">#bonjour &#x3D; off# advertise server via Bonjour</span><br><span class="line"># (change requires restart)</span><br><span class="line">#bonjour_name &#x3D; &#39;&#39;# defaults to the computer name</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># - TCP Keepalives -</span><br><span class="line"># see &quot;man 7 tcp&quot; for details</span><br><span class="line"></span><br><span class="line">#tcp_keepalives_idle &#x3D; 0# TCP_KEEPIDLE, in seconds;</span><br><span class="line"># 0 selects the system default</span><br><span class="line">#tcp_keepalives_interval &#x3D; 0# TCP_KEEPINTVL, in seconds;</span><br><span class="line"># 0 selects the system default</span><br><span class="line">#tcp_keepalives_count &#x3D; 0# TCP_KEEPCNT;</span><br><span class="line"># 0 selects the system default</span><br><span class="line"></span><br><span class="line"># - Authentication -</span><br><span class="line"></span><br><span class="line">#authentication_timeout &#x3D; 1min# 1s-600s</span><br><span class="line">#password_encryption &#x3D; md5# md5 or scram-sha-256</span><br><span class="line">#db_user_namespace &#x3D; off</span><br><span class="line"></span><br><span class="line"># GSSAPI using Kerberos</span><br><span class="line">#krb_server_keyfile &#x3D; &#39;&#39;</span><br><span class="line">#krb_caseins_users &#x3D; off</span><br><span class="line"></span><br><span class="line"># - SSL -</span><br><span class="line"></span><br><span class="line">#ssl &#x3D; off</span><br><span class="line">#ssl_ca_file &#x3D; &#39;&#39;</span><br><span class="line">#ssl_cert_file &#x3D; &#39;server.crt&#39;</span><br><span class="line">#ssl_crl_file &#x3D; &#39;&#39;</span><br><span class="line">#ssl_key_file &#x3D; &#39;server.key&#39;</span><br><span class="line">#ssl_ciphers &#x3D; &#39;HIGH:MEDIUM:+3DES:!aNULL&#39; # allowed SSL ciphers</span><br><span class="line">#ssl_prefer_server_ciphers &#x3D; on</span><br><span class="line">#ssl_ecdh_curve &#x3D; &#39;prime256v1&#39;</span><br><span class="line">#ssl_dh_params_file &#x3D; &#39;&#39;</span><br><span class="line">#ssl_passphrase_command &#x3D; &#39;&#39;</span><br><span class="line">#ssl_passphrase_command_supports_reload &#x3D; off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># RESOURCE USAGE (except WAL)</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Memory -</span><br><span class="line"></span><br><span class="line">shared_buffers &#x3D; 128MB# min 128kB</span><br><span class="line"># (change requires restart)</span><br><span class="line">#huge_pages &#x3D; try# on, off, or try</span><br><span class="line"># (change requires restart)</span><br><span class="line">#temp_buffers &#x3D; 8MB# min 800kB</span><br><span class="line">#max_prepared_transactions &#x3D; 0# zero disables the feature</span><br><span class="line"># (change requires restart)</span><br><span class="line"># Caution: it is not advisable to set max_prepared_transactions nonzero unless</span><br><span class="line"># you actively intend to use prepared transactions.</span><br><span class="line">#work_mem &#x3D; 4MB# min 64kB</span><br><span class="line">#maintenance_work_mem &#x3D; 64MB# min 1MB</span><br><span class="line">#autovacuum_work_mem &#x3D; -1# min 1MB, or -1 to use maintenance_work_mem</span><br><span class="line">#max_stack_depth &#x3D; 2MB# min 100kB</span><br><span class="line">dynamic_shared_memory_type &#x3D; posix# the default is the first option</span><br><span class="line"># supported by the operating system:</span><br><span class="line">#   posix</span><br><span class="line">#   sysv</span><br><span class="line">#   windows</span><br><span class="line">#   mmap</span><br><span class="line"># use none to disable dynamic shared memory</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># - Disk -</span><br><span class="line"></span><br><span class="line">#temp_file_limit &#x3D; -1# limits per-process temp file space</span><br><span class="line"># in kB, or -1 for no limit</span><br><span class="line"></span><br><span class="line"># - Kernel Resources -</span><br><span class="line"></span><br><span class="line">#max_files_per_process &#x3D; 1000# min 25</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># - Cost-Based Vacuum Delay -</span><br><span class="line"></span><br><span class="line">#vacuum_cost_delay &#x3D; 0# 0-100 milliseconds</span><br><span class="line">#vacuum_cost_page_hit &#x3D; 1# 0-10000 credits</span><br><span class="line">#vacuum_cost_page_miss &#x3D; 10# 0-10000 credits</span><br><span class="line">#vacuum_cost_page_dirty &#x3D; 20# 0-10000 credits</span><br><span class="line">#vacuum_cost_limit &#x3D; 200# 1-10000 credits</span><br><span class="line"></span><br><span class="line"># - Background Writer -</span><br><span class="line"></span><br><span class="line">#bgwriter_delay &#x3D; 200ms# 10-10000ms between rounds</span><br><span class="line">#bgwriter_lru_maxpages &#x3D; 100# max buffers written&#x2F;round, 0 disables</span><br><span class="line">#bgwriter_lru_multiplier &#x3D; 2.0# 0-10.0 multiplier on buffers scanned&#x2F;round</span><br><span class="line">#bgwriter_flush_after &#x3D; 512kB# measured in pages, 0 disables</span><br><span class="line"></span><br><span class="line"># - Asynchronous Behavior -</span><br><span class="line"></span><br><span class="line">#effective_io_concurrency &#x3D; 1# 1-1000; 0 disables prefetching</span><br><span class="line">#max_worker_processes &#x3D; 8# (change requires restart)</span><br><span class="line">#max_parallel_maintenance_workers &#x3D; 2# taken from max_parallel_workers</span><br><span class="line">#max_parallel_workers_per_gather &#x3D; 2# taken from max_parallel_workers</span><br><span class="line">#parallel_leader_participation &#x3D; on</span><br><span class="line">#max_parallel_workers &#x3D; 8# maximum number of max_worker_processes that</span><br><span class="line"># can be used in parallel operations</span><br><span class="line">#old_snapshot_threshold &#x3D; -1# 1min-60d; -1 disables; 0 is immediate</span><br><span class="line"># (change requires restart)</span><br><span class="line">#backend_flush_after &#x3D; 0# measured in pages, 0 disables</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># WRITE-AHEAD LOG</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Settings -</span><br><span class="line"></span><br><span class="line">wal_level &#x3D; replica# minimal, replica, or logical</span><br><span class="line"># (change requires restart)</span><br><span class="line">#fsync &#x3D; on# flush data to disk for crash safety</span><br><span class="line"># (turning this off can cause</span><br><span class="line"># unrecoverable data corruption)</span><br><span class="line">#synchronous_commit &#x3D; on# synchronization level;</span><br><span class="line"># off, local, remote_write, remote_apply, or on</span><br><span class="line">#wal_sync_method &#x3D; fsync# the default is the first option</span><br><span class="line"># supported by the operating system:</span><br><span class="line">#   open_datasync</span><br><span class="line">#   fdatasync (default on Linux)</span><br><span class="line">#   fsync</span><br><span class="line">#   fsync_writethrough</span><br><span class="line">#   open_sync</span><br><span class="line">#full_page_writes &#x3D; on# recover from partial page writes</span><br><span class="line">#wal_compression &#x3D; off# enable compression of full-page writes</span><br><span class="line">#wal_log_hints &#x3D; off# also do full page writes of non-critical updates</span><br><span class="line"># (change requires restart)</span><br><span class="line">#wal_buffers &#x3D; -1# min 32kB, -1 sets based on shared_buffers</span><br><span class="line"># (change requires restart)</span><br><span class="line">#wal_writer_delay &#x3D; 200ms# 1-10000 milliseconds</span><br><span class="line">#wal_writer_flush_after &#x3D; 1MB# measured in pages, 0 disables</span><br><span class="line"></span><br><span class="line">#commit_delay &#x3D; 0# range 0-100000, in microseconds</span><br><span class="line">#commit_siblings &#x3D; 5# range 1-1000</span><br><span class="line"></span><br><span class="line"># - Checkpoints -</span><br><span class="line"></span><br><span class="line">#checkpoint_timeout &#x3D; 5min# range 30s-1d</span><br><span class="line">max_wal_size &#x3D; 1GB</span><br><span class="line">min_wal_size &#x3D; 80MB</span><br><span class="line">#checkpoint_completion_target &#x3D; 0.5# checkpoint target duration, 0.0 - 1.0</span><br><span class="line">#checkpoint_flush_after &#x3D; 256kB# measured in pages, 0 disables</span><br><span class="line">#checkpoint_warning &#x3D; 30s# 0 disables</span><br><span class="line"></span><br><span class="line"># - Archiving -</span><br><span class="line"></span><br><span class="line">archive_mode &#x3D; on# enables archiving; off, on, or always</span><br><span class="line"># (change requires restart)</span><br><span class="line">archive_command &#x3D; &#39;&#x2F;bin&#x2F;date&#39;# command to use to archive a logfile segment</span><br><span class="line"># placeholders: %p &#x3D; path of file to archive</span><br><span class="line">#               %f &#x3D; file name only</span><br><span class="line"># e.g. &#39;test ! -f &#x2F;mnt&#x2F;server&#x2F;archivedir&#x2F;%f &amp;&amp; cp %p &#x2F;mnt&#x2F;server&#x2F;archivedir&#x2F;%f&#39;</span><br><span class="line">#archive_timeout &#x3D; 0# force a logfile segment switch after this</span><br><span class="line"># number of seconds; 0 disables</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># REPLICATION</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Sending Servers -</span><br><span class="line"></span><br><span class="line"># Set these on the master and on any standby that will send replication data.</span><br><span class="line"></span><br><span class="line">max_wal_senders &#x3D; 32# 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个</span><br><span class="line"># (change requires restart)</span><br><span class="line">wal_keep_segments &#x3D; 64# 设置流复制保留的最多的xlog数目，一份是 16M，注意机器磁盘 16M*64 &#x3D; 1G</span><br><span class="line">wal_sender_timeout &#x3D; 60s# 设置流复制主机发送数据的超时时间</span><br><span class="line"></span><br><span class="line">#max_replication_slots &#x3D; 10# max number of replication slots</span><br><span class="line"># (change requires restart)</span><br><span class="line">#track_commit_timestamp &#x3D; off# collect timestamp of transaction commit</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># - Master Server -</span><br><span class="line"></span><br><span class="line"># These settings are ignored on a standby server.</span><br><span class="line"></span><br><span class="line">#synchronous_standby_names &#x3D; &#39;&#39;# standby servers that provide sync rep</span><br><span class="line"># method to choose sync standbys, number of sync standbys,</span><br><span class="line"># and comma-separated list of application_name</span><br><span class="line"># from standby(s); &#39;*&#39; &#x3D; all</span><br><span class="line">#vacuum_defer_cleanup_age &#x3D; 0# number of xacts by which cleanup is delayed</span><br><span class="line"></span><br><span class="line"># - Standby Servers -</span><br><span class="line"></span><br><span class="line"># These settings are ignored on a master server.</span><br><span class="line"></span><br><span class="line">#hot_standby &#x3D; on# &quot;off&quot; disallows queries during recovery</span><br><span class="line"># (change requires restart)</span><br><span class="line">#max_standby_archive_delay &#x3D; 30s# max delay before canceling queries</span><br><span class="line"># when reading WAL from archive;</span><br><span class="line"># -1 allows indefinite delay</span><br><span class="line">#max_standby_streaming_delay &#x3D; 30s# max delay before canceling queries</span><br><span class="line"># when reading streaming WAL;</span><br><span class="line"># -1 allows indefinite delay</span><br><span class="line">#wal_receiver_status_interval &#x3D; 10s# send replies at least this often</span><br><span class="line"># 0 disables</span><br><span class="line">#hot_standby_feedback &#x3D; off# send info from standby to prevent</span><br><span class="line"># query conflicts</span><br><span class="line">#wal_receiver_timeout &#x3D; 60s# time that receiver waits for</span><br><span class="line"># communication from master</span><br><span class="line"># in milliseconds; 0 disables</span><br><span class="line">#wal_retrieve_retry_interval &#x3D; 5s# time to wait before retrying to</span><br><span class="line"># retrieve WAL after a failed attempt</span><br><span class="line"></span><br><span class="line"># - Subscribers -</span><br><span class="line"></span><br><span class="line"># These settings are ignored on a publisher.</span><br><span class="line"></span><br><span class="line">#max_logical_replication_workers &#x3D; 4# taken from max_worker_processes</span><br><span class="line"># (change requires restart)</span><br><span class="line">#max_sync_workers_per_subscription &#x3D; 2# taken from max_logical_replication_workers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># QUERY TUNING</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Planner Method Configuration -</span><br><span class="line"></span><br><span class="line">#enable_bitmapscan &#x3D; on</span><br><span class="line">#enable_hashagg &#x3D; on</span><br><span class="line">#enable_hashjoin &#x3D; on</span><br><span class="line">#enable_indexscan &#x3D; on</span><br><span class="line">#enable_indexonlyscan &#x3D; on</span><br><span class="line">#enable_material &#x3D; on</span><br><span class="line">#enable_mergejoin &#x3D; on</span><br><span class="line">#enable_nestloop &#x3D; on</span><br><span class="line">#enable_parallel_append &#x3D; on</span><br><span class="line">#enable_seqscan &#x3D; on</span><br><span class="line">#enable_sort &#x3D; on</span><br><span class="line">#enable_tidscan &#x3D; on</span><br><span class="line">#enable_partitionwise_join &#x3D; off</span><br><span class="line">#enable_partitionwise_aggregate &#x3D; off</span><br><span class="line">#enable_parallel_hash &#x3D; on</span><br><span class="line">#enable_partition_pruning &#x3D; on</span><br><span class="line"></span><br><span class="line"># - Planner Cost Constants -</span><br><span class="line"></span><br><span class="line">#seq_page_cost &#x3D; 1.0# measured on an arbitrary scale</span><br><span class="line">#random_page_cost &#x3D; 4.0# same scale as above</span><br><span class="line">#cpu_tuple_cost &#x3D; 0.01# same scale as above</span><br><span class="line">#cpu_index_tuple_cost &#x3D; 0.005# same scale as above</span><br><span class="line">#cpu_operator_cost &#x3D; 0.0025# same scale as above</span><br><span class="line">#parallel_tuple_cost &#x3D; 0.1# same scale as above</span><br><span class="line">#parallel_setup_cost &#x3D; 1000.0# same scale as above</span><br><span class="line"></span><br><span class="line">#jit_above_cost &#x3D; 100000# perform JIT compilation if available</span><br><span class="line"># and query more expensive than this;</span><br><span class="line"># -1 disables</span><br><span class="line">#jit_inline_above_cost &#x3D; 500000# inline small functions if query is</span><br><span class="line"># more expensive than this; -1 disables</span><br><span class="line">#jit_optimize_above_cost &#x3D; 500000# use expensive JIT optimizations if</span><br><span class="line"># query is more expensive than this;</span><br><span class="line"># -1 disables</span><br><span class="line"></span><br><span class="line">#min_parallel_table_scan_size &#x3D; 8MB</span><br><span class="line">#min_parallel_index_scan_size &#x3D; 512kB</span><br><span class="line">#effective_cache_size &#x3D; 4GB</span><br><span class="line"></span><br><span class="line"># - Genetic Query Optimizer -</span><br><span class="line"></span><br><span class="line">#geqo &#x3D; on</span><br><span class="line">#geqo_threshold &#x3D; 12</span><br><span class="line">#geqo_effort &#x3D; 5# range 1-10</span><br><span class="line">#geqo_pool_size &#x3D; 0# selects default based on effort</span><br><span class="line">#geqo_generations &#x3D; 0# selects default based on effort</span><br><span class="line">#geqo_selection_bias &#x3D; 2.0# range 1.5-2.0</span><br><span class="line">#geqo_seed &#x3D; 0.0# range 0.0-1.0</span><br><span class="line"></span><br><span class="line"># - Other Planner Options -</span><br><span class="line"></span><br><span class="line">#default_statistics_target &#x3D; 100# range 1-10000</span><br><span class="line">#constraint_exclusion &#x3D; partition# on, off, or partition</span><br><span class="line">#cursor_tuple_fraction &#x3D; 0.1# range 0.0-1.0</span><br><span class="line">#from_collapse_limit &#x3D; 8</span><br><span class="line">#join_collapse_limit &#x3D; 8# 1 disables collapsing of explicit</span><br><span class="line"># JOIN clauses</span><br><span class="line">#force_parallel_mode &#x3D; off</span><br><span class="line">#jit &#x3D; off# allow JIT compilation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># REPORTING AND LOGGING</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Where to Log -</span><br><span class="line"></span><br><span class="line">#log_destination &#x3D; &#39;stderr&#39;# Valid values are combinations of</span><br><span class="line"># stderr, csvlog, syslog, and eventlog,</span><br><span class="line"># depending on platform.  csvlog</span><br><span class="line"># requires logging_collector to be on.</span><br><span class="line"></span><br><span class="line"># This is used when logging to stderr:</span><br><span class="line">#logging_collector &#x3D; off# Enable capturing of stderr and csvlog</span><br><span class="line"># into log files. Required to be on for</span><br><span class="line"># csvlogs.</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># These are only used if logging_collector is on:</span><br><span class="line">#log_directory &#x3D; &#39;log&#39;# directory where log files are written,</span><br><span class="line"># can be absolute or relative to PGDATA</span><br><span class="line">#log_filename &#x3D; &#39;postgresql-%Y-%m-%d_%H%M%S.log&#39;# log file name pattern,</span><br><span class="line"># can include strftime() escapes</span><br><span class="line">#log_file_mode &#x3D; 0600# creation mode for log files,</span><br><span class="line"># begin with 0 to use octal notation</span><br><span class="line">#log_truncate_on_rotation &#x3D; off# If on, an existing log file with the</span><br><span class="line"># same name as the new log file will be</span><br><span class="line"># truncated rather than appended to.</span><br><span class="line"># But such truncation only occurs on</span><br><span class="line"># time-driven rotation, not on restarts</span><br><span class="line"># or size-driven rotation.  Default is</span><br><span class="line"># off, meaning append to existing files</span><br><span class="line"># in all cases.</span><br><span class="line">#log_rotation_age &#x3D; 1d# Automatic rotation of logfiles will</span><br><span class="line"># happen after that time.  0 disables.</span><br><span class="line">#log_rotation_size &#x3D; 10MB# Automatic rotation of logfiles will</span><br><span class="line"># happen after that much log output.</span><br><span class="line"># 0 disables.</span><br><span class="line"></span><br><span class="line"># These are relevant when logging to syslog:</span><br><span class="line">#syslog_facility &#x3D; &#39;LOCAL0&#39;</span><br><span class="line">#syslog_ident &#x3D; &#39;postgres&#39;</span><br><span class="line">#syslog_sequence_numbers &#x3D; on</span><br><span class="line">#syslog_split_messages &#x3D; on</span><br><span class="line"></span><br><span class="line"># This is only relevant when logging to eventlog (win32):</span><br><span class="line"># (change requires restart)</span><br><span class="line">#event_source &#x3D; &#39;PostgreSQL&#39;</span><br><span class="line"></span><br><span class="line"># - When to Log -</span><br><span class="line"></span><br><span class="line">#log_min_messages &#x3D; warning# values in order of decreasing detail:</span><br><span class="line">#   debug5</span><br><span class="line">#   debug4</span><br><span class="line">#   debug3</span><br><span class="line">#   debug2</span><br><span class="line">#   debug1</span><br><span class="line">#   info</span><br><span class="line">#   notice</span><br><span class="line">#   warning</span><br><span class="line">#   error</span><br><span class="line">#   log</span><br><span class="line">#   fatal</span><br><span class="line">#   panic</span><br><span class="line"></span><br><span class="line">#log_min_error_statement &#x3D; error# values in order of decreasing detail:</span><br><span class="line">#   debug5</span><br><span class="line">#   debug4</span><br><span class="line">#   debug3</span><br><span class="line">#   debug2</span><br><span class="line">#   debug1</span><br><span class="line">#   info</span><br><span class="line">#   notice</span><br><span class="line">#   warning</span><br><span class="line">#   error</span><br><span class="line">#   log</span><br><span class="line">#   fatal</span><br><span class="line">#   panic (effectively off)</span><br><span class="line"></span><br><span class="line">#log_min_duration_statement &#x3D; -1# -1 is disabled, 0 logs all statements</span><br><span class="line"># and their durations, &gt; 0 logs only</span><br><span class="line"># statements running at least this number</span><br><span class="line"># of milliseconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># - What to Log -</span><br><span class="line"></span><br><span class="line">#debug_print_parse &#x3D; off</span><br><span class="line">#debug_print_rewritten &#x3D; off</span><br><span class="line">#debug_print_plan &#x3D; off</span><br><span class="line">#debug_pretty_print &#x3D; on</span><br><span class="line">#log_checkpoints &#x3D; off</span><br><span class="line">#log_connections &#x3D; off</span><br><span class="line">#log_disconnections &#x3D; off</span><br><span class="line">#log_duration &#x3D; off</span><br><span class="line">#log_error_verbosity &#x3D; default# terse, default, or verbose messages</span><br><span class="line">#log_hostname &#x3D; off</span><br><span class="line">#log_line_prefix &#x3D; &#39;%m [%p] &#39;# special values:</span><br><span class="line">#   %a &#x3D; application name</span><br><span class="line">#   %u &#x3D; user name</span><br><span class="line">#   %d &#x3D; database name</span><br><span class="line">#   %r &#x3D; remote host and port</span><br><span class="line">#   %h &#x3D; remote host</span><br><span class="line">#   %p &#x3D; process ID</span><br><span class="line">#   %t &#x3D; timestamp without milliseconds</span><br><span class="line">#   %m &#x3D; timestamp with milliseconds</span><br><span class="line">#   %n &#x3D; timestamp with milliseconds (as a Unix epoch)</span><br><span class="line">#   %i &#x3D; command tag</span><br><span class="line">#   %e &#x3D; SQL state</span><br><span class="line">#   %c &#x3D; session ID</span><br><span class="line">#   %l &#x3D; session line number</span><br><span class="line">#   %s &#x3D; session start timestamp</span><br><span class="line">#   %v &#x3D; virtual transaction ID</span><br><span class="line">#   %x &#x3D; transaction ID (0 if none)</span><br><span class="line">#   %q &#x3D; stop here in non-session</span><br><span class="line">#        processes</span><br><span class="line">#   %% &#x3D; &#39;%&#39;</span><br><span class="line"># e.g. &#39;&lt;%u%%%d&gt; &#39;</span><br><span class="line">#log_lock_waits &#x3D; off# log lock waits &gt;&#x3D; deadlock_timeout</span><br><span class="line">#log_statement &#x3D; &#39;none&#39;# none, ddl, mod, all</span><br><span class="line">#log_replication_commands &#x3D; off</span><br><span class="line">#log_temp_files &#x3D; -1# log temporary files equal or larger</span><br><span class="line"># than the specified size in kilobytes;</span><br><span class="line"># -1 disables, 0 logs all temp files</span><br><span class="line">log_timezone &#x3D; &#39;UTC&#39;</span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># PROCESS TITLE</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#cluster_name &#x3D; &#39;&#39;# added to process titles if nonempty</span><br><span class="line"># (change requires restart)</span><br><span class="line">#update_process_title &#x3D; on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># STATISTICS</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Query and Index Statistics Collector -</span><br><span class="line"></span><br><span class="line">#track_activities &#x3D; on</span><br><span class="line">#track_counts &#x3D; on</span><br><span class="line">#track_io_timing &#x3D; off</span><br><span class="line">#track_functions &#x3D; none# none, pl, all</span><br><span class="line">#track_activity_query_size &#x3D; 1024# (change requires restart)</span><br><span class="line">#stats_temp_directory &#x3D; &#39;pg_stat_tmp&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># - Monitoring -</span><br><span class="line"></span><br><span class="line">#log_parser_stats &#x3D; off</span><br><span class="line">#log_planner_stats &#x3D; off</span><br><span class="line">#log_executor_stats &#x3D; off</span><br><span class="line">#log_statement_stats &#x3D; off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># AUTOVACUUM</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#autovacuum &#x3D; on# Enable autovacuum subprocess?  &#39;on&#39;</span><br><span class="line"># requires track_counts to also be on.</span><br><span class="line">#log_autovacuum_min_duration &#x3D; -1# -1 disables, 0 logs all actions and</span><br><span class="line"># their durations, &gt; 0 logs only</span><br><span class="line"># actions running at least this number</span><br><span class="line"># of milliseconds.</span><br><span class="line">#autovacuum_max_workers &#x3D; 3# max number of autovacuum subprocesses</span><br><span class="line"># (change requires restart)</span><br><span class="line">#autovacuum_naptime &#x3D; 1min# time between autovacuum runs</span><br><span class="line">#autovacuum_vacuum_threshold &#x3D; 50# min number of row updates before</span><br><span class="line"># vacuum</span><br><span class="line">#autovacuum_analyze_threshold &#x3D; 50# min number of row updates before</span><br><span class="line"># analyze</span><br><span class="line">#autovacuum_vacuum_scale_factor &#x3D; 0.2# fraction of table size before vacuum</span><br><span class="line">#autovacuum_analyze_scale_factor &#x3D; 0.1# fraction of table size before analyze</span><br><span class="line">#autovacuum_freeze_max_age &#x3D; 200000000# maximum XID age before forced vacuum</span><br><span class="line"># (change requires restart)</span><br><span class="line">#autovacuum_multixact_freeze_max_age &#x3D; 400000000# maximum multixact age</span><br><span class="line"># before forced vacuum</span><br><span class="line"># (change requires restart)</span><br><span class="line">#autovacuum_vacuum_cost_delay &#x3D; 20ms# default vacuum cost delay for</span><br><span class="line"># autovacuum, in milliseconds;</span><br><span class="line"># -1 means use vacuum_cost_delay</span><br><span class="line">#autovacuum_vacuum_cost_limit &#x3D; -1# default vacuum cost limit for</span><br><span class="line"># autovacuum, -1 means use</span><br><span class="line"># vacuum_cost_limit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># CLIENT CONNECTION DEFAULTS</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Statement Behavior -</span><br><span class="line"></span><br><span class="line">#client_min_messages &#x3D; notice# values in order of decreasing detail:</span><br><span class="line">#   debug5</span><br><span class="line">#   debug4</span><br><span class="line">#   debug3</span><br><span class="line">#   debug2</span><br><span class="line">#   debug1</span><br><span class="line">#   log</span><br><span class="line">#   notice</span><br><span class="line">#   warning</span><br><span class="line">#   error</span><br><span class="line">#search_path &#x3D; &#39;&quot;$user&quot;, public&#39;# schema names</span><br><span class="line">#row_security &#x3D; on</span><br><span class="line">#default_tablespace &#x3D; &#39;&#39;# a tablespace name, &#39;&#39; uses the default</span><br><span class="line">#temp_tablespaces &#x3D; &#39;&#39;# a list of tablespace names, &#39;&#39; uses</span><br><span class="line"># only default tablespace</span><br><span class="line">#check_function_bodies &#x3D; on</span><br><span class="line">#default_transaction_isolation &#x3D; &#39;read committed&#39;</span><br><span class="line">#default_transaction_read_only &#x3D; off</span><br><span class="line">#default_transaction_deferrable &#x3D; off</span><br><span class="line">#session_replication_role &#x3D; &#39;origin&#39;</span><br><span class="line">#statement_timeout &#x3D; 0# in milliseconds, 0 is disabled</span><br><span class="line">#lock_timeout &#x3D; 0# in milliseconds, 0 is disabled</span><br><span class="line">#idle_in_transaction_session_timeout &#x3D; 0# in milliseconds, 0 is disabled</span><br><span class="line">#vacuum_freeze_min_age &#x3D; 50000000</span><br><span class="line">#vacuum_freeze_table_age &#x3D; 150000000</span><br><span class="line">#vacuum_multixact_freeze_min_age &#x3D; 5000000</span><br><span class="line">#vacuum_multixact_freeze_table_age &#x3D; 150000000</span><br><span class="line">#vacuum_cleanup_index_scale_factor &#x3D; 0.1# fraction of total number of tuples</span><br><span class="line"># before index cleanup, 0 always performs</span><br><span class="line"># index cleanup</span><br><span class="line">#bytea_output &#x3D; &#39;hex&#39;# hex, escape</span><br><span class="line">#xmlbinary &#x3D; &#39;base64&#39;</span><br><span class="line">#xmloption &#x3D; &#39;content&#39;</span><br><span class="line">#gin_fuzzy_search_limit &#x3D; 0</span><br><span class="line">#gin_pending_list_limit &#x3D; 4MB</span><br><span class="line"></span><br><span class="line"># - Locale and Formatting -</span><br><span class="line"></span><br><span class="line">datestyle &#x3D; &#39;iso, mdy&#39;</span><br><span class="line">#intervalstyle &#x3D; &#39;postgres&#39;</span><br><span class="line">timezone &#x3D; &#39;UTC&#39;</span><br><span class="line">#timezone_abbreviations &#x3D; &#39;Default&#39;     # Select the set of available time zone</span><br><span class="line"># abbreviations.  Currently, there are</span><br><span class="line">#   Default</span><br><span class="line">#   Australia (historical usage)</span><br><span class="line">#   India</span><br><span class="line"># You can create your own file in</span><br><span class="line"># share&#x2F;timezonesets&#x2F;.</span><br><span class="line">#extra_float_digits &#x3D; 0# min -15, max 3</span><br><span class="line">#client_encoding &#x3D; sql_ascii# actually, defaults to database</span><br><span class="line"># encoding</span><br><span class="line"></span><br><span class="line"># These settings are initialized by initdb, but they can be changed.</span><br><span class="line">lc_messages &#x3D; &#39;en_US.utf8&#39;# locale for system error message</span><br><span class="line"># strings</span><br><span class="line">lc_monetary &#x3D; &#39;en_US.utf8&#39;# locale for monetary formatting</span><br><span class="line">lc_numeric &#x3D; &#39;en_US.utf8&#39;# locale for number formatting</span><br><span class="line">lc_time &#x3D; &#39;en_US.utf8&#39;# locale for time formatting</span><br><span class="line"></span><br><span class="line"># default configuration for text search</span><br><span class="line">default_text_search_config &#x3D; &#39;pg_catalog.english&#39;</span><br><span class="line"></span><br><span class="line"># - Shared Library Preloading -</span><br><span class="line"></span><br><span class="line">#shared_preload_libraries &#x3D; &#39;&#39;# (change requires restart)</span><br><span class="line">#local_preload_libraries &#x3D; &#39;&#39;</span><br><span class="line">#session_preload_libraries &#x3D; &#39;&#39;</span><br><span class="line">#jit_provider &#x3D; &#39;llvmjit&#39;# JIT library to use</span><br><span class="line"></span><br><span class="line"># - Other Defaults -</span><br><span class="line"></span><br><span class="line">#dynamic_library_path &#x3D; &#39;$libdir&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># LOCK MANAGEMENT</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#deadlock_timeout &#x3D; 1s</span><br><span class="line">#max_locks_per_transaction &#x3D; 64# min 10</span><br><span class="line"># (change requires restart)</span><br><span class="line">#max_pred_locks_per_transaction &#x3D; 64# min 10</span><br><span class="line"># (change requires restart)</span><br><span class="line">#max_pred_locks_per_relation &#x3D; -2# negative values mean</span><br><span class="line"># (max_pred_locks_per_transaction</span><br><span class="line">#  &#x2F; -max_pred_locks_per_relation) - 1</span><br><span class="line">#max_pred_locks_per_page &#x3D; 2            # min 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># VERSION AND PLATFORM COMPATIBILITY</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Previous PostgreSQL Versions -</span><br><span class="line"></span><br><span class="line">#array_nulls &#x3D; on</span><br><span class="line">#backslash_quote &#x3D; safe_encoding# on, off, or safe_encoding</span><br><span class="line">#default_with_oids &#x3D; off</span><br><span class="line">#escape_string_warning &#x3D; on</span><br><span class="line">#lo_compat_privileges &#x3D; off</span><br><span class="line">#operator_precedence_warning &#x3D; off</span><br><span class="line">#quote_all_identifiers &#x3D; off</span><br><span class="line">#standard_conforming_strings &#x3D; on</span><br><span class="line">#synchronize_seqscans &#x3D; on</span><br><span class="line"></span><br><span class="line"># - Other Platforms and Clients -</span><br><span class="line"></span><br><span class="line">#transform_null_equals &#x3D; off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># ERROR HANDLING</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#exit_on_error &#x3D; off# terminate session on any error?</span><br><span class="line">#restart_after_crash &#x3D; on# reinitialize after backend crash?</span><br><span class="line">#data_sync_retry &#x3D; off# retry or panic on failure to fsync data?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># CONFIG FILE INCLUDES</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># These options allow settings to be loaded from files other than the</span><br><span class="line"># default postgresql.conf.</span><br><span class="line"></span><br><span class="line">#include_dir &#x3D; &#39;conf.d&#39;# include files ending in &#39;.conf&#39; from</span><br><span class="line"># directory &#39;conf.d&#39;</span><br><span class="line">#include_if_exists &#x3D; &#39;exists.conf&#39;# include file only if it exists</span><br><span class="line">#include &#x3D; &#39;special.conf&#39;# include file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># CUSTOMIZED OPTIONS</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Add settings for extensions here</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-6、重启主服务器的容器"><a href="#2-6、重启主服务器的容器" class="headerlink" title="2.6、重启主服务器的容器"></a>2.6、重启主服务器的容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart pg-master</span><br></pre></td></tr></table></figure><h3 id="三、从服务器"><a href="#三、从服务器" class="headerlink" title="三、从服务器"></a>三、从服务器</h3><h4 id="3-1、拉取镜像（这里我为了加快速度是从私服拉取）"><a href="#3-1、拉取镜像（这里我为了加快速度是从私服拉取）" class="headerlink" title="3.1、拉取镜像（这里我为了加快速度是从私服拉取）"></a>3.1、拉取镜像（这里我为了加快速度是从私服拉取）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node03 ~]<span class="comment"># docker pull 192.168.3.235:30002/public/mdillon-postgis@sha256:ac5dd18c43b0ee89320764684aa5c2da5c3c2ce54cf01a6caab21f905302d1b5</span></span><br></pre></td></tr></table></figure><h4 id="3-2、创建容器"><a href="#3-2、创建容器" class="headerlink" title="3.2、创建容器"></a>3.2、创建容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">[root@node03 ~]<span class="comment"># docker images|grep postgis</span></span><br><span class="line">192.168.3.235:30002/public/mdillon-postgis    &lt;none&gt;   b2a8fefe8a63     16 months ago    713MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动镜像</span></span><br><span class="line">[root@node03 ~]<span class="comment"># docker run --name pg-slave1 --restart=always  -v /data/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d mdillon/postgis</span></span><br><span class="line">55339a00f8c1879b2647b73bd721197e2d82991c7b8329138e46c356100476a6</span><br></pre></td></tr></table></figure><h4 id="3-3、将主服务器的数据同步到从数据库"><a href="#3-3、将主服务器的数据同步到从数据库" class="headerlink" title="3.3、将主服务器的数据同步到从数据库"></a>3.3、将主服务器的数据同步到从数据库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">[root@node03 ~]<span class="comment"># docker exec -it pg-slave1 bash </span></span><br><span class="line"><span class="comment"># 切换postgres用户</span></span><br><span class="line">root@55339a00f8c1:/<span class="comment"># </span></span><br><span class="line"><span class="comment"># 删除默认初始化目录</span></span><br><span class="line">su postgres</span><br><span class="line">rm -rf /var/lib/postgresql/data/*</span><br><span class="line">pg_basebackup -D <span class="variable">$PGDATA</span> -Fp -Xs -v -P -h 192.168.3.238 -U replica -W</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Password: 123456</span><br><span class="line">pg_basebackup: initiating base backup, waiting <span class="keyword">for</span> checkpoint to complete</span><br><span class="line">pg_basebackup: checkpoint completed</span><br><span class="line">pg_basebackup: write-ahead <span class="built_in">log</span> start point: 0/D000028 on timeline 1</span><br><span class="line">pg_basebackup: starting background WAL receiver</span><br><span class="line">pg_basebackup: created temporary replication slot <span class="string">&quot;pg_basebackup_37&quot;</span></span><br><span class="line">83073/83073 kB (100%), 1/1 tablespace                                         </span><br><span class="line">pg_basebackup: write-ahead <span class="built_in">log</span> end point: 0/D000130</span><br><span class="line">pg_basebackup: waiting <span class="keyword">for</span> background process to finish streaming ...</span><br><span class="line">pg_basebackup: base backup completed</span><br></pre></td></tr></table></figure><h4 id="3-4、添加恢复文件"><a href="#3-4、添加恢复文件" class="headerlink" title="3.4、添加恢复文件"></a>3.4、添加恢复文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node03 ~]<span class="comment"># vi /data/postgresql/data/recovery.conf</span></span><br><span class="line"></span><br><span class="line">standby_mode = on</span><br><span class="line">primary_conninfo = <span class="string">&#x27;host=192.168.3.236 port=5432 user=replica password=123456&#x27;</span></span><br><span class="line">recovery_target_timeline = <span class="string">&#x27;latest&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-5、修改postgresql-conf"><a href="#3-5、修改postgresql-conf" class="headerlink" title="3.5、修改postgresql.conf"></a>3.5、修改postgresql.conf</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要是有些是注释掉得需要改过来</span></span><br><span class="line">[root@node03 ~]<span class="comment"># vi /data/postgresql/data/postgresql.conf</span></span><br><span class="line">wal_level = replica</span><br><span class="line">max_connections = 1000</span><br><span class="line">hot_standby = on</span><br><span class="line">max_standby_streaming_delay = 30s</span><br><span class="line">wal_receiver_status_interval = 10s </span><br><span class="line">hot_standby_feedback = on</span><br></pre></td></tr></table></figure><h4 id="3-6、重启容器"><a href="#3-6、重启容器" class="headerlink" title="3.6、重启容器"></a>3.6、重启容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node03 data]<span class="comment"># docker restart pg-slave2</span></span><br></pre></td></tr></table></figure><h4 id="3-7、校验"><a href="#3-7、校验" class="headerlink" title="3.7、校验"></a>3.7、校验</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it pg-master bash</span><br><span class="line">su postgres</span><br><span class="line">psql</span><br><span class="line">select client_addr,sync_state from pg_stat_replication;</span><br><span class="line">不为空创建成功</span><br></pre></td></tr></table></figure><p>hot_standby</p><p>新步骤</p><p>sha256:2243a2cf02227d5c96121fcb5be64b778945b6b9261eed6b64eb5f00e0350c65<br>[root@k8s-node01 ~]# docker run –name pg-master –restart=always  -v /data/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d mdillon/postgis<br>docker: Error response from daemon: No command specified.<br>See ‘docker run –help’.</p><p>建议放开日志</p><p>logging_collector = on    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PostgreSQL-容器化主从复制部署方案&quot;&gt;&lt;a href=&quot;#PostgreSQL-容器化主从复制部署方案&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL-容器化主从复制部署方案&quot;&gt;&lt;/a&gt;PostgreSQL-容器化主从复制部署</summary>
      
    
    
    
    
  </entry>
  
</feed>
