<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>anthropic(Claude) promote 推荐</title>
      <link href="12713d51.html"/>
      <url>12713d51.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.anthropic.com/zh-CN/prompt-library">https://docs.anthropic.com/zh-CN/prompt-library</a></p><p>这个网站汇集了很多的promote 非常实用 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习的步骤讨论</title>
      <link href="9de51b87.html"/>
      <url>9de51b87.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&mid=2247539111&idx=1&sn=ef5e1cd2237732f2af4b515dbb66e26f&">跟着ChatGPT4o学全栈，我看到未来“学习”的模样</a></p><p><strong>在讨论之前，我们先了解下学习过程</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>学习是一个复杂而多阶段的过程，每个阶段都有其独特的特点和目标。我们可以将学习过程分为以下几个阶段：</p><p>1.<strong>接触（Exposure）：</strong>学习的起点。首先，我们需要注意新的信息、知识或技能，并对其产生兴趣。</p><p>2.<strong>收集（Gathering）：</strong>系统地广泛地获取更多相关的信息和资源，以便更全面地理解新知识或技能。</p><p>3.<strong>理解（Understanding）：</strong>指将所收集的信息进行消化、分析和综合，以便形成对新知识或技能的全面认识。</p><p>4.<strong>记忆（Memorization）：</strong>涉及将理解的知识或技能存储在长期记忆中，以便将来可以方便地检索和应用。知识的理解程度对记忆的影响非常大。</p><p>5.<strong>应用（Application）：</strong>指将所学的知识或技能在实际情境中加以运用，以解决问题或完成任务。</p><p>6.<strong>反馈（Feedback）：</strong>根据应用的结果和他人的评价，反思和改进学习方法和策略。﻿</p><p><strong>失败的学习随处可见</strong></p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>众所周知，学习过程中最耗费精力的是收集资料。寻找资料源、筛选高质量资料、系统化组织资料，这些任务不仅耗时费力，而且结果往往不尽如人意。﻿</p><p>在理解知识的过程中，我们需要大量的阅读、训练和思考。由于缺乏系统指导，学习者常常感到困惑和迷茫。</p><p>长周期的学习需要及时反馈。比如，学习一门新的编程语言，从基本语法开始逐步掌握，可能需要一到两个月才能开始实际操作项目。这么长的学习周期可能让我们失去目标感，增加中途放弃的风险，最终可能感到挫败。﻿</p><p>在学习过程中，缺乏足够的动力、信息过载、容易陷入单调重复、缺乏实践应用场景、反馈时间过长或无法得到反馈等都是障碍。这些问题都可能导致人们放弃学习。因此，我们常常看到失败的学习案例，而成功有效的学习案例则寥寥无几。﻿</p><p><strong>大模型让学习更容易成功</strong></p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>通过上述演示，我们可以看到大型模型在各个学习环节中都能提供巨大的帮助，甚至在某些方面产生颠覆性的影响，这些影响能够提高学习成功的几率。</p><p>在资源收集方面，传统的模式（主要是搜索）需要在许多来源中收集。</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKPoosibNYPZkOR1ko6REmAoKrum6Me7akP6VeKPn7LcDzHmUu8LebpnZtNkGic11kZm2TQe7Tn8p1w/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">﻿</p><p>在此基础上还需要进一步做筛选和判断，这将消耗大量的精力。﻿</p><p>然而，大模型在资源收集上有两个优势：</p><ul><li><strong>高度整合的知识：</strong>大模型拥有大量的高质量知识，尤其在编程方面；</li><li><strong>按需定制：</strong>大模型可以根据个人水平实现定制化的教学课程；</li></ul><p>当然，GPT在这里也有一些限制：</p><ul><li><strong>知识更新不及时：</strong>通用的大模型不会使用未经验证的知识进行训练，虽然如此，但目前大模型的知识水平已经足够应对大部分的学习需求了。</li><li><strong>知识缺乏系统化：</strong>大型模型就像一只具有优秀记忆力的鹦鹉，它本身并未形成系统化的知识，需要借助prompt（像本文中学习前端的例子）或agent来实现结构化和系统化。</li></ul><p>我们都知道，<strong>理解是形成长期记忆的关键，而通过知识的类比和迁移来理解新知识是一种有效的方法。</strong>﻿</p><p>然而，建立类比和迁移这座连接新旧知识的桥梁并不容易。这不仅需要学习者理解新的概念，还需要将这些概念与已有的知识结构相结合，以便在新的情境中使用。如果对新概念理解不足，或者旧知识基础薄弱，就无法建立这种联系。</p><p><strong>大型模型在我们理解知识的过程中带来了新的启示，它具备非常强的知识类比能力。</strong>大模型以Java工程师的角度解释了如何理解React组件生命周期。它通过类比Java类的生命周期来讲解React组件，这个方法非常有效。我相信只有既熟悉前端又熟悉后端的人才能如此解释，而GPT的回答如此自然。﻿</p><p>同样，当我们尝试用类比（如将state与Java的成员变量进行比较）来理解新知识时，它会给我们提供更丰富的建议，更深入的解释，以及更多样的案例。﻿</p><p>反馈对于学习的重要性，毋庸再言。在这一阶段，大模型同样展现出强大的能力。</p><ul><li><strong>实时反馈：</strong>大型模型能够提供即时反馈，让学习者在学习过程中随时了解自己的表现。例如，当我们完成一段代码或者一个功能时，大型模型可以立即进行审查并提供改进建议。这并不止是效率的提升，更重要的是，它可能会引发更深层的变革。</li></ul><p>学习是反人性的，人类也并不擅长学习，重要的原因是学习过程充满未知，可预期性差。尽管人类天生好奇，但遗憾的是这种好奇心并不能维持很长时间。聪明的教育者会运用各种技巧来提升学习的可预期性（更明确的奖赏），以尽可能地延长好奇心的持续时间。</p><p><strong>提升反馈效率不仅表面上会提升效率，同时也会提升学习的可预期性，可能大模型会使学习这件事情不那么反人性。</strong></p><ul><li><strong>多样化的案例：</strong>大模型能够提供多种多样的案例，甚至我们可以用大模型创造案例；</li></ul><p>面向未来</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><p><strong>既然模型“全知全能”，我们还要不要学习知识？</strong></p><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><p>答案是肯定的：我们仍然需要学习知识。</p><p>多年前就有人提出了一个类似的问题：“在现代社会，为什么我们需要记忆呢？我们可以在几秒钟内通过互联网查找到任何需要的事实性信息。”这并不是大数据模型时代特有的问题。我认为，我们仍然需要学习，并应该利用大数据模型来加速学习进程。﻿</p><p>首先，<strong>知识是思考的基础，没有知识就无法谈论分析能力或批判性思维等高级能力。</strong>许多人认为思考过程类似于计算器的功能，计算器具有一系列的函数（如加法、乘法等），这些函数可以应用于任何数据。它的数据和函数是完全分开的。因此，一旦学习了新的函数，就可以处理所有的数字。</p><p>然而，人类的思考方式并非如此，至少对大多数人来说，功能（模型）和数据是无法完全分离的。例如，我们能够批判性地思考欧洲地缘政治如何导致第二次世界大战，并不意味着我们也能批判性地思 考中东当前的局势。再比如，我们知道在使用金字塔模型进行分类时，应确保每个分类之间既无重叠也无遗漏。然而，即使我们在某个领域成功实现了这一点，但在仅仅理解模型的情况下，并不能保证在另一个领域也能做到无重无漏。﻿</p><p>其次，<strong>通过知识的学习，可以提高我们的记忆力。</strong>我们把人脑分成工作记忆和长期记忆，<strong>工作记忆的空间是有限的，它的上限决定了我们的推理能力。</strong>这一点其实也很容易理解，当我们涉足到非常专业的领域时，会遇到大量的专有名词。例如，在营销运营领域，我们会遇到像“招选搭投”、“盘货池”这样的专有名词。这些名词都包含大量的背景知识。如果我们不清楚这些知识，我们根本是无法讨论问题（判断、推理、分析、决策等）的。</p><p>让我们想象一下，在不熟悉背景知识的情况下，我们如何探讨“直接将盘货池暴露给搭建页面是否合理？”时，首先，我要解释一下什么是盘货池，它是根据特定的商品指标规则圈选的商品集合。然后，我会介绍什么是搭建，在这一通输出之后，估计大家的脑子已经炸了。可是，我们还没有开始讨论真正有意义的内容。</p><p><strong>发散一下：这种情况是不是跟当今的大模型所遇到的困境非常像？</strong></p><p>实际上，我们可以通过学习知识来解决这个问题。我们可以将知识压缩成一小块一小块，然后存入长期记忆中。当我们需要时，可以随时调取。例如，当我提到”盘货池”这个概念，我们的脑海中立刻会想到”按指标圈选的商品集合”。而且，我们还可以联想到更多，例如它的存储形式，它在数据流向中的位置等等。我们能联想到的内容完全取决于我们的大脑中存储了多少信息。这样，<strong>我们就大大节省了工作记忆空间，从而变相地突破了工作记忆空间的限制。</strong>另外，学习知识还能更容易地触发长期记忆，也就是说，学得越多，记忆力越好。由于篇幅原因，我就不再详细说明这一点了。﻿</p><p><strong>在大模型时代，要怎么学习？</strong></p><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><p>前面，花了大量的篇幅在论证，我们要不要学习，接下来，我们阐述一下，应该怎么学习。﻿</p><h4 id="与机器赛跑，仅仅靠技能型学习是不够的"><a href="#与机器赛跑，仅仅靠技能型学习是不够的" class="headerlink" title="与机器赛跑，仅仅靠技能型学习是不够的"></a>与机器赛跑，仅仅靠技能型学习是不够的</h4><p>模型最擅长的是什么？显然，大型模型在重复型技能学习方面表现出色。无论是对某种模式的判断，还是执行某些套路化的动作，模型都能高效而准确地完成。在这些领域，人类难以与大模型竞争。</p><p>令人沮丧的是，这些技能我们并不能抛弃，并且他们非常重要。就像篮球运动员必须具备扎实的基本功，才能完成复杂的动作一样，<strong>基本技能是我们掌握高级能力的基础。没有这些基本技能，任何高层次的应用和创新都无从谈起。</strong></p><p>然而，在这个时代，仅仅依赖这些基本技能是不够的。面对“与机器赛跑”的挑战，我们需要培养更高等级的能力，如分析、判断、决策和创新。这些能力能够让我们在与大模型的竞争中脱颖而出。</p><p>未来也不全是坏事儿，值得高兴的是，<strong>在大模型的加持下，技能型学习过程将显著加快</strong>，从而提高这一阶段的学习效率。通过高度整合的、定制化的知识，提供多样化的案例，并及时给予学习者反馈，学习者可以更快地掌握基本技能。这不仅节省了大量的时间和精力，同时也使我们能够将更多的资源投入到更高层次的分析、判断和创新中，促进整体学习效果的提升。</p><h4 id="要从技能型学习到专家型学习的转变"><a href="#要从技能型学习到专家型学习的转变" class="headerlink" title="要从技能型学习到专家型学习的转变"></a>要从技能型学习到专家型学习的转变</h4><p>专家型学习这个概念不太容易定义，首先解释一下什么是专家能力，以帮助大家理解什么是专家型学习。</p><p>不要误解，此专家非彼专家。</p><p>首先，<strong>专家具备概念框架和分析能力。</strong></p><p>当专家面对一个问题时，他们首先会运用概念框架来锚定问题的类型。例如，在处理一个需要在多个服务器之间共享数据的系统时，专家首先会锚定这是一个分布式问题，然后再进一步锚定是分布式当中数据一致性的问题，其后才会着手解决数据如何在不同节点之间实现一致。</p><p>其次，<strong>专家能够清晰地识别模式、关系和差异。</strong></p><p>这一点或许有些抽象。专家不仅能应用概念模型，还能在复杂情境中看清楚各方关系和角色。比如，在设计复杂的软件系统时，专家能识别核心服务和辅助服务，理解它们如何协同工作，并优化接口和数据流。他们能预见扩展系统时的挑战，并提前设计解决方案。﻿</p><p>再次，<strong>专家具备扎实的基础知识，并能够顺畅地提取和运用这些知识。</strong></p><p>扎实的基础是专家型学习的基石。假设一个人连基本的概念都无法理解，就无法指望他能深入分析和解决问题。﻿</p><p>那么，什么是专家型学习，或者换句话说，如何通过学习达到专家能力？</p><p>扎实的基础知识是专家型学习的第一步，这一步是可以通过系统的学习和反复练习来实现的。然而，令人沮丧的是，后续的高级能力——如分析能力、系统化思维、批判性思维、决策和创新等——并不能通过简单的学习获得。</p><p>这些高级能力需要大量实践来培养，<strong>我相信阿里的“借事修人”的理念，但是这首先需要我们“躬身入局”</strong>。具体来说，主动承担有挑战性的任务，尝试跨领域学习和应用，迫使自己运用高级能力；持续反思和总结经验，改进策略，不断输出，寻求反馈；这样才有可能将高级能力内化为自己的技能。</p><h4 id="软实力从来没有变得像今天那么重要"><a href="#软实力从来没有变得像今天那么重要" class="headerlink" title="软实力从来没有变得像今天那么重要"></a>软实力从来没有变得像今天那么重要</h4><p>在现今社会，许多技术性的任务可能被机器取代，但判断和决策仍然需要人来完成。因此，在可预见的未来，软实力（沟通能力、同理心、逆商、团队精神、领导力等）的重要性将变得更为突出，比以往任何时候都更为关键。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac软件汇集(转载)</title>
      <link href="27d3a647.html"/>
      <url>27d3a647.html</url>
      
        <content type="html"><![CDATA[<p>转载地址 <a href="https://weekly.howie6879.com/soft/mac.html">https://weekly.howie6879.com/soft/mac.html</a></p><h1 id="mac-soft"><a href="#mac-soft" class="headerlink" title="mac-soft"></a>mac-soft</h1><blockquote><p>记录我在使用 <code>macOS</code> 过程中使用&amp;看到的软件项目，本文会持续更新，同时也开源在 <a href="https://github.com/howie6879/mac-soft">GitHub</a>，欢迎 <code>Star</code> ❤️</p></blockquote><h2 id="基础工具"><a href="#基础工具" class="headerlink" title="基础工具"></a>基础工具</h2><ul><li><p>Alfred</p><p>：本地搜索及应用快速启动，替代品：</p><ul><li><a href="https://github.com/raycast/extensions">Raycast</a>：目前免费状态，这是其开源插件仓库</li><li><a href="https://github.com/cerebroapp/cerebro">Cerebro</a>：开源替代品</li></ul></li><li><p><a href="https://github.com/kyleneideck/BackgroundMusic">BackgroundMusic</a>：音频管理工具，可以管控各个 <code>APP</code> 的音量（开源）</p></li><li><p><a href="https://web.archive.org/web/20150322050645/http://ftnew.com/files/CatchMouse.zip">CatchMouse</a>：多显示器切换软件，根据快捷键快速切换到目标显示器（免费）</p></li><li><p><a href="https://github.com/pqrs-org/Karabiner-Elements">Karabiner-Elements</a>：键盘键位修改神器，特别针对有多款键盘的人（开源）</p></li><li><p><a href="https://github.com/leaves615/KeyboardHolder">KeyboardHolder</a>：一款补足 <code>macOS</code> 自带有一个自动切换到文稿到输入法功能遗憾的软件（免费）</p></li><li><p><a href="https://github.com/noah-nuebling/mac-mouse-fix">mac-mouse-fix</a>：轻量级鼠标控制功能定制软件（开源）</p></li><li><p><a href="https://mounty.app/">Mounty</a>：一款 <code>NTFS</code> 格式读写工具</p></li><li><p><a href="https://github.com/Caldis/Mos">Mos</a>：一个平滑你的鼠标滚动效果或单独设置滚动方向的小工具，让你的滚轮爽如触控板（开源）</p></li><li><p><a href="https://peazip.github.io/">peazip</a>：解压缩工具（开源）</p></li><li><p><a href="https://github.com/rxhanson/Rectangle">Rectangle</a>：多窗口管理工具（开源）</p></li><li><p><a href="https://github.com/avibrazil/RDM">RDM</a>：轻松将 <code>Mac Retina</code> 显示器设置为更高的分辨率（开源）</p></li></ul><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul><li><p><a href="https://github.com/lwouis/alt-tab-macos">AltTab</a>：<code>AltTab</code> 将 <code>Windows</code> 的 <code>Alt-Tab</code> 窗口切换器带到 <code>MacOS</code>（开源）</p></li><li><p>Bartender</p><p>：方便的状态栏管理工具，开源替代品有：</p><ul><li><a href="https://github.com/Mortennn/Dozer">Dozer</a></li><li><a href="https://github.com/dwarvesf/hidden">hidden</a></li></ul></li><li><p><a href="https://github.com/balena-io/etcher">balenaEtcher</a>：镜像制作工具（开源）</p></li><li><p><a href="https://www.cakebrew.com/">cakebrew</a>： 如果使用 <code>Homebrew</code> 的话，可以使用这款来进行管理（开源）</p></li><li><p><a href="https://github.com/gao-sun/eul">eul</a>：系统状态监控工具（开源）</p></li><li><p><a href="https://justgetflux.com/news/pages/macquickstart/">flux</a>：一款比较好的免费屏幕护眼软件</p></li><li><p><a href="https://github.com/newmarcel/KeepingYouAwake">KeepingYouAwake</a>：根据自己的需求设置 <code>Mac</code> 多少分钟/多少小时后进入睡眠</p></li><li><p><a href="https://maccy.app/">Maccy</a>：剪贴板管理（开源）</p></li><li><p><a href="https://github.com/MonitorControl/MonitorControl">MonitorControl</a>：控制外部显示器的亮度和音量（开源）</p></li><li><p><a href="https://github.com/jacklandrin/OnlySwitch">OnlySwitch</a>：系统功能快速开关工具（开源）</p></li><li><p><a href="https://www.parallels.com/">Parallels Desktop</a>：能让您在 <code>Mac</code> 上同时使用 <code>Windows</code> 等系统</p></li><li><p><a href="https://github.com/sbarex/SourceCodeSyntaxHighlight">SourceCodeSyntaxHighlight</a>：增强文件预览（开源）</p></li><li><p><a href="https://tunnelblick.net/">Tunnelblick</a>：<code>OpenVPN</code> 客户端（开源）</p></li><li><p><a href="https://lemon.qq.com/">腾讯柠檬</a>：腾讯出品的系统清理工具（开源）</p></li></ul><h2 id="编程开发"><a href="#编程开发" class="headerlink" title="编程开发"></a>编程开发</h2><ul><li><p><a href="https://www.anaconda.com/">Anaconda</a>：数据科学常用 <code>Python</code> 环境管理程序</p></li><li><p><a href="https://github.com/ObuchiYuki/DevToysMac">DevToysMac</a>：程序员常用工具集（开源）</p></li><li><p><a href="https://www.docker.com/">Docker</a>：用容器化的形式使用一些常用软件，推荐使用 <a href="https://github.com/portainer/portainer">portainer</a> 管理（开源）</p></li><li><p><a href="https://github.com/macvim-dev/macvim">MacVim</a>：文本编辑器（开源）</p></li><li><p>Offset Explorer</p><p>：个人免费的跨平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kafka</span><br></pre></td></tr></table></figure></li></ul><p>  界面管理工具，</p><ul><li><p><a href="https://github.com/provectus/kafka-ui">kafka-ui</a>：<code>Web</code> 自部署，简洁好用、速度快、颜值高（开源）</p></li><li><p><a href="https://code.visualstudio.com/">VSCode</a>：微软出品的免费跨平台代码编辑器（开源）</p></li><li><p>终端：</p><ul><li><a href="https://github.com/electerm/electerm">electerm</a>：一款基于 <code>Electron</code> 开发的 <code>SSH/SFTP</code> 跨平台客户端、（开源）</li><li><a href="https://iterm2.com/">Iterm2</a>：免费好用的终端工具，一般搭配 <code>Brew</code> 和 <code>ZSH</code> 使用</li><li><a href="https://github.com/Eugeny/tabby">tabby</a>：一个可高度配置的终端模拟器和 <code>SSH</code> 或串口跨平台客户端（开源）</li><li><a href="https://github.com/kingToolbox/WindTerm">WindTerm</a>：基于 <code>C</code> 语言开发的的专业级替代品（开源）</li></ul></li><li><p>数据库：</p><ul><li>通用：<ul><li><a href="https://github.com/beekeeper-studio/beekeeper-studio">beekeeper-studio</a>：跨平台的 <code>SQL</code> 编辑器和数据库管理器（开源）</li><li><a href="https://github.com/dbeaver/dbeaver">DBeaver</a>：为开发人员、<code>SQL</code> 程序员、数据库管理员和分析人员提供的免费多平台数据库工具，有 <code>JDBC</code> 驱动即可支持使用（开源）</li><li><a href="https://github.com/dbgate/dbgate">dbgate</a>：支持 <code>Mysql、Postgresql、SQL Server、Mongodb、Redis、SQLite</code> 等数据库的管理软件，同时也满足在 <code>Windows、Linux、Mac Web</code> 下运行，还提供插件体系（开源）</li></ul></li><li>Elasticsearch：<ul><li><a href="https://github.com/1340691923/ElasticView">ElasticView</a>：简单好用的 <code>ES</code> 可视化客户端，支持连接6，7，8版本（开源）</li><li><a href="https://opensource.appbase.io/mirage/">appbaseio/mirage</a>：用于简化 <code>ES</code> 查询语句编写的项目，你可以用基于块的交互形式来组成 <code>Elasticsearch</code> 查询语句（开源）</li><li><a href="https://github.com/cars10/elasticvue">elasticvue</a>：基于 <code>Vue</code> 的 <code>Elasticsearch</code> 管理客户端，支持<a href="https://chrome.google.com/webstore/detail/elasticvue/hkedbapjpblbodpgbajblpnlpenaebaa/related?utm_source=chrome-ntp-icon">浏览器插件</a>和 <code>Docker</code> 自建（开源）</li></ul></li><li>MongoDB：<ul><li><a href="https://github.com/mongo-express/mongo-express">mongo-express</a>：可自建的 <code>MongoDB</code> 数据库管理软件，针对线上数据库需要共享的需求，可以统一部署在一台服务器给所有员工用，然后设置只读模式，非常实用（开源）</li><li><a href="https://github.com/Studio3T/robomongo">Robo 3T</a>：<code>MongoDB</code> 数据库管理软件（开源）</li></ul></li><li>MySQL：<ul><li><a href="https://github.com/Sequel-Ace/Sequel-Ace">Sequel-Ace</a>：原生的 <code>MySQL/MariaDB</code> 数据库管理软件（开源）</li></ul></li><li>Redis：<ul><li><a href="https://github.com/qishibo/AnotherRedisDesktopManager">AnotherRedisDesktopManager</a>：跨平台的 <code>Redis</code> 桌面管理客户端，性能出众（开源）</li><li><a href="https://github.com/Kuari/RedisFish">RedisFish</a>：一款便捷、跨平台、专注于数据的 <code>Redis GUI</code> 客户端（开源）</li></ul></li><li>PostgreSQL：<ul><li><a href="https://github.com/pgadmin-org/pgadmin4">pgadmin4</a>：跨平台的 <code>PostgreSQL</code> 数据库管理软件（开源）</li></ul></li><li>SQLite：<ul><li><a href="https://github.com/sqlitebrowser/sqlitebrowser">sqlitebrowser</a>：<code>DB4S</code> 是一个高质量、可视化、开源的工具，用于创建、设计和编辑与 <code>SQLite</code> 兼容的数据库（开源）</li></ul></li></ul></li><li><p>API 请求调试：</p><ul><li><a href="https://github.com/hoppscotch/hoppscotch">hoppscotch</a>：基于 <code>Web</code> 提供服务（开源）</li><li><a href="https://github.com/Kong/insomnia">insomnia</a>：跨平台 （开源）</li><li><a href="https://www.postman.com/">Postman</a>：比较老牌的 <code>API</code> 接口功能测试工具</li><li><a href="https://github.com/star7th/showdoc">showdoc</a>：一个非常适合 IT 团队的在线 <code>API</code> 文档、技术文档工具（开源）</li><li><a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client">Thunder Client</a>：如果使用<a href="https://code.visualstudio.com/">VSCode</a>，推荐使用这款插件 💡</li></ul></li></ul><h2 id="浏览娱乐"><a href="#浏览娱乐" class="headerlink" title="浏览娱乐"></a>浏览娱乐</h2><ul><li><a href="https://www.aliyundrive.com/">aliyundrive</a>：阿里云盘</li><li><a href="https://github.com/blogwy/BilibiliVideoDownload">BilibiliVideoDownload</a>：跨平台下载 <code>bilibili</code> 视频桌面端软件（开源）</li><li><a href="https://www.google.com/chrome/">Chrome</a>：浏览器</li><li><a href="https://github.com/iina/iina">iina</a>：现代化的视频播放器（开源）</li><li><a href="https://apps.apple.com/us/app/irvue/id1039633667?mt=12">Irvue</a>：基于 Unsplash 的免费壁纸切换工具</li><li><a href="https://www.mowglii.com/itsycal/">itsycal</a>：一款简单优雅的菜单栏日历（开源）</li><li><a href="https://github.com/justinfrankel/licecap">licecap</a>：轻量小巧的录屏工具（开源）</li><li>沟通：<a href="https://weread.qq.com/">微信</a> | <a href="https://www.dingtalk.com/">钉钉</a> | <a href="https://telegram.org/">TG</a></li><li><a href="https://www.stellarplayer.com/">恒星播放器</a>：一款纯粹专注的播放器</li><li><a href="https://music.163.com/">网易云音乐</a>：推荐一款开源替代品 <a href="https://github.com/qier222/YesPlayMusic">YesPlayMusic</a></li></ul><h2 id="阅读写作"><a href="#阅读写作" class="headerlink" title="阅读写作"></a>阅读写作</h2><ul><li><a href="https://ripperhe.gitee.io/bob/#/">Bob</a>：翻译工具（开源，但是正式版买断收费）</li><li><a href="https://github.com/yang991178/fluent-reader">fluent-reader</a>：<code>RSS</code> 阅读器（开源）</li><li><a href="https://joplinapp.org/">Joplin</a>：跨平台笔记管理工具，有不错的社区支持（开源）</li><li>Pngyu](<a href="https://joplinapp.org/)%EF%BC%9A%E5%85%8D%E8%B4%B9%E7%9A%84PNG%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%90%8C%E6%A0%B7%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BF%98%E6%9C%89%EF%BC%9A">https://joplinapp.org/)：免费的PNG图片压缩工具，同样好用的还有：</a><ul><li><a href="https://github.com/kyleduo/TinyPNG4Mac">TinyPNG4Mac</a>（开源）</li><li><a href="https://imageoptim.com/mac">ImageOptim</a>（开源）</li></ul></li><li><a href="https://typora.io/releases/all">Typora</a>：比较经典的所见即所得 <code>Markdown</code> 编辑器（提供免费版）</li><li><a href="https://github.com/gee1k/uPic">uPic</a>：原生的图床管理工具（开源）</li><li><a href="https://xnipapp.com/">Xnip</a>：挺不错的截图软</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何找出Java进程占用CPU高的元凶(转发)</title>
      <link href="129d01fc.html"/>
      <url>129d01fc.html</url>
      
        <content type="html"><![CDATA[<p>转发: <a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&mid=2247543282&idx=1&sn=b0b3d858b70c49c996221d265fa0fecf&chksm=e86b7b221aface2870c9b4217eeffd4e8e0c953937bf8492e7f83fb102260f922a39c2f11da1&mpshare=1&scene=24&srcid=12059mpwWmSG7Rse36RT6hp5&sharer_shareinfo=788a814db98d7ed844f50438fa229815&sharer_shareinfo_first=788a814db98d7ed844f50438fa229815#rd">如何找出Java进程占用CPU高的元凶</a></p><p>开发的时候登录OSS控制台预发机器，发现Java进程CPU占用率其高，按道理预发机器只是内部开发及产品会使用，根本不可能占用这么大的资源，第一反应就是，进程在某个地方死循环了。</p><p><img src="../img/640.webp" alt="图片"></p><p>二、调查</p><p>猜测归猜测，还是要用事实说话。</p><p>第一步：top -Hp 15057 查看下进程中的线程资源占用情况</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLbC5OYRrb96ib9NtMYx13mBXNRQ4Wo5qgtqRX3aGuGP5F3S2tylTgOIkZ0oAKib5S95rCHT5dndtLw/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>由上图可见，CPU时间片主要是被15393 这个线程给吃掉了， 所以目标锁定在 15393。</p><p>执行 printf “%x\n” 15393，计算出线程ID对应的16进制。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLbC5OYRrb96ib9NtMYx13mB1qn6Mibf92Gdo9tTVV1fIY17TLhZZ8lpO7BblibVJYxZAic33hUrAUJzQ/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>第二步：执行 sudo -u www jstack 15057，获取当前进程中各线程的调用栈</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLbC5OYRrb96ib9NtMYx13mBpQZSuJsBib6ic8L3YDZgibNp7XcCITDrzpH85yTWYqZKjOJjfb1PLoib3A/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>对比之前计算出来的二进制id：3c21，找到占用CPU资源最高的线程堆栈，如上图所示。</p><p>看样子是在LoguUtil的255行出了问题，赶紧定位到这一行看看：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLbC5OYRrb96ib9NtMYx13mBbW0MKG09EfsWlprtvrSvxOF8gLCaibwfSL75iaCp9AIHv7icKB6PMmuibw/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这里写了一个死循环，并在255行调用了阻塞队列的poll（），很明显，方法调用错了，poll（）在队列会空的时候会直接返回null，并不会阻塞等待，所以造成进程一直在这儿死循环。</p><p>那么为什么测试的时候没有发现呢？因为只要有日志，代码很难走到255行，之所以能发现这个问题，是因为我登录机器这段时间是在深夜，刚好没有日志。</p><p>三、验证</p><p>将代码修改提交部署后，在登录机器看看CPU占用情况：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLbC5OYRrb96ib9NtMYx13mB6LbLXY614icHcFic4UkmrhQOibcxGJe9mZgOcwYSgynahzOHhjecmoQHQ/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>此时Java进程的CPU占用已经恢复正常了。</p><p>四、总结</p><p>平时开发需求，除了验证基本的功能完整性之外，一定要注意对性能的影响，及时发现并解决问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql连接问题</title>
      <link href="22281c22.html"/>
      <url>22281c22.html</url>
      
        <content type="html"><![CDATA[<p>在使用 bitnami 的镜像来搭建 mysql 的集群环境,但是突然驱动出现了问题,进入容器对于的那台机器查询对于的命令</p><blockquote><p>/opt/bitnami/mysql/bin/mysqld –defaults-file=/opt/bitnami/mysql/conf/my.cnf –basedir=/opt/bitnami/mysql –datadir=/ bitnami/mysql/data –socket=/opt/bitnami/mysql/tmp/mysql.sock –bind-address=127.0.0.1 –skip-slave-start –upgrade=force</p></blockquote><p><img src="../img/image.png"></p><p>研究了一通是因为  –upgrade=force ,目前由于我们是bitnami集群时[<a href="https://github.com/bitnami/containers/issues/44854">bitnami/mysql] installed in the k8s cluster keeps prompting that the upgrade fails after restarting · Issue #44854 · bitnami/containers</a></p><p>同时在容器中常见的命令地址如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;opt&#x2F;bitnami&#x2F;scripts&#x2F;mysql&#x2F;entrypoint.sh </span><br><span class="line">&#x2F;opt&#x2F;bitnami&#x2F;scripts&#x2F;mysql&#x2F;run.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java线程池注意事项</title>
      <link href="8a4449c5.html"/>
      <url>8a4449c5.html</url>
      
        <content type="html"><![CDATA[<p>java 线程池使用的人很多,通常情况下为了不注册当前的线程的执行,同时提升执行的效率</p><p>但是需要有时候使用不当回出现意想不到的问题,不如下面这种问题</p><p><a href="https://javaguide.cn/java/concurrent/java-thread-pool-best-practices.html#spring-%E5%86%85%E9%83%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%9D%91">Java 线程池最佳实践 | JavaGuide</a></p><p><a href="https://javaguide.cn/java/concurrent/java-thread-pool-best-practices.html#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%92%8C-threadlocal-%E5%85%B1%E7%94%A8%E7%9A%84%E5%9D%91">线程池和 ThreadLocal 共用的坑</a></p><p>在线程池中使用了比如 springMVC中设置了 ThreadLocal方便其他的线程使用,但是有几个问题,上一次设置的ThreadLocal 变量可能会被覆盖导致,拿不到想要的值.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>quartz使用问题</title>
      <link href="81077f05.html"/>
      <url>81077f05.html</url>
      
        <content type="html"><![CDATA[<p>接手公司的代码在使用 quartz 中使用了,最近在开发新功能,突然任务都阻塞的,后面发现是是因为改动了一部分代码导致执行了这部分代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trigger &#x3D; TriggerBuilder.newTrigger().withIdentity(jobName, TRIGGER_GROUP_NAME).startAt(startTime).endAt(endTime).build(); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>远程访问线程后显示我没有设置withSchedule 导致一直访问</p><blockquote><p>SELECT * FROM T_QRTZ_LOCKS WHERE SCHED_NAME = ‘quartzScheduler_dq’ AND LOCK_NAME = ‘TRIGGER_ACCESS’ FOR UPDATE</p></blockquote><p>研究了一下在 Quartz 调度框架中，触发器（Trigger）是用于定义任务的启动、结束时间、重复执行间隔等细节的。当没有设置 <code>withSchedule</code> 时，Quartz 默认的行为是认为这个触发器是一个“一次性”触发器，即在 <code>startAt</code> 指定的时间启动，并且不会重复执行。</p><p>然而，<code>T_QRTZ_LOCKS</code> 表格是 Quartz 用来管理锁和调度状态的数据库表，<code>LOCK_NAME = &#39;TRIGGER_ACCESS&#39;</code> 说明当前 Quartz 调度器正在尝试获取对某个资源的锁，可能是在创建或执行触发器时遇到了并发问题。具体来说，这种情况可能是由于以下原因导致的：</p><ol><li>锁的竞争：创建的触发器没有明确的调度计划（例如，没有设置 <code>withSchedule</code>），可能导致 Quartz 试图获取资源的锁，而该锁在其他地方已经被占用。Quartz 会用数据库表 <code>T_QRTZ_LOCKS</code> 来保证分布式环境中不同调度器的协调，防止重复执行。正在尝试访问的锁是 <code>TRIGGER_ACCESS</code>，Quartz 在执行时检查并锁定资源，以防止多个实例同时执行同一个任务。</li><li>没有指定调度计划（Schedule）：如果没有设置 <code>withSchedule</code>，Quartz 会认为这个任务没有重复执行的计划，这意味着每次启动时，Quartz 可能会频繁地访问锁，造成资源竞争。</li></ol><h3 id="目前解决方案："><a href="#目前解决方案：" class="headerlink" title="目前解决方案："></a>目前解决方案：</h3><ul><li><p>设置触发器的调度计划：可以使用 <code>withSchedule</code> 来设置触发器的调度计划</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trigger &#x3D; TriggerBuilder.newTrigger().withIdentity(jobName, TRIGGER_GROUP_NAME).startAt(startTime).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(60)  &#x2F;&#x2F; 每60秒执行一次.repeatForever())  &#x2F;&#x2F; 重复执行.build();&#96;</span><br></pre></td></tr></table></figure></li></ul><ul><li>检查并发执行：如果系统是分布式的，确保 Quartz 实例之间的锁定机制正常工作。Quartz 通过数据库锁来防止多个调度器同时处理同一个任务，确保任务的唯一执行。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从头到尾说一说Java时间日期体系的前世今生(转载)</title>
      <link href="afee6eb0.html"/>
      <url>afee6eb0.html</url>
      
        <content type="html"><![CDATA[<p>转载链接:  <a href="https://mp.weixin.qq.com/s?src=11&timestamp=1736572324&ver=5743&signature=PJXVw3zvmhLrj*-*Mp3vngu7NlHlvoQoyS-WWdLwf0niEjgyecqHKWBxTlg6Yf2OUM2h78zZFuNRuSuozeA5CKuFJVogAx4QWfgzTm4ogSiXZ0hLObff60N6iurUVSGO&new=1">从头到尾说一说Java时间日期体系的前世今生</a></p><p>在计算机领域作者重新梳理了计算机世界里日期时间体系的前世今生。</p><p>突击检查</p><p>如下代码输出什么，机器当下所设定的时区为美国时区，在北京时间 2024-12-07 11:20:51 时，传入字符串“2024-12-07 11:46:36”。最终输出应该是true，还是false呢？</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MjdhODc2YzgxOWIyMGYyMWM5ZTRlYjk4YjFlNWZlMjJfQzFoTzNVQzFwdjlQNzU4RE1iQ0haYmw3ejBQbG9la1NfVG9rZW46UndSNWJVZEFQb0x6VER4cUJDSWM2OU5Vbm5oXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>前言</p><p>约38亿年前地球出现生命体，约46亿年前太阳系形成，大约138亿年前宇宙大爆炸，那再往前呢？想起吕秀才对姬无命发出灵魂之问『时间是否有开端，宇宙是否有尽头』。施一公曾经在一次演讲中说，宇宙中从来不存在时间，只存在运动。地球公转太阳一圈是一年，这是运动，地球自转一圈是一天，这也是运动。从来就没有时间，或者说时间就是空间。</p><p>『三十年春，秦晋围郑。郑伯使烛之武如秦』两千多年前我们就以时间记事，在造物主已经缔造的这一片井然有序的世界里，我们凭空创建出一个新的概念，并不断尝试融入这个世界体系–沙漏、水钟、日晷等等。今天站在计算机这个领域，也让我们重新梳理一遍，计算机世界里日期时间体系的前世今生。</p><p>日期从1970 年1月1日说起</p><p>任何一个软件开发人员对这个时间应该都不陌生，有时我们忘记初始化或者忘记赋值时，日期就会显示为1970-01-01，我们也叫日期初始值。那为什么日期的初始值是从1970-01-01开始呢？有一个说法是说遵循了Unix的时间计数，Unix认为 1970年1月1日0点 [1]是时间纪元，那为什么Unix要以这个时间为准呢？</p><p>有一处说法是说，当时操作性系统都是32位，如果每一个数值代表一秒，那么最多可以表示2^32-1，也就是2147483647秒，换算成年大概是68年。而Unix系统就是由Ken Thompson、Dennis Ritchie和Douglas McIlroy等人在贝尔实验室开发于1969年开发的，他们为了让时间尽可能的多利用起来，便用了下一年，即 1970年1月1日作为开始，然后这个约定也逐步延伸到其他各个计算机领域。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NGI5ZjUyZWM5MTVkZDcwNGVhYzMzMmVlZmE5YTYxM2JfWWRxSUE5TlhQVTRFTVVvTHM1RW9ZbGpPMVZvQlYzVklfVG9rZW46VzJwbWJqVUxZbzA4cTV4QmpiTGNUWnpxbmFjXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>时间从GMT与UTC说起</p><p>聊完日期我们再来看时间，爱好体育的应该都知道，看欧冠得半夜起来看，看NBA得早上起来看，现在是北京时间的14点，同时也是纽约时间的凌晨1点半。那是因为我们各地处不同时区，那时区以什么为初始划分的呢？</p><p><strong>GMT</strong> <strong>格林威治时间</strong></p><p>GMT的全称是 Greenwich Mean Time [2]即格林威治标准时间，是一种与地球自转相关、以太阳日为单位的时间标准。在十七世纪，格林威治皇家天文台为了海上霸权的扩张计划，选择了穿过英国伦敦格林威治天文台子午仪中心的一条经线作为零度参考线，也就是我们教科书上记载的本初子午线。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjE3ZDhlNTNjNzA2MjUxYTZkYjAwNTkzNjFmOWYyNzVfWHlvTEtmcmJSWnJ2cThpU2sweEw5WGk1VmJwaHV1eXlfVG9rZW46SE9ja2JjcGpCb1ZiUmJ4ZlliN2NFTE5WbnNnXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>并约定从本初子午线起，经度每向东或者向西间隔15°，就划分一个新的时区[3]，每个时区间隔1小时，在这个区域内，大家使用同样的标准时间。但各个国家也会基于各个国家的情况拆分或合并时区，比如中国横跨5个时区，但我们统一使用东八区；而美国则有东部时间、西部时间、夏威夷时间等等。</p><p>从 1924 年开始，格林威治天文台每小时就会向全世界播报时间，最终截止到 1979 年。至于为什么会终止，自然有它的缺点和局限性，那我们就得聊聊UTC时间了。</p><p><strong>UTC</strong> <strong>世界协调时间</strong></p><p>UTC的全称是 Coordinated Universal Time [4]协调世界时间，也称世界标准时间。据说按英语的简称是CUT，按法语的简称是TUC，然后大家相互拉扯一波后，统一叫了UTC。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MjUxOTA1YTc2YmE5YjAxNWFlNzYyNmQwYjU2ZjNjMDNfUnlDdWhEVFBOd2s1SkRoMlZ1RGhhM29JSkZWeTl6OFFfVG9rZW46VmRKR2JJMjhrb0VZZTF4VnRUd2MzZmZvbjdmXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>上述所说GMT时间是以地球自转与围太阳公转来计时的，GMT时间认为地球自转一圈是24<em>3600秒，而地球的运动轨迹受很多方面影响，比如潮汐摩擦、气象变化、地震及地质活动等等，运动的时间周期并不是完全规律和相同的。这样会导致其实一天并不完全是24</em>3600秒，这样平均算下来GMT的一秒就不是完全意义上最精确的一秒。但偏差通常也不会很大，基本为毫秒级偏差，但日积月累如果不加以扶正，就会越差越远。</p><p>而UTC的计数是基于 原子钟（Atomic Clock） [5]的计数，比如铯原子钟采用铯-133原子的特性，在特定能级跃迁时会产生一个非常确定的频率9,192,631,770赫兹。然后基于铯-133原子的运动经过换算确定出我们需要的时间周期，据说这种误差可达每百万年内不到一秒。</p><p>UTC 最终由两部分构成：原子时间与世界时间。原子时间基于原子钟，来标准化我们钟表中每一秒时间前进的数据；世界时间是结合GMT时间，我们用多少个原子时来决定一个地球日的时间长度。从1972年开始，UTC被正式采用为国际标准时间。这年实施了一种新的时间调整机制，包括使用闰秒[6]以便对齐地球自转与原子时间。</p><p>JDK 时间日期的发展史</p><p><strong>糟糕的java.util.Date</strong></p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NjA1MDE4M2I4YjQxMTk2MGVlOWZmYWZiNDM1NmM1NTJfbjNLdHpLMlY2QlBuQkdibndESE1KQkQ3S0pMTkNJZFRfVG9rZW46RWNRcWJpdHJFb2owazB4elFVSmNwekRybmJkXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>说起Date那可是JDK的正牌嫡系，从1.0开始就一直存在并延续至今。但只要大家用过一些代码扫描工具，基本都是在提示你尽量不要使用Date。在oracle的官方JDK文档中，有超过一半的函数都是deprecated，要细说Date的问题，那可真是一言难尽。</p><h3 id="不能单独表示日期或时间"><a href="#不能单独表示日期或时间" class="headerlink" title="不能单独表示日期或时间"></a>不能单独表示日期或时间</h3><p>Sat Dec 07 17:36:58 CST 2024 这是我们输出new Date()之后的数据，因为Date本质是某一个时刻的时间戳，导致它不能单独表示日期，更不能表示不带日期的时间。</p><h3 id="令人捉摸不透的API"><a href="#令人捉摸不透的API" class="headerlink" title="令人捉摸不透的API"></a>令人捉摸不透的API</h3><p>单就Date的方法名来看，应该是非常友好的。它提供了getYear(), getDay()等等，你但凡用过一次，一定让你抓狂。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;    Date date = new Date();    // 输出 6    System.out.println(date.getDay());    // 输出 11    System.out.println(date.getMonth());    // 输出 124    System.out.println(date.getYear());&#125;</span><br></pre></td></tr></table></figure><p>day和month是从0开始计数的，所以月最大是11，日最大是30，年输出124是因为2024年距离1900年有124年。至于为什么是减1900，有知道的小伙伴评论区打出来😂。</p><h3 id="不支持时区设定"><a href="#不支持时区设定" class="headerlink" title="不支持时区设定"></a>不支持时区设定</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date now = Calendar.getInstance(Locale.CHINA).getTime();</span><br></pre></td></tr></table></figure><p>曾经写过一段这样的代码，取当前的中国时间，被老板臭骂一顿。。。Date的本质是一个时间戳。当前此时此刻，全球任何一个地方的时间戳都是同一个，Date本身不支持时区。PS.本质上这行代码也指定不了时区哦~</p><h3 id="Date是可变的"><a href="#Date是可变的" class="headerlink" title="Date是可变的"></a>Date是可变的</h3><p>Date是一个非常基础底层的类，但它却设计为可变。当我们计算这个data3天后是不是周末，如果程序计算中把这个date加了3天，那么你手上拿着得date也变成了3天后的日期。相比同为底层基础类的String，做得就优秀多了。</p><p><strong>难当大任的Calendar</strong></p><p>JDK刚推出就发现了问题，于是赶紧在1.1版本推出了Calendar，尝试用来解决令人诟病的Date，并将Date一众函数都标记为了deprecated。但Calendar依然是可变对象、最多也只能精确到毫秒、线程不安全、API的使用复杂且笨重等等，Calendar整体而言并没有挽回颓势。</p><p><strong>曙光来临之JSR310</strong></p><p>在聊JSR310之前，不得不先提一提 Joda-Time [7]这个开源Java库。Joda-Time以清晰的API、良好的时区支持、不可变性、强类型化等特性，得到了开发者社区的广泛好评，并在很多项目中被采用，被视为改善Java日期和时间处理的标杆库。Joda-Time如此优秀，Oracle也开启了收编之旅。2013年Java8发布，其中针对日期时间带来一套全新的标准规约 JSR310 [8]，而JSR310的核心制作者就是Joda-Time的作者Stephen Colebourne。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YjRkODRiYWEyNDhhMDVhNDVkYzRlMjdjZDFhMTUxZTlfYWlEdkxHNmlGZnZoODRUM1dRU1ZHd0M5TWJGS3VJamRfVG9rZW46TXlBSWI4RXlvb0o3dHd4SW84ZmNpcHpXbmJoXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>Instant</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/** * The number of seconds from the epoch of 1970-01-01T00:00:00Z. */private final long seconds;/** * The number of nanoseconds, later along the time-line, from the seconds field. * This is always positive, and never exceeds 999,999,999. */private final int nanos;</span><br></pre></td></tr></table></figure><p>Instant这个单词的中文含义是『瞬间』，严格来说Java8之前的Date就应该是现在的Instant。Instant类有维护2个核心字段，当前距离时间纪元的秒数以及秒中的纳秒部分。它指代当前这个时刻，全球任一位置这一时刻都是同一时刻。这一时刻川建国同学在高床软枕打着呼，这一时刻我泡着龙井写着文稿。</p><h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/******************** LocalDate ********************/    /**     * The year.     */    private final int year;    /**     * The month-of-year.     */    private final short month;    /**     * The day-of-month.     */    private final short day;</span><br><span class="line">/******************** LocalTime ********************/    /**     * The hour.     */    private final byte hour;    /**     * The minute.     */    private final byte minute;    /**     * The second.     */    private final byte second;    /**     * The nanosecond.     */    private final int nano;</span><br></pre></td></tr></table></figure><p>LocalDateTime由LocalDate和LocalTime组成，分别日期和时间，以此来解决Date中不能单独表示日期和时间的问题。它们都与时区无关，只客观代表一个无时区的时间，比如2024-12-08 13:46:21，LocalDateTime记录着它的年、月、日、时、分、秒、纳秒。但具体是北京时间的13点还是伦敦时间的13点，由上下文语境自行处理。</p><h3 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h3><p>Duration中文含义译为『期间』，通常用来计算2个时间之前相差的周期，不得不说这一套时间JDK确实定义得语义非常清晰。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Instant startInstant = xxx;Instant endInstant = xxx;Duration.between(startInstant, endInstant).toMinutes();</span><br></pre></td></tr></table></figure><p>这个很好理解，比较2个时间戳时间的相差分钟数。但如果换成LocalDateTime，会是怎样呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime startTime = xxx;LocalDateTime endTime = xxx;Duration.between(startTime, endTime).toMinutes();</span><br></pre></td></tr></table></figure><p>因为LocalDateTime是不带时区的，所以LocalDateTime是不能直接换成成Instant的。而Duration的比较也是不带时区的，或者你可以理解它是把时间放在同一个时区进行比较，来抹去时区的影响。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/********************* JDK Duration.between 部分源码 *******************************/@Overridepublic long until(Temporal endExclusive, TemporalUnit unit) &#123;    LocalDateTime end = LocalDateTime.from(endExclusive);    if (unit instanceof ChronoUnit) &#123;        if (unit.isTimeBased()) &#123;            long amount = date.daysUntil(end.date);            if (amount == 0) &#123;                return time.until(end.time, unit);            &#125;            long timePart = end.time.toNanoOfDay() - time.toNanoOfDay();            if (amount &gt; 0) &#123;                amount--;  // safe                timePart += NANOS_PER_DAY;  // safe            &#125; else &#123;                amount++;  // safe                timePart -= NANOS_PER_DAY;  // safe            &#125;// 余下省略&#125;</span><br></pre></td></tr></table></figure><p>上述是Duration部分源码，它首先计算出2个时间相差多少天，再比较当天的时间里相差多少纳秒，再进行累加。所以你传过来2024-12-08 和 2024-12-04，那就是相差4天，至于是北京时间的12-08还是伦敦时间的12-04，在Duration里都被抹去了时区的概念。 <strong>看到这里，上面的编程题里做对了吗？</strong></p><h3 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h3><p>真正需要使用时区，我们就需要用到ZonedDateTime。「zoned」这个单词在英汉词典中是zone的过去分时，译为『划为区域的』。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 输出：2024-12-08T14:18:32.554144+08:00[Asia/Shanghai]ZonedDateTime defaultZoneTime = ZonedDateTime.now(); // 默认时区// 输出：2024-12-08T01:18:32.560931-05:00[America/New_York]ZonedDateTime usZoneTime = ZonedDateTime.now(ZoneId.of(&quot;America/New_York&quot;)); // 用指定时区获取当前时间</span><br></pre></td></tr></table></figure><p>因为LocalDateTime是没有时区的，如果我们需要将LocalDateTime转成ZonedDateTime，就需要带上时区信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.of(2024, 12, 8, 14, 21, 17);ZonedDateTime zonedDateTime = localDateTime.atZone(ZoneId.systemDefault());ZonedDateTime usZonedDateTime = localDateTime.atZone(ZoneId.of(&quot;America/New_York&quot;));</span><br></pre></td></tr></table></figure><p>随着JDK不断地发布演进，Time模块确实得到了质的提升，这里不一一细说Java日期时间相关API。如果你还在苦于对Date做各种Utils的花式包装，请拥抱java.time吧。</p><p>时间日期引起的惨案</p><p><strong>夏令时与冬令时</strong></p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MjFlNzJjNzJjYTZlNjE0Mzk4ZDZmNWE5ZmYwMWNjN2ZfMnlvTHVMVmtlZGs0d2pROUh4ZWtaZ0pOVXFsTTdvdEJfVG9rZW46VDdLR2JRRHo3b0ZYS3N4ZEtVT2NReHA0bkZkXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><p>曾经小A做了一个鉴权系统，用于对请求做加密解密，保证每一次都是真实合法有效的接口请求。其中做了一个判定，如果请求的时间距现在已经超过10分钟，就会拒绝该次请求。从逻辑上来说，这很合理，但问题的雪崩却出现在3月的那个晚上。。。</p><h3 id="什么是夏令时"><a href="#什么是夏令时" class="headerlink" title="什么是夏令时"></a>什么是夏令时</h3><p>夏令时[9]又称夏时制，英文原文为Daylight Saving Time，从名字上可以看出，夏令时诞生的背景是为了更好的利用白天的时间。夏令时概念的提出最早可以追溯到1895年，新西兰昆虫学家乔治·哈德逊向惠灵顿哲学学会提出，提前2小时的日光节约提案，以此在工作结束后，可以获得多出一段的白昼时间。</p><p>具体夏令时的实施，以美国为例，美国会在每年3月的第二个星期日的凌晨2:00，时钟会往前调1个小时变为3:00。再在每年11月的第一个星期日的凌晨2:00，将时钟在往后调1个小时变成1:00，此时的回拨也被称为“冬令时”。</p><h3 id="夏令时实施的国家与地区"><a href="#夏令时实施的国家与地区" class="headerlink" title="夏令时实施的国家与地区"></a>夏令时实施的国家与地区</h3><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NWVkOGM1MDRjNDE5ZjU0MzNjNjAyYzkzYzA5NzljMTlfbWN5VVN4emdwWEw2WHhwbkhMYlZieUdxSWVkbkN3TFNfVG9rZW46RHVKcWJXR3VPb0FpcjZ4QVlFT2M2eFFBbjNkXzE3MzY1NzI0NjU6MTczNjU3NjA2NV9WNA" alt="img"></p><blockquote><p>蓝色为正在实施夏令时的国家和地区 灰色为曾经实施但现在已经取消夏令时的国家和地区 黑色为从未实施夏令时的过去和地区</p></blockquote><p>1916年4月30日，德国与奥匈帝国成为世界上第一组实施夏时制的国家，目的是为了能在战争期间节约煤炭消耗。在1970年代，由于美洲与欧洲地区也受到能源危机影响，至此夏令时开始广泛被实施。当下全球有共约70多个国家和时区在使用夏令时，我国也曾短暂使用过夏令时，但因节约能源效果不显著，以及对日常生活工作等带来的一些影响，到1992年全国宣布取消夏令时。</p><p><strong>闰年与闰秒</strong></p><p>2008年是闰年存在2月29日，但微软一些软件在处理部分任务的时候会因为闰年导致处理错误。微软甚至在SQL Server 2008 CTP发布后曾经宣读了一份证明，建议用户不要在2月29日安装和运行软件，以减少影响。并且在Windows Small Business Server上还会出现更严重的错误：因为在微软的日历里根本没那么一天，因此就无法颁发证书。</p><h3 id="为什么要闰年"><a href="#为什么要闰年" class="headerlink" title="为什么要闰年"></a>为什么要闰年</h3><p>闰年大家比较熟悉，闰年的设置是为了使日历年与太阳年（即地球绕太阳公转一周的时间）更精准地一致。严格来说地球绕太阳一圈的时间，大约是365.2422天。经过大约四年，累计误差将接近一天（0.2422 * 4 ≈ 0.9688天），但如果每4年就加1天，这样每128年又会多算出1天。所以基于此定义出了普通闰年与世纪闰年。</p><ul><li>普通闰年：公历年份是4的倍数，且不是100的倍数的，为闰年（如2004年、2020年等就是闰年）。</li><li>世纪闰年：公历年份是整百数的，必须是400的倍数才是闰年（如1900年不是闰年，2000年是闰年）。</li></ul><h3 id="为什么要闰秒"><a href="#为什么要闰秒" class="headerlink" title="为什么要闰秒"></a>为什么要闰秒</h3><p>闰秒[10]本质上和闰年的作用是一样的，也是解决时间解释运动中所存在的偏差。闰秒的调整是为了确保协调世界时（UTC）与地球自转时间（UT1）[11]保持一致。由于地球自转速度的不均匀性和减慢，UTC需要定期添加或删除一秒钟来进行调整，这一秒钟称为“闰秒”。</p><p>国际地球自转与参考系统服务（IERS）是负责监测和发布闰秒调整的机构。ERS会根据地球自转的实际变化和测量数据，决定是否需要调整闰秒。闰秒通常在6月30日或12月31日的最后一秒添加或删除。这意味着在某些年份，时间序列可能会变为：23:59:59 → 23:59:60 → 00:00:00。</p><p>写在最后</p><p>『存在不一定合理，但一定有原因』这是曾经我的主管跟我说的，至今我也受益其中。对所有事情怀有一丝怀疑心态，搞懂它的前世今生，或许它不那么合理，但至少当时这样做解决了一定的问题，我们在做新设计的时候可以提前考虑与规避。水多了加面，面多了加水，如果我们只是看到当下的混乱就指着“前人”没有设计思想没有技术匠心，却不了解最初“前人”这样做的意图与背景，骂着“前人”的我们终有一天也会成为后人眼中的“前人”。</p><p><strong>参考链接：</strong> </p><p>[1]<a href="https://en.wikipedia.org/wiki/Unix_time">https://en.wikipedia.org/wiki/Unix_time</a></p><p>[2]<a href="https://baike.baidu.com/item/%E4%B8%96%E7%95%8C%E6%97%B6/692237">https://baike.baidu.com/item/世界时/692237</a></p><p>[3]<a href="https://www.timeanddate.com/time/zones/">https://www.timeanddate.com/time/zones/</a></p><p>[4]<a href="https://www.utctime.net/">https://www.utctime.net/</a></p><p>[5]<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E9%92%9F/765460">https://baike.baidu.com/item/原子钟/765460</a></p><p>[6]<a href="https://baike.baidu.com/item/%E9%97%B0%E7%A7%92">https://baike.baidu.com/item/闰秒</a></p><p>[7]<a href="https://www.joda.org/joda-time/">https://www.joda.org/joda-time/</a></p><p>[8]<a href="https://jcp.org/en/jsr/detail">https://jcp.org/en/jsr/detail</a></p><p>[9]<a href="https://baike.baidu.com/item/%E5%A4%8F%E4%BB%A4%E6%97%B6/1809579">https://baike.baidu.com/item/夏令时/1809579</a></p><p>[10]<a href="https://baike.baidu.com/item/%E9%97%B0%E7%A7%92/696742">https://baike.baidu.com/item/闰秒/696742</a></p><p>[11]<a href="https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E6%97%B6">https://zh.wikipedia.org/wiki/世界时</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程下使用threadlocal隐藏问题</title>
      <link href="undefined.html"/>
      <url>undefined.html</url>
      
        <content type="html"><![CDATA[<p><img src="../img/threadlocal_desc.png" alt="img"></p><p><img src="../img/thread_local_eval.png" alt="img"></p><p><img src="../img/thread_lcoal_save.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构算法学习</title>
      <link href="undefined.html"/>
      <url>undefined.html</url>
      
        <content type="html"><![CDATA[<p>数据是开发的基础是计算机类学科必学的科目之一,,但是数据结构比较抽象,有时候结合了算法更加是会让人头大,在学习过程中避免不了手搓,虽然可以 debug 来观察验证,但是不是可视化,</p><p>这个网站可以可视化的演示数据插入的过程 <a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualization</a></p><p>同时对于算法可以通过这个网站来学习 <a href="https://www.hello-algo.com/">Hello 算法</a></p><p>如果要系统学习 java 相关的开发知识推荐下面几个网站</p><p>   <a href="https://pdai.tech/md/arch/arch-z-transection.html">分布式系统 - 分布式事务及实现方案 | Java 全栈知识体系</a></p><p><a href="https://www.xiaolincoding.com/">小林coding</a></p><p>上面的网站涉及到 计算机基础,计算机网络,算法和数据结构,以及对于介绍,方方面面,设计模式和分布式的相关算法也有介绍</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker构建镜像优化(转发)</title>
      <link href="feb89734.html"/>
      <url>feb89734.html</url>
      
        <content type="html"><![CDATA[<h1 id="【提效】docker镜像构建优化-提速10倍"><a href="#【提效】docker镜像构建优化-提速10倍" class="headerlink" title="【提效】docker镜像构建优化-提速10倍"></a>【提效】docker镜像构建优化-提速10倍</h1><p><a href="https://mp.weixin.qq.com/s/qU6dSiMuH7xDHhTDCcLMhw">【提效】docker镜像构建优化-提速10倍</a></p><p>本文主要记录了自己通过查阅相关资料，一步步排查问题，最后通过优化Docerfile文件将docker镜像构建从十几分钟降低到1分钟左右，效率提高了10倍左右。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>一、概述</p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><p>最近在开发python应用程序，在部署应用的时候发现构建镜像过程十分缓慢，极大影响开发效率。既然遇到了问题就不要逃避，而应该尝试解决一下。本文主要记录了自己通过查阅相关资料，一步步排查问题，最后通过优化Docerfile文件将docker镜像构建从十几分钟降低到1分钟左右，效率提高了10倍左右。</p><p>本文通过如下几个部分进行介绍：</p><ul><li>现状：简单介绍一下未优化前的情况；</li><li>优化效果：简单介绍优化后的情况；</li><li>分析过程：介绍如何分析镜像构建存在的问题；</li><li>优化过程：介绍如何通过优化Dockerfile提高镜像构建效率；</li><li>优化总结：最后总结镜像构建的几个优化方法；</li></ul><p>通过本文的学习，你将有如下收获：</p><p>1.了解镜像构建优化的过程。</p><p>2.了解一些常用的镜像构建优化的技巧。</p><p>二、优化前效果</p><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwW7EbabdqX5mRpjowC1SSoQFWuRrO78UnRuibr3MuibmyGMsaF56xuBeg/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>未优化前可以看到镜像构建耗时<strong>16分钟</strong>，构建完成后<strong>镜像大小约8G</strong>，使用的Dockerfile文件如下：</p><ul><li></li><li></li><li></li><li></li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM reg.docker.alibaba-inc.com&#x2F;aci-images&#x2F;python-service:3.8.0-63928922</span><br><span class="line"># init folderRUN mkdir -p &#x2F;home&#x2F;admin&#x2F;logs &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;bin &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;conf &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;nginx &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;.maxhub&#x2F;env_helper_util&#x2F;zeta-local-env</span><br><span class="line"># install zetaRUN pushd &#x2F;home&#x2F;admin&#x2F;.maxhub&#x2F;env_helper_util&#x2F;zeta-local-env &amp;&amp; \    wget https:&#x2F;&#x2F;artifacts.antgroup-inc.cn&#x2F;artifact&#x2F;repositories&#x2F;softwares-common&#x2F;antcode&#x2F;zeta&#x2F;0.7.9&#x2F;zeta-linux-amd64-0.7.9.sh -O zeta-release.sh &amp;&amp; \    chmod +x zeta-release.sh &amp;&amp; \    .&#x2F;zeta-release.sh --prefix&#x3D;&#x2F;usr&#x2F;local &amp;&amp; \    popd</span><br><span class="line"># init env and install softwareCOPY conf&#x2F;docker&#x2F;build.yaml &#x2F;root&#x2F;RUN python3.10 -m pip install -U antimgbuilder -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple &amp;&amp; \    python3.10 -m antimgbuilder --config-file &#x2F;root&#x2F;build.yaml</span><br><span class="line"># copy source file# COPY --chown&#x3D;admin:admin mydemo &#x2F;home&#x2F;admin&#x2F;release&#x2F;mydemoCOPY --chown&#x3D;admin:admin aml_core &#x2F;home&#x2F;admin&#x2F;release&#x2F;aml_coreCOPY --chown&#x3D;admin:admin backend &#x2F;home&#x2F;admin&#x2F;release&#x2F;backend</span><br><span class="line"># install  requirements.txtCOPY --chown&#x3D;admin:admin requirements.txt &#x2F;home&#x2F;admin&#x2F;release&#x2F;RUN python3.10 -m venv &#x2F;home&#x2F;admin&#x2F;run &amp;&amp; \    . &#x2F;home&#x2F;admin&#x2F;run&#x2F;bin&#x2F;activate &amp;&amp; \    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple-remote --upgrade pip &amp;&amp;\    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple -r &#x2F;home&#x2F;admin&#x2F;release&#x2F;requirements.txt</span><br><span class="line"># copy scriptsCOPY --chown&#x3D;admin:admin conf&#x2F;docker&#x2F;scripts&#x2F;admin &#x2F;home&#x2F;adminCOPY --chown&#x3D;admin:admin conf&#x2F;nginx &#x2F;home&#x2F;admin&#x2F;nginx</span><br><span class="line"># 最后确保admin目录下文件权限RUN chown admin:admin -R &#x2F;home&#x2F;admin</span><br><span class="line">RUN chmod a+xw &#x2F;home&#x2F;admin&#x2F;bin&#x2F;fetch_ollama.sh &#x2F;tmp</span><br></pre></td></tr></table></figure><p>三、优化后效果</p><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw1wFLaW9SpAdIcXPo8ZIRPiay3lictqcSibtv8dib7cuGDXiaqdKZEluRhLw/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>优化后可以看到镜像构建时间为1分钟左右，镜像大小约5G，使用的Dockerfile如下：</p><ul><li></li><li></li><li></li><li></li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 第一阶段：下载依赖FROM reg.docker.alibaba-inc.com&#x2F;antfin-sqa&#x2F;amlregservermodel-dev:20241016125401_b0296dab as builder</span><br><span class="line"># install  requirements.txtCOPY --chown&#x3D;admin:admin requirements.txt &#x2F;home&#x2F;admin&#x2F;release&#x2F;RUN python3.10 -m venv &#x2F;home&#x2F;admin&#x2F;run &amp;&amp; \    . &#x2F;home&#x2F;admin&#x2F;run&#x2F;bin&#x2F;activate &amp;&amp; \    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple-remote --upgrade pip &amp;&amp;\    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple -r &#x2F;home&#x2F;admin&#x2F;release&#x2F;requirements.txt --no-cache-dir</span><br><span class="line"></span><br><span class="line"># 第二阶段：构建应用程序镜像FROM reg.docker.alibaba-inc.com&#x2F;aci-images&#x2F;python-service:3.8.0-63928922</span><br><span class="line"># init folderRUN mkdir -p &#x2F;home&#x2F;admin&#x2F;logs &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;bin &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;conf &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;nginx &amp;&amp; mkdir -p &#x2F;home&#x2F;admin&#x2F;.maxhub&#x2F;env_helper_util&#x2F;zeta-local-env</span><br><span class="line"># install zetaRUN pushd &#x2F;home&#x2F;admin&#x2F;.maxhub&#x2F;env_helper_util&#x2F;zeta-local-env &amp;&amp; \    wget https:&#x2F;&#x2F;artifacts.antgroup-inc.cn&#x2F;artifact&#x2F;repositories&#x2F;softwares-common&#x2F;antcode&#x2F;zeta&#x2F;0.7.9&#x2F;zeta-linux-amd64-0.7.9.sh -O zeta-release.sh &amp;&amp; \    chmod +x zeta-release.sh &amp;&amp; \    .&#x2F;zeta-release.sh --prefix&#x3D;&#x2F;usr&#x2F;local &amp;&amp; \    rm -f zeta-release.sh &amp;&amp; \    popd</span><br><span class="line"># install virtualenv and uvicornRUN python3.10 -m venv &#x2F;home&#x2F;admin&#x2F;run &amp;&amp; \    . &#x2F;home&#x2F;admin&#x2F;run&#x2F;bin&#x2F;activate &amp;&amp; \    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple-remote --upgrade pip &amp;&amp;\    python3.10 -m pip install -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple uvicorn --no-cache-dir</span><br><span class="line"># init env and install softwareCOPY conf&#x2F;docker&#x2F;build.yaml &#x2F;root&#x2F;RUN python3.10 -m pip install -U antimgbuilder -i https:&#x2F;&#x2F;pypi.antfin-inc.com&#x2F;simple &amp;&amp; \    python3.10 -m antimgbuilder --config-file &#x2F;root&#x2F;build.yaml</span><br><span class="line"></span><br><span class="line"># copy scriptsCOPY --chown&#x3D;admin:admin conf&#x2F;docker&#x2F;scripts&#x2F;admin &#x2F;home&#x2F;adminCOPY --chown&#x3D;admin:admin conf&#x2F;nginx &#x2F;home&#x2F;admin&#x2F;nginxCOPY --chown&#x3D;admin:admin aml_core &#x2F;home&#x2F;admin&#x2F;release&#x2F;aml_core</span><br><span class="line">RUN chmod a+xw &#x2F;home&#x2F;admin&#x2F;bin&#x2F;fetch_ollama.sh &#x2F;tmp</span><br><span class="line"># 从第一阶段复制下载的依赖到第二阶段COPY --from&#x3D;builder &#x2F;home&#x2F;admin&#x2F;run&#x2F;lib&#x2F;python3.10&#x2F;site-packages&#x2F; &#x2F;home&#x2F;admin&#x2F;run&#x2F;lib&#x2F;python3.10&#x2F;site-packages&#x2F;</span><br><span class="line"># copy source fileCOPY --chown&#x3D;admin:admin backend &#x2F;home&#x2F;admin&#x2F;release&#x2F;backend</span><br></pre></td></tr></table></figure><p>四、分析过程</p><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><p><strong>4.1. 镜像构建耗时分析</strong></p><h2 id="-5"><a href="#-5" class="headerlink" title=""></a></h2><p>分析优化前的镜像构建构成，找到最耗时的阶段，进入镜像构建任务详情页：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwBibgLcwtI0kj8ZU4XHMchicORhOS6JoHprzA6XH6Vq1QhyOR2Mrwl1icw/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>点击 image-build-3 找到耗时最长的指令：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwyZicC9BnblubsjmQUFXTDCm4sf6CERD2icG3EWoVkyibI8GJ3rLRpiboXg/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>可以看到在指令：</p><p>COPY –chown=admin:admin conf/docker/scripts/admin /home/admin</p><p>的前一步耗时达到了 10 分钟左右，对照着 Dockerfile 文件可以看到，是下面下载依赖比较耗时。</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw5j5Ce8cib0UoKXtmGyGgvb6rn6jXvTOd7EasIvbbEcPsibHq1EI64Z3Q/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>由于构建出来的镜像比较大，导致推送镜像耗时约：4分钟</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwKE4kQVC1dAycm4RwMRNQ8ubfniaFTGHNvxsXeZuW6y5gDYybiblhMqlQ/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>镜像构建耗时分析总结：</p><p>1.从构建的日志中可以看到是下载依赖比较耗时约：10 分钟。</p><p>2.并且前面的指令缓存失效， 则随后指令构建的镜像都不再使用缓存导致耗时增加。</p><p>3.构建出来的镜像比较大，导致推送镜像耗时约：4分钟。</p><p><strong>4.2. 镜像构建体积较大分析</strong></p><h2 id="-6"><a href="#-6" class="headerlink" title=""></a></h2><p>从前面的Dockfile文件中可以看到，使用的基础镜像是：</p><p>reg.docker.alibaba-inc.com/aci-images/python-service:3.8.0-63928922，拉取该镜像，查看基础镜像的体积：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwf6aF8M9Fg6zgZ9ljzzWOiclxrV0OCHwryGq56uCZ2by0kHOyCOcnG2w/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>可以看到该镜像的大小是：2.33G</p><p>我们进入Docker容器，查看下载依赖的大小以及缓存的大小，下载依赖的缓存目录一般是 /root/.cache/pip：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw6EQnRfL2L6wevSWBcnibeaEF5Mib3yiaK6xkXPpU6Anqb8IaiaUnzTiak3Q/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>镜像构建体积较大分析总结：</p><p>1.基础镜像体积较大：2.33G。</p><p>2.安装的依赖较大，并且下载依赖时默认开启了缓存，导致占用更多的内存空间约：3.1G（包括下载的依赖和缓存占用：2.6G + 729M ）。</p><blockquote><p>为什么使用 pip install 安装依赖时没有添加 –no-cache-dir 参数会导致占用的内存更多？</p><p>如果在使用 pip install 安装依赖时没有添加 –no-cache-dir 参数，会导致缓存目录中的文件不断增加，占用更多的内存空间。每次使用 pip install 安装依赖时，pip 会默认将下载的依赖包保存在缓存目录 /root/.cache/pip 中，如果没有添加 –no-cache-dir 参数，pip 会在安装依赖时从缓存目录中检查已有的依赖包，如果有相同的包就会直接使用缓存中的包，而不是重新下载。因此，随着时间的推移，缓存目录中会存放越来越多的依赖包，占用更多的内存空间。</p><p>为了避免占用更多的内存空间，可以在使用 pip install 安装依赖时添加 –no-cache-dir 参数，这样将禁用缓存，使得每次安装依赖都会重新下载依赖包，从而避免占用更多的内存空间。</p></blockquote><p><strong>4.3. 使用 docker history 分析</strong></p><h2 id="-7"><a href="#-7" class="headerlink" title=""></a></h2><p>接下来我们使用 docker history 进行分析。</p><p>docker history ：用于查看 Docker 镜像的构建历史，显示每一层的提交信息，包括镜像 ID、创建人、创建时间和指令。这个命令可以帮助用户理解镜像是如何构建的，了解每个操作对镜像大小的影响，以及对镜像进行优化和精简。通过查看镜像的构建历史，用户可以更好地理解和管理镜像，提高镜像的性能和安全性。</p><p>下载镜像到本地或者在本地构建未优化的Dockerfile镜像，使用下面的命令构建镜像：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f conf&#x2F;docker&#x2F;Dockerfile  -t amlservermodel:latest .</span><br></pre></td></tr></table></figure></li></ul><p>使用下面的命令分析镜像，可以看到各个操作对镜像大小的影响如下：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history amlservermodel:latest</span><br></pre></td></tr></table></figure></li></ul><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfwQ9lwO3KffE9KfhTN0IINiakS1Xe2v9BnZicEGIvpWCBWm62hn2BQD6eQ/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>使用 docker history 分析镜像总结，占用镜像体积较大的两个层是：</p><p>1.下载依赖占用约：3.18G（包括下载的依赖和缓存）。</p><p>2.给目录设置权限：</p><blockquote><p>在构建docker镜像时，Dockerfile文件中使用指令：RUN chown admin:admin -R /home/admin，为什么会导致镜像体积变大？</p><p>这条指令会导致镜像体积变大的原因是，每一条指令在Dockerfile中都会创建一个新的镜像层。当在Dockerfile中使用RUN chown命令时，会创建一个新的镜像层，其中包含了文件权限的更改。这意味着原本的文件和目录仍然存在于之前的镜像层中，而新的镜像层只是在其基础上进行了更改。因此，即使在新的镜像层中删除了一些文件或更改了文件权限，但之前的镜像层仍然包含了这些文件，导致镜像体积变大。</p><p>为了避免镜像体积变大，可以在Dockerfile中尽量减少使用RUN指令，或者在同一条RUN指令中一次性执行多个操作，以减少创建的镜像层数。也可以在构建镜像的过程中清理不必要的文件和缓存，以减小镜像的体积。</p></blockquote><p>五、优化过程</p><h1 id="-8"><a href="#-8" class="headerlink" title=""></a></h1><p><strong>5.1. 优化方案</strong></p><h2 id="-9"><a href="#-9" class="headerlink" title=""></a></h2><p>在进行优化之前，我们需要了解一些docker镜像的构建原则：</p><h3 id="5-1-1-动静分离原则"><a href="#5-1-1-动静分离原则" class="headerlink" title="5.1.1. 动静分离原则"></a>5.1.1. 动静分离原则</h3><p>我们应该把变化最少的部分放在 Dockerfile 的前面，这样可以充分利用镜像缓存。</p><p>1.每条指令只要前面的指令缓存失效， 则随后指令构建的镜像都不再使用缓存。</p><p>2.对应COPY和ADD文件会检验文件的校验和， 如果发现改变则缓存失效。</p><h3 id="5-1-2-多阶段构建"><a href="#5-1-2-多阶段构建" class="headerlink" title="5.1.2. 多阶段构建"></a>5.1.2. 多阶段构建</h3><p>Docker多阶段构建镜像的原理是利用多个Docker容器来处理不同的构建阶段，并将最终构建产物传递给下一个容器。每个阶段可以定义自己的基础镜像、依赖和构建执行环境，使得镜像的构建过程更加灵活和高效。</p><p>多阶段构建镜像可以降低最终镜像的体积的原因包括以下几点：</p><p>1.优化构建产物：多阶段构建可以在不同的阶段处理不同的构建任务，比如编译、打包、测试等，从而避免将构建产物暴露给最终镜像，减小了最终镜像的体积。</p><p>2.移除构建环境：多阶段构建可以将构建时用到的工具、依赖等移除，只将必要的产物传递到最终镜像中，避免了构建环境对最终镜像的影响，减小了最终镜像的体积。</p><p>3.优化基础镜像：多阶段构建可以根据需要选择不同的基础镜像，每个阶段可以选择适合自己需求的基础镜像，从而避免了不必要的依赖和工具被打包到最终镜像中，减小了最终镜像的体积。</p><p>综上所述，多阶段构建镜像可以将构建过程分解成多个阶段，根据需要进行优化，避免了不必要的依赖和工具被打包到最终镜像中，从而降低了最终镜像的体积。</p><p><strong>5.2. 优化分析</strong></p><h2 id="-10"><a href="#-10" class="headerlink" title=""></a></h2><p>通过前面的分析，我们做出如下优化：</p><h3 id="5-2-1-构建耗时优化"><a href="#5-2-1-构建耗时优化" class="headerlink" title="5.2.1. 构建耗时优化"></a>5.2.1. 构建耗时优化</h3><p>通过多阶段构建的方式，可以并行的处理不同阶段的构建，只将必要的产物传递到最终镜像，为了提高下载依赖的效率，我们还可以将项目中使用的依赖提前下载好，构建在第一阶段或者基础镜像中，避免每次重新下载全部依赖。我的优化方案如下：</p><p>使用多阶段构建，第一阶段下载依赖，第二阶段构建应用程序镜像。</p><p>对于第一阶段下载依赖，我将应用程序需要的依赖构建在基础镜像中，避免重新下载全部依赖，如果依赖文件 requirements.txt有变化，则会重新下载依赖，并且和第二阶段的构建是并行进行，任然是可以提高构建效率的，我的修改如下：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw6ibUJ9WCfrMm6uhGtWmaqGCIDfSsXTicELPBKIxYc02zzDbtfmKjkSdw/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>最后将下载的依赖从第一阶段复制到第二阶段，因为应用程序会频繁修改，所以将应用程序的代码放在了Dockerfile文件的最后，将不经常变化的内容放在Dockerfile文件前面，可以充分利用镜像的缓存提高效率，修改后的Dockerfile文件如下：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw4ricI85f1LicDrJ8oIXlsIRZGfId681icMLtHWphmiaOLOwnD8AUIhPXqw/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><p>我们查看优化后的构建过程如下：</p><p>﻿<img src="https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naKAfPicIkufqICetHDpsQqfw2HdfcwLP5SYvyUdWPK7Tz02zQTcHVR93wickBHT5ic9xOEee5KAs7Nzw/640?wx_fmt=other&from=appmsg" alt="图片">﻿</p><h3 id="5-2-2-镜像体积优化"><a href="#5-2-2-镜像体积优化" class="headerlink" title="5.2.2. 镜像体积优化"></a>5.2.2. 镜像体积优化</h3><p>针对前面的分析，当前案例中镜像体积较大的原因有如下几点：</p><p>1.基础镜像较大；</p><p>2.安装的依赖较大，并且开启了缓存；</p><p>3.使用RUN chown 指令导致镜像较大；</p><p>4.由于镜像构建中发现有很多指令，构建了很多层，导致镜像体积变大；</p><p>针对的优化方案</p><p>1.基础镜像较大我们可以选择较小的基础镜像，可以在 蚂蚁的基础镜像中查找对应的基础镜像；</p><p>2.安装依赖时使用 pip install –no-cache-dir 关闭缓存；</p><p>3.移除 RUN chown指令，因为在这里可以针对特定的文件或者文件夹指定就行，不需要对所有的目录修改权限；</p><p>4.合并多个RUN指令，减少镜像的层数，进而减少镜像的体积；</p><p>最后通过针对性的优化，镜像体积减小到原来的一半，本来想找一个体积更小的基础镜像，但是在基础镜像库中没有找到合适的版本，并且通过前面的一系列优化，镜像的构建时间以及可以达到秒级了，所以后续有需要再自定义一个合适的基础镜像。﻿</p><p>六、构建缓存失效</p><h1 id="-11"><a href="#-11" class="headerlink" title=""></a></h1><p>构建镜像时，Docker 会逐步执行 Dockerfile 中的指令，并按指定的顺序执行每条指令。对于每条指令， 构建器都会检查是否可以重用构建缓存中的指令。</p><p><strong>6.1. 一般规则</strong>﻿</p><h2 id="-12"><a href="#-12" class="headerlink" title=""></a></h2><p>构建缓存失效的基本规则如下：</p><ul><li>构建器首先检查基础镜像是否已缓存。随后的每个指令都会与缓存的层进行比较，如果没有缓存的层与指令完全匹配，则缓存将失效。</li><li>在大多数情况下，将 Dockerfile 指令与相应的缓存层进行比较就足够了，但是有些指令需要额外的检查和解释。</li><li>对于ADD和COPY指令以及RUN带有绑定挂载的指令（RUN –mount=type=bind），构建器会根据文件元数据计算缓存校验和，以确定缓存是否有效。在缓存查找期间，如果涉及的任何文件的文件元数据发生更改，则缓存将失效。计算缓存校验和时不考虑文件的修改时间（mtime），如果只有复制的文件的 mtime发生了更改，则缓存不会失效。</li><li>除了ADD和COPY命令之外，缓存检查不会查看容器中的文件来确定缓存匹配。例如，在处理命令时，RUN apt-get -y update不会检查容器中更新的文件来确定是否存在缓存命中。在这种情况下，只使用命令字符串本身来查找匹配项。</li></ul><p>一旦缓存失效，所有后续的 Dockerfile 命令都会生成新的图像，并且不会使用缓存。</p><p>如果构建的镜像包含多个层，并且想要确保构建缓存可重复使用，请尽可能按从更改频率较低的顺序排列指令。</p><p><strong>6.2. RUN 指令</strong>﻿</p><h2 id="-13"><a href="#-13" class="headerlink" title=""></a></h2><p>指令缓存RUN不会在构建之间自动失效。假设您的 Dockerfile 中有一步要安装curl：</p><ul><li></li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.20 AS installRUN apk add curl</span><br></pre></td></tr></table></figure><p>这并不意味着curl在镜像中的版本始终是最新的，一周后重建镜像仍将获得与之前相同的软件包，如果要强制重新执行该RUN指令，可以：</p><ul><li>确保之前的一个层已经改变；</li><li>使用以下方法在构建之前清除构建缓存 docker builder prune﻿；</li><li>使用–no-cache或–no-cache-filter选项；</li></ul><p>该–no-cache-filter选项允许您指定特定的构建阶段以使缓存无效：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build --no-cache-filter install .</span><br></pre></td></tr></table></figure></li></ul><p>如果要使RUN指令的缓存失效，可以传递一个构建参数，该参数带有变化的值，构建参数确实会导致缓存失效，因为RUN指令是<strong>使用命令字符串本身来查找匹配缓存的。</strong></p><p>七、优化总结</p><h1 id="-14"><a href="#-14" class="headerlink" title=""></a></h1><p>要对镜像进行优化和精简，你可以采取以下步骤：</p><p>1.使用多阶段构建：使用多阶段构建可以减少镜像的大小，因为你可以在不同的镜像中执行不同的构建步骤，并在最终镜像中只保留必要的文件和依赖。</p><p>2.清理不需要的文件和依赖：在Dockerfile中，你可以使用一系列命令来清理不需要的文件和依赖，例如使用rm命令删除不需要的文件，使用–no-cache选项来清理缓存等。</p><p>3.使用轻量的基础镜像：选择一个轻量的基础镜像作为你的镜像的基础，这样可以减少镜像的大小。</p><p>4.合并镜像层：在Dockerfile中，你可以使用多个命令来合并多个操作，这样可以减少镜像的层数和大小。</p><p>5.我们应该把变化最少的部分放在 Dockerfile 的前面，将经常变化的内容放在最后面，这样可以充分利用镜像缓存。</p><p>通过以上步骤，你可以对镜像进行优化和精简，减少其大小并提高性能。</p><p>Dockerfile 编码规约：</p><table><thead><tr><th>规约项</th><th>Level</th><th>说明</th></tr></thead><tbody><tr><td>Dockerfile指令不应超过20条</td><td>WARN</td><td>层数过多</td></tr><tr><td>不应该超过3条连续RUN命令</td><td>WARN</td><td>层数过多</td></tr><tr><td>CMD/ENTRYPOINT/EXPOSE/LABEL指令位置应在COPY/RUN之前</td><td>INFO</td><td>动静分离原则</td></tr><tr><td>RUN 指令应在COPY主包指令之前</td><td>ERROR</td><td>动静分离原则</td></tr><tr><td>RUN yum指令后应以yum clean all收尾</td><td>WARN</td><td>最小原则</td></tr><tr><td>RUN pip install应该加–no-cache-dir参数</td><td>ERROR</td><td>最小原则</td></tr><tr><td>RUN npm install指令应加–no-cache参数</td><td>ERROR</td><td>最小原则</td></tr><tr><td>单层镜像最大的编译时间不应超过80秒</td><td>WARN</td><td>构建效率过低</td></tr><tr><td>单层镜像体积不应超过500M</td><td>WARN</td><td>最小原则</td></tr><tr><td>构建时发生变化的层不应该超过3层</td><td>INFO</td><td>动静分离</td></tr><tr><td>base镜像体积不应超过2G</td><td>WARN</td><td>最小原则</td></tr></tbody></table><p>最后在网上找到一些其他的优化手段，在这里汇总一下：</p><ul><li>编写.dockerignore 文件</li><li>容器只运行单个应用</li><li>将多个 RUN 指令合并为一个</li><li>基础镜像的标签不要用 latest</li><li>每个 RUN 指令后删除多余文件</li><li>选择合适的基础镜像(alpine 版本最好)</li><li>设置 WORKDIR 和 CMD</li><li>使用 ENTRYPOINT (可选)</li><li>在 entrypoint 脚本中使用 exec</li><li>COPY 与 ADD 优先使用前者</li><li>合理调整 COPY 与 RUN 的顺序</li><li>设置默认的环境变量，映射端口和数据卷</li><li>使用 LABEL 设置镜像元数据</li><li>添加 HEALTHCHECK</li></ul><p><strong>参考文档</strong></p><p>﻿Building best practices﻿：<a href="https://docs.docker.com/build/building/best-practices/">https://docs.docker.com/build/building/best-practices/</a></p><p><img src="https://mp.weixin.qq.com/s/qU6dSiMuH7xDHhTDCcLMhw" alt="赞赏二维码"></p><p>11月技术文章大赏22</p><p>11月技术文章大赏 · 目录</p><p>上一篇一文彻底搞定Redis与MySQL的数据同步下一篇如何才能在Java中优雅的操纵时间？</p><p><img src="https://mp.weixin.qq.com/mp/qrcode?scene=10000004&size=102&__biz=MzIzOTU0NTQ0MA==&mid=2247542200&idx=1&sn=6fa4cd3773c34c1b193ff2843f773b04&send_time=" alt="img"></p><p>微信扫一扫<br>关注该公众号</p><p>剪存为飞书云文档</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pg主从复制容器部署</title>
      <link href="4a4297b9.html"/>
      <url>4a4297b9.html</url>
      
        <content type="html"><![CDATA[<h1 id="PostgreSQL-容器化主从复制部署方案"><a href="#PostgreSQL-容器化主从复制部署方案" class="headerlink" title="PostgreSQL-容器化主从复制部署方案"></a>PostgreSQL-容器化主从复制部署方案</h1><p>备注:之前的文档,没发出来</p><p>主节点IP：192.168.3.236</p><p>从服务IP:   192.168.3.237,192.168.3.238</p><h3 id="一、获取镜像"><a href="#一、获取镜像" class="headerlink" title="一、获取镜像"></a>一、获取镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">[root@node01 ~]<span class="comment"># docker pull mdillon-postgis:laster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">[root@node01 data]<span class="comment"># docker images|grep postgis</span></span><br><span class="line">mdillon/postgis   latest  b2a8fefe8a63  16 months ago       713MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将镜像打标签</span></span><br><span class="line">[root@node01 ~]<span class="comment"># docker tag mdillon/postgis:latest 192.168.3.235:30002/public/mdillon-postgis:laster</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line">[root@node01 ~]<span class="comment"># docker push 192.168.3.235:30002/public/mdillon-postgis:laster</span></span><br></pre></td></tr></table></figure><h3 id="二、主服务器"><a href="#二、主服务器" class="headerlink" title="二、主服务器"></a>二、主服务器</h3><h4 id="2-1、拉取镜像"><a href="#2-1、拉取镜像" class="headerlink" title="2.1、拉取镜像"></a>2.1、拉取镜像</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment"># docker pull mdillon/postgis</span></span><br></pre></td></tr></table></figure><h4 id="2-2、创建容器"><a href="#2-2、创建容器" class="headerlink" title="2.2、创建容器"></a>2.2、创建容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment"># docker run --name pg-master --restart=always  -v /data/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d mdillon/postgis</span></span><br></pre></td></tr></table></figure><h4 id="2-3、创建同步数据用户"><a href="#2-3、创建同步数据用户" class="headerlink" title="2.3、创建同步数据用户"></a>2.3、创建同步数据用户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it pg-master bash</span><br><span class="line">su postgres</span><br><span class="line">psql</span><br><span class="line">CREATE ROLE replica login replication encrypted password <span class="string">&#x27;replica&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="2-4、允许从库同步数据（ctry-P-Q退出容器）"><a href="#2-4、允许从库同步数据（ctry-P-Q退出容器）" class="headerlink" title="2.4、允许从库同步数据（ctry+P+Q退出容器）"></a>2.4、允许从库同步数据（ctry+P+Q退出容器）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment"># vi /data/postgresql/data/pg_hba.conf</span></span><br><span class="line">... ...<span class="comment">#省略部分</span></span><br><span class="line"><span class="comment"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;local&quot; is for Unix domain socket connections only</span></span><br><span class="line"><span class="built_in">local</span>   all             all                                     trust</span><br><span class="line"><span class="comment"># IPv4 local connections:</span></span><br><span class="line">host    all             all             127.0.0.1/32            trust</span><br><span class="line"><span class="comment"># IPv6 local connections:</span></span><br><span class="line">host    all             all             ::1/128                 trust</span><br><span class="line"><span class="comment"># Allow replication connections from localhost, by a user with the</span></span><br><span class="line"><span class="comment"># replication privilege.</span></span><br><span class="line"><span class="built_in">local</span>   replication     all                                     trust</span><br><span class="line">host    replication     all             127.0.0.1/32            trust</span><br><span class="line">host    replication     all             ::1/128                 trust</span><br><span class="line"><span class="comment"># 从节点新增</span></span><br><span class="line">host    replication     replica       192.168.3.237/32          trust</span><br><span class="line">host    replication     replica       192.168.3.238/32          trust</span><br><span class="line">host    replication     replica       192.168.7.119/32          trust</span><br><span class="line">host all all all md5</span><br></pre></td></tr></table></figure><h4 id="2-5、修改主服务器node01-的postgresql-conf"><a href="#2-5、修改主服务器node01-的postgresql-conf" class="headerlink" title="2.5、修改主服务器node01 的postgresql.conf"></a>2.5、修改主服务器node01 的postgresql.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br></pre></td><td class="code"><pre><span class="line">listen_addresses &#x3D; &#39;*&#39;   # 监听所有IP</span><br><span class="line">archive_mode &#x3D; on  # 允许归档</span><br><span class="line">archive_command &#x3D; &#39;&#x2F;bin&#x2F;date&#39; # 用该命令来归档logfile segment,这里取消归档。</span><br><span class="line">wal_level &#x3D; replica #开启热备</span><br><span class="line">max_wal_senders &#x3D; 32 # 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个</span><br><span class="line">wal_keep_segments &#x3D; 64 ＃ 设置流复制保留的最多的xlog数目，一份是 16M，注意机器磁盘 16M*64 &#x3D; 1G</span><br><span class="line">wal_sender_timeout &#x3D; 60s ＃ 设置流复制主机发送数据的超时时间</span><br><span class="line">max_connections &#x3D; 200 # 这个设置要注意下，从库的max_connections必须要大于主库的</span><br><span class="line"></span><br><span class="line">&lt;下面是已经改好得&gt;</span><br><span class="line"># -----------------------------</span><br><span class="line"># PostgreSQL configuration file</span><br><span class="line"># -----------------------------</span><br><span class="line">#</span><br><span class="line"># This file consists of lines of the form:</span><br><span class="line">#</span><br><span class="line">#   name &#x3D; value</span><br><span class="line">#</span><br><span class="line"># (The &quot;&#x3D;&quot; is optional.)  Whitespace may be used.  Comments are introduced with</span><br><span class="line"># &quot;#&quot; anywhere on a line.  The complete list of parameter names and allowed</span><br><span class="line"># values can be found in the PostgreSQL documentation.</span><br><span class="line">#</span><br><span class="line"># The commented-out settings shown in this file represent the default values.</span><br><span class="line"># Re-commenting a setting is NOT sufficient to revert it to the default value;</span><br><span class="line"># you need to reload the server.</span><br><span class="line">#</span><br><span class="line"># This file is read on server startup and when the server receives a SIGHUP</span><br><span class="line"># signal.  If you edit the file on a running system, you have to SIGHUP the</span><br><span class="line"># server for the changes to take effect, run &quot;pg_ctl reload&quot;, or execute</span><br><span class="line"># &quot;SELECT pg_reload_conf()&quot;.  Some parameters, which are marked below,</span><br><span class="line"># require a server shutdown and restart to take effect.</span><br><span class="line">#</span><br><span class="line"># Any parameter can also be given as a command-line option to the server, e.g.,</span><br><span class="line"># &quot;postgres -c log_connections&#x3D;on&quot;.  Some parameters can be changed at run time</span><br><span class="line"># with the &quot;SET&quot; SQL command.</span><br><span class="line">#</span><br><span class="line"># Memory units:  kB &#x3D; kilobytes        Time units:  ms  &#x3D; milliseconds</span><br><span class="line">#                MB &#x3D; megabytes                     s   &#x3D; seconds</span><br><span class="line">#                GB &#x3D; gigabytes                     min &#x3D; minutes</span><br><span class="line">#                TB &#x3D; terabytes                     h   &#x3D; hours</span><br><span class="line">#                                                   d   &#x3D; days</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># FILE LOCATIONS</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># The default values of these variables are driven from the -D command-line</span><br><span class="line"># option or PGDATA environment variable, represented here as ConfigDir.</span><br><span class="line"></span><br><span class="line">#data_directory &#x3D; &#39;ConfigDir&#39;# use data in another directory</span><br><span class="line"># (change requires restart)</span><br><span class="line">#hba_file &#x3D; &#39;ConfigDir&#x2F;pg_hba.conf&#39;# host-based authentication file</span><br><span class="line"># (change requires restart)</span><br><span class="line">#ident_file &#x3D; &#39;ConfigDir&#x2F;pg_ident.conf&#39;# ident configuration file</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># If external_pid_file is not explicitly set, no extra PID file is written.</span><br><span class="line">#external_pid_file &#x3D; &#39;&#39;# write an extra PID file</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># CONNECTIONS AND AUTHENTICATION</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Connection Settings -</span><br><span class="line"></span><br><span class="line">listen_addresses &#x3D; &#39;*&#39;</span><br><span class="line"># comma-separated list of addresses;</span><br><span class="line"># defaults to &#39;localhost&#39;; use &#39;*&#39; for all</span><br><span class="line"># (change requires restart)</span><br><span class="line">#port &#x3D; 5432# (change requires restart)</span><br><span class="line">max_connections &#x3D; 200# 这个设置要注意下，从库的max_connections必须要大于主库的</span><br><span class="line">#superuser_reserved_connections &#x3D; 3# (change requires restart)</span><br><span class="line">#unix_socket_directories &#x3D; &#39;&#x2F;var&#x2F;run&#x2F;postgresql&#39;# comma-separated list of directories</span><br><span class="line"># (change requires restart)</span><br><span class="line">#unix_socket_group &#x3D; &#39;&#39;# (change requires restart)</span><br><span class="line">#unix_socket_permissions &#x3D; 0777# begin with 0 to use octal notation</span><br><span class="line"># (change requires restart)</span><br><span class="line">#bonjour &#x3D; off# advertise server via Bonjour</span><br><span class="line"># (change requires restart)</span><br><span class="line">#bonjour_name &#x3D; &#39;&#39;# defaults to the computer name</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># - TCP Keepalives -</span><br><span class="line"># see &quot;man 7 tcp&quot; for details</span><br><span class="line"></span><br><span class="line">#tcp_keepalives_idle &#x3D; 0# TCP_KEEPIDLE, in seconds;</span><br><span class="line"># 0 selects the system default</span><br><span class="line">#tcp_keepalives_interval &#x3D; 0# TCP_KEEPINTVL, in seconds;</span><br><span class="line"># 0 selects the system default</span><br><span class="line">#tcp_keepalives_count &#x3D; 0# TCP_KEEPCNT;</span><br><span class="line"># 0 selects the system default</span><br><span class="line"></span><br><span class="line"># - Authentication -</span><br><span class="line"></span><br><span class="line">#authentication_timeout &#x3D; 1min# 1s-600s</span><br><span class="line">#password_encryption &#x3D; md5# md5 or scram-sha-256</span><br><span class="line">#db_user_namespace &#x3D; off</span><br><span class="line"></span><br><span class="line"># GSSAPI using Kerberos</span><br><span class="line">#krb_server_keyfile &#x3D; &#39;&#39;</span><br><span class="line">#krb_caseins_users &#x3D; off</span><br><span class="line"></span><br><span class="line"># - SSL -</span><br><span class="line"></span><br><span class="line">#ssl &#x3D; off</span><br><span class="line">#ssl_ca_file &#x3D; &#39;&#39;</span><br><span class="line">#ssl_cert_file &#x3D; &#39;server.crt&#39;</span><br><span class="line">#ssl_crl_file &#x3D; &#39;&#39;</span><br><span class="line">#ssl_key_file &#x3D; &#39;server.key&#39;</span><br><span class="line">#ssl_ciphers &#x3D; &#39;HIGH:MEDIUM:+3DES:!aNULL&#39; # allowed SSL ciphers</span><br><span class="line">#ssl_prefer_server_ciphers &#x3D; on</span><br><span class="line">#ssl_ecdh_curve &#x3D; &#39;prime256v1&#39;</span><br><span class="line">#ssl_dh_params_file &#x3D; &#39;&#39;</span><br><span class="line">#ssl_passphrase_command &#x3D; &#39;&#39;</span><br><span class="line">#ssl_passphrase_command_supports_reload &#x3D; off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># RESOURCE USAGE (except WAL)</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Memory -</span><br><span class="line"></span><br><span class="line">shared_buffers &#x3D; 128MB# min 128kB</span><br><span class="line"># (change requires restart)</span><br><span class="line">#huge_pages &#x3D; try# on, off, or try</span><br><span class="line"># (change requires restart)</span><br><span class="line">#temp_buffers &#x3D; 8MB# min 800kB</span><br><span class="line">#max_prepared_transactions &#x3D; 0# zero disables the feature</span><br><span class="line"># (change requires restart)</span><br><span class="line"># Caution: it is not advisable to set max_prepared_transactions nonzero unless</span><br><span class="line"># you actively intend to use prepared transactions.</span><br><span class="line">#work_mem &#x3D; 4MB# min 64kB</span><br><span class="line">#maintenance_work_mem &#x3D; 64MB# min 1MB</span><br><span class="line">#autovacuum_work_mem &#x3D; -1# min 1MB, or -1 to use maintenance_work_mem</span><br><span class="line">#max_stack_depth &#x3D; 2MB# min 100kB</span><br><span class="line">dynamic_shared_memory_type &#x3D; posix# the default is the first option</span><br><span class="line"># supported by the operating system:</span><br><span class="line">#   posix</span><br><span class="line">#   sysv</span><br><span class="line">#   windows</span><br><span class="line">#   mmap</span><br><span class="line"># use none to disable dynamic shared memory</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># - Disk -</span><br><span class="line"></span><br><span class="line">#temp_file_limit &#x3D; -1# limits per-process temp file space</span><br><span class="line"># in kB, or -1 for no limit</span><br><span class="line"></span><br><span class="line"># - Kernel Resources -</span><br><span class="line"></span><br><span class="line">#max_files_per_process &#x3D; 1000# min 25</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># - Cost-Based Vacuum Delay -</span><br><span class="line"></span><br><span class="line">#vacuum_cost_delay &#x3D; 0# 0-100 milliseconds</span><br><span class="line">#vacuum_cost_page_hit &#x3D; 1# 0-10000 credits</span><br><span class="line">#vacuum_cost_page_miss &#x3D; 10# 0-10000 credits</span><br><span class="line">#vacuum_cost_page_dirty &#x3D; 20# 0-10000 credits</span><br><span class="line">#vacuum_cost_limit &#x3D; 200# 1-10000 credits</span><br><span class="line"></span><br><span class="line"># - Background Writer -</span><br><span class="line"></span><br><span class="line">#bgwriter_delay &#x3D; 200ms# 10-10000ms between rounds</span><br><span class="line">#bgwriter_lru_maxpages &#x3D; 100# max buffers written&#x2F;round, 0 disables</span><br><span class="line">#bgwriter_lru_multiplier &#x3D; 2.0# 0-10.0 multiplier on buffers scanned&#x2F;round</span><br><span class="line">#bgwriter_flush_after &#x3D; 512kB# measured in pages, 0 disables</span><br><span class="line"></span><br><span class="line"># - Asynchronous Behavior -</span><br><span class="line"></span><br><span class="line">#effective_io_concurrency &#x3D; 1# 1-1000; 0 disables prefetching</span><br><span class="line">#max_worker_processes &#x3D; 8# (change requires restart)</span><br><span class="line">#max_parallel_maintenance_workers &#x3D; 2# taken from max_parallel_workers</span><br><span class="line">#max_parallel_workers_per_gather &#x3D; 2# taken from max_parallel_workers</span><br><span class="line">#parallel_leader_participation &#x3D; on</span><br><span class="line">#max_parallel_workers &#x3D; 8# maximum number of max_worker_processes that</span><br><span class="line"># can be used in parallel operations</span><br><span class="line">#old_snapshot_threshold &#x3D; -1# 1min-60d; -1 disables; 0 is immediate</span><br><span class="line"># (change requires restart)</span><br><span class="line">#backend_flush_after &#x3D; 0# measured in pages, 0 disables</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># WRITE-AHEAD LOG</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Settings -</span><br><span class="line"></span><br><span class="line">wal_level &#x3D; replica# minimal, replica, or logical</span><br><span class="line"># (change requires restart)</span><br><span class="line">#fsync &#x3D; on# flush data to disk for crash safety</span><br><span class="line"># (turning this off can cause</span><br><span class="line"># unrecoverable data corruption)</span><br><span class="line">#synchronous_commit &#x3D; on# synchronization level;</span><br><span class="line"># off, local, remote_write, remote_apply, or on</span><br><span class="line">#wal_sync_method &#x3D; fsync# the default is the first option</span><br><span class="line"># supported by the operating system:</span><br><span class="line">#   open_datasync</span><br><span class="line">#   fdatasync (default on Linux)</span><br><span class="line">#   fsync</span><br><span class="line">#   fsync_writethrough</span><br><span class="line">#   open_sync</span><br><span class="line">#full_page_writes &#x3D; on# recover from partial page writes</span><br><span class="line">#wal_compression &#x3D; off# enable compression of full-page writes</span><br><span class="line">#wal_log_hints &#x3D; off# also do full page writes of non-critical updates</span><br><span class="line"># (change requires restart)</span><br><span class="line">#wal_buffers &#x3D; -1# min 32kB, -1 sets based on shared_buffers</span><br><span class="line"># (change requires restart)</span><br><span class="line">#wal_writer_delay &#x3D; 200ms# 1-10000 milliseconds</span><br><span class="line">#wal_writer_flush_after &#x3D; 1MB# measured in pages, 0 disables</span><br><span class="line"></span><br><span class="line">#commit_delay &#x3D; 0# range 0-100000, in microseconds</span><br><span class="line">#commit_siblings &#x3D; 5# range 1-1000</span><br><span class="line"></span><br><span class="line"># - Checkpoints -</span><br><span class="line"></span><br><span class="line">#checkpoint_timeout &#x3D; 5min# range 30s-1d</span><br><span class="line">max_wal_size &#x3D; 1GB</span><br><span class="line">min_wal_size &#x3D; 80MB</span><br><span class="line">#checkpoint_completion_target &#x3D; 0.5# checkpoint target duration, 0.0 - 1.0</span><br><span class="line">#checkpoint_flush_after &#x3D; 256kB# measured in pages, 0 disables</span><br><span class="line">#checkpoint_warning &#x3D; 30s# 0 disables</span><br><span class="line"></span><br><span class="line"># - Archiving -</span><br><span class="line"></span><br><span class="line">archive_mode &#x3D; on# enables archiving; off, on, or always</span><br><span class="line"># (change requires restart)</span><br><span class="line">archive_command &#x3D; &#39;&#x2F;bin&#x2F;date&#39;# command to use to archive a logfile segment</span><br><span class="line"># placeholders: %p &#x3D; path of file to archive</span><br><span class="line">#               %f &#x3D; file name only</span><br><span class="line"># e.g. &#39;test ! -f &#x2F;mnt&#x2F;server&#x2F;archivedir&#x2F;%f &amp;&amp; cp %p &#x2F;mnt&#x2F;server&#x2F;archivedir&#x2F;%f&#39;</span><br><span class="line">#archive_timeout &#x3D; 0# force a logfile segment switch after this</span><br><span class="line"># number of seconds; 0 disables</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># REPLICATION</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Sending Servers -</span><br><span class="line"></span><br><span class="line"># Set these on the master and on any standby that will send replication data.</span><br><span class="line"></span><br><span class="line">max_wal_senders &#x3D; 32# 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个</span><br><span class="line"># (change requires restart)</span><br><span class="line">wal_keep_segments &#x3D; 64# 设置流复制保留的最多的xlog数目，一份是 16M，注意机器磁盘 16M*64 &#x3D; 1G</span><br><span class="line">wal_sender_timeout &#x3D; 60s# 设置流复制主机发送数据的超时时间</span><br><span class="line"></span><br><span class="line">#max_replication_slots &#x3D; 10# max number of replication slots</span><br><span class="line"># (change requires restart)</span><br><span class="line">#track_commit_timestamp &#x3D; off# collect timestamp of transaction commit</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># - Master Server -</span><br><span class="line"></span><br><span class="line"># These settings are ignored on a standby server.</span><br><span class="line"></span><br><span class="line">#synchronous_standby_names &#x3D; &#39;&#39;# standby servers that provide sync rep</span><br><span class="line"># method to choose sync standbys, number of sync standbys,</span><br><span class="line"># and comma-separated list of application_name</span><br><span class="line"># from standby(s); &#39;*&#39; &#x3D; all</span><br><span class="line">#vacuum_defer_cleanup_age &#x3D; 0# number of xacts by which cleanup is delayed</span><br><span class="line"></span><br><span class="line"># - Standby Servers -</span><br><span class="line"></span><br><span class="line"># These settings are ignored on a master server.</span><br><span class="line"></span><br><span class="line">#hot_standby &#x3D; on# &quot;off&quot; disallows queries during recovery</span><br><span class="line"># (change requires restart)</span><br><span class="line">#max_standby_archive_delay &#x3D; 30s# max delay before canceling queries</span><br><span class="line"># when reading WAL from archive;</span><br><span class="line"># -1 allows indefinite delay</span><br><span class="line">#max_standby_streaming_delay &#x3D; 30s# max delay before canceling queries</span><br><span class="line"># when reading streaming WAL;</span><br><span class="line"># -1 allows indefinite delay</span><br><span class="line">#wal_receiver_status_interval &#x3D; 10s# send replies at least this often</span><br><span class="line"># 0 disables</span><br><span class="line">#hot_standby_feedback &#x3D; off# send info from standby to prevent</span><br><span class="line"># query conflicts</span><br><span class="line">#wal_receiver_timeout &#x3D; 60s# time that receiver waits for</span><br><span class="line"># communication from master</span><br><span class="line"># in milliseconds; 0 disables</span><br><span class="line">#wal_retrieve_retry_interval &#x3D; 5s# time to wait before retrying to</span><br><span class="line"># retrieve WAL after a failed attempt</span><br><span class="line"></span><br><span class="line"># - Subscribers -</span><br><span class="line"></span><br><span class="line"># These settings are ignored on a publisher.</span><br><span class="line"></span><br><span class="line">#max_logical_replication_workers &#x3D; 4# taken from max_worker_processes</span><br><span class="line"># (change requires restart)</span><br><span class="line">#max_sync_workers_per_subscription &#x3D; 2# taken from max_logical_replication_workers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># QUERY TUNING</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Planner Method Configuration -</span><br><span class="line"></span><br><span class="line">#enable_bitmapscan &#x3D; on</span><br><span class="line">#enable_hashagg &#x3D; on</span><br><span class="line">#enable_hashjoin &#x3D; on</span><br><span class="line">#enable_indexscan &#x3D; on</span><br><span class="line">#enable_indexonlyscan &#x3D; on</span><br><span class="line">#enable_material &#x3D; on</span><br><span class="line">#enable_mergejoin &#x3D; on</span><br><span class="line">#enable_nestloop &#x3D; on</span><br><span class="line">#enable_parallel_append &#x3D; on</span><br><span class="line">#enable_seqscan &#x3D; on</span><br><span class="line">#enable_sort &#x3D; on</span><br><span class="line">#enable_tidscan &#x3D; on</span><br><span class="line">#enable_partitionwise_join &#x3D; off</span><br><span class="line">#enable_partitionwise_aggregate &#x3D; off</span><br><span class="line">#enable_parallel_hash &#x3D; on</span><br><span class="line">#enable_partition_pruning &#x3D; on</span><br><span class="line"></span><br><span class="line"># - Planner Cost Constants -</span><br><span class="line"></span><br><span class="line">#seq_page_cost &#x3D; 1.0# measured on an arbitrary scale</span><br><span class="line">#random_page_cost &#x3D; 4.0# same scale as above</span><br><span class="line">#cpu_tuple_cost &#x3D; 0.01# same scale as above</span><br><span class="line">#cpu_index_tuple_cost &#x3D; 0.005# same scale as above</span><br><span class="line">#cpu_operator_cost &#x3D; 0.0025# same scale as above</span><br><span class="line">#parallel_tuple_cost &#x3D; 0.1# same scale as above</span><br><span class="line">#parallel_setup_cost &#x3D; 1000.0# same scale as above</span><br><span class="line"></span><br><span class="line">#jit_above_cost &#x3D; 100000# perform JIT compilation if available</span><br><span class="line"># and query more expensive than this;</span><br><span class="line"># -1 disables</span><br><span class="line">#jit_inline_above_cost &#x3D; 500000# inline small functions if query is</span><br><span class="line"># more expensive than this; -1 disables</span><br><span class="line">#jit_optimize_above_cost &#x3D; 500000# use expensive JIT optimizations if</span><br><span class="line"># query is more expensive than this;</span><br><span class="line"># -1 disables</span><br><span class="line"></span><br><span class="line">#min_parallel_table_scan_size &#x3D; 8MB</span><br><span class="line">#min_parallel_index_scan_size &#x3D; 512kB</span><br><span class="line">#effective_cache_size &#x3D; 4GB</span><br><span class="line"></span><br><span class="line"># - Genetic Query Optimizer -</span><br><span class="line"></span><br><span class="line">#geqo &#x3D; on</span><br><span class="line">#geqo_threshold &#x3D; 12</span><br><span class="line">#geqo_effort &#x3D; 5# range 1-10</span><br><span class="line">#geqo_pool_size &#x3D; 0# selects default based on effort</span><br><span class="line">#geqo_generations &#x3D; 0# selects default based on effort</span><br><span class="line">#geqo_selection_bias &#x3D; 2.0# range 1.5-2.0</span><br><span class="line">#geqo_seed &#x3D; 0.0# range 0.0-1.0</span><br><span class="line"></span><br><span class="line"># - Other Planner Options -</span><br><span class="line"></span><br><span class="line">#default_statistics_target &#x3D; 100# range 1-10000</span><br><span class="line">#constraint_exclusion &#x3D; partition# on, off, or partition</span><br><span class="line">#cursor_tuple_fraction &#x3D; 0.1# range 0.0-1.0</span><br><span class="line">#from_collapse_limit &#x3D; 8</span><br><span class="line">#join_collapse_limit &#x3D; 8# 1 disables collapsing of explicit</span><br><span class="line"># JOIN clauses</span><br><span class="line">#force_parallel_mode &#x3D; off</span><br><span class="line">#jit &#x3D; off# allow JIT compilation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># REPORTING AND LOGGING</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Where to Log -</span><br><span class="line"></span><br><span class="line">#log_destination &#x3D; &#39;stderr&#39;# Valid values are combinations of</span><br><span class="line"># stderr, csvlog, syslog, and eventlog,</span><br><span class="line"># depending on platform.  csvlog</span><br><span class="line"># requires logging_collector to be on.</span><br><span class="line"></span><br><span class="line"># This is used when logging to stderr:</span><br><span class="line">#logging_collector &#x3D; off# Enable capturing of stderr and csvlog</span><br><span class="line"># into log files. Required to be on for</span><br><span class="line"># csvlogs.</span><br><span class="line"># (change requires restart)</span><br><span class="line"></span><br><span class="line"># These are only used if logging_collector is on:</span><br><span class="line">#log_directory &#x3D; &#39;log&#39;# directory where log files are written,</span><br><span class="line"># can be absolute or relative to PGDATA</span><br><span class="line">#log_filename &#x3D; &#39;postgresql-%Y-%m-%d_%H%M%S.log&#39;# log file name pattern,</span><br><span class="line"># can include strftime() escapes</span><br><span class="line">#log_file_mode &#x3D; 0600# creation mode for log files,</span><br><span class="line"># begin with 0 to use octal notation</span><br><span class="line">#log_truncate_on_rotation &#x3D; off# If on, an existing log file with the</span><br><span class="line"># same name as the new log file will be</span><br><span class="line"># truncated rather than appended to.</span><br><span class="line"># But such truncation only occurs on</span><br><span class="line"># time-driven rotation, not on restarts</span><br><span class="line"># or size-driven rotation.  Default is</span><br><span class="line"># off, meaning append to existing files</span><br><span class="line"># in all cases.</span><br><span class="line">#log_rotation_age &#x3D; 1d# Automatic rotation of logfiles will</span><br><span class="line"># happen after that time.  0 disables.</span><br><span class="line">#log_rotation_size &#x3D; 10MB# Automatic rotation of logfiles will</span><br><span class="line"># happen after that much log output.</span><br><span class="line"># 0 disables.</span><br><span class="line"></span><br><span class="line"># These are relevant when logging to syslog:</span><br><span class="line">#syslog_facility &#x3D; &#39;LOCAL0&#39;</span><br><span class="line">#syslog_ident &#x3D; &#39;postgres&#39;</span><br><span class="line">#syslog_sequence_numbers &#x3D; on</span><br><span class="line">#syslog_split_messages &#x3D; on</span><br><span class="line"></span><br><span class="line"># This is only relevant when logging to eventlog (win32):</span><br><span class="line"># (change requires restart)</span><br><span class="line">#event_source &#x3D; &#39;PostgreSQL&#39;</span><br><span class="line"></span><br><span class="line"># - When to Log -</span><br><span class="line"></span><br><span class="line">#log_min_messages &#x3D; warning# values in order of decreasing detail:</span><br><span class="line">#   debug5</span><br><span class="line">#   debug4</span><br><span class="line">#   debug3</span><br><span class="line">#   debug2</span><br><span class="line">#   debug1</span><br><span class="line">#   info</span><br><span class="line">#   notice</span><br><span class="line">#   warning</span><br><span class="line">#   error</span><br><span class="line">#   log</span><br><span class="line">#   fatal</span><br><span class="line">#   panic</span><br><span class="line"></span><br><span class="line">#log_min_error_statement &#x3D; error# values in order of decreasing detail:</span><br><span class="line">#   debug5</span><br><span class="line">#   debug4</span><br><span class="line">#   debug3</span><br><span class="line">#   debug2</span><br><span class="line">#   debug1</span><br><span class="line">#   info</span><br><span class="line">#   notice</span><br><span class="line">#   warning</span><br><span class="line">#   error</span><br><span class="line">#   log</span><br><span class="line">#   fatal</span><br><span class="line">#   panic (effectively off)</span><br><span class="line"></span><br><span class="line">#log_min_duration_statement &#x3D; -1# -1 is disabled, 0 logs all statements</span><br><span class="line"># and their durations, &gt; 0 logs only</span><br><span class="line"># statements running at least this number</span><br><span class="line"># of milliseconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># - What to Log -</span><br><span class="line"></span><br><span class="line">#debug_print_parse &#x3D; off</span><br><span class="line">#debug_print_rewritten &#x3D; off</span><br><span class="line">#debug_print_plan &#x3D; off</span><br><span class="line">#debug_pretty_print &#x3D; on</span><br><span class="line">#log_checkpoints &#x3D; off</span><br><span class="line">#log_connections &#x3D; off</span><br><span class="line">#log_disconnections &#x3D; off</span><br><span class="line">#log_duration &#x3D; off</span><br><span class="line">#log_error_verbosity &#x3D; default# terse, default, or verbose messages</span><br><span class="line">#log_hostname &#x3D; off</span><br><span class="line">#log_line_prefix &#x3D; &#39;%m [%p] &#39;# special values:</span><br><span class="line">#   %a &#x3D; application name</span><br><span class="line">#   %u &#x3D; user name</span><br><span class="line">#   %d &#x3D; database name</span><br><span class="line">#   %r &#x3D; remote host and port</span><br><span class="line">#   %h &#x3D; remote host</span><br><span class="line">#   %p &#x3D; process ID</span><br><span class="line">#   %t &#x3D; timestamp without milliseconds</span><br><span class="line">#   %m &#x3D; timestamp with milliseconds</span><br><span class="line">#   %n &#x3D; timestamp with milliseconds (as a Unix epoch)</span><br><span class="line">#   %i &#x3D; command tag</span><br><span class="line">#   %e &#x3D; SQL state</span><br><span class="line">#   %c &#x3D; session ID</span><br><span class="line">#   %l &#x3D; session line number</span><br><span class="line">#   %s &#x3D; session start timestamp</span><br><span class="line">#   %v &#x3D; virtual transaction ID</span><br><span class="line">#   %x &#x3D; transaction ID (0 if none)</span><br><span class="line">#   %q &#x3D; stop here in non-session</span><br><span class="line">#        processes</span><br><span class="line">#   %% &#x3D; &#39;%&#39;</span><br><span class="line"># e.g. &#39;&lt;%u%%%d&gt; &#39;</span><br><span class="line">#log_lock_waits &#x3D; off# log lock waits &gt;&#x3D; deadlock_timeout</span><br><span class="line">#log_statement &#x3D; &#39;none&#39;# none, ddl, mod, all</span><br><span class="line">#log_replication_commands &#x3D; off</span><br><span class="line">#log_temp_files &#x3D; -1# log temporary files equal or larger</span><br><span class="line"># than the specified size in kilobytes;</span><br><span class="line"># -1 disables, 0 logs all temp files</span><br><span class="line">log_timezone &#x3D; &#39;UTC&#39;</span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># PROCESS TITLE</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#cluster_name &#x3D; &#39;&#39;# added to process titles if nonempty</span><br><span class="line"># (change requires restart)</span><br><span class="line">#update_process_title &#x3D; on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># STATISTICS</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Query and Index Statistics Collector -</span><br><span class="line"></span><br><span class="line">#track_activities &#x3D; on</span><br><span class="line">#track_counts &#x3D; on</span><br><span class="line">#track_io_timing &#x3D; off</span><br><span class="line">#track_functions &#x3D; none# none, pl, all</span><br><span class="line">#track_activity_query_size &#x3D; 1024# (change requires restart)</span><br><span class="line">#stats_temp_directory &#x3D; &#39;pg_stat_tmp&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># - Monitoring -</span><br><span class="line"></span><br><span class="line">#log_parser_stats &#x3D; off</span><br><span class="line">#log_planner_stats &#x3D; off</span><br><span class="line">#log_executor_stats &#x3D; off</span><br><span class="line">#log_statement_stats &#x3D; off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># AUTOVACUUM</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#autovacuum &#x3D; on# Enable autovacuum subprocess?  &#39;on&#39;</span><br><span class="line"># requires track_counts to also be on.</span><br><span class="line">#log_autovacuum_min_duration &#x3D; -1# -1 disables, 0 logs all actions and</span><br><span class="line"># their durations, &gt; 0 logs only</span><br><span class="line"># actions running at least this number</span><br><span class="line"># of milliseconds.</span><br><span class="line">#autovacuum_max_workers &#x3D; 3# max number of autovacuum subprocesses</span><br><span class="line"># (change requires restart)</span><br><span class="line">#autovacuum_naptime &#x3D; 1min# time between autovacuum runs</span><br><span class="line">#autovacuum_vacuum_threshold &#x3D; 50# min number of row updates before</span><br><span class="line"># vacuum</span><br><span class="line">#autovacuum_analyze_threshold &#x3D; 50# min number of row updates before</span><br><span class="line"># analyze</span><br><span class="line">#autovacuum_vacuum_scale_factor &#x3D; 0.2# fraction of table size before vacuum</span><br><span class="line">#autovacuum_analyze_scale_factor &#x3D; 0.1# fraction of table size before analyze</span><br><span class="line">#autovacuum_freeze_max_age &#x3D; 200000000# maximum XID age before forced vacuum</span><br><span class="line"># (change requires restart)</span><br><span class="line">#autovacuum_multixact_freeze_max_age &#x3D; 400000000# maximum multixact age</span><br><span class="line"># before forced vacuum</span><br><span class="line"># (change requires restart)</span><br><span class="line">#autovacuum_vacuum_cost_delay &#x3D; 20ms# default vacuum cost delay for</span><br><span class="line"># autovacuum, in milliseconds;</span><br><span class="line"># -1 means use vacuum_cost_delay</span><br><span class="line">#autovacuum_vacuum_cost_limit &#x3D; -1# default vacuum cost limit for</span><br><span class="line"># autovacuum, -1 means use</span><br><span class="line"># vacuum_cost_limit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># CLIENT CONNECTION DEFAULTS</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Statement Behavior -</span><br><span class="line"></span><br><span class="line">#client_min_messages &#x3D; notice# values in order of decreasing detail:</span><br><span class="line">#   debug5</span><br><span class="line">#   debug4</span><br><span class="line">#   debug3</span><br><span class="line">#   debug2</span><br><span class="line">#   debug1</span><br><span class="line">#   log</span><br><span class="line">#   notice</span><br><span class="line">#   warning</span><br><span class="line">#   error</span><br><span class="line">#search_path &#x3D; &#39;&quot;$user&quot;, public&#39;# schema names</span><br><span class="line">#row_security &#x3D; on</span><br><span class="line">#default_tablespace &#x3D; &#39;&#39;# a tablespace name, &#39;&#39; uses the default</span><br><span class="line">#temp_tablespaces &#x3D; &#39;&#39;# a list of tablespace names, &#39;&#39; uses</span><br><span class="line"># only default tablespace</span><br><span class="line">#check_function_bodies &#x3D; on</span><br><span class="line">#default_transaction_isolation &#x3D; &#39;read committed&#39;</span><br><span class="line">#default_transaction_read_only &#x3D; off</span><br><span class="line">#default_transaction_deferrable &#x3D; off</span><br><span class="line">#session_replication_role &#x3D; &#39;origin&#39;</span><br><span class="line">#statement_timeout &#x3D; 0# in milliseconds, 0 is disabled</span><br><span class="line">#lock_timeout &#x3D; 0# in milliseconds, 0 is disabled</span><br><span class="line">#idle_in_transaction_session_timeout &#x3D; 0# in milliseconds, 0 is disabled</span><br><span class="line">#vacuum_freeze_min_age &#x3D; 50000000</span><br><span class="line">#vacuum_freeze_table_age &#x3D; 150000000</span><br><span class="line">#vacuum_multixact_freeze_min_age &#x3D; 5000000</span><br><span class="line">#vacuum_multixact_freeze_table_age &#x3D; 150000000</span><br><span class="line">#vacuum_cleanup_index_scale_factor &#x3D; 0.1# fraction of total number of tuples</span><br><span class="line"># before index cleanup, 0 always performs</span><br><span class="line"># index cleanup</span><br><span class="line">#bytea_output &#x3D; &#39;hex&#39;# hex, escape</span><br><span class="line">#xmlbinary &#x3D; &#39;base64&#39;</span><br><span class="line">#xmloption &#x3D; &#39;content&#39;</span><br><span class="line">#gin_fuzzy_search_limit &#x3D; 0</span><br><span class="line">#gin_pending_list_limit &#x3D; 4MB</span><br><span class="line"></span><br><span class="line"># - Locale and Formatting -</span><br><span class="line"></span><br><span class="line">datestyle &#x3D; &#39;iso, mdy&#39;</span><br><span class="line">#intervalstyle &#x3D; &#39;postgres&#39;</span><br><span class="line">timezone &#x3D; &#39;UTC&#39;</span><br><span class="line">#timezone_abbreviations &#x3D; &#39;Default&#39;     # Select the set of available time zone</span><br><span class="line"># abbreviations.  Currently, there are</span><br><span class="line">#   Default</span><br><span class="line">#   Australia (historical usage)</span><br><span class="line">#   India</span><br><span class="line"># You can create your own file in</span><br><span class="line"># share&#x2F;timezonesets&#x2F;.</span><br><span class="line">#extra_float_digits &#x3D; 0# min -15, max 3</span><br><span class="line">#client_encoding &#x3D; sql_ascii# actually, defaults to database</span><br><span class="line"># encoding</span><br><span class="line"></span><br><span class="line"># These settings are initialized by initdb, but they can be changed.</span><br><span class="line">lc_messages &#x3D; &#39;en_US.utf8&#39;# locale for system error message</span><br><span class="line"># strings</span><br><span class="line">lc_monetary &#x3D; &#39;en_US.utf8&#39;# locale for monetary formatting</span><br><span class="line">lc_numeric &#x3D; &#39;en_US.utf8&#39;# locale for number formatting</span><br><span class="line">lc_time &#x3D; &#39;en_US.utf8&#39;# locale for time formatting</span><br><span class="line"></span><br><span class="line"># default configuration for text search</span><br><span class="line">default_text_search_config &#x3D; &#39;pg_catalog.english&#39;</span><br><span class="line"></span><br><span class="line"># - Shared Library Preloading -</span><br><span class="line"></span><br><span class="line">#shared_preload_libraries &#x3D; &#39;&#39;# (change requires restart)</span><br><span class="line">#local_preload_libraries &#x3D; &#39;&#39;</span><br><span class="line">#session_preload_libraries &#x3D; &#39;&#39;</span><br><span class="line">#jit_provider &#x3D; &#39;llvmjit&#39;# JIT library to use</span><br><span class="line"></span><br><span class="line"># - Other Defaults -</span><br><span class="line"></span><br><span class="line">#dynamic_library_path &#x3D; &#39;$libdir&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># LOCK MANAGEMENT</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#deadlock_timeout &#x3D; 1s</span><br><span class="line">#max_locks_per_transaction &#x3D; 64# min 10</span><br><span class="line"># (change requires restart)</span><br><span class="line">#max_pred_locks_per_transaction &#x3D; 64# min 10</span><br><span class="line"># (change requires restart)</span><br><span class="line">#max_pred_locks_per_relation &#x3D; -2# negative values mean</span><br><span class="line"># (max_pred_locks_per_transaction</span><br><span class="line">#  &#x2F; -max_pred_locks_per_relation) - 1</span><br><span class="line">#max_pred_locks_per_page &#x3D; 2            # min 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># VERSION AND PLATFORM COMPATIBILITY</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># - Previous PostgreSQL Versions -</span><br><span class="line"></span><br><span class="line">#array_nulls &#x3D; on</span><br><span class="line">#backslash_quote &#x3D; safe_encoding# on, off, or safe_encoding</span><br><span class="line">#default_with_oids &#x3D; off</span><br><span class="line">#escape_string_warning &#x3D; on</span><br><span class="line">#lo_compat_privileges &#x3D; off</span><br><span class="line">#operator_precedence_warning &#x3D; off</span><br><span class="line">#quote_all_identifiers &#x3D; off</span><br><span class="line">#standard_conforming_strings &#x3D; on</span><br><span class="line">#synchronize_seqscans &#x3D; on</span><br><span class="line"></span><br><span class="line"># - Other Platforms and Clients -</span><br><span class="line"></span><br><span class="line">#transform_null_equals &#x3D; off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># ERROR HANDLING</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#exit_on_error &#x3D; off# terminate session on any error?</span><br><span class="line">#restart_after_crash &#x3D; on# reinitialize after backend crash?</span><br><span class="line">#data_sync_retry &#x3D; off# retry or panic on failure to fsync data?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># CONFIG FILE INCLUDES</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># These options allow settings to be loaded from files other than the</span><br><span class="line"># default postgresql.conf.</span><br><span class="line"></span><br><span class="line">#include_dir &#x3D; &#39;conf.d&#39;# include files ending in &#39;.conf&#39; from</span><br><span class="line"># directory &#39;conf.d&#39;</span><br><span class="line">#include_if_exists &#x3D; &#39;exists.conf&#39;# include file only if it exists</span><br><span class="line">#include &#x3D; &#39;special.conf&#39;# include file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"># CUSTOMIZED OPTIONS</span><br><span class="line">#------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Add settings for extensions here</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-6、重启主服务器的容器"><a href="#2-6、重启主服务器的容器" class="headerlink" title="2.6、重启主服务器的容器"></a>2.6、重启主服务器的容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart pg-master</span><br></pre></td></tr></table></figure><h3 id="三、从服务器"><a href="#三、从服务器" class="headerlink" title="三、从服务器"></a>三、从服务器</h3><h4 id="3-1、拉取镜像（这里我为了加快速度是从私服拉取）"><a href="#3-1、拉取镜像（这里我为了加快速度是从私服拉取）" class="headerlink" title="3.1、拉取镜像（这里我为了加快速度是从私服拉取）"></a>3.1、拉取镜像（这里我为了加快速度是从私服拉取）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node03 ~]<span class="comment"># docker pull 192.168.3.235:30002/public/mdillon-postgis@sha256:ac5dd18c43b0ee89320764684aa5c2da5c3c2ce54cf01a6caab21f905302d1b5</span></span><br></pre></td></tr></table></figure><h4 id="3-2、创建容器"><a href="#3-2、创建容器" class="headerlink" title="3.2、创建容器"></a>3.2、创建容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">[root@node03 ~]<span class="comment"># docker images|grep postgis</span></span><br><span class="line">192.168.3.235:30002/public/mdillon-postgis    &lt;none&gt;   b2a8fefe8a63     16 months ago    713MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动镜像</span></span><br><span class="line">[root@node03 ~]<span class="comment"># docker run --name pg-slave1 --restart=always  -v /data/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d mdillon/postgis</span></span><br><span class="line">55339a00f8c1879b2647b73bd721197e2d82991c7b8329138e46c356100476a6</span><br></pre></td></tr></table></figure><h4 id="3-3、将主服务器的数据同步到从数据库"><a href="#3-3、将主服务器的数据同步到从数据库" class="headerlink" title="3.3、将主服务器的数据同步到从数据库"></a>3.3、将主服务器的数据同步到从数据库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">[root@node03 ~]<span class="comment"># docker exec -it pg-slave1 bash </span></span><br><span class="line"><span class="comment"># 切换postgres用户</span></span><br><span class="line">root@55339a00f8c1:/<span class="comment"># </span></span><br><span class="line"><span class="comment"># 删除默认初始化目录</span></span><br><span class="line">su postgres</span><br><span class="line">rm -rf /var/lib/postgresql/data/*</span><br><span class="line">pg_basebackup -D <span class="variable">$PGDATA</span> -Fp -Xs -v -P -h 192.168.3.238 -U replica -W</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Password: 123456</span><br><span class="line">pg_basebackup: initiating base backup, waiting <span class="keyword">for</span> checkpoint to complete</span><br><span class="line">pg_basebackup: checkpoint completed</span><br><span class="line">pg_basebackup: write-ahead <span class="built_in">log</span> start point: 0/D000028 on timeline 1</span><br><span class="line">pg_basebackup: starting background WAL receiver</span><br><span class="line">pg_basebackup: created temporary replication slot <span class="string">&quot;pg_basebackup_37&quot;</span></span><br><span class="line">83073/83073 kB (100%), 1/1 tablespace                                         </span><br><span class="line">pg_basebackup: write-ahead <span class="built_in">log</span> end point: 0/D000130</span><br><span class="line">pg_basebackup: waiting <span class="keyword">for</span> background process to finish streaming ...</span><br><span class="line">pg_basebackup: base backup completed</span><br></pre></td></tr></table></figure><h4 id="3-4、添加恢复文件"><a href="#3-4、添加恢复文件" class="headerlink" title="3.4、添加恢复文件"></a>3.4、添加恢复文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node03 ~]<span class="comment"># vi /data/postgresql/data/recovery.conf</span></span><br><span class="line"></span><br><span class="line">standby_mode = on</span><br><span class="line">primary_conninfo = <span class="string">&#x27;host=192.168.3.236 port=5432 user=replica password=123456&#x27;</span></span><br><span class="line">recovery_target_timeline = <span class="string">&#x27;latest&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-5、修改postgresql-conf"><a href="#3-5、修改postgresql-conf" class="headerlink" title="3.5、修改postgresql.conf"></a>3.5、修改postgresql.conf</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主要是有些是注释掉得需要改过来</span></span><br><span class="line">[root@node03 ~]<span class="comment"># vi /data/postgresql/data/postgresql.conf</span></span><br><span class="line">wal_level = replica</span><br><span class="line">max_connections = 1000</span><br><span class="line">hot_standby = on</span><br><span class="line">max_standby_streaming_delay = 30s</span><br><span class="line">wal_receiver_status_interval = 10s </span><br><span class="line">hot_standby_feedback = on</span><br></pre></td></tr></table></figure><h4 id="3-6、重启容器"><a href="#3-6、重启容器" class="headerlink" title="3.6、重启容器"></a>3.6、重启容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node03 data]<span class="comment"># docker restart pg-slave2</span></span><br></pre></td></tr></table></figure><h4 id="3-7、校验"><a href="#3-7、校验" class="headerlink" title="3.7、校验"></a>3.7、校验</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it pg-master bash</span><br><span class="line">su postgres</span><br><span class="line">psql</span><br><span class="line">select client_addr,sync_state from pg_stat_replication;</span><br><span class="line">不为空创建成功</span><br></pre></td></tr></table></figure><p>hot_standby</p><p>新步骤</p><p>sha256:2243a2cf02227d5c96121fcb5be64b778945b6b9261eed6b64eb5f00e0350c65<br>[root@k8s-node01 ~]# docker run –name pg-master –restart=always  -v /data/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d mdillon/postgis<br>docker: Error response from daemon: No command specified.<br>See ‘docker run –help’.</p><p>建议放开日志</p><p>logging_collector = on    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker_deploy_hive</title>
      <link href="98f8830a.html"/>
      <url>98f8830a.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://hshirodkar.medium.com/apache-hive-on-docker-4d7280ac6f8e">https://hshirodkar.medium.com/apache-hive-on-docker-4d7280ac6f8e</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>缓存使用和角色定位</title>
      <link href="e9b39bb2.html"/>
      <url>e9b39bb2.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://x.com/bytebytego/status/1756559741004997046/photo/1">https://x.com/bytebytego/status/1756559741004997046/photo/1</a></p><p> Read Strategies: </p><p>Cache aside  z</p><p>Read through</p><p>分别指缓存未命中时主动加载数据到缓存，以及直接通过缓存层读取数据。</p><p> Write Strategies: </p><p>Write around </p><p>Write back </p><p>Write through</p><ul><li>写策略中的 “Write around” 指直接写入数据库而非缓存，以减少缓存无效化的开销；“Write back” 指先写入缓存后定期写入数据库，以提高性能；“Write through” 指同时写入缓存和数据库，以保证数据的一致性。</li><li>不同的缓存策略可以根据实际需求组合使用，以达到最佳的性能和数据一致性平衡。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录这段时间账号异常</title>
      <link href="c65c8915.html"/>
      <url>c65c8915.html</url>
      
        <content type="html"><![CDATA[<p><img src="../img/image-20240803084457424.png" alt="image-20240803084457424"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis对应typehandler的操作</title>
      <link href="a29432cf.html"/>
      <url>a29432cf.html</url>
      
        <content type="html"><![CDATA[<p>Mybatis在操作 非基础的 Java 对象的时候提供 Type handle 转换类似于字符串转换成 Java 对象,类似 JPA 的 ORM</p><p>TypeHandler 是 MyBatis 中用于处理 Java 类型和数据库类型之间转换的接口。通过自定义 TypeHandler，可以实现特定类型的转换逻辑，从而使得 MyBatis 在处理复杂类型时更加灵活。</p><p>TypeHandler 是 MyBatis 中用于处理 Java 类型和数据库类型之间转换的接口。通过自定义 TypeHandler，可以实现特定类型的转换逻辑，从而使得 MyBatis 在处理复杂类型时更加灵活。</p><h2 id="如何自定义-TypeHandler"><a href="#如何自定义-TypeHandler" class="headerlink" title="如何自定义 TypeHandler"></a>如何自定义 TypeHandler</h2><p>创建自定义 TypeHandler 的步骤如下：</p><ol><li><strong>实现 TypeHandler 接口</strong>：首先创建一个类并实现 <code>org.apache.ibatis.type.TypeHandler</code> 接口。</li><li><strong>重写接口方法</strong>：你需要实现四个方法：<code>setParameter</code>、<code>getResult</code> (有三个重载形式)。</li><li><strong>注册 TypeHandler</strong>：在 MyBatis 配置文件中注册自定义的 TypeHandler，或者在 Mapper 文件中指定使用该 TypeHandler。</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>下面是一个简单的示例，展示如何将字符串类型转换为自定义的 Java 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTypeHandler</span> <span class="keyword">implements</span> <span class="title">TypeHandler</span>&lt;<span class="title">CustomType</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, CustomType parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ps.setString(i, parameter.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomType <span class="title">getResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String columnValue = rs.getString(columnName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomType(columnValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomType <span class="title">getResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String columnValue = rs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomType(columnValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomType <span class="title">getResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String columnValue = cs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomType(columnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-MyBatis-配置文件中注册"><a href="#在-MyBatis-配置文件中注册" class="headerlink" title="在 MyBatis 配置文件中注册"></a>在 MyBatis 配置文件中注册</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.example.CustomTypeHandler&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-configBean下配置"><a href="#在-configBean下配置" class="headerlink" title="在 configBean下配置"></a>在 configBean下配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过配置注入我们设定的类型处理</span><br></pre></td></tr></table></figure><p>通过以上步骤，你可以实现自定义的 TypeHandler，并在 MyBatis 中灵活地处理复杂类型的数据转换。</p><p>但是对于 Map&lt;K,V&gt;这种格式的数据需要单独配置后解析所有的 map</p><p>需要定义一个</p><p>private final Type MAP_TYPE;</p><p>public MybatisMapTypeHandler() {</p><p>​    this.MAP_TYPE = new TypeToken&lt;Map&lt;K, V&gt;&gt;() {</p><p>​    }.getType();</p><p>}</p><p>否则建了多个 map的 typehand会报错,如果不用 </p><p>private final Type MAP_TYPE; 来接可能对于复杂的的 map&lt;key,value&lt;List<Clazz11>&gt;&gt;这种可能会解析的不一样,</p><p>这里我使用 gson 来解析.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>流式读取支持拓展</title>
      <link href="undefined.html"/>
      <url>undefined.html</url>
      
        <content type="html"><![CDATA[<p>在 Java 中有 URL 这个类原生支持读取 HTTP,HTTPS,FTP 的链接数据</p><p>，但有时候我们需要支持更多协议，比如 SFTP 或者自定义的协议。</p><h1 id="URL-流式读取支持拓展"><a href="#URL-流式读取支持拓展" class="headerlink" title="URL 流式读取支持拓展"></a>URL 流式读取支持拓展</h1><p>在 Java 中有 URL 这个类原生支持读取 HTTP, HTTPS, FTP 的链接数据，但有时候我们需要支持更多协议，比如 SFTP 或者自定义的协议。</p><h2 id="自定义协议处理器"><a href="#自定义协议处理器" class="headerlink" title="自定义协议处理器"></a>自定义协议处理器</h2><p>为了支持更多协议，我们可以创建自定义的 URLStreamHandler。Java 提供了 URLStreamHandler 类，我们可以通过继承这个类并实现它的抽象方法来处理自定义协议。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><strong>创建自定义的 URLStreamHandler</strong>: 继承 URLStreamHandler 类并实现 openConnection 方法。</li><li><strong>注册自定义的 URLStreamHandler</strong>: 在系统属性中注册我们的自定义协议处理器。</li><li><strong>使用自定义协议</strong>: 现在我们可以像使用普通的 URL 一样来使用自定义的协议。</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是一个简单的例子，展示如何创建和使用自定义的 URLStreamHandler 来处理 SFTP 协议。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandlerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SFTPHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL url)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 在这里实现 SFTP 连接逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SFTPURLConnection(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 注册自定义的 URLStreamHandler</span></span><br><span class="line">        URL.setURLStreamHandlerFactory(<span class="keyword">new</span> URLStreamHandlerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> URLStreamHandler <span class="title">createURLStreamHandler</span><span class="params">(String protocol)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;sftp&quot;</span>.equals(protocol)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> SFTPHandler();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用自定义的 SFTP 协议</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;sftp://example.com/path/to/file&quot;</span>);</span><br><span class="line">        URLConnection connection = url.openConnection();</span><br><span class="line">        <span class="comment">// 继续处理连接...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><strong>线程安全</strong>: 确保自定义的 URLStreamHandler 是线程安全的。</li><li><strong>错误处理</strong>: 在实现自定义协议时，处理可能出现的各种异常情况。</li><li><strong>性能考虑</strong>: 优化连接和数据传输的性能，尤其是在处理大型文件或高并发场景时。</li><li>对于引入了 springmvc模块的服务,需要注意 tomcat 实现了这个方法需要我们处理下URL.setURLStreamHandlerFactory</li></ol><p>通过以上步骤，我们可以方便地扩展 Java 的 URL 支持，让其能够处理更多的协议类型，满足更复杂的需求。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对象池及其学习common-pool2</title>
      <link href="d3e6d00c.html"/>
      <url>d3e6d00c.html</url>
      
        <content type="html"><![CDATA[<p>关于使用 Apache 下的 commons-pools 可以实现对象的池化对于经常需要重复使用不想重复创建的对象,同时提供自动调用和维护的方法来维持对象的存活,它通过使用对象池来提高性能和资源利用率，特别是在需要频繁创建和销毁对象的场景中。</p><p>对于当前很多需要使用一些 SDK 来对接的一些服务来说就很方便对于对象存储的 SDK 来说其实对于的 SDK 提供了保活,只需要根据对接的服务来调用已经创建的客户端实例就可以,但是本次项目需要对接 SFTP,FTP的数据源,都是偏底层的服务,在使用过程中,需要使用客户端来创建 session 来进行通讯,而且创建 session 的过程。s</p><p>相对较为耗时，为了提高整体系统性能，我们需要使用对象池来管理这些客户端实例,这样一来，我们可以显著减少客户端实例的创建和销毁次数，从而提高系统的响应速度和资源利用率。</p><h2 id="对象池的其他使用场景"><a href="#对象池的其他使用场景" class="headerlink" title="对象池的其他使用场景"></a>对象池的其他使用场景</h2><p>除了管理 SFTP、FTP 等底层服务的客户端实例，对象池在以下场景中也非常有用：</p><ol><li><strong>数据库连接池</strong>：通过池化数据库连接，可以减少连接建立和关闭的开销，提高数据库操作的性能。</li><li><strong>线程池</strong>：线程池用于管理工作线程，避免频繁创建和销毁线程，从而提高并发处理能力。</li><li><strong>缓存对象池</strong>：在高频率访问的场景中，通过池化缓存对象可以减少内存分配和垃圾回收的压力。</li><li><strong>网络连接池</strong>：池化网络连接可以提高网络通信的效率，特别是在高并发访问的场景中。</li></ol><h2 id="常见问题及解决方案"><a href="#常见问题及解决方案" class="headerlink" title="常见问题及解决方案"></a>常见问题及解决方案</h2><p>虽然对象池可以显著提高性能，但在使用过程中也可能遇到一些问题：</p><h3 id="1-对象泄漏"><a href="#1-对象泄漏" class="headerlink" title="1. 对象泄漏"></a>1. 对象泄漏</h3><p>如果某些对象没有归还到池中，就会导致对象泄漏，从而影响池的可用性。解决方法是确保在任何情况下都能正确归还对象，最好使用 <code>try-finally</code> 或者 <code>try-with-resources</code> 语句来管理对象的借用和归还。</p><h3 id="2-对象池配置不当"><a href="#2-对象池配置不当" class="headerlink" title="2. 对象池配置不当"></a>2. 对象池配置不当</h3><p>不合理的池配置可能会导致资源浪费或不足。例如，池的最大对象数设置过大可能会占用过多的内存，而设置过小则可能无法满足高并发需求。解决方法是根据实际需求和性能测试结果来调整配置参数。</p><h3 id="3-对象的有效性"><a href="#3-对象的有效性" class="headerlink" title="3. 对象的有效性"></a>3. 对象的有效性</h3><p>池化的对象在借用和归还之间可能会失效，例如网络连接中断等。解决方法是实现对象的验证逻辑，在每次借用对象时进行有效性检查，如果对象无效则重新创建。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="如何使用-commons-pool2"><a href="#如何使用-commons-pool2" class="headerlink" title="如何使用 commons-pool2"></a>如何使用 commons-pool2</h2><p>要使用 commons-pool2，首先需要在项目中添加相关的依赖。对于使用 Maven 的项目，可以在 <code>pom.xml</code> 文件中添加以下依赖项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建对象池"><a href="#创建对象池" class="headerlink" title="创建对象池"></a>创建对象池</h3><p>接下来，需要创建一个对象池。以下是一个简单的示例，展示了如何创建一个字符串对象池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.PooledObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.PooledObjectFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.DefaultPooledObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringFactory</span> <span class="keyword">implements</span> <span class="title">PooledObjectFactory</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PooledObject&lt;String&gt; <span class="title">makeObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultPooledObject&lt;&gt;(<span class="keyword">new</span> String(<span class="string">&quot;Pooled String&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyObject</span><span class="params">(PooledObject&lt;String&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// No specific destruction needed for String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateObject</span><span class="params">(PooledObject&lt;String&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.getObject() != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activateObject</span><span class="params">(PooledObject&lt;String&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// No activation needed for String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">passivateObject</span><span class="params">(PooledObject&lt;String&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// No passivation needed for String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GenericObjectPoolConfig&lt;String&gt; config = <span class="keyword">new</span> GenericObjectPoolConfig&lt;&gt;();</span><br><span class="line">        config.setMaxTotal(<span class="number">10</span>); <span class="comment">// 设置池中最多可存在的对象数</span></span><br><span class="line">        GenericObjectPool&lt;String&gt; pool = <span class="keyword">new</span> GenericObjectPool&lt;&gt;(<span class="keyword">new</span> StringFactory(), config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String pooledString = pool.borrowObject();</span><br><span class="line">            System.out.println(pooledString);</span><br><span class="line">            pool.returnObject(pooledString);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            pool.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置对象池"><a href="#配置对象池" class="headerlink" title="配置对象池"></a>配置对象池</h3><p>commons-pool2 提供了多种配置选项，可以根据具体需求进行调整。例如，可以设置池中对象的最大数目、最小空闲数目、最大空闲数目、对象的最大存活时间等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GenericObjectPoolConfig&lt;String&gt; config = <span class="keyword">new</span> GenericObjectPoolConfig&lt;&gt;();</span><br><span class="line">config.setMaxTotal(<span class="number">10</span>);</span><br><span class="line">config.setMinIdle(<span class="number">2</span>);</span><br><span class="line">config.setMaxIdle(<span class="number">5</span>);</span><br><span class="line">config.setMaxWaitMillis(<span class="number">3000</span>); <span class="comment">// 最大等待时间</span></span><br></pre></td></tr></table></figure><h3 id="处理池中的对象"><a href="#处理池中的对象" class="headerlink" title="处理池中的对象"></a>处理池中的对象</h3><p>从对象池中借用和归还对象时，应该始终使用 <code>borrowObject</code> 和 <code>returnObject</code> 方法。这有助于确保对象的正确管理，并避免资源泄漏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String pooledString = pool.borrowObject();</span><br><span class="line"><span class="comment">// 使用对象</span></span><br><span class="line">pool.returnObject(pooledString);</span><br></pre></td></tr></table></figure><p>通过合理配置和使用 commons-pool2，可以显著提高应用程序的性能和资源利用率，特别是在高并发和频繁对象创建的场景中。</p><p>ftp 的操作示例: <a href="https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html">https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html</a>,</p><p>sftp使用jsch 来链接 首先</p><blockquote><p>JSch jsch = new JSch();<br> Session session = jsch.getSession(username, host, port);<br>session.setPassword(password);<br>session.setConfig(“StrictHostKeyChecking”, “no”);<br>session.connect();</p><p>ChannelSftp channelSftp = null;</p><p>Channel channel = session.openChannel(“sftp”);<br> channel.connect();<br>channelSftp = (ChannelSftp) channel;</p><p>return channelSftp;</p></blockquote><p>Tips:注意事项</p><ul><li>ftpclient的客户端底层是利用 socket 来通讯的,所以如果读取文件流需要调用 <a href="https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html#completePendingCommand()">completePendingCommand</a>()</li><li>sftp我们需要池化的是 session 每次下载文件的时候需要重新创建 session.</li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>google算法更新</title>
      <link href="aae323f9.html"/>
      <url>aae323f9.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://uuzi.net/google-algorithm-updates-shake-up-internet-independent-websites-struggle/">谷歌算法更新引发互联网巨变，独立网站何去何从？ - 兔哥博客</a></p><p>大家好，我是兔哥！最近，谷歌对搜索算法进行了一系列重大更新，这不仅可能彻底改变互联网生态，更引发了人们对网络未来的担忧。让我们来看看这次更新会带来哪些影响。</p><h2 id="HouseFresh-com-遭重创"><a href="#HouseFresh-com-遭重创" class="headerlink" title="HouseFresh.com 遭重创"></a>HouseFresh.com 遭重创</h2><p>以HouseFresh.com为例，这个专注于空气净化器评测的网站受到了毁灭性打击。曾经能带来大量流量的搜索关键词，现在却把用户引向那些不实测评的生活杂志，错误信息百出。在2023年9月和2024年3月两次算法更新后，网站日访问量从过去的成千上万锐减到仅几百人，不得不裁员维持运营。</p><h2 id="谷歌力推-AI-概览"><a href="#谷歌力推-AI-概览" class="headerlink" title="谷歌力推 AI 概览"></a>谷歌力推 AI 概览</h2><p>谷歌的发言人声称，公司在改动算法前会严格测试，并提供反馈机会。但实际上，独立网站难以承受这些变化带来的冲击。上周,，谷歌CEO桑达尔·皮查伊宣布将推出”AI概览”功能，由AI直接生成搜索答案，谷歌搜索将成为”生成式AI”。</p><h2 id="谷歌意在解决网络弊端"><a href="#谷歌意在解决网络弊端" class="headerlink" title="谷歌意在解决网络弊端"></a>谷歌意在解决网络弊端</h2><p>谷歌这些变革是为了解决网络上的”搜索引擎优化”弊端。SEO技术旨在调整内容以获得更好的搜索识别，有些网站滥用SEO制作取悦算法而非用户的内容。</p><h2 id="有用内容更新的影响"><a href="#有用内容更新的影响" class="headerlink" title="有用内容更新的影响"></a>有用内容更新的影响</h2><p>为解决低质量搜索结果，谷歌在2022年推出了”有用内容更新”，并在2023年9月和2024年3月再次调整算法。据谷歌称，低质量、非原创内容在搜索中的比例下降了45%。</p><h2 id="意外后果-知名网站流量大减"><a href="#意外后果-知名网站流量大减" class="headerlink" title="意外后果:知名网站流量大减"></a>意外后果:知名网站流量大减</h2><p>然而，这些更新也带来意想不到的后果。数据显示，纽约杂志、GQ等知名网站在过去半年内，谷歌搜索流量出现32%、26%的大幅下降；Urban Dictionary、OprahDaily.com等网站流量也锐减一半以上。</p><h2 id="Reddit等用户平台大涨"><a href="#Reddit等用户平台大涨" class="headerlink" title="Reddit等用户平台大涨"></a>Reddit等用户平台大涨</h2><p>与此形成鲜明对比的是，Reddit等用户内容平台从谷歌获得的流量大幅增长。Reddit最新一季度收益同比增长48%，达2.43亿美元。分析师认为，这反映了人们越来越希望从他人真实经验中获取内容。</p><h2 id="出版商网站遭”重击”"><a href="#出版商网站遭”重击”" class="headerlink" title="出版商网站遭”重击”"></a>出版商网站遭”重击”</h2><p>对此，专家直言不讳地表示，谷歌的算法似乎在”对出版商网站发动战争”。大量独立博客和小网站所有者反映，他们的一切都”被完全抹去”。分析显示，谷歌倾斜于已建立的大型品牌网站，而远离小型独立网站。</p><h2 id="优质内容求生存"><a href="#优质内容求生存" class="headerlink" title="优质内容求生存"></a>优质内容求生存</h2><p>Ready Steady Cut等英国娱乐新闻网站主编表示，他们不得不大幅裁员以维持运营，原因正是谷歌算法变革导致网站流量减半。面对这种严峻形势，独立网站迫切需要更多支持和关注，优质内容才能生存下来。</p><h2 id="谷歌辩护-打击垃圾内容-提供恢复之路"><a href="#谷歌辩护-打击垃圾内容-提供恢复之路" class="headerlink" title="谷歌辩护:打击垃圾内容 提供恢复之路"></a>谷歌辩护:打击垃圾内容 提供恢复之路</h2><p>一位谷歌发言人表示，公司最近的算法更新对垃圾、非原创内容造成重大打击，并密切关注滥用搜索结果的行为。在更新后，谷歌向网站所有者提供了建议，并表示有一条恢复之路。</p><p>不过，身陷困境的网站主编哈特对此深感无助。他说:”我浪费了过去8个月的时间试图遵循谷歌的建议，但一切都没有帮助。” 尽管他们是一个拥有真实第一手经验和专业背景的网站，努力还是付诸东流，这令人心碎。</p><h2 id="AI概览真的有利于网站吗"><a href="#AI概览真的有利于网站吗" class="headerlink" title="AI概览真的有利于网站吗?"></a>AI概览真的有利于网站吗?</h2><p>谷歌声称，搜索结果中的 AI 概述实际上会增加流向网站的流量，并会继续努力支持发布商和创作者。但这一说法缺乏数据支持，业内担心会产生相反效果。</p><p>网站所有者贝瑞担心，如果谷歌AI直接回答问题，用户可能会中止搜索，导致流量进一步下降。她说AI给出的”肤浚且不准确的答案”可能无法满足用户需求。</p><p>旅行作家莱特的文章也遭到AI答案的替代，且AI给出的信息存在严重错误。尽管链接被保留，但被深埋在底部，很难获得足够曝光。</p><h2 id="内容或遭非法抓取"><a href="#内容或遭非法抓取" class="headerlink" title="内容或遭非法抓取?"></a>内容或遭非法抓取?</h2><p>谷歌承认AI工具可能给出不准确信息，但表示会持续改进。不过，一旦AI模型抓取了网站内容，可能无法将这些数据彻底删除，引发版权争议。</p><h2 id="反垄断诉讼待决"><a href="#反垄断诉讼待决" class="headerlink" title="反垄断诉讼待决"></a>反垄断诉讼待决</h2><p>除了网站所有者的质疑，谷歌同时还面临多起反垄断诉讼，控诉其在搜索引擎行业滥用垄断地位。如果输掉官司，谷歌可能面临高额罚款甚至被迫分拆。</p><h2 id="独立网站仍需关注"><a href="#独立网站仍需关注" class="headerlink" title="独立网站仍需关注"></a>独立网站仍需关注</h2><p>面对重重阻力，独立网站和内容创作者的处境艰难。HouseFresh创始人纳瓦罗感叹：”也许认为我们制作优质内容就能获得成功是太天真了。”</p><p>纳瓦罗甚至考虑过完全离开在线世界，转而在现实中开个小店经营。这反映出独立网站在如今的互联网生态中求生存的严峻形势。</p><p>因此，这些独立网站迫切需要更多支持和关注。只有让更多优质内容被公平对待，才能让互联网生态保持活力，继续为用户提供有价值的内容。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MacBook电池管理建议(转载)</title>
      <link href="c1b88394.html"/>
      <url>c1b88394.html</url>
      
        <content type="html"><![CDATA[<p>转载链接 <a href="https://uuzi.net/tips-maximize-macbook-battery-lifespan/">10个实用技巧让MacBook电池寿命更持久 - 兔哥博客</a></p><p>无论你是MacBook新手还是老手，保养好电池都是延长笔记本使用寿命的关键。今天和大家分享10个实用小技巧，助你的MacBook电池在未来数年内持续保持优秀的电力续航。</p><p><img src="https://uuzi.net/wp-content/uploads/2024/05/The-Guide-to-the-Cheapest-Membership-Subscriptions-2_11zon.webp" alt="img"></p><p>首先，我们要明确两个关于可充电池的重要概念：</p><ul><li>电池续航时间：指单次充电后，设备可使用的时间长度。</li><li>电池寿命：指电池在被判废报废并需要更换之前，可使用的年限或电池循环周期数。比如，如果你的MacBook电池循环数已超过1000周期，每次充电就会明显感到续航时间变短。</li></ul><p>无论你如何使用，电池终归有其寿命限制。不过，只要遵循一些简单的使用习惯，就能最大程度延长电池的使用寿命，让你的MacBook在未来数年内持续保持出色的电力续航表现。</p><p><strong>1. 不要关闭优化电池充电</strong></p><p>“优化电池充电”功能在macOS Big Sur及更高版本的新Mac上是默认开启的。它会根据你的充电和使用习惯，自动采取以下措施来延长电池寿命：</p><ul><li>只在你需要使用MacBook时,才将电池充至100%</li><li>当笔记本插上电源时，只将电池充至80%</li><li>即使插了电源，也会先将电池放电至90%左右，再重新充电</li></ul><p>除非你有特别的理由，否则请不要在”系统设置” &gt; “电池” &gt; “电池健康状况”选项中关闭这个功能。</p><p><img src="https://uuzi.net/wp-content/uploads/2024/05/iShot_2024-05-14_19.55.23.webp" alt="img"></p><p><strong>2. 使用苹果原装或优质充电器</strong></p><p>偶尔使用其他品牌的充电器暂时应急倒无大碍，但日常使用时，你仍然应尽量选用MacBook出厂时随附的原装苹果充电器，或其他同等质量的充电设备。</p><p><strong>3. 避免快速充电</strong></p><p>MacBook Air (M1和M2型号)出厂时随机都是30W或35W的电源适配器，你可以使用MacBook Pro的60W+适配器为其快速充电。不过出于保护电池的考虑，还是应当节制使用快充，只在确有需求时方可这么做。</p><p><strong>4. 防止MacBook暴露在极热或极冷环境中</strong></p><p>直射阳光暴晒或将电脑放置在阳光直射的车内，都是锂电池最大的”克星”。同理，极度低温环境同样应当避免。所以，无论炎热还是严寒，都要注意给MacBook一个适宜的使用环境。</p><p><img src="https://uuzi.net/wp-content/uploads/2024/05/iShot_2024-05-14_19.58.35.webp" alt="img"></p><p><strong>5. 不要长期将MacBook插在电源上</strong></p><p>将MacBook长期保持插电状态也会加速电池老化。所以，我们应当在插电和电池供电之间适当切换使用。</p><p><strong>6. 避免电池充满电或电量过低</strong></p><p>努力不让MacBook电池充至100%的确挺难，因为即便你在桌前短暂使用了一两个小时，插着电源的笔记本很快就会充至满电状态。与此同时，MacBook目前还无法像iPhone 15那样，设置仅充电至80%就停止充电。</p><p>所以我们要尽量避免将电池电量消耗到极低，比如5%或10%以下。当电量降至30-40%时，就应该考虑插上电源给笔记本充电。</p><p><strong>7. 给其他设备充电时也为MacBook同步充电</strong></p><p>偶尔将MacBook当做移动电源为iPhone、AirPods等其他设备充电倒无大碍。但如果你经常这么做，反而会加速MacBook电池的老化。所以，还是另外准备一个专门的移动电源更加合适。</p><p>如果你实在需要利用MacBook为其他设备充电，请务必同时也为笔记本本身插上电源。这样一来，你的MacBook电池就不会因为给其他设备充电而剧烈消耗。</p><p><strong>8. 优化MacBook内部设置</strong></p><p>过于频繁地将MacBook电量消耗殆尽后再充电，会加快电池循环周期的耗尽。为此，你应当采取一些措施，比如关闭无用的应用程序和后台进程，以延长单次充电的使用时间。这样一来，你就无需频繁插电为笔记本充电，从而延长了电池的整体使用寿命。</p><p><strong>9. 保持系统软件的更新</strong></p><p>为了确保设备和电池的良好运作，苹果会不时进行系统优化和改进。比如最近，他们就发布了一个iOS更新，将iPhone 15的电池循环寿命延长了一倍。</p><p>同理，Mac系统也会在后台进行电池相关的优化升级。所以，你应当及时将MacBook升级至最新的macOS系统版本，以获得这些改进。</p><p><strong>10. 长期存放前将电量控制在50%左右</strong></p><p>如果你计划一段时间内不使用MacBook，那么最好在电量约50%的状态下，将电脑存放在阴凉、避潮的环境中。切记不要在电量满电或完全耗尽的状态下长期存放，那样会严重损害电池寿命。</p><p>如果你需要存放MacBook超过6个月的时间，那么应当每6个月为电池充电一次至50%左右的电量，以保证电池的健康状态。</p><p><strong>总的来说，正确使用和保养MacBook电池，可以最大限度延长电池的使用周期和寿命。通过上述10个技巧，相信你一定能享受到笔记本出色的电力续航，助力高效工作和生活，绝不会被”没电”这个小问题所打扰。这不仅环保节约，更能让你的MacBook电脑陪伴左右，高性价比地服务更多年份。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 cloudflare对于 WARP订阅</title>
      <link href="undefined.html"/>
      <url>undefined.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/vvbbnn00/WARP-Clash-API">vvbbnn00/WARP-Clash-API: 该项目可以让你通过订阅的方式使用Cloudflare WARP+，自动获取流量。.</a></p><p><a href="https://github.com/cmliu/edgetunnel">cmliu/edgetunnel: 在原版的基础上修改了显示 VLESS 配置信息转换为订阅内容。使用该脚本，你可以方便地将 VLESS 配置信息使用在线配置转换到 Clash 或 Singbox 等工具中。</a></p><p>docker-compose up -d</p><p>下面是安装 docker-compose </p><ol><li><strong>卸载旧版本的 Docker Compose</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure><ol><li><strong>下载最新版本</strong></li></ol><p>目前最新版本是 2.18.1 (截至 2023 年 5 月),下载命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.18.1&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure><p>如果速度起不来可以使用这个镜像</p><blockquote><p>sudo curl -L “<a href="https://dl.ghpig.top/https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$">https://dl.ghpig.top/https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$</a>(uname -s)-$(uname -m)” -o /usr/local/bin/docker-compose</p></blockquote><ol><li><strong>设置执行权限</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure><ol><li><strong>创建软链接 (可选)</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose &#x2F;usr&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure><ol><li><strong>验证安装</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>它应该显示 <code>docker-compose version v2.18.1</code></p><p>注意以下几点:</p><ul><li>需要有 root 或 sudo 权限执行上述命令</li><li>上面的下载链接会自动根据您的系统架构获取合适的二进制文件</li><li>如果下载链接发生改变,可访问 <a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a> 获取最新下载链接</li><li>Docker Compose 2.x 版本需要 Docker 17.12.0 或更高版本</li></ul><p>按照以上步骤,您就可以成功将 Docker Compose 升级到最新的 2.18.1 版本了。升级后最好查看一下新版本的文档,了解新增的语法和功能变化。</p><p><img src="../img/image-20240502130357242.png" alt="image-20240502130357242"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>macbook软件配置(新手项)</title>
      <link href="58edfabc.html"/>
      <url>58edfabc.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h2><h2 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h2><p>Maccy 一款简单易用的mac记事本软件<br>PixPin  一款截图软件可以 OCR 图片<br>超级右键 修改右键的软件<br>Termius ssh的链接工具有付费版</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sublime优化和推荐插件</title>
      <link href="bcb72f0.html"/>
      <url>bcb72f0.html</url>
      
        <content type="html"><![CDATA[<p>参考 链接 <a href="https://segmentfault.com/a/1190000022501113">https://segmentfault.com/a/1190000022501113</a></p><p>ctrol + shift +p</p><p>package control  install  package</p><p><img src="C:/Users/leek/AppData/Roaming/Typora/typora-user-images/image-20210307143657802.png" alt="image-20210307143657802"></p><p>安装后出</p>]]></content>
      
      
      
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runnable、Future 和 RunnableFuture</title>
      <link href="undefined.html"/>
      <url>undefined.html</url>
      
        <content type="html"><![CDATA[<h4 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h4><ul><li><strong>定义</strong>：<code>Runnable</code> 是 Java 中表示可执行任务的接口，通常用于执行没有返回值的任务。</li><li><strong>特点</strong>：只有一个 <code>run()</code> 方法，无法获取任务执行结果。</li></ul><h4 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h4><ul><li><p><strong>定义</strong>：<code>Future</code> 是 Java 中表示异步计算结果的接口，用于表示一个可能还没有完成的计算。</p></li><li><p>特点</p><p>：</p><ul><li>提供 <code>get()</code> 方法来获取计算结果，该方法可能会阻塞直到计算完成。</li><li>通过 <code>isDone()</code> 方法可以检查计算是否完成。</li><li>提供 <code>cancel()</code> 方法来取消计算。</li></ul></li></ul><h4 id="RunnableFuture"><a href="#RunnableFuture" class="headerlink" title="RunnableFuture"></a>RunnableFuture</h4><ul><li><strong>定义</strong>：<code>RunnableFuture</code> 是继承自 <code>Runnable</code> 和 <code>Future</code> 的接口，用于表示一个可运行的、有结果的任务。</li><li><strong>特点</strong>：兼具了 <code>Runnable</code> 和 <code>Future</code> 的特性，既可以作为任务执行，又可以获取任务执行结果。</li></ul><h4 id="区别和优缺点"><a href="#区别和优缺点" class="headerlink" title="区别和优缺点"></a>区别和优缺点</h4><ul><li><strong>Runnable</strong>：用于表示没有返回值的任务，适用于简单的并发场景。</li><li><strong>Future</strong>：用于表示异步计算的结果，可获取计算结果和取消计算。</li><li><strong>RunnableFuture</strong>：兼具 <code>Runnable</code> 和 <code>Future</code> 的特性，适用于希望任务能够被取消、并且能够返回结果的场景。</li></ul><h4 id="常见使用场景"><a href="#常见使用场景" class="headerlink" title="常见使用场景"></a>常见使用场景</h4><ul><li><strong>Runnable</strong>：适用于执行简单的、无返回值的任务。</li><li><strong>Future</strong>：适用于需要获取异步计算结果的场景。</li><li><strong>RunnableFuture</strong>：适用于希望任务能够被取消、并且能够返回结果的场景。</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>对于使用 <code>Future</code> 的场景，需要注意在获取计算结果时可能会阻塞，需要谨慎使用。</li></ul><p>这些接口和类提供了在多线程环境中进行任务调度和管理的基本工具，根据具体需求选择合适的接口和实现类可以更好地满足不同的并发场景。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.google.common.util.concurrent.ThreadFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * author: leek</span><br><span class="line"> * dataTime: 2023年12月15日 下午4:16</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class TaskFeatureOverview &#123;</span><br><span class="line">    static ExecutorService executorService &#x3D;</span><br><span class="line">            new ThreadPoolExecutor(</span><br><span class="line">                    11, 33,</span><br><span class="line">                    2L, TimeUnit.MINUTES, new ArrayBlockingQueue&lt;Runnable&gt;(11),</span><br><span class="line">                    new ThreadFactoryBuilder().build());</span><br><span class="line">    static Executor executor &#x3D; new ThreadPoolExecutor(</span><br><span class="line">            11, 33,</span><br><span class="line">            2L, TimeUnit.MINUTES, new ArrayBlockingQueue&lt;Runnable&gt;(22),</span><br><span class="line">            new ThreadFactoryBuilder().build());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_runable() throws InterruptedException &#123;</span><br><span class="line">        List&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;(Arrays.asList(&quot;dd&quot;, &quot;aa&quot;, &quot;ee&quot;));</span><br><span class="line">        CountDownLatch count &#x3D; new CountDownLatch(1);</span><br><span class="line">        ((Runnable) () -&gt; &#123;</span><br><span class="line">            System.out.println(&quot;匿名内部类&quot;);</span><br><span class="line">            System.out.println(strings.toString());</span><br><span class="line">            strings.add(&quot;ww&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;).run();</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(&quot;匿名内部类+++&quot;);</span><br><span class="line">            System.out.println(strings.toString());</span><br><span class="line">            strings.add(&quot;qq&quot;);</span><br><span class="line">            count.countDown();</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(strings.toString());</span><br><span class="line">        count.await();</span><br><span class="line">        System.out.println(strings.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_callable_sync() throws Exception &#123;</span><br><span class="line">        List&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;(Arrays.asList(&quot;dd&quot;, &quot;aa&quot;, &quot;ee&quot;));</span><br><span class="line">        CountDownLatch count &#x3D; new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Future&lt;Object&gt; future &#x3D; executorService.submit((Callable&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">            strings.add(&quot;ww&quot;);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            count.countDown();</span><br><span class="line">            return strings.size();</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; 阻塞等待数据</span><br><span class="line">        System.out.println(&quot;第一次获取:&quot; + future.get());</span><br><span class="line"></span><br><span class="line">        count.await();</span><br><span class="line">        &#x2F;&#x2F; 阻塞等待数据</span><br><span class="line">        System.out.println(&quot;第二次获取:&quot; + future.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_callable_async() throws Exception &#123;</span><br><span class="line">        List&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;(Arrays.asList(&quot;dd&quot;, &quot;aa&quot;, &quot;ee&quot;));</span><br><span class="line">        CountDownLatch count &#x3D; new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Future&lt;Object&gt; future &#x3D; executorService.submit((Callable&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">            strings.add(&quot;ww&quot;);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            count.countDown();</span><br><span class="line">            return strings.size();</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(&quot;第一次获取:&quot; + future.get());</span><br><span class="line"></span><br><span class="line">        count.await();</span><br><span class="line">        System.out.println(&quot;第二次获取:&quot; + future.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_future() &#123;</span><br><span class="line">        Class&lt;CompletableFuture&gt; completableFutureClass &#x3D; CompletableFuture.class;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_RunnableFuture() &#123;</span><br><span class="line">        Class&lt;FutureTask&gt; futureTaskClass &#x3D; FutureTask.class;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_Sick_skills() &#123;</span><br><span class="line">        List&lt;Object&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        list.stream().forEach(id -&gt; CompletableFuture.supplyAsync(()</span><br><span class="line">                -&gt; &#123;</span><br><span class="line">            return id;</span><br><span class="line">        &#125;).whenComplete((s, e) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        CompletableFuture[] completableFutures &#x3D; list.stream().map(id -&gt; CompletableFuture.supplyAsync(()</span><br><span class="line">                -&gt; &#123;</span><br><span class="line">            return id;</span><br><span class="line">        &#125;).whenComplete((s, e) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)).toArray(CompletableFuture[]::new);</span><br><span class="line">        CompletableFuture.allOf(completableFutures).join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @Async</span><br><span class="line">     * public Future&lt;String&gt; getValue() &#123;</span><br><span class="line">     *    &#x2F;&#x2F; ...</span><br><span class="line">     *    return result;</span><br><span class="line">     * &#125;</span><br><span class="line">     * 获取future后异步调用:</span><br><span class="line">     *</span><br><span class="line">     * java</span><br><span class="line">     *</span><br><span class="line">     * Copy code</span><br><span class="line">     *</span><br><span class="line">     * Future&lt;String&gt; future &#x3D; getValue();</span><br><span class="line">     * future.get() &#x2F;&#x2F;异步等待结果*</span><br><span class="line">     *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">package com.lee.demo.thread;&#x2F;**</span><br><span class="line"> * @author simba@onlying.cn</span><br><span class="line"> * @date 2023年12月15日 下午4:16</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">import com.google.common.util.concurrent.ThreadFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * author: leek</span><br><span class="line"> * dataTime: 2023年12月15日 下午4:16</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class TaskFeatureOverview &#123;</span><br><span class="line">    static ExecutorService executorService &#x3D;</span><br><span class="line">            new ThreadPoolExecutor(</span><br><span class="line">                    11, 33,</span><br><span class="line">                    2L, TimeUnit.MINUTES, new ArrayBlockingQueue&lt;Runnable&gt;(11),</span><br><span class="line">                    new ThreadFactoryBuilder().build());</span><br><span class="line">    static Executor executor &#x3D; new ThreadPoolExecutor(</span><br><span class="line">            11, 33,</span><br><span class="line">            2L, TimeUnit.MINUTES, new ArrayBlockingQueue&lt;Runnable&gt;(22),</span><br><span class="line">            new ThreadFactoryBuilder().build());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_runable() throws InterruptedException &#123;</span><br><span class="line">        List&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;(Arrays.asList(&quot;dd&quot;, &quot;aa&quot;, &quot;ee&quot;));</span><br><span class="line">        CountDownLatch count &#x3D; new CountDownLatch(1);</span><br><span class="line">        ((Runnable) () -&gt; &#123;</span><br><span class="line">            System.out.println(&quot;匿名内部类&quot;);</span><br><span class="line">            System.out.println(strings.toString());</span><br><span class="line">            strings.add(&quot;ww&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;).run();</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(&quot;匿名内部类+++&quot;);</span><br><span class="line">            System.out.println(strings.toString());</span><br><span class="line">            strings.add(&quot;qq&quot;);</span><br><span class="line">            count.countDown();</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(strings.toString());</span><br><span class="line">        count.await();</span><br><span class="line">        System.out.println(strings.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_callable_sync() throws Exception &#123;</span><br><span class="line">        List&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;(Arrays.asList(&quot;dd&quot;, &quot;aa&quot;, &quot;ee&quot;));</span><br><span class="line">        CountDownLatch count &#x3D; new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Future&lt;Object&gt; future &#x3D; executorService.submit((Callable&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">            strings.add(&quot;ww&quot;);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            count.countDown();</span><br><span class="line">            return strings.size();</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; 阻塞等待数据</span><br><span class="line">        System.out.println(&quot;第一次获取:&quot; + future.get());</span><br><span class="line"></span><br><span class="line">        count.await();</span><br><span class="line">        &#x2F;&#x2F; 阻塞等待数据</span><br><span class="line">        System.out.println(&quot;第二次获取:&quot; + future.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_callable_async() throws Exception &#123;</span><br><span class="line">        List&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;(Arrays.asList(&quot;dd&quot;, &quot;aa&quot;, &quot;ee&quot;));</span><br><span class="line">        CountDownLatch count &#x3D; new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Future&lt;Object&gt; future &#x3D; executorService.submit((Callable&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">            strings.add(&quot;ww&quot;);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            count.countDown();</span><br><span class="line">            return strings.size();</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(&quot;第一次获取:&quot; + future.get());</span><br><span class="line"></span><br><span class="line">        count.await();</span><br><span class="line">        System.out.println(&quot;第二次获取:&quot; + future.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_future() &#123;</span><br><span class="line">        Class&lt;CompletableFuture&gt; completableFutureClass &#x3D; CompletableFuture.class;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_RunnableFuture() &#123;</span><br><span class="line">        Class&lt;FutureTask&gt; futureTaskClass &#x3D; FutureTask.class;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void t1_Sick_skills() &#123;</span><br><span class="line">        List&lt;Object&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        list.stream().forEach(id -&gt; CompletableFuture.supplyAsync(()</span><br><span class="line">                -&gt; &#123;</span><br><span class="line">            return id;</span><br><span class="line">        &#125;).whenComplete((s, e) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        CompletableFuture[] completableFutures &#x3D; list.stream().map(id -&gt; CompletableFuture.supplyAsync(()</span><br><span class="line">                -&gt; &#123;</span><br><span class="line">            return id;</span><br><span class="line">        &#125;).whenComplete((s, e) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)).toArray(CompletableFuture[]::new);</span><br><span class="line">        CompletableFuture.allOf(completableFutures).join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @Async</span><br><span class="line">     * public Future&lt;String&gt; getValue() &#123;</span><br><span class="line">     *    &#x2F;&#x2F; ...</span><br><span class="line">     *    return result;</span><br><span class="line">     * &#125;</span><br><span class="line">     * 获取future后异步调用:</span><br><span class="line">     *</span><br><span class="line">     * java</span><br><span class="line">     *</span><br><span class="line">     * Copy code</span><br><span class="line">     *</span><br><span class="line">     * Future&lt;String&gt; future &#x3D; getValue();</span><br><span class="line">     * future.get() &#x2F;&#x2F;异步等待结果*</span><br><span class="line">     *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考链接:<br><a href="https://mp.weixin.qq.com/s/M6LSx2HwwW4_YhguAeEs_g">如何合理估算 Java 线程池大小：综合指南</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>有趣的web</title>
      <link href="ea10c0bb.html"/>
      <url>ea10c0bb.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://terminus2049.github.io/Not-exist-in-douban/">https://terminus2049.github.io/Not-exist-in-douban/</a>  404影音<br><a href="http://matrixmultiplication.xyz/">http://matrixmultiplication.xyz/</a> 矢量计算可视化</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>stash配置和Quantumult X,suger的区别</title>
      <link href="2f16d0ef.html"/>
      <url>2f16d0ef.html</url>
      
        <content type="html"><![CDATA[<p>YouTube APP去广告 - 使用 Quantumult X / Surge/ Shadowrocket/ Loon/Stash 完美屏蔽YouTube App广告小白教程（神机规则） - 毒奶 - 欢迎使用代理访问本站。</p><p><a href="https://github.com/deezertidal/stash-override">https://github.com/deezertidal/stash-override</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!name &#x3D; YouTube去广告</span><br><span class="line">#!desc &#x3D;支持pip，后台播放</span><br><span class="line">#!author &#x3D; Maasea </span><br><span class="line">#!homepage&#x3D;https:&#x2F;&#x2F;whatshub.top</span><br><span class="line">#!icon &#x3D; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Koolson&#x2F;Qure&#x2F;master&#x2F;IconSet&#x2F;Color&#x2F;YouTube.png</span><br><span class="line">name: YouTubequguanggao</span><br><span class="line">desc: 支持pip，后台播放</span><br><span class="line">http:</span><br><span class="line">  mitm:</span><br><span class="line">    - &quot;-redirector*.googlevideo.com&quot;</span><br><span class="line">    - &quot;*.googlevideo.com&quot;</span><br><span class="line">    - &quot;www.youtube.com&quot;</span><br><span class="line">    - &quot;s.youtube.com&quot;</span><br><span class="line">    - &quot;youtubei.googleapis.com&quot;</span><br><span class="line">  script:</span><br><span class="line">    - match: ^https:\&#x2F;\&#x2F;youtubei\.googleapis\.com\&#x2F;youtubei\&#x2F;v1\&#x2F;(browse|next|player|search|reel\&#x2F;reel_watch_sequence|guide|account\&#x2F;get_setting)\?</span><br><span class="line">      name: YouTubequguanggao1</span><br><span class="line">      type: response</span><br><span class="line">      require-body: true</span><br><span class="line">      binary-mode: true</span><br><span class="line">      timeout: 10</span><br><span class="line">    - match: ^https:\&#x2F;\&#x2F;youtubei\.googleapis\.com\&#x2F;youtubei\&#x2F;v1\&#x2F;(browse|next|player|reel\&#x2F;reel_watch_sequence)\?</span><br><span class="line">      name: YouTubequguanggao2</span><br><span class="line">      type: request</span><br><span class="line">      require-body: true</span><br><span class="line">      binary-mode: true</span><br><span class="line">      timeout: 10</span><br><span class="line">  rewrite:</span><br><span class="line">    - (^https?:\&#x2F;\&#x2F;[\w-]+\.googlevideo\.com\&#x2F;(?!dclk_video_ads).+?)&amp;ctier&#x3D;L(&amp;.+?),ctier,(.+) $1$2$3 302</span><br><span class="line">    - ^https?:\&#x2F;\&#x2F;[\w-]+\.googlevideo\.com\&#x2F;(?!(dclk_video_ads|videoplayback\?)).+&amp;oad - reject-200</span><br><span class="line">    - ^https?:\&#x2F;\&#x2F;(www|s)\.youtube\.com\&#x2F;api\&#x2F;stats\&#x2F;ads - reject-200</span><br><span class="line">    - ^https?:\&#x2F;\&#x2F;(www|s)\.youtube\.com\&#x2F;(pagead|ptracking) - reject-200</span><br><span class="line">    - ^https?:\&#x2F;\&#x2F;s\.youtube\.com\&#x2F;api\&#x2F;stats\&#x2F;qoe\?adcontext - reject-200</span><br><span class="line">script-providers:</span><br><span class="line">  YouTubequguanggao1:</span><br><span class="line">    url: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Maasea&#x2F;sgmodule&#x2F;master&#x2F;Script&#x2F;Youtube&#x2F;dist&#x2F;youtube.response.beta.js</span><br><span class="line">    interval: 86400</span><br><span class="line">  YouTubequguanggao2:</span><br><span class="line">    url: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Maasea&#x2F;sgmodule&#x2F;master&#x2F;Script&#x2F;Youtube&#x2F;dist&#x2F;youtube.request.beta.js</span><br><span class="line">    interval: 86400</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码复用逻辑和类命名</title>
      <link href="c66fd762.html"/>
      <url>c66fd762.html</url>
      
        <content type="html"><![CDATA[<p>对于静态工具类的抽象复用,可以考虑以下几点:</p><ol><li>将公共逻辑提取出来,放到一个基类或接口中。子类只需要实现自己业务相关的逻辑。</li><li>使用工厂方法模式,定义一个工厂类,根据参数创建不同的工具类实例。调用端只需要使用工厂类,不需关心具体实现。</li><li>使用依赖注入框架,如Spring,在配置文件中定义不同的工具类bean,并注入到其他类中使用。</li><li>将静态方法改成普通方法,实例化为单例对象,注入到其他类中复用。</li><li>使用策略模式,定义不同算法的策略类,通过组合和委托的方式复用策略。</li><li>如果工具类方法数量不多,也可以简单地提取到一个公共类中,在需要使用的地方直接调用即可。</li><li>考虑使用函数式编程思想,将静态方法改写为无状态的函数,更便于复用。<br>主要还是要根据实际情况划分出可复用的部分,然后通过封装、依赖注入、组合、委托等方式提高复用性。</li></ol><p>常见命名的后缀 </p><ul><li>Util 通常用于表示一个实用工具类</li><li>Helper 用于表示一个帮助类，通常用于提供与特定对象或功能相关的辅助方法。Helper 类的方法可能需要依赖于特定对象的实例。</li><li>Utils 与 “Util” 类似，用于表示一组实用工具方法。它通常与多个功能相关，而不是特定于单一功能。</li><li>Toolkit 通常表示一个工具包或工具集，它包含一组相关的工具、资源或库，用于执行特定的任务或解决特定的问题。</li></ul><p><a href="https://cloud.tencent.com/developer/article/1798664">SDK 开发规范-腾讯云开发者社区-腾讯云</a></p><p><a href="https://www.cnblogs.com/scar1et/p/15177861.html">通用类命名规范 - 就永远夏天 - 博客园</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>appletv安装和相关软件推荐</title>
      <link href="undefined.html"/>
      <url>undefined.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://appfigures.com/top-apps/apple-tv/hong-kong/top-overall">https://appfigures.com/top-apps/apple-tv/hong-kong/top-overall</a>  apple tv 应用排行榜</p><p><a href="https://github.com/fanmingming/live">https://github.com/fanmingming/live</a>  m3u 在线地址</p><h2 id="国际版的爱优腾"><a href="#国际版的爱优腾" class="headerlink" title="国际版的爱优腾"></a>国际版的爱优腾</h2><p><a href="https://apps.apple.com/us/app/iqiyi-video/id1190755526">iQIYI Video on the App Store</a></p><p><a href="https://apps.apple.com/au/app/wetv-asian-local-dramas/id1441531611">WeTV Asian &amp; Local Dramas on the App Store</a></p><h2 id="vod类播放器"><a href="#vod类播放器" class="headerlink" title="vod类播放器"></a>vod类播放器</h2><h3 id="Syncnext-三角播放器-需内购"><a href="#Syncnext-三角播放器-需内购" class="headerlink" title="Syncnext(三角播放器 需内购)"></a>Syncnext(三角播放器 需内购)</h3><p><a href="https://apps.apple.com/us/app/syncnext/id1591770603">Syncnext on the App Store</a></p><h3 id="XPTV"><a href="#XPTV" class="headerlink" title="XPTV"></a>XPTV</h3><p><a href="https://apps.apple.com/us/app/xptv/id6459409368">XPTV on the App Store</a></p><p>XPTV 是一款支持VOD、M3U、IPTV等协议的多功能播放器</p><h2 id="CMSPlayer"><a href="#CMSPlayer" class="headerlink" title="CMSPlayer"></a>CMSPlayer</h2><p><a href="https://apps.apple.com/us/app/cmsplayer/id6450680262">CMSPlayer on the App Store</a></p><h2 id="音乐流媒体"><a href="#音乐流媒体" class="headerlink" title="音乐流媒体"></a>音乐流媒体</h2><h3 id="Musify-已下架"><a href="#Musify-已下架" class="headerlink" title="Musify(已下架)"></a>Musify(已下架)</h3><p>支持 网易云音乐</p><p><a href="https://apps.apple.com/us/app/musify/id6470739879">Connecting to Apple Music.</a></p><h3 id="Spotify-Music-and-Podcasts"><a href="#Spotify-Music-and-Podcasts" class="headerlink" title="Spotify - Music and Podcasts"></a>Spotify - Music and Podcasts</h3><p><a href="https://apps.apple.com/us/app/spotify-music-and-podcasts/id324684580">Spotify - Music and Podcasts on the App Store</a></p><h2 id="B站三方客户端"><a href="#B站三方客户端" class="headerlink" title="B站三方客户端"></a>B站三方客户端</h2><h2 id="Cheers"><a href="#Cheers" class="headerlink" title="Cheers"></a>Cheers</h2><p><a href="https://apps.apple.com/us/app/cheers-danmu-player/id1643375332">Cheers - Danmu Player on the App Store</a></p><h2 id="Miao-Project"><a href="#Miao-Project" class="headerlink" title="Miao Project"></a>Miao Project</h2><p>已经从应用商店下架</p><h3 id="弹幕播放器-danmuBox"><a href="#弹幕播放器-danmuBox" class="headerlink" title="弹幕播放器 danmuBox"></a>弹幕播放器 danmuBox</h3><p><a href="https://apps.apple.com/us/app/%E5%BC%B9%E5%B9%95%E6%92%AD%E6%94%BE%E5%99%A8-danmubox/id6458593076">弹幕播放器 danmuBox on the App Store</a></p><h2 id="投屏类"><a href="#投屏类" class="headerlink" title="投屏类"></a>投屏类</h2><p>主要用于类似于安卓乐播投屏，目前在安卓盒子里面当贝投屏是优化最好的没有广告，appleTV 原生支持 airplay，需要额外支持DLNA。</p><h3 id="推荐-1-DLNA"><a href="#推荐-1-DLNA" class="headerlink" title="推荐 1 DLNA"></a>推荐 1 DLNA</h3><p><img src="../img/image-20240316083903879.jpg" alt="image-20240316083903879"></p><h3 id="推荐-2-Unplay"><a href="#推荐-2-Unplay" class="headerlink" title="推荐 2 Unplay"></a>推荐 2 Unplay</h3><p>网上可以搜索到</p><p><a href="https://apps.apple.com/us/app/unplay/id6450034641">UnPlay on the App Store</a></p><h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><h3 id="Alplayer"><a href="#Alplayer" class="headerlink" title="Alplayer"></a>Alplayer</h3><p><a href="https://apps.apple.com/us/app/alplayer/id1660917007">Alplayer on the App Store</a></p><p>原生支持阿里，夸克</p><h3 id="VidHub-免费"><a href="#VidHub-免费" class="headerlink" title="VidHub(免费)"></a>VidHub(免费)</h3><p><a href="https://apps.apple.com/us/app/vidhub-video-library-player/id1659622164">VidHub -Video Library &amp; Player on the App Store</a></p><h3 id="Fileball"><a href="#Fileball" class="headerlink" title="Fileball"></a>Fileball</h3><p><a href="https://apps.apple.com/us/app/fileball/id1558391784">Fileball on the App Store</a></p><h2 id="电视直播类"><a href="#电视直播类" class="headerlink" title="电视直播类"></a>电视直播类</h2><h3 id="APTV-免费"><a href="#APTV-免费" class="headerlink" title="APTV(免费)"></a>APTV(免费)</h3><p><a href="https://apps.apple.com/us/app/aptv/id1630403500">APTV on the App Store</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>空间大数据处理框架</title>
      <link href="c243b492.html"/>
      <url>c243b492.html</url>
      
        <content type="html"><![CDATA[<h1 id="大数据计算框架简介"><a href="#大数据计算框架简介" class="headerlink" title="大数据计算框架简介"></a>大数据计算框架简介</h1><p>Hadoop，Spark、Flink是目前重要的三大分布式计算系统</p><ul><li>Hadoop用于离线复杂大数据处理</li><li>Spark用于离线快速的大数据处理</li><li>Flink用于在线实时的大数据处理</li></ul><h2 id="1-1-Hadoop"><a href="#1-1-Hadoop" class="headerlink" title="1.1. Hadoop"></a>1.1. Hadoop</h2><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构，主要解决海量数据的存储和分析计算问题。</p><p>广义上来说，Hadoop通常是指一个更广泛的概念——Haddop生态圈。</p><p><img src="https://rd.dtdream.com/download/attachments/44586449/image2023-7-31_15-23-47.png?version=1&modificationDate=1690788227000&api=v2" alt="img"></p><p><strong>1) Hadoop分布式文件系统(HDFS)</strong></p><p>HDFS (Hadoop Distributed File System) ，它是一个<strong>文件系统</strong>，用来存储文件，通过目录树来定位文件，其次，它是<strong>分布式</strong>的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色。</p><p>使用场景：HDFS适合<strong>一次写入，多次读出</strong>的场景，且不支持文件的修改，适合用来做数据分析，并不适合用来做网盘应用。</p><p><strong>2) Hadoop MapReduce引擎</strong></p><p>MapReduce是一种<strong>并行程序设计模型与方法</strong>，用于大规模数据集的并行运算。概念”Map（映射）”和”Reduce（归约）”是它们的主要思想。</p><p><img src="https://rd.dtdream.com/download/attachments/44586449/image2023-7-31_15-30-30.png?version=1&modificationDate=1690788630000&api=v2" alt="img"></p><h2 id="1-2-Spark"><a href="#1-2-Spark" class="headerlink" title="1.2. Spark"></a>1.2. Spark</h2><p>Apache Spark是专为大规模数据处理而设计的快速通用的计算引擎。Spark是类Hadoop MapReduce的通用并行框架。Spark拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是，Job中间的输出结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的MapReduce的算法。</p><p><img src="https://rd.dtdream.com/download/attachments/44586449/image2023-7-31_15-35-39.png?version=1&modificationDate=1690788939000&api=v2" alt="img"></p><h2 id="1-3-Flink"><a href="#1-3-Flink" class="headerlink" title="1.3. Flink"></a>1.3. Flink</h2><p>Apache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。Flink 被设计在所有常见的集群环境中运行，以内存执行速度和任意规模来执行计算。</p><p><strong>流数据：</strong>在自然环境中，数据的产生原本就是流式的。但是当你分析数据时，可以围绕 有界流（bounded）或 无界流（unbounded）两种模型来组织处理数据，当然，选择不同的模型，程序的执行和处理方式也都会不同。</p><p><strong>离线计算的代表spark和flink的对比</strong></p><p>在spark中，一切都是由批次组成的，离线数据是一个大批次，而实时数据是由一个一个无限的小批次组成的。而在flink中，一切都是由流组成的，离线数据是有界限的流，实时数据是一个没有界限的流。</p><p><strong>有界流\</strong>：****数据有时间的界限，比如我们长说某天的数据、某月的数据。</p><p><strong>无界流：</strong>数据没有时间的界限，所处理的数据是持续不断的输入的。因此程序必须持续不断地对到达的数据进行处理。</p><h1 id="2-Spark简介"><a href="#2-Spark简介" class="headerlink" title="2. Spark简介"></a>2. Spark简介</h1><h2 id="2-1-Saprk相关概念"><a href="#2-1-Saprk相关概念" class="headerlink" title="2.1. Saprk相关概念"></a>2.1. Saprk相关概念</h2><p><strong>RDD（Resilient Distributed Dataset）</strong>：弹性分布式数据集，是Spark的核心部分，可以理解为一个<strong>分布式</strong>数据结构的封装，并在此基础上提供了各种数据操作的API。其中，数据操作可以分成<strong>转换（**</strong>transformation**<strong>）</strong>和<strong>行动（**</strong>action**<strong>）</strong>两类，<strong>转换构建各**</strong>RDD**<strong>之间的依赖关系，但不会实际执行，只有遇到行动操作后才会实际提交作业触发执行</strong>。RDD之间的依赖关系构成了RDD的<strong>血缘</strong>，当RDD丢失时可以通过血缘关系重新执行生成，保证了RDD的容错性。</p><p>举例：</p><table><thead><tr><th align="left">数据集</th><th align="left">map</th><th align="left">reduce</th></tr></thead><tbody><tr><td align="left">{x: x∈N+, x&lt;10 }</td><td align="left">{x: f(x)}</td><td align="left">{x: ∑f(x)}、{x: Πf(x)}等</td></tr></tbody></table><table><thead><tr><th align="left">类别</th><th align="left">函数名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">转换算子</td><td align="left">map</td><td align="left">将处理的数据逐条进行映射转换，这里的转换可以是类型的转换，也可以是值的转换</td></tr><tr><td align="left">mapPartitions</td><td align="left">将待处理的数据以分区为单位发送到计算节点进行处理，这里的处理是指可以进行任意的处理，包括过滤</td><td align="left"></td></tr><tr><td align="left">mapPartitionsWithindex</td><td align="left">将待处理的数据以分区为单位发送到计算节点进行处理，这里的处理是指可以进行任意的处理，包括过滤，在处理同时可以获取当前分区的索引</td><td align="left"></td></tr><tr><td align="left">flatMap</td><td align="left">将处理的数据进行扁平化后再进行映射处理，所以算子也称之为扁平映射</td><td align="left"></td></tr><tr><td align="left">glom</td><td align="left">将同一个分区的数据直接转换为相同类型的内存数组进行处理，分区不变</td><td align="left"></td></tr><tr><td align="left">groupBy</td><td align="left">将数据根据指定的规则进行分组，分区默认不变，但是数据会被打乱重新组合，我们将这样的操作称之为shuffle，极限情况下，数据可能被分到同一个分区中</td><td align="left"></td></tr><tr><td align="left">filter</td><td align="left">将数据根据执行的规则进行筛选过滤，符合规则的数据保留，不符合规则的数据丢弃。当数据进行筛选过滤后，分区不变，但是分区内的数据可能不均衡，生产环境下，可能出现数据倾斜</td><td align="left"></td></tr><tr><td align="left">sample</td><td align="left">根据指定的规则聪数据中抽取数据</td><td align="left"></td></tr><tr><td align="left">coalesce</td><td align="left">根据数据量进行缩减分区，用于大数据集过滤后，提高小数据集的执行效率，减少任务调度成本</td><td align="left"></td></tr><tr><td align="left">distinct</td><td align="left">将数据集中的重复数据进行去重</td><td align="left"></td></tr><tr><td align="left">repartitions</td><td align="left">调整分区数量</td><td align="left"></td></tr><tr><td align="left">sortBy</td><td align="left">可以根据指定的规则对数据源中的数据进行排序</td><td align="left"></td></tr><tr><td align="left">intersection</td><td align="left">对源RDD和参数RDD求交集后返回一个新的RDD</td><td align="left"></td></tr><tr><td align="left">union</td><td align="left">对源RDD和参数RDD求并集后返回一个新的RDD</td><td align="left"></td></tr><tr><td align="left">subtract</td><td align="left">对源RDD和参数RDD求差集后返回一个新的RDD</td><td align="left"></td></tr><tr><td align="left">zip</td><td align="left">相同位置的数据拉取到一块</td><td align="left"></td></tr><tr><td align="left">partitionBy</td><td align="left">将数据按照指定Partitioner重新进行分区</td><td align="left"></td></tr><tr><td align="left">reduceByKey</td><td align="left">将相同的key进行分组，将value聚合</td><td align="left"></td></tr><tr><td align="left">groupByKey</td><td align="left">将分区的数据直接转换为相同类型的内存数组进行后续处理</td><td align="left"></td></tr><tr><td align="left">aggregateByKey</td><td align="left">将数据根据不同规则进行分区内计算和分区间计算</td><td align="left"></td></tr><tr><td align="left">flodByKey</td><td align="left">foldByKey就是aggregateByKey的简化版本，当aggregateByKey的第二个参数计算逻辑相同时就可以用foldByKey</td><td align="left"></td></tr><tr><td align="left">combineByKey</td><td align="left">需要三个参数  1.将相同key的第一个数据进行结构的转换，实现操作 2.分区内计算规则 3.分区间计算规则</td><td align="left"></td></tr><tr><td align="left">join</td><td align="left">在类型为(K,V)和(K,W)的RDD上调用，返回一个相同的key对应的所有元素连接在一起的（K,(v,w)）的RDD</td><td align="left"></td></tr><tr><td align="left">leftOuterJoin</td><td align="left">类似于sql的左外连接</td><td align="left"></td></tr><tr><td align="left">rightOuterJoin</td><td align="left">类似于sql的右外连接</td><td align="left"></td></tr><tr><td align="left">cogroup</td><td align="left">在类型(K,V)和(K,W)的RDD上调用，返回一个(K,(Iterable<V>,Iterable<W>))类型的RDD</td><td align="left"></td></tr><tr><td align="left">…</td><td align="left">…</td><td align="left"></td></tr><tr><td align="left">行动算子</td><td align="left">reduce</td><td align="left">聚集RDD中的所有元素，先聚合分区内数据，再聚合分区间数</td></tr><tr><td align="left">collect</td><td align="left">方法会将不同分区的数据按照分区顺序采集到Driver端内存中，形成数组</td><td align="left"></td></tr><tr><td align="left">count</td><td align="left">数据源中数据的个数</td><td align="left"></td></tr><tr><td align="left">first</td><td align="left">数据源中数据的第一个</td><td align="left"></td></tr><tr><td align="left">take</td><td align="left">获取n个数据</td><td align="left"></td></tr><tr><td align="left">takeOrdered</td><td align="left">数据排序后取n个数据</td><td align="left"></td></tr><tr><td align="left">aggregate</td><td align="left">分区的数据通过初始值和分区内的数据进行聚合，然后再和初始值进行分区间的数据聚合</td><td align="left"></td></tr><tr><td align="left">fold</td><td align="left">折叠操作,aggregate的简化版操作</td><td align="left"></td></tr><tr><td align="left">countByKey</td><td align="left">统计每种key的个数</td><td align="left"></td></tr><tr><td align="left">…</td><td align="left">…</td><td align="left"></td></tr></tbody></table><p><strong>Partition</strong>：数据分区，即RDD进行数据划分的单元，也是Spark数据处理的单元，任务的数量由分区数量确定，一个任务处理一个分区的数据。</p><p><strong>Dependency</strong>：RDD之间的依赖关系。分为窄依赖（NarrowDependency）和Shuffle依赖。前者表示子RDD中的分区依赖于父RDD中固定数量的分区，包括依赖一个分区的OneToOneDependency和一定范围内多个分区的RangeDependency；后者也称为宽依赖，子RDD中的分区可能对父RDD中所有的分区产生依赖，具体依赖关系取决于分区器partitioner。</p><p><strong>Job</strong>：Spark中的作业，<strong>对**</strong>RDD**<strong>的一个行动操作对应一个作业</strong>。每个作业包括了该RDD的行动操作以及构成当前RDD血缘关系的所有转换操作，一个Spark应用可以包含多个作业。</p><p><strong>Stage</strong>：在每个作业中，Spark会<strong>根据**</strong>shuffle**<strong>依赖将作业划分成多个阶段</strong>。从最后一个触发行动操作的RDD开始（最后一个属于ResultStage），对RDD的依赖进行回溯，如果遇到shuffle依赖，则将shuffle之前的RDD视为一个阶段（ShuffleMapStage），shuffle之后的RDD到回溯起点之间所有的RDD视为一个阶段，接着从shuffle之前的RDD开始继续回溯，直到回溯至与外部数据源相关的RDD为止，如图1所示。</p><p><strong>Task</strong>：每个阶段中，Spark会<strong>根据**</strong>RDD**<strong>的分区数量，创建相同数量的任务</strong>，每个任务处理一个分区的数据。其中，ShuffleMapStage中的任务为ShuffleMapTask，ResultStage中的任务为ResultTask。</p><p>下图为Spark中Stage的划分方式</p><p><img src="https://rd.dtdream.com/download/attachments/44586449/image2023-7-26_14-43-6.png?version=1&modificationDate=1690353785000&api=v2" alt="img"></p><h2 id="2-2-Spark核心模块"><a href="#2-2-Spark核心模块" class="headerlink" title="2.2. Spark核心模块"></a>2.2. Spark核心模块</h2><p>Spark的模块组成包括核心模块Spark Core以及建立在核心模块之上的扩展模块Spark SQL、Spark Streaming、GraphX、MLlib。Spark核心模块提供了Spark中最基础最核心的功能，包括：</p><p><strong>基础设施</strong>：分为负责参数配置的SparkConf，负责Spark跨节点组件之间通信的基于netty实现的RPC框架，负责SparkContext内部组件间通信的事件总线ListenerBus，负责监控各个组件运行期状态的度量系统；</p><p><strong>SparkContext：</strong>作为Spark所有功能的集成者和用户程序开发的接口，其内部封装了网络通信、消息通信、存储体系、计算引擎、度量系统、WebUI等内容，这些功能对开发人员来说都是透明的；</p><p><strong>SparkEnv</strong>：是Spark执行环境，任务运行所必需的组件，由RpcEnv、序列化管理器、BroadcastManager、MapOutputTracker、存储体系、度量系统、OutputCommitCoordinator等组件组成；</p><p><strong>存储体系：</strong>分为内存存储管理和磁盘存储管理，Spark的内存空间提供了Tungsten的实现，对堆外内存进行管理。此外，Spark的内存存储空间和计算存储空间之间的边界是“软”边界，当一方资源不够时可向另一方借用，提高了资源利用率；</p><p><strong>调度体系：</strong>分为DAGScheduler和TaskScheduler，内置在SparkContext中。DAGScheduler负责解析RDD之间的依赖，按照shuffle操作划分阶段，根据阶段创建TaskSet，TaskScheduler负责按照FAIR或FIFO调度算法对TaskSet进行调度，为每个任务分配可执行的Executor，并将序列化后的任务发送到指定的Executor上执行；</p><p><strong>计算引擎：</strong>由内存管理器、Tungsten、任务内存管理器、外部排序器、Shuffle管理器等组成，其中外部排序器用于在map端或者reduce端对ShuffleMapTask计算得到的中间结果进行排序、聚合等操作，Shuffle管理器用于将各个分区对应的ShuffleMapTask产生的中间结果持久化到磁盘，并在reduce端按照分区远程拉取生成的中间结果。</p><h2 id="2-3-Spark集群架构"><a href="#2-3-Spark集群架构" class="headerlink" title="2.3. Spark集群架构"></a>2.3. Spark集群架构</h2><p>从集群部署的角度来看，Spark集群由集群管理器（Cluster Manager）、工作节点（Worker）、执行器（Executor）、驱动器（Driver）、应用程序（Application）等部分组成。<br><img src="https://rd.dtdream.com/download/attachments/44586449/image2023-8-1_14-20-30.png?version=1&modificationDate=1690870831000&api=v2" alt="img"></p><h3 id="2-3-1-Driver"><a href="#2-3-1-Driver" class="headerlink" title="2.3.1. Driver"></a>2.3.1. Driver</h3><p>用于运行Spark程序的 main 方法，创建SparkContext对象</p><p>Driver在spark作业执行时主要负责：</p><p>1）启动SparkContext或SparkSession，将用户程序转化为作业（Job）；</p><p>2）在Executor之间调度任务（Task）；</p><p>3）跟踪Executor的执行情况；</p><p>4）通过UI展示查询运行情况。</p><h3 id="2-3-2-Cluster-Manager"><a href="#2-3-2-Cluster-Manager" class="headerlink" title="2.3.2. Cluster Manager"></a>2.3.2. Cluster Manager</h3><p><strong>在YARN部署模式下为ResourceManager</strong></p><p>负责对整个集群资源的分配与管理，不负责对Executor的资源的分配。</p><p>常见的集群管理工具有<strong>Yarn</strong>、Mesos、Kubernetes、Standalone。</p><h3 id="2-3-3-Worker"><a href="#2-3-3-Worker" class="headerlink" title="2.3.3. Worker"></a>2.3.3. Worker</h3><p><strong>在YARN部署模式下为NodeManager</strong></p><p>负责启动和管理Executor，将Executor状态信息同步给Cluster Manager。</p><h3 id="2-3-4-Executor"><a href="#2-3-4-Executor" class="headerlink" title="2.3.4. Executor"></a>2.3.4. Executor</h3><p>负责执行Spark作业中具体的任务，任务彼此之间相互独立。</p><p>Executor 有两个核心功能：</p><p>1）向Driver认领属于自己的任务，接收任务后负责运行Spark Task，并将结果返回给Driver。</p><p>2）通过自身的Block Manager为用户程序中要求缓存的RDD提供内存式存储。RDD 的数据是直接缓存在 Executor 进程内的，因此任务可以在运行时充分利用缓存数据加速运算。</p><h2 id="2-4-Spark任务提交过程"><a href="#2-4-Spark任务提交过程" class="headerlink" title="2.4. Spark任务提交过程"></a>2.4. Spark任务提交过程</h2><p>当用户通过SparkContext提交应用程序时，分为以下几步：</p><p>1）首先通过RpcEnv<strong>向ClusterManager注册应用并申请资源</strong>。</p><p>2）Cluster Manager根据应用的需求，将<strong>对应的Executor分配给应用程序</strong>，并在Worker上启动Executor后台进程，该进程通过RpcEnv向Driver注册Executor资源信息，Driver中的TaskScheduler保存Executor的地址、内存以及核数等信息；</p><p>3）SparkContext根据RDD的转换操作，<strong>构建RDD的血缘关系</strong>，并在遇到行动操作的时候，<strong>将构建的依赖关系提交给DAGScheduler</strong>，DAGScheduler对依赖关系进行解析，生成TaskSet，将TaskSet保存至任务池，TaskScheduler从任务池中取出TaskSet后按照FAIR或FIFO算法进行调度，给任务分配Executor资源，并将序列化后的任务发送至Executor执行。</p><h2 id="2-5-Spark性能调优"><a href="#2-5-Spark性能调优" class="headerlink" title="2.5. Spark性能调优"></a>2.5. Spark性能调优</h2><h3 id="2-5-1-参数调优"><a href="#2-5-1-参数调优" class="headerlink" title="2.5.1. 参数调优"></a>2.5.1. 参数调优</h3><h4 id="2-5-1-1-num-executors"><a href="#2-5-1-1-num-executors" class="headerlink" title="2.5.1.1. num-executors"></a>2.5.1.1. num-executors</h4><p>该参数用于设计Spark作业总的Executor进程的个数。YARN集群管理器会尽可能根据num-executor设置在工作节点上启动Executor。</p><h4 id="2-5-1-2-executor-memory"><a href="#2-5-1-2-executor-memory" class="headerlink" title="2.5.1.2. executor-memory"></a>2.5.1.2. executor-memory</h4><p>该参数用于设置每个Executor 进程的内存，Executor内存的大小，很多程度上直接决定了Spark作业的性能，而且跟很常见的Java中的虚拟机内存溢出异常(OOM)也有关系。</p><h4 id="2-5-1-3-executor-core"><a href="#2-5-1-3-executor-core" class="headerlink" title="2.5.1.3. executor-core"></a>2.5.1.3. executor-core</h4><p>该参数用于设置每个Executor进程的CPU core 数量。</p><h4 id="2-5-1-4-driver-memory"><a href="#2-5-1-4-driver-memory" class="headerlink" title="2.5.1.4. driver-memory"></a>2.5.1.4. driver-memory</h4><p>该参数用于设置Driver进程的内存，这个参数通常不设置。但是要注意的一点是，使用collect算子时，一定要保证Driver内存足够大，否则会出现内存溢出的错误。</p><h4 id="2-5-1-5-Spark-default-parallelism"><a href="#2-5-1-5-Spark-default-parallelism" class="headerlink" title="2.5.1.5. Spark.default.parallelism"></a>2.5.1.5. Spark.default.parallelism</h4><p>该参数用于设置每个Stage默认的task数量。</p><h4 id="2-5-1-6-Spark-Shuffle-memoryFraction"><a href="#2-5-1-6-Spark-Shuffle-memoryFraction" class="headerlink" title="2.5.1.6. Spark.Shuffle.memoryFraction"></a>2.5.1.6. Spark.Shuffle.memoryFraction</h4><p>该参数用于设置Shuffle过程中一个task拉取到上个Stage的task的输出后，进行聚合操作时能够使用的Executor内存的比例，默认是0.2。也就是说，Executor默认只有20%的内存用来进行该操作。shuffle操作在进行聚合时，如果发现使用的内存超出了这个20%的限制，那么多余的数据就会溢写到磁盘文件中去，此时就会极大地降低性能。建议：如果Spark作业中的RDD持久化操作较少，shuffle操作较多时，建议降低持久化操作的内存占比，提高shuffle操作的内存占比比例，避免shuffle过程中数据过多时内存不够用，必须溢写到磁盘上，降低了性能。此外，如果发现作业由于频繁的gc导致运行缓慢，意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。</p><h3 id="2-5-2-代码重构调优"><a href="#2-5-2-代码重构调优" class="headerlink" title="2.5.2. 代码重构调优"></a>2.5.2. 代码重构调优</h3><h4 id="2-5-2-1-尽可能复用一个RDD"><a href="#2-5-2-1-尽可能复用一个RDD" class="headerlink" title="2.5.2.1. 尽可能复用一个RDD"></a>2.5.2.1. 尽可能复用一个RDD</h4><p>在对不同的数据执行算子操作时应该尽量复用一个RDD。例如，当RDD A的数据格式是key-value类型的，RDD B的数据格式是value类型的，但是这两个RDD的value数据完全相同；那么，RDD A包含了RDD B中的所有信息，理论上来说RDD B可以被替代，而实际开发中也应该尽量减少多个RDD数据有重复或者包含的情况，这样可以尽可能减少RDD的数量从而减少算子执行的次数。</p><h4 id="2-5-2-2-对多次使用的RDD进行持久化"><a href="#2-5-2-2-对多次使用的RDD进行持久化" class="headerlink" title="2.5.2.2. 对多次使用的RDD进行持久化"></a>2.5.2.2. 对多次使用的RDD进行持久化</h4><p>RDD的持有化有几种不同的级别，分别是：MEMORY_ONLY、MEMORY_AND_DISK、MEMORY_ONLY_SER、MEMORY_AND_DISK_SER、DISK_ONLY、MEMORY_ONLY_2 等，这几种持久化级别使用的优先级排序如下：</p><ol><li>MEMORY_ONLY性能最高，直接将RDD存储在内存中，省去了序列化及反序列化、从磁盘读取的时间，但是对于内存的容量有较高的要求；</li><li>MEMORY_ONLY_SER会将数据序列化后保存在内存中，通过序列化压缩了RDD的大小，但是相较于MEMORY_ONLY多出了序列化及反序列化的时间；</li><li>MEMORY_AND_DISK_SER优先将RDD缓存在内存中，内存缓存不下时才会存在磁盘中;</li><li>DISK_ONLY和后缀为_2的级别通常不建议使用，完全基于磁盘文件的读写会导致性能的极具降低；后缀为2的级别会将所有数据都复制一份副本到其他节点上，数据复制及网络传输会导致较大的性能开销。</li></ol><h4 id="2-5-2-3-尽量避免使用Shuffle算子"><a href="#2-5-2-3-尽量避免使用Shuffle算子" class="headerlink" title="2.5.2.3. 尽量避免使用Shuffle算子"></a>2.5.2.3. 尽量避免使用Shuffle算子</h4><p>Spark作业最消耗性能的部分就是Shuffle过程，应尽量避免使用Shuffle算子。Shuffle过程就是将分布在集群中多个节点上的同一个 key，拉取到同一个节点上，进行聚合或者join操作，在操作过程中可能会因为一个节点上处理的key过多导致数据溢出到磁盘。由此可见，Shuffle过程可能会发生大量的磁盘文件读写的 IO 操作，以及数据的网络传输操作。</p><p>Shuffle类算子有：<strong>distinct、groupByKey、reduceByKey、aggregateByKey、join、cogroup、repartition</strong>等，编写Spark作业程序时，<strong>应该尽量使用map类算子替代Shuffle算子</strong>。</p><h4 id="2-5-2-4-使用高性能算子"><a href="#2-5-2-4-使用高性能算子" class="headerlink" title="2.5.2.4. 使用高性能算子"></a>2.5.2.4. 使用高性能算子</h4><ol><li>使用reduceByKey/aggregateByKey替代groupByKey</li><li>使用mapPartitions替代普通map Transformation算子</li><li>使用foreachPartitions替代foreach Action算子</li><li>使用filter之后进行coalesce操作</li><li>repartition:coalesce(numPartitions，true)增多分区使用这个</li><li>coalesce(numPartitions，false)减少分区，没有shuffle只是合并partition</li></ol><h4 id="2-5-2-5-使用Kryo优化序列化性能"><a href="#2-5-2-5-使用Kryo优化序列化性能" class="headerlink" title="2.5.2.5. 使用Kryo优化序列化性能"></a>2.5.2.5. 使用Kryo优化序列化性能</h4><p>Spark支持使用Kryo序列化机制。这种序列化机制，比默认的Java序列化机制速度要快，序列化后的数据更小。所以Kryo序列化优化以后，可以让网络传输的数据变少，在集群中耗费的内存资源大大减少。</p><h4 id="2-5-2-6-优化数据结构"><a href="#2-5-2-6-优化数据结构" class="headerlink" title="2.5.2.6. 优化数据结构"></a>2.5.2.6. 优化数据结构</h4><p>在Java中有三种类型比较耗费内存</p><ul><li>对象：每个Java对象都有对象头、引用等额外的信息，因此比较占用内存空间。</li><li>字符串：每个字符串内部都有一个字符数组以及长度等额外信息。</li><li>集合类型：比如HashMap、LinkedList等，因为集合类型内部通常会使用一些内部类来封装集合元素，比如Map.Entry。</li></ul><p>因此Spark编码时应尽量不要使用以上三种数据结构，尽量使用字符串代替对象，使用原始类型（比如 Int、Long）替代字符串，使用数组替代集合类型，这样尽可能地减少内存占用，降低垃圾回收的频率提高性能。</p><h4 id="2-5-2-7-广播大变量"><a href="#2-5-2-7-广播大变量" class="headerlink" title="2.5.2.7. 广播大变量"></a>2.5.2.7. 广播大变量</h4><p>开发过程中，会遇到需要在算子函数中使用外部变量的场景(尤其是大变量，比如100M以上的大集合)，那么此时就应该使用Spark的广播(Broadcast)功能来提升性能；<strong>函数中使用到外部变量时，默认情况下，Spark会将该变量复制多个副本，通过网络传输到task中，此时每个task都有一个变量副本</strong>。如果变量本身比较大的话(比如100M，甚至1G)，那么大量的变量副本在网络中传输的性能开销，以及在各个节点的Executor中占用过多内存导致的频繁GC(垃圾回收)，都会极大地影响性能； 如果使用的外部变量比较大，建议使用Spark的广播功能，对该变量进行广播。<strong>广播后的变量，会保证每个Executor的内存中，只驻留一份变量副本，而Executor中的 task执行时共享该Executor中的那份变量副本</strong>。这样的话，可以大大减少变量副本的数量，从而减少网络传输的性能开销，并减少对Executor内存的占用开销，降低 GC的频率。</p><p><img src="https://rd.dtdream.com/download/attachments/44586449/image2023-8-1_16-8-4.png?version=1&modificationDate=1690877284000&api=v2" alt="img"></p><h1 id="3-空间大数据计算框架简介"><a href="#3-空间大数据计算框架简介" class="headerlink" title="3. 空间大数据计算框架简介"></a>3. 空间大数据计算框架简介</h1><h2 id="3-1-Sedona-GeoSpark-简介"><a href="#3-1-Sedona-GeoSpark-简介" class="headerlink" title="3.1. Sedona(GeoSpark)简介"></a>3.1. Sedona(GeoSpark)简介</h2><p><a href="https://rd.dtdream.com/pages/viewpage.action?pageId=44138042">4.1.2.3 sedona(geospark)</a></p><h2 id="3-2-扩展——SQL-MM简介"><a href="#3-2-扩展——SQL-MM简介" class="headerlink" title="3.2. 扩展——SQL/MM简介"></a>3.2. 扩展——SQL/MM简介</h2><p><a href="https://rd.dtdream.com/pages/viewpage.action?pageId=44589787">1.4.2 SQL/MM</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>空间关系</title>
      <link href="3c685723.html"/>
      <url>3c685723.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Hole-Outside-Shell"><a href="#1-Hole-Outside-Shell" class="headerlink" title="1.Hole Outside Shell"></a>1.Hole Outside Shell</h2><p>Indicates that a hole of a polygon lies partially or completely in the exterior of the shell.</p><p><strong><img src="https://rd.dtdream.com/download/thumbnails/26605662/hole%20outside%20shell.png?version=1&modificationDate=1665470888000&api=v2" alt="img"></strong></p><h2 id="2-Nested-Holes"><a href="#2-Nested-Holes" class="headerlink" title="2.Nested Holes"></a>2.Nested Holes</h2><p>Indicates that a hole lies in the interior of another hole in the same polygon.</p><p><img src="https://rd.dtdream.com/download/attachments/26605662/nested%20holes.png?version=1&modificationDate=1665471020000&api=v2" alt="img"></p><h2 id="3-Disconnected-Interior"><a href="#3-Disconnected-Interior" class="headerlink" title="3.Disconnected Interior"></a>3.Disconnected Interior</h2><p>Indicates that the interior of a polygon is disjoint.(often caused by set of contiguous holes splitting the polygon into two parts)</p><p><img src="https://rd.dtdream.com/download/attachments/26605662/disconnected%20interior.jpg?version=1&modificationDate=1665471561000&api=v2" alt="img"></p><h2 id="4-Self-Intersection"><a href="#4-Self-Intersection" class="headerlink" title="4.Self Intersection"></a>4.Self Intersection</h2><p>Indicates that two rings of a polygonal geometry intersect.</p><p><img src="https://rd.dtdream.com/download/thumbnails/26605662/self%20intersection.png?version=1&modificationDate=1665471807000&api=v2" alt="img"></p><h2 id="5-Ring-Self-Intersection"><a href="#5-Ring-Self-Intersection" class="headerlink" title="5.Ring Self Intersection"></a>5.Ring Self Intersection</h2><p>Indicates that a ring self-intersects.</p><p><img src="https://rd.dtdream.com/download/thumbnails/26605662/self-intersects.png?version=1&modificationDate=1665472261000&api=v2" alt="img"><img src="https://rd.dtdream.com/download/thumbnails/26605662/ring%20self%20intersection.png?version=1&modificationDate=1665472213000&api=v2" alt="img"></p><h2 id="6-Nested-Shells"><a href="#6-Nested-Shells" class="headerlink" title="6.Nested Shells"></a>6.Nested Shells</h2><p>Indicates that a polygon component of a MultiPolygon lies inside another polygonal component.</p><p><img src="https://rd.dtdream.com/download/thumbnails/26605662/nested%20shells.jpg?version=1&modificationDate=1665472572000&api=v2" alt="img"></p><h2 id="7-Duplicate-Rings"><a href="#7-Duplicate-Rings" class="headerlink" title="7.Duplicate Rings"></a>7.Duplicate Rings</h2><p>Indicates that a polygonal geometry contains two rings which are identical.</p><p>也就是说，多边形中包含了两个相同的环，此处不加图片示意了。</p><h2 id="8-Too-Few-Points"><a href="#8-Too-Few-Points" class="headerlink" title="8.Too Few Points"></a>8.Too Few Points</h2><p>Indicates that either:<br>1)A LineString contains a single point;<br>2)A LinearRing contains 2 or 3 points.</p><p>即组成形状的节点太少了。此处不加图片示意了。</p><h2 id="9-invalid-coordinate"><a href="#9-invalid-coordinate" class="headerlink" title="9.invalid coordinate"></a>9.invalid coordinate</h2><p>Indicates that the X or Y ordinate of a Coordinate is not a valid numeric value.</p><p>即不合法的坐标。</p><p>比如说，在地理坐标系中，经度的范围为[-180, 180]，纬度的范围为[-90, 90]，超出这个范围的坐标即为invalid coordinate。此处不加图片示意了。</p><h2 id="10-Ring-Not-Closed"><a href="#10-Ring-Not-Closed" class="headerlink" title="10.Ring Not Closed"></a>10.Ring Not Closed</h2><p><em>Indicates that a ring is not correctly closed.(the first and the last coordinate are different)</em></p><p>即多边形没有合上。正确的polygon应该是首尾相连的，若不相连即出现此错误。此处不加图片示意了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023最新jd_cookie在青龙上操作</title>
      <link href="d3bcc396.html"/>
      <url>d3bcc396.html</url>
      
        <content type="html"><![CDATA[<p>安装docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#安装docker</span><br><span class="line">sudo yum check-update</span><br><span class="line">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl status docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p>如果已经安装docker 删除qinglong的镜像和服务 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -a -q) &#x2F;&#x2F;  stop停止所有容器 </span><br><span class="line">docker rm $(docker ps -a -q) &#x2F;&#x2F;   remove删除所有容器</span><br></pre></td></tr></table></figure><h3 id="安装qinglong"><a href="#安装qinglong" class="headerlink" title="安装qinglong"></a>安装qinglong</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker  run -dit \</span><br><span class="line">  -v $PWD&#x2F;ql:&#x2F;ql&#x2F;data  \</span><br><span class="line">  -p 5700:5700 \</span><br><span class="line">  -p 5701:5701 \</span><br><span class="line">  -e ENABLE_WEB_PANEL&#x3D;true \</span><br><span class="line">  -e ENABLE_HANGUP&#x3D;true \</span><br><span class="line">  -e QlPort&#x3D;&quot;5700&quot; \</span><br><span class="line">  --name qinglong \</span><br><span class="line">  --hostname qinglong \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  whyour&#x2F;qinglong:latest</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## ql为容器名 本文机器容器名为qinglong</span><br><span class="line">docker exec -it qinglong bash</span><br></pre></td></tr></table></figure><h3 id="安装ninja插件"><a href="#安装ninja插件" class="headerlink" title="安装ninja插件"></a>安装ninja插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gh-proxy.com&#x2F;https:&#x2F;&#x2F;github.com&#x2F;shufflewzc&#x2F;Waikiki_ninja.git  &#x2F;ql&#x2F;ninja</span><br><span class="line">cd &#x2F;ql&#x2F;ninja&#x2F;backend</span><br><span class="line">pnpm install</span><br><span class="line">pm2 start</span><br></pre></td></tr></table></figure><h3 id="打开青龙configs文件夹的extra-sh文件"><a href="#打开青龙configs文件夹的extra-sh文件" class="headerlink" title="打开青龙configs文件夹的extra.sh文件"></a>打开青龙configs文件夹的extra.sh文件</h3><p>将以下内容粘贴进去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;ql&#x2F;ninja&#x2F;backend </span><br><span class="line">pm2 start</span><br></pre></td></tr></table></figure><h3 id="安装签到脚本"><a href="#安装签到脚本" class="headerlink" title="安装签到脚本"></a>安装签到脚本</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql repo https:&#x2F;&#x2F;ghproxy.com&#x2F;https:&#x2F;&#x2F;github.com&#x2F;shufflewzc&#x2F;faker3.git &quot;jd_|jx_|gua_|jddj_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator|magic|depend|h5sts&quot; &quot;main&quot;    # fake2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;6dylan6&#x2F;jdpro   # 6dy</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;leafTheFish&#x2F;DeathNote</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>重启后务必执行一次 <code>ql extra</code> 保证 Ninja 配置成功。</li><li>更新 Ninja 只需要在容器中 <code>ninja/backend</code> 目录执行 <code>git pull</code> 然后 <code>pm2 start</code></li><li>Qinglong 需要在登录状态（<code>auth.json</code> 中有 token）</li></ul><h2 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h2><p>以前大家都是获取jd的cookie来操作现在 cookie非常容易过期,现在推荐使用 <strong>wskey</strong>,需要在移动客户端抓包,下面介绍使用安卓客户端的操作,先安装</p><ol><li><p> app：VNET（抓包用）、京东；</p></li><li><p><strong>VNET抓包wskey:</strong></p></li><li><p><strong>青龙面板使用wskey转换脚本</strong></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ql repo https:&#x2F;&#x2F;e.coding.net&#x2F;HelloDNS&#x2F;sign&#x2F;wskey.git &quot;wskey&quot;  # 国内外</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装青龙的依赖"><a href="#安装青龙的依赖" class="headerlink" title="安装青龙的依赖"></a>安装青龙的依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;gh-proxy.com&#x2F;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;FlechazoPh&#x2F;QLDependency&#x2F;main&#x2F;Shell&#x2F;QLOneKeyDependency.sh | sh</span><br></pre></td></tr></table></figure><p>设置环境变量 QL_LOG_AUTO_INSTALL_DEPEND=ture</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>参考链接</p><p><a href="https://thin-hill-428.notion.site/Faker-1c598629675145988b43a37998a1604a">青龙Faker仓库教程合集</a></p><p><a href="https://blog.csdn.net/yekui6254/article/details/121511771">安卓抓取JD wskey + 添加脚本自动转换JD cookie_jd_wsck-CSDN博客</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图像相关的数据和介绍</title>
      <link href="24b88766.html"/>
      <url>24b88766.html</url>
      
        <content type="html"><![CDATA[<p>有损压缩图片 jpg png</p><p>矢量图片 svg</p><p>tiff,tif数据 相比较 jpg png里面的信息更加丰富 每个栅格下 是RGB 还是什么不一定是显示,而是包含高度或者温度</p><p>所以空间相关比如遥感影像会以TIFF数据来保存一些我们肉眼看不到的数据,同时tiff数据文件开始部分会有部分元数据的信息能被访问同时又cogtif数据来访问,</p><p>类型: bimap</p><p>颜色: 1-24 bit</p><p>压缩 Uncompressed,RLE,LZW,CCITT Group和JPEG</p><p>图像最大尺寸 2^31-1</p><p>是否支持多通道</p><p>IFH (图像文件头)   IFD(图像文件目录)  位图数据</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>程序员工具分享-转载</title>
      <link href="fee7f0df.html"/>
      <url>fee7f0df.html</url>
      
        <content type="html"><![CDATA[<h1 id="程序员"><a href="#程序员" class="headerlink" title="程序员"></a>程序员</h1><p>分享一些我常用的提升开发效率的工具：</p><h1 id="AI工具"><a href="#AI工具" class="headerlink" title="AI工具"></a>AI工具</h1><p>GitHub Copilot：能极大的提高效率，不仅能在编辑器中根据代码上下文自动编写代码，还能以ChatGPT对话的方式回答问题。有了它，极大的降低了对StackOverflow的依赖。</p><p>ChatGPT：虽然GitHub Copilot以及能在写代码方面平替ChatGPT，但ChatGPT的GPT4 V的识图功能、DALL E3的绘图功能、移动端的语音对话功能都是GitHub Copilot无法替代的。用ChatGPT绘图或练英语还是很方便的。</p><p><a href="https://v0.dev/%EF%BC%9AVercel%E5%87%BA%E5%93%81%E7%9A%84AI%E7%94%BBUI%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E8%AF%95%E4%BA%86%E4%B8%8B%EF%BC%8C%E7%9A%84%E7%A1%AE%E8%83%BD%E5%A4%A7%E5%B9%85%E5%BA%A6%E9%99%8D%E4%BD%8E%E7%94%BBUI%E7%9A%84%E5%B7%A5%E4%BD%9C%E9%87%8F%EF%BC%8C%E7%9B%B8%E6%AF%94ChatGPT%E7%9B%B4%E6%8E%A5%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%EF%BC%8CV0%E8%83%BD%E4%BB%A5%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E6%96%B9%E5%BC%8F%E4%BF%AE%E6%94%B9%E7%95%8C%E9%9D%A2%EF%BC%8C%E8%BF%99%E6%98%AFChatGPT%E6%97%A0%E6%B3%95%E5%81%9A%E5%88%B0%E7%9A%84%E3%80%82">https://v0.dev/：Vercel出品的AI画UI的神器，试了下，的确能大幅度降低画UI的工作量，相比ChatGPT直接生成代码，V0能以可视化的方式修改界面，这是ChatGPT无法做到的。</a></p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>VSCode：因为免费轻量级，哪怕是安装了很多插件，速度也比IDEA快。当然如果开发Java的话，IDEA还是更胜一筹。</p><p>DBeaver：数据库连接工具，主打免费可连接多种数据库。</p><p>pgAdmin4：管理PG数据库的工具，比DBeaver在PG的管理上更强一点。<br>云平台</p><p>GitHub：虽然你对GitHub估计很熟悉了，但也推荐看这篇文章：善用GitHub（<a href="https://www.bmpi.dev/self/use-github-better/%EF%BC%89%E3%80%82">https://www.bmpi.dev/self/use-github-better/）。</a></p><p>Cloudflare：Serverless最好的平台，能提供如常用的存储R2、KV数据库、CDN、Pages、Worker、MQ、甚至运行AI模型，我开发的个人产品（<a href="https://www.i365.tech/%EF%BC%89%E5%A4%A7%E5%A4%9A%E9%83%BD%E7%94%A8%E5%AE%83%E8%BF%90%E8%A1%8C%E7%9A%84%E3%80%82">https://www.i365.tech/）大多都用它运行的。</a></p><p>Vercel：很适合部署运行Next.js的前端项目，Cloudflare Pages运行Next.js还需要额外的一些配置。</p><p>Fly.io：非常好的容器化平台，它能弥补Cloudflare只能运行Serverless的不足，能以Docker的方式运行各种重型API服务。</p><p>AWS/Azure/GCP：作为一个巨无霸的云平台，他们可以补充上面云平台所缺失的东西，比如AWS SES就是一个非常好的发邮件服务。</p><p>Newrelic：非常好的监控平台，尤其是它能作为免费的日志搜索平台，我把我产品的系统日志都上传到这个平台，然后对日志进行监控。一般的日志平台都是ES架构，价格并不便宜，单Newrelic却能免费。</p><p>Optimizely：一个不错的feature toggle平台，可以很方便的做产品的A/B测试。</p><h1 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h1><p>Umami：GA的开源平替，我网站流量都是用它监控的，速度快，数据还是自己的。</p><p>Plausible：更高级的GA开源平替，比Umami提供更多功能，但托管所需服务比较多，前者能免费跑在Vercel平台上。</p><p>Mixpanel：更更高级的GA商业平替，能做很复杂的用户行为分析与溯源，比GA高级多了。<br>支付平台</p><p>Lemonsqueezy：出海必备的支付平台，用国内身份就可以开通，然后开启出海之旅，赚美刀。</p><p>Stripe：相比前者，虽然费率便宜一些，但国内身份没发开通，需要做一些比较复杂的操作才能开通，比如开通一个美国或香港公司就可以开。</p><h1 id="绘图工具"><a href="#绘图工具" class="headerlink" title="绘图工具"></a>绘图工具</h1><p>Excalidraw：非常好用的白板画图工具，适合个人使用。</p><p>PlantUML：一个支持文本绘制类UML图的工具，可以在Real World Plantuml找到很多用它实现的图。</p><p>Mermaid：通过文本生成各种UML图，最大的亮点是GitHub官方Markdown支持它，能渲染出多种图形如时序图与架构图等。</p><p>asciiflow：能简单的免费在线绘制ASCII风格图的网站，C语言大佬最爱的RFC风格绘图工具。</p><p>Sketch/OmniGraffle/Lucidchart/Draw.io/Google Drawings/Visio：这类工具相比大家或多或少用过，都是一些桌面端或浏览器常用的画图工具。</p><h1 id="综合工具"><a href="#综合工具" class="headerlink" title="综合工具"></a>综合工具</h1><p>Logseq：OKR + GTD + Note =&gt; Logseq（<a href="https://www.bmpi.dev/self/okr-gtd-note-logseq/%EF%BC%89%EF%BC%8C%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E4%BD%A0%E4%BC%9A%E7%9F%A5%E9%81%93%E6%88%91%E4%B8%BA%E4%BD%95%E8%80%8C%E6%8E%A8%E8%8D%90%E8%BF%99%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%83%BD%E5%81%9A%E7%AC%94%E8%AE%B0%E3%80%81%E8%83%BD%E8%A7%84%E5%88%92%E4%BB%BB%E5%8A%A1%E6%88%96%E5%81%9AOKR%E5%95%A5%E7%9A%84%E3%80%82">https://www.bmpi.dev/self/okr-gtd-note-logseq/），看完这篇文章，你会知道我为何而推荐这个工具，能做笔记、能规划任务或做OKR啥的。</a></p><p>Beancount：完美记账工具，配合Git能做到数据安全可控，可以看这篇我写的文章：使用Beancount管理家庭财务（<a href="https://www.bmpi.dev/self/beancount-my-accounting-tool-v2/%EF%BC%89%EF%BC%8C%E8%B0%81%E5%86%8D%E7%BB%99%E4%BD%A0%E6%8E%A8%E8%8D%90%E8%AE%B0%E8%B4%A6%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%AF%B7%E6%8A%8A%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E6%89%94%E7%BB%99%E4%BB%96%E4%BB%AC%E7%9C%8B%E3%80%82">https://www.bmpi.dev/self/beancount-my-accounting-tool-v2/），谁再给你推荐记账工具，请把这篇文章扔给他们看。</a></p><h1 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h1><p>AdblockPlus：这款插件可以自动屏蔽网站里的绝大多数广告，无需额外复杂的配置，安装好即可。</p><p>沉浸式翻译：搭配OpenAI的API Key可以做到非常完美的多语言网页翻译，读外文资料无障碍。</p><p>Internet Archive：网页时光机，很多网页因为时间很久的缘故可能无法访问（404），这个插件可以帮助我们找回这个页面，甚至可以像时光机一样查看网页不同时期的版本。</p><p>Screely：截屏工具，主要是能美化截屏界面，让其不再难看，比如加点背景。</p><p>wappalyzer：查看网站技术栈，比如使用它一些主流网站的技术栈。</p><p>SimilarWeb：查看网站PV流量的工具，但是结果有时候准确，有时候偏差挺大的。</p><p>SEOquake：查看网站的SEO相关的信息，如外链数量、索引数量、SEO的站内问题等。</p><p>Keyword Surfer：关键词工具，可以查看一些关键词的月搜索量。</p><p>META SEO inspector：网页Meta信息查看工具，可以方便地解决一些网页SEO的基本问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis介绍</title>
      <link href="1a32b04.html"/>
      <url>1a32b04.html</url>
      
        <content type="html"><![CDATA[<p>Redis是一个开源的内存数据存储解决方案，它可以用作缓存、数据库和消息代理。以下是它的主要特点和原理：</p><ul><li>内存存储：将所有数据存储在内存中，以实现快速读写访问。同时，它支持多种数据结构，如字<strong>符串、哈希、列表、集合和有序集合</strong>。</li><li>持久性：Redis支持将数据持久化到磁盘上，以实现数据的可靠存储和恢复。它提供两种不同的持久化选项：快照和日志。</li><li>高可用性：Redis支持主从复制和哨兵机制，以实现高可用性和故障点转移。</li><li>分布式：Redis Cluster可以将数据分布在多个节点上，以实现横向扩展和高性能。</li><li>事务和Lua脚本：重新支持事务和Lua脚本，以实现原子操作和自定义命令。</li></ul><h1 id="1-Redis的单线程和Linux的ePoll特性"><a href="#1-Redis的单线程和Linux的ePoll特性" class="headerlink" title="1. Redis的单线程和Linux的ePoll特性"></a>1. Redis的单线程和Linux的ePoll特性</h1><p>Redis是单线程的，这意味着它使用一个主线程来处理所有客户端请求。它的性能非常高，因为它不需要线程切换的开销，并且可以使用非常少的内存来处理大量的并发连接。另外，Redis使用Linux的ePoll特性来实现异步I/O操作，这使得Redis能够在高负载情况下保持高性能。</p><p>在**redis中会有epoll模型是基于异步的io来实现的,**在该模型下每个连接都会有个FileDscript的文件来标示连接情况,连接的客户端有相关的io才会唤醒redis的线程来进行操作</p><h2 id="1-1-缓存数据存储和持久化"><a href="#1-1-缓存数据存储和持久化" class="headerlink" title="1.1. 缓存数据存储和持久化"></a>1.1. 缓存数据存储和持久化</h2><ol><li><p>RDB（Redis Database）：</p><ul><li>RDB 是 Redis 数据的非常紧凑的单文件时间点表示形式。 RDB 文件非常适合备份。 例如，您可能希望在最近 24 小时内每小时归档一次 RDB 文件，并在 30 天内每天保存一个 RDB 快照。 这使您可以在发生灾难时轻松恢复不同版本的数据集。<br>RDB 非常适合灾难恢复，它是一个紧凑的文件，可以传输到远程数据中心或 Amazon S3（可能是加密的）。<br>RDB 最大限度地提高了 Redis 的性能，因为 Redis 父进程为了持久化需要做的唯一工作就是派生一个子进程，该子进程将完成其余所有工作。 父进程永远不会执行磁盘 I/O 等操作。<br>与 AOF 相比，RDB 允许更快地重新启动大数据集。<br>在副本上，RDB 支持重启和故障转移后的部分重新同步。</li></ul></li><li><p>AOF日志（Append-Only File）：</p><ul><li><p>AOF日志以追加方式记录Redis服务器所执行的写命令，以文本格式保存在一个文件中。</p></li><li><p>AOF日志允许Redis将写操作追加到文件的末尾，以保持数据的完整性。</p></li><li><p>AOF日志可以通过配置文件中的appendonly选项来启用和配置。</p></li><li><p>AOF日志的优点是可以提供更高的数据安全性和持久性，但相比于快照有一定的性能开销。</p></li><li><p>可以通过配置AOF重写来压缩和优化AOF日志的大小。</p></li></ul></li></ol><h1 id="2-Redis支持的常见结构"><a href="#2-Redis支持的常见结构" class="headerlink" title="2. Redis支持的常见结构"></a>2. Redis支持的常见结构</h1><h2 id="2-1-数据结构"><a href="#2-1-数据结构" class="headerlink" title="2.1. 数据结构"></a>2.1. 数据结构</h2><h3 id="2-1-1-字符串（String）："><a href="#2-1-1-字符串（String）：" class="headerlink" title="2.1.1. .字符串（String）："></a>2.1.1. .字符串（String）：</h3><p>Redis的字符串是一个简单的键值对结构，键是一个字符串，值可以是任意二进制数据。<br>常用操作：设置值、获取值、增加或减少数值、追加字符串、获取子字符串等。<br>适用场景：缓存、计数器、分布式锁等。</p><h3 id="2-1-2-哈希（Hash）："><a href="#2-1-2-哈希（Hash）：" class="headerlink" title="2.1.2. 哈希（Hash）："></a>2.1.2. 哈希（Hash）：</h3><p>Redis的哈希是一个键值对集合，其中键是一个字符串，值是一个字段-值对的映射表。<br>常用操作：设置字段值、获取字段值、获取所有字段与值、删除字段等。<br>适用场景：存储对象、存储用户信息、存储配置信息等。</p><h3 id="2-1-3-列表（List）："><a href="#2-1-3-列表（List）：" class="headerlink" title="2.1.3. 列表（List）："></a>2.1.3. 列表（List）：</h3><p>Redis的列表是一个有序的字符串元素集合，它可以在两端进行插入、删除和查询操作。<br>常用操作：从列表的左端或右端插入元素、从左端或右端弹出元素、获取指定索引位置的元素等。<br>适用场景：消息队列、实现最新消息推送、记录操作日志等。</p><h3 id="2-1-4-集合（Set）："><a href="#2-1-4-集合（Set）：" class="headerlink" title="2.1.4. 集合（Set）："></a>2.1.4. 集合（Set）：</h3><p>Redis的集合是一个无序的字符串元素集合，它不允许重复的元素存在。<br>常用操作：添加元素、移除元素、判断元素是否存在、求交集、求并集等。<br>适用场景：标签系统、好友关系、计算共同喜好等。</p><h3 id="2-1-5-有序集合（Sorted-Set）："><a href="#2-1-5-有序集合（Sorted-Set）：" class="headerlink" title="2.1.5. 有序集合（Sorted Set）："></a>2.1.5. 有序集合（Sorted Set）：</h3><p>Redis的有序集合是一个排序的字符串元素集合，每个元素都会关联一个分数，通过分数可以进行排序。<br>常用操作：添加元素、移除元素、根据分数范围获取元素等。<br>适用场景：排行榜、优先级队列、范围查询等。</p><h2 id="2-2-Redis支持其他类型：布隆过滤器、HyperLogLog和Geohash"><a href="#2-2-Redis支持其他类型：布隆过滤器、HyperLogLog和Geohash" class="headerlink" title="2.2. Redis支持其他类型：布隆过滤器、HyperLogLog和Geohash"></a>2.2. Redis支持其他类型：布隆过滤器、HyperLogLog和Geohash</h2><p>除了支持字符串、哈希、列表、集合和排序集等常见数据结构外，Redis还支持在某些用例中有用的几种专用数据类型。</p><h3 id="2-2-1-布隆过滤器-Bloom-filter"><a href="#2-2-1-布隆过滤器-Bloom-filter" class="headerlink" title="2.2.1. 布隆过滤器(Bloom filter)"></a>2.2.1. 布隆过滤器(<a href="https://redis.io/docs/data-types/probabilistic/bloom-filter/">Bloom filter</a>)</h3><p>布隆过滤器是一种概率数据结构，可用于确定元素是否可能存在于集合中。它们在误报（表示元素不在集合中时）是可以接受的，但误报（表示元素不在集合中时）不是可以接受的情况下特别有用。Redis中的布隆过滤器是使用<code>BF. ADD</code>、<code>BF.EXISTS</code>和<code>BF.MADD</code>命令实现的。</p><h3 id="2-2-2-HyperLogLog-HyperLogLog"><a href="#2-2-2-HyperLogLog-HyperLogLog" class="headerlink" title="2.2.2. HyperLogLog(HyperLogLog)"></a>2.2.2. HyperLogLog(<a href="https://redis.io/docs/data-types/probabilistic/hyperloglogs/">HyperLogLog</a>)</h3><p>HyperLogLog是一种用于估计集合基数的概率算法。它为存储集合本身提供了一种节省空间的替代方案，可用于高精度估计非常大的集合中唯一元素的数量。Redis中的HyperLogLog使用<code>PFADD</code>、<code>PFCOUNT</code>和<code>PFMERGE</code>命令实现。</p><h3 id="2-2-3-布谷鸟算法-Cuckoo-filter"><a href="#2-2-3-布谷鸟算法-Cuckoo-filter" class="headerlink" title="2.2.3. 布谷鸟算法(Cuckoo filter)"></a>2.2.3. 布谷鸟算法(<a href="https://redis.io/docs/data-types/probabilistic/cuckoo-filter/">Cuckoo filter</a>)</h3><p>检测特定集合是否存在是否存在</p><h3 id="2-2-4-空间类型-geospatial"><a href="#2-2-4-空间类型-geospatial" class="headerlink" title="2.2.4. 空间类型 geospatial"></a>2.2.4. 空间类型 <a href="https://redis.io/docs/data-types/geospatial/">geospatial</a></h3><p>地理散列是一种以保留接近度的方式将地理坐标编码为字符串的技术。它可用于对一组坐标执行空间查询，例如查找给定点一定半径内的所有坐标。Redis支持通过<code>GEOADD</code>、<code>GEODIST</code>、<code>GEOHASH</code>、<code>GEOPOS</code>和<code>GEORADIUS</code>命令进行地理散列。<br>通过为这些专门的数据类型提供支持，Redis使开发人员能够凭借其强大的内存数据存储和处理能力解决更广泛的问题。</p><h3 id="2-2-5-BitMap类型"><a href="#2-2-5-BitMap类型" class="headerlink" title="2.2.5. BitMap类型 "></a>2.2.5. <a href="https://redis.io/docs/data-types/bitmaps/">BitMap类型 </a></h3><p>Bitmap，即位图，是一串连续的二进制数组（0和1），可以通过偏移量（offset）定位元素。BitMap通过最小的单位bit来进行<code>0|1</code>的设置，表示某个元素的值或者状态，时间复杂度为O(1)。由于bit是计算机中最小的单位，使用它进行储存将非常节省空间，特别适合一些数据量大且使用二值统计的场景。</p><p>使用示例 位移值和0|1 存储值,例如是否在线,考勤是否打卡</p><h1 id="3-Redis淘汰策略"><a href="#3-Redis淘汰策略" class="headerlink" title="3. Redis淘汰策略"></a>3. Redis淘汰策略</h1><p><img src="https://rd.dtdream.com/download/attachments/45221264/image2023-10-10_14-44-47.png?version=1&modificationDate=1696920288000&api=v2" alt="img"></p><p>Redis的淘汰策略，根据是否会进行数据淘汰可以把它们分成两类：</p><ul><li>不进行数据淘汰的策略，只有 noeviction 这一种。</li><li>会进行淘汰的 7 种其他策略。</li></ul><p>会进行淘汰的 7 种策略，我们可以再进一步根据淘汰候选数据集的范围把它们分成两类：</p><ul><li>在设置了过期时间的数据中进行淘汰，包括 volatile-random、volatile-ttl、volatile-lru、volatile-lfu（Redis 4.0 后新增）四种。</li><li>在所有数据范围内进行淘汰，包括 allkeys-lru、allkeys-random、allkeys-lfu（Redis 4.0 后新增）三种。</li></ul><p><a href="https://juejin.cn/post/7027067417469648926">Redis的八种淘汰策略（五） - 掘金</a></p><p>volatile-random、volatile-ttl、volatile-lru、volatile-lfu 四种策略是针对已经设置了过期时间的键值对。到键值对的到期时间到了或者Redis内存使用量达到了<code>maxmemory</code>阈值，Redis会根据这些策略对键值对进行淘汰；</p><ul><li>volatile-ttl 在筛选时，会针对设置了过期时间的键值对，根据过期时间的先后进行删除，越早过期的越先被删除。</li><li>volatile-random 就像它的名称一样，在设置了过期时间的键值对中，进行随机删除。</li><li>volatile-lru 会使用 LRU (最近最少使用淘汰算法（Least Recently Used）) 算法筛选设置了过期时间的键值对。</li><li>volatile-lfu 会使用 LFU 最不经常使用淘汰算法（Least Frequently Used）选择设置了过期时间的键值对。</li></ul><p>备注:</p><p>LRU，即：最近最少使用淘汰算法（Least Recently Used）。LRU是淘汰最长时间没有被使用的页面。</p><p>LFU，即：最不经常使用淘汰算法（Least Frequently Used）。LFU是淘汰一段时间内，使用次数最少的页面</p><p><a href="https://www.cnblogs.com/fengzheng/p/13296082.html">动手实现 LRU 算法，以及 Caffeine 和 Redis 中的缓存淘汰策略 - 风的姿态 - 博客园</a></p><h1 id="4-Redis集群"><a href="#4-Redis集群" class="headerlink" title="4. Redis集群"></a>4. Redis集群</h1><p><a href="https://segmentfault.com/a/1190000022028642">一文掌握Redis的三种集群方案 - 个人文章 - SegmentFault 思否</a></p><h2 id="4-1-主从复制"><a href="#4-1-主从复制" class="headerlink" title="4.1. 主从复制"></a>4.1. 主从复制</h2><p><img src="https://image-static.segmentfault.com/124/529/1245298177-5e6ed603a6d8b_articlex" alt="redis-master-slave"></p><h3 id="4-1-1-主从复制的优缺点"><a href="#4-1-1-主从复制的优缺点" class="headerlink" title="4.1.1. 主从复制的优缺点"></a>4.1.1. 主从复制的优缺点</h3><p>优点：</p><ol><li>master能自动将数据同步到slave，可以进行读写分离，分担master的读压力</li><li>master、slave之间的同步是以非阻塞的方式进行的，同步期间，客户端仍然可以提交查询或更新请求</li></ol><p>缺点：</p><ol><li>不具备自动容错与恢复功能，master或slave的宕机都可能导致客户端请求失败，需要等待机器重启或手动切换客户端IP才能恢复</li><li>master宕机，如果宕机前数据没有同步完，则切换IP后会存在数据不一致的问题</li><li>难以支持在线扩容，Redis的容量受限于单机配置</li></ol><h2 id="4-2-哨兵模式"><a href="#4-2-哨兵模式" class="headerlink" title="4.2. 哨兵模式"></a>4.2. 哨兵模式</h2><p><img src="https://image-static.segmentfault.com/423/790/4237905659-5e6ed60450b11_articlex" alt="redis-sentinel"></p><p>优点：</p><ol><li>哨兵模式基于主从复制模式，所以主从复制模式有的优点，哨兵模式也有</li><li>哨兵模式下，master挂掉可以自动进行切换，系统可用性更高</li></ol><p>缺点：</p><ol><li>同样也继承了主从模式难以在线扩容的缺点，Redis的容量受限于单机配置</li><li>需要额外的资源来启动sentinel进程，实现相对复杂一点，同时slave节点作为备份节点不提供服务</li></ol><h2 id="4-3-Cluster模式"><a href="#4-3-Cluster模式" class="headerlink" title="4.3. Cluster模式"></a>4.3. Cluster模式</h2><p><img src="https://image-static.segmentfault.com/965/514/965514528-5e6ed605ee5db_articlex" alt="redis-cluster"></p><p>　　Redis Cluster 采用虚拟哈希槽分区，所有的键根据哈希函数映射到 0 ~ 16383 整数槽内，计算公式：<code>HASH_SLOT = CRC16(key) % 16384</code>。每一个节点负责维护一部分槽以及槽所映射的键值数据。</p><h1 id="5-Redis中的缓存雪崩和缓存击穿问题"><a href="#5-Redis中的缓存雪崩和缓存击穿问题" class="headerlink" title="5. Redis中的缓存雪崩和缓存击穿问题"></a>5. Redis中的缓存雪崩和缓存击穿问题</h1><p><img src="https://cdn.xiaolincoding.com//mysql/other/61781cd6d82e4a0cc5f7521333049f0d.png" alt="图片"></p><h2 id="5-1-缓存雪崩"><a href="#5-1-缓存雪崩" class="headerlink" title="5.1. 缓存雪崩"></a>5.1. 缓存雪崩</h2><p>缓存雪崩是指在同一时间，缓存中大量的缓存数据失效，导致大量的请求直接打到了后端数据库上，使得数据库瞬间达到峰值负载，甚至直接宕机。这种情况通常发生在缓存中的数据同时过期时间设置相同，同时失效的情况下。<br>为了避免缓存雪崩问题，可以采取以下措施：</p><ul><li>给缓存数据的过期时间加上随机值，避免同时失效。</li><li>将缓存数据的过期时间分散开来，比如一部分设置为5分钟，一部分设置为10分钟，一部分设置为15分钟，以此类推。</li><li>设置本地缓存，当缓存失效时，先从本地缓存中获取数据，如果本地缓存没有，则去后端数据库取数据，并将数据再次缓存到本地缓存中。</li></ul><h2 id="5-2-缓存击穿"><a href="#5-2-缓存击穿" class="headerlink" title="5.2. 缓存击穿"></a>5.2. 缓存击穿</h2><p>缓存击穿是指某个热点key在缓存过期的同时，有大量的请求访问该key的时候，这些请求直接穿透到后端数据库，导致数据库瞬间达到峰值负载，甚至直接宕机。<br>为了避免缓存击穿问题，可以采取以下措施：</p><ul><li>在缓存数据不存在时，不直接去查询后端数据库，而是先将该key设置为一个特殊的值（如null），在一段时间内（如5秒）不再查询后端数据库，从而避免瞬间大量请求打到数据库上。</li><li>设置热点数据永不过期，或者过期时间非常长，例如一天、一周、一个月等。</li><li>设置本地缓存，当缓存失效时，先从本地缓存中获取数据，如果本地缓存没有，则去后端数据库取数据，并将数据再次缓存到本地缓存中。</li></ul><p>在使用Redis时需要注意缓存雪崩和缓存击穿问题，采取相应的措施可以避免这些问题的发生，提高系统的稳定性和可靠性。<br>在Redis中，缓存失效可能有以下几种情况：</p><ol><li>过期时间到期：当设置了缓存的过期时间后，到期后缓存将会失效。</li><li>主动删除：使用<code>DEL</code>命令或者程序中的<code>delete</code>方法，主动删除缓存。</li><li>内存空间不足：当Rediss内存空间不足时，Rediss会优先淘汰赛掉内存占用较大，使用较少的缓存，以腾出更多的内存空间。</li><li>内存泄漏：当程序中出现内存泄漏时，会导致缓存失效。</li><li>Redis重启：当Redis服务重启时，缓存也会失效。</li></ol><p>为了避免缓存失效，我们可以设置合适的缓存过期时间，定期检查和清理过期缓存，优化Redis的内存使用，以及避免内存泄漏等问题。</p><h1 id="6-在Spring-Boot中使用Redis"><a href="#6-在Spring-Boot中使用Redis" class="headerlink" title="6. 在Spring Boot中使用Redis"></a>6. 在Spring Boot中使用Redis</h1><p>Redis是一个流行的内存数据存储解决方案，它可以用作缓存、数据库和消息代理。在Spring Boot应用程序中使用Redis可以提高应用程序的性能和可扩展性。在本文中，我们将介绍如何在Spring Boot应用程序中使用Redis。</p><h2 id="6-1-添加Redis依赖"><a href="#6-1-添加Redis依赖" class="headerlink" title="6.1. .添加Redis依赖"></a>6.1. .添加Redis依赖</h2><p>要在Spring Boot应用程序中使用Redis，我们首先需要添加Redis依赖，在Maven项目中，我们可以在pom. xml文件中添加以下依赖项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-配置Redis连接"><a href="#6-2-配置Redis连接" class="headerlink" title="6.2. 配置Redis连接"></a>6.2. 配置Redis连接</h2><p>在我们可以使用Redis之前，我们需要配置Redis连接.在Spring Boot应用程序中，我们可以在application.properties文件中添加以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=6379</span><br></pre></td></tr></table></figure><p>这将配置Redis连接到本地主机的默认端口6379。</p><h2 id="6-3-使用RedisTemplate"><a href="#6-3-使用RedisTemplate" class="headerlink" title="6.3. 使用RedisTemplate"></a>6.3. 使用RedisTemplate</h2><p>Spring Boot提供了一个RedisTemplate类，它是一个用于与Redis交互的高级API。我们可以使用RedisTemplate来执行Redis操作，如存储、检索和删除数据。以下是一个使用RedisTemplate执行Redis操作的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">public void setValue(String key, Object value) &#123;</span><br><span class="line">    redisTemplate.opsForValue().set(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Object getValue(String key) &#123;</span><br><span class="line">    return redisTemplate.opsForValue().get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们注入了一个RedisTemplate对象，并使用它来存储和检索数据。我们使用opsForValue()方法来访问Redis值操作，如设置和获取值。</p><h1 id="7-使用注解"><a href="#7-使用注解" class="headerlink" title="7. 使用注解"></a>7. 使用注解</h1><p>除了使用RedisTemplate之外，Spring Boot还提供了一些注解，可以更轻松地使用Redis。例如，我们可以使用@Cacheable注解将方法的结果缓存到Redis中，从而加快方法的执行速度。以下是一个使用@Cacheable注解的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable(value = &quot;users&quot;, key = &quot;#userId&quot;)</span><br><span class="line">public User getUserById(String userId) &#123;</span><br><span class="line">    // 获取用户信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们使用@Cache able注解将User By Id方法的结果缓存到名为”user”的Red is缓存中，缓存键为rId参数。</p><h2 id="7-1-常见客户端比较-lettuce-redisson-jedis"><a href="#7-1-常见客户端比较-lettuce-redisson-jedis" class="headerlink" title="7.1. 常见客户端比较 lettuce ,redisson,jedis"></a>7.1. 常见客户端比较 lettuce ,redisson,jedis</h2><p><img src="https://rd.dtdream.com/download/attachments/45221264/image2023-9-19_12-14-16.png?version=1&modificationDate=1695096856000&api=v2" alt="img"></p><table><thead><tr><th align="left">特性</th><th align="left">Lettuce</th><th align="left">Redisson</th><th align="left">Jedis</th></tr></thead><tbody><tr><td align="left">完整性</td><td align="left">Lettuce 是一个可扩展的线程安全 Redis 客户端，适用于同步、异步和反应式使用。 如果多个线程避免阻塞和事务性操作（例如 BLPOP 和 MULTI/EXEC），则它们可以共享一个连接。 Lettuce是用netty构建的。 支持高级 Redis 功能，例如 Sentinel、集群、管道、自动重新连接和 Redis 数据模型。</td><td align="left">Redisson提供了完整的Redis协议支持,基于<a href="http://netty.io/">Netty</a> 框架，并在其基础上封装了更丰富的特性，如分布式锁、分布式集合等.线程安全的实现 支持Redis复制、Redis集群、Redis哨兵、Redis主从、Redis单机、Redis代理、Redis多集群设置</td><td align="left">Jedis提供了基本的Redis协议支持，但支持高级功能如Pipelining、Miscellaneous、Cluster、Pub/Sub等。Redis 官方推荐的Java客户端</td></tr><tr><td align="left">连接管理</td><td align="left">支持连接池和连接自动恢复机制，具有更好的连接管理能力。</td><td align="left">支持连接池和连接自动恢复机制，具有较好的连接管理能力。</td><td align="left">支持连接池，但没有连接自动恢复机制，</td></tr><tr><td align="left">异步操作</td><td align="left">提供完善的异步操作接口和功能，支持Reactive编程模型。</td><td align="left">提供完善的异步操作接口和功能，支持Reactive编程模型。</td><td align="left">不支持异步操作，只能使用同步方式进行操作。</td></tr><tr><td align="left">分布式功能</td><td align="left">支持Redis Sentinel和Redis Cluster，可以使用Lettuce进行分布式部署。</td><td align="left">提供了丰富的分布式功能，如分布式锁、分布式集合、分布式对象等。</td><td align="left">不支持Redis Sentinel和Redis Cluster，不适用于分布式部署。</td></tr><tr><td align="left">扩展性</td><td align="left">提供了较好的扩展性，用户可以自定义编解码器、连接池实现等。</td><td align="left">提供了较好的扩展性，用户可以自定义编解码器、连接管理器等。</td><td align="left">较难进行扩展，功能相对固定。</td></tr><tr><td align="left">社区活跃度</td><td align="left">拥有活跃的开源社区，稳定更新并提供技术支持。</td><td align="left">拥有活跃的开源社区，稳定更新并提供技术支持。</td><td align="left">拥有较为活跃的开源社区，但相对于Lettuce和Redisson稍显不足。</td></tr><tr><td align="left"></td><td align="left"><a href="https://github.com/lettuce-io/lettuce-core%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E6%98%AF">https://github.com/lettuce-io/lettuce-core最新版本是</a></td><td align="left"><a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a> 最新版是 3.23.4</td><td align="left"><a href="https://github.com/redis/jedis">https://github.com/redis/jedis</a> 最近版本是5.0.0</td></tr></tbody></table><h1 id="8-结论"><a href="#8-结论" class="headerlink" title="8. 结论"></a>8. 结论</h1><p><img src="https://rd.dtdream.com/download/attachments/45221264/image2023-10-10_14-50-12.png?version=1&modificationDate=1696920612000&api=v2" alt="img"></p><p>Redis是一个开源的内存数据存储解决方案，它可以用作缓存、数据库和消息代理。以下是它的主要特点和原理：</p><ul><li>内存存储：将所有数据存储在内存中，以实现快速读写访问。同时，它支持多种数据结构，如字<strong>符串、哈希、列表、集合和有序集合</strong>。</li><li>持久性：Redis支持将数据持久化到磁盘上，以实现数据的可靠存储和恢复。它提供两种不同的持久化选项：快照和日志。</li><li>高可用性：Redis支持主从复制和哨兵机制，以实现高可用性和故障点转移。</li><li>分布式：Redis Cluster可以将数据分布在多个节点上，以实现横向扩展和高性能。</li><li>事务和Lua脚本：重新支持事务和Lua脚本，以实现原子操作和自定义命令。</li></ul><h1 id="1-Redis的单线程和Linux的ePoll特性-1"><a href="#1-Redis的单线程和Linux的ePoll特性-1" class="headerlink" title="1. Redis的单线程和Linux的ePoll特性"></a>1. Redis的单线程和Linux的ePoll特性</h1><p>Redis是单线程的，这意味着它使用一个主线程来处理所有客户端请求。它的性能非常高，因为它不需要线程切换的开销，并且可以使用非常少的内存来处理大量的并发连接。另外，Redis使用Linux的ePoll特性来实现异步I/O操作，这使得Redis能够在高负载情况下保持高性能。</p><p>在**redis中会有epoll模型是基于异步的io来实现的,**在该模型下每个连接都会有个FileDscript的文件来标示连接情况,连接的客户端有相关的io才会唤醒redis的线程来进行操作</p><h2 id="1-1-缓存数据存储和持久化-1"><a href="#1-1-缓存数据存储和持久化-1" class="headerlink" title="1.1. 缓存数据存储和持久化"></a>1.1. 缓存数据存储和持久化</h2><ol><li><p>RDB（Redis Database）：</p><ul><li>RDB 是 Redis 数据的非常紧凑的单文件时间点表示形式。 RDB 文件非常适合备份。 例如，您可能希望在最近 24 小时内每小时归档一次 RDB 文件，并在 30 天内每天保存一个 RDB 快照。 这使您可以在发生灾难时轻松恢复不同版本的数据集。<br>RDB 非常适合灾难恢复，它是一个紧凑的文件，可以传输到远程数据中心或 Amazon S3（可能是加密的）。<br>RDB 最大限度地提高了 Redis 的性能，因为 Redis 父进程为了持久化需要做的唯一工作就是派生一个子进程，该子进程将完成其余所有工作。 父进程永远不会执行磁盘 I/O 等操作。<br>与 AOF 相比，RDB 允许更快地重新启动大数据集。<br>在副本上，RDB 支持重启和故障转移后的部分重新同步。</li></ul></li><li><p>AOF日志（Append-Only File）：</p><ul><li><p>AOF日志以追加方式记录Redis服务器所执行的写命令，以文本格式保存在一个文件中。</p></li><li><p>AOF日志允许Redis将写操作追加到文件的末尾，以保持数据的完整性。</p></li><li><p>AOF日志可以通过配置文件中的appendonly选项来启用和配置。</p></li><li><p>AOF日志的优点是可以提供更高的数据安全性和持久性，但相比于快照有一定的性能开销。</p></li><li><p>可以通过配置AOF重写来压缩和优化AOF日志的大小。</p></li></ul></li></ol><h1 id="2-Redis支持的常见结构-1"><a href="#2-Redis支持的常见结构-1" class="headerlink" title="2. Redis支持的常见结构"></a>2. Redis支持的常见结构</h1><h2 id="2-1-数据结构-1"><a href="#2-1-数据结构-1" class="headerlink" title="2.1. 数据结构"></a>2.1. 数据结构</h2><h3 id="2-1-1-字符串（String）：-1"><a href="#2-1-1-字符串（String）：-1" class="headerlink" title="2.1.1. .字符串（String）："></a>2.1.1. .字符串（String）：</h3><p>Redis的字符串是一个简单的键值对结构，键是一个字符串，值可以是任意二进制数据。<br>常用操作：设置值、获取值、增加或减少数值、追加字符串、获取子字符串等。<br>适用场景：缓存、计数器、分布式锁等。</p><h3 id="2-1-2-哈希（Hash）：-1"><a href="#2-1-2-哈希（Hash）：-1" class="headerlink" title="2.1.2. 哈希（Hash）："></a>2.1.2. 哈希（Hash）：</h3><p>Redis的哈希是一个键值对集合，其中键是一个字符串，值是一个字段-值对的映射表。<br>常用操作：设置字段值、获取字段值、获取所有字段与值、删除字段等。<br>适用场景：存储对象、存储用户信息、存储配置信息等。</p><h3 id="2-1-3-列表（List）：-1"><a href="#2-1-3-列表（List）：-1" class="headerlink" title="2.1.3. 列表（List）："></a>2.1.3. 列表（List）：</h3><p>Redis的列表是一个有序的字符串元素集合，它可以在两端进行插入、删除和查询操作。<br>常用操作：从列表的左端或右端插入元素、从左端或右端弹出元素、获取指定索引位置的元素等。<br>适用场景：消息队列、实现最新消息推送、记录操作日志等。</p><h3 id="2-1-4-集合（Set）：-1"><a href="#2-1-4-集合（Set）：-1" class="headerlink" title="2.1.4. 集合（Set）："></a>2.1.4. 集合（Set）：</h3><p>Redis的集合是一个无序的字符串元素集合，它不允许重复的元素存在。<br>常用操作：添加元素、移除元素、判断元素是否存在、求交集、求并集等。<br>适用场景：标签系统、好友关系、计算共同喜好等。</p><h3 id="2-1-5-有序集合（Sorted-Set）：-1"><a href="#2-1-5-有序集合（Sorted-Set）：-1" class="headerlink" title="2.1.5. 有序集合（Sorted Set）："></a>2.1.5. 有序集合（Sorted Set）：</h3><p>Redis的有序集合是一个排序的字符串元素集合，每个元素都会关联一个分数，通过分数可以进行排序。<br>常用操作：添加元素、移除元素、根据分数范围获取元素等。<br>适用场景：排行榜、优先级队列、范围查询等。</p><h2 id="2-2-Redis支持其他类型：布隆过滤器、HyperLogLog和Geohash-1"><a href="#2-2-Redis支持其他类型：布隆过滤器、HyperLogLog和Geohash-1" class="headerlink" title="2.2. Redis支持其他类型：布隆过滤器、HyperLogLog和Geohash"></a>2.2. Redis支持其他类型：布隆过滤器、HyperLogLog和Geohash</h2><p>除了支持字符串、哈希、列表、集合和排序集等常见数据结构外，Redis还支持在某些用例中有用的几种专用数据类型。</p><h3 id="2-2-1-布隆过滤器-Bloom-filter-1"><a href="#2-2-1-布隆过滤器-Bloom-filter-1" class="headerlink" title="2.2.1. 布隆过滤器(Bloom filter)"></a>2.2.1. 布隆过滤器(<a href="https://redis.io/docs/data-types/probabilistic/bloom-filter/">Bloom filter</a>)</h3><p>布隆过滤器是一种概率数据结构，可用于确定元素是否可能存在于集合中。它们在误报（表示元素不在集合中时）是可以接受的，但误报（表示元素不在集合中时）不是可以接受的情况下特别有用。Redis中的布隆过滤器是使用<code>BF. ADD</code>、<code>BF.EXISTS</code>和<code>BF.MADD</code>命令实现的。</p><h3 id="2-2-2-HyperLogLog-HyperLogLog-1"><a href="#2-2-2-HyperLogLog-HyperLogLog-1" class="headerlink" title="2.2.2. HyperLogLog(HyperLogLog)"></a>2.2.2. HyperLogLog(<a href="https://redis.io/docs/data-types/probabilistic/hyperloglogs/">HyperLogLog</a>)</h3><p>HyperLogLog是一种用于估计集合基数的概率算法。它为存储集合本身提供了一种节省空间的替代方案，可用于高精度估计非常大的集合中唯一元素的数量。Redis中的HyperLogLog使用<code>PFADD</code>、<code>PFCOUNT</code>和<code>PFMERGE</code>命令实现。</p><h3 id="2-2-3-布谷鸟算法-Cuckoo-filter-1"><a href="#2-2-3-布谷鸟算法-Cuckoo-filter-1" class="headerlink" title="2.2.3. 布谷鸟算法(Cuckoo filter)"></a>2.2.3. 布谷鸟算法(<a href="https://redis.io/docs/data-types/probabilistic/cuckoo-filter/">Cuckoo filter</a>)</h3><p>检测特定集合是否存在是否存在</p><h3 id="2-2-4-空间类型-geospatial-1"><a href="#2-2-4-空间类型-geospatial-1" class="headerlink" title="2.2.4. 空间类型 geospatial"></a>2.2.4. 空间类型 <a href="https://redis.io/docs/data-types/geospatial/">geospatial</a></h3><p>地理散列是一种以保留接近度的方式将地理坐标编码为字符串的技术。它可用于对一组坐标执行空间查询，例如查找给定点一定半径内的所有坐标。Redis支持通过<code>GEOADD</code>、<code>GEODIST</code>、<code>GEOHASH</code>、<code>GEOPOS</code>和<code>GEORADIUS</code>命令进行地理散列。<br>通过为这些专门的数据类型提供支持，Redis使开发人员能够凭借其强大的内存数据存储和处理能力解决更广泛的问题。</p><h3 id="2-2-5-BitMap类型-1"><a href="#2-2-5-BitMap类型-1" class="headerlink" title="2.2.5. BitMap类型 "></a>2.2.5. <a href="https://redis.io/docs/data-types/bitmaps/">BitMap类型 </a></h3><p>Bitmap，即位图，是一串连续的二进制数组（0和1），可以通过偏移量（offset）定位元素。BitMap通过最小的单位bit来进行<code>0|1</code>的设置，表示某个元素的值或者状态，时间复杂度为O(1)。由于bit是计算机中最小的单位，使用它进行储存将非常节省空间，特别适合一些数据量大且使用二值统计的场景。</p><p><img src="https://rd.dtdream.com/download/attachments/45221264/image2023-9-19_12-26-33.png?version=1&modificationDate=1695097593000&api=v2" alt="img"></p><p>使用示例 位移值和0|1 存储值,例如是否在线,考勤是否打卡</p><p><img src="https://rd.dtdream.com/download/attachments/45221264/1280X1280.PNG?version=1&modificationDate=1695099341000&api=v2" alt="img"></p><h1 id="3-Redis淘汰策略-1"><a href="#3-Redis淘汰策略-1" class="headerlink" title="3. Redis淘汰策略"></a>3. Redis淘汰策略</h1><p><img src="https://rd.dtdream.com/download/attachments/45221264/image2023-10-10_14-44-47.png?version=1&modificationDate=1696920288000&api=v2" alt="img"></p><p>Redis的淘汰策略，根据是否会进行数据淘汰可以把它们分成两类：</p><ul><li>不进行数据淘汰的策略，只有 noeviction 这一种。</li><li>会进行淘汰的 7 种其他策略。</li></ul><p>会进行淘汰的 7 种策略，我们可以再进一步根据淘汰候选数据集的范围把它们分成两类：</p><ul><li>在设置了过期时间的数据中进行淘汰，包括 volatile-random、volatile-ttl、volatile-lru、volatile-lfu（Redis 4.0 后新增）四种。</li><li>在所有数据范围内进行淘汰，包括 allkeys-lru、allkeys-random、allkeys-lfu（Redis 4.0 后新增）三种。</li></ul><p><a href="https://juejin.cn/post/7027067417469648926">Redis的八种淘汰策略（五） - 掘金</a></p><p>volatile-random、volatile-ttl、volatile-lru、volatile-lfu 四种策略是针对已经设置了过期时间的键值对。到键值对的到期时间到了或者Redis内存使用量达到了<code>maxmemory</code>阈值，Redis会根据这些策略对键值对进行淘汰；</p><ul><li>volatile-ttl 在筛选时，会针对设置了过期时间的键值对，根据过期时间的先后进行删除，越早过期的越先被删除。</li><li>volatile-random 就像它的名称一样，在设置了过期时间的键值对中，进行随机删除。</li><li>volatile-lru 会使用 LRU (最近最少使用淘汰算法（Least Recently Used）) 算法筛选设置了过期时间的键值对。</li><li>volatile-lfu 会使用 LFU 最不经常使用淘汰算法（Least Frequently Used）选择设置了过期时间的键值对。</li></ul><p>备注:</p><p>LRU，即：最近最少使用淘汰算法（Least Recently Used）。LRU是淘汰最长时间没有被使用的页面。</p><p>LFU，即：最不经常使用淘汰算法（Least Frequently Used）。LFU是淘汰一段时间内，使用次数最少的页面</p><p><a href="https://www.cnblogs.com/fengzheng/p/13296082.html">动手实现 LRU 算法，以及 Caffeine 和 Redis 中的缓存淘汰策略 - 风的姿态 - 博客园</a></p><h1 id="4-Redis集群-1"><a href="#4-Redis集群-1" class="headerlink" title="4. Redis集群"></a>4. Redis集群</h1><p><a href="https://segmentfault.com/a/1190000022028642">一文掌握Redis的三种集群方案 - 个人文章 - SegmentFault 思否</a></p><h2 id="4-1-主从复制-1"><a href="#4-1-主从复制-1" class="headerlink" title="4.1. 主从复制"></a>4.1. 主从复制</h2><p><img src="https://image-static.segmentfault.com/124/529/1245298177-5e6ed603a6d8b_articlex" alt="redis-master-slave"></p><h3 id="4-1-1-主从复制的优缺点-1"><a href="#4-1-1-主从复制的优缺点-1" class="headerlink" title="4.1.1. 主从复制的优缺点"></a>4.1.1. 主从复制的优缺点</h3><p>优点：</p><ol><li>master能自动将数据同步到slave，可以进行读写分离，分担master的读压力</li><li>master、slave之间的同步是以非阻塞的方式进行的，同步期间，客户端仍然可以提交查询或更新请求</li></ol><p>缺点：</p><ol><li>不具备自动容错与恢复功能，master或slave的宕机都可能导致客户端请求失败，需要等待机器重启或手动切换客户端IP才能恢复</li><li>master宕机，如果宕机前数据没有同步完，则切换IP后会存在数据不一致的问题</li><li>难以支持在线扩容，Redis的容量受限于单机配置</li></ol><h2 id="4-2-哨兵模式-1"><a href="#4-2-哨兵模式-1" class="headerlink" title="4.2. 哨兵模式"></a>4.2. 哨兵模式</h2><p><img src="https://image-static.segmentfault.com/423/790/4237905659-5e6ed60450b11_articlex" alt="redis-sentinel"></p><p>优点：</p><ol><li>哨兵模式基于主从复制模式，所以主从复制模式有的优点，哨兵模式也有</li><li>哨兵模式下，master挂掉可以自动进行切换，系统可用性更高</li></ol><p>缺点：</p><ol><li>同样也继承了主从模式难以在线扩容的缺点，Redis的容量受限于单机配置</li><li>需要额外的资源来启动sentinel进程，实现相对复杂一点，同时slave节点作为备份节点不提供服务</li></ol><h2 id="4-3-Cluster模式-1"><a href="#4-3-Cluster模式-1" class="headerlink" title="4.3. Cluster模式"></a>4.3. Cluster模式</h2><p><img src="https://image-static.segmentfault.com/965/514/965514528-5e6ed605ee5db_articlex" alt="redis-cluster"></p><p>　　Redis Cluster 采用虚拟哈希槽分区，所有的键根据哈希函数映射到 0 ~ 16383 整数槽内，计算公式：<code>HASH_SLOT = CRC16(key) % 16384</code>。每一个节点负责维护一部分槽以及槽所映射的键值数据。</p><h1 id="5-Redis中的缓存雪崩和缓存击穿问题-1"><a href="#5-Redis中的缓存雪崩和缓存击穿问题-1" class="headerlink" title="5. Redis中的缓存雪崩和缓存击穿问题"></a>5. Redis中的缓存雪崩和缓存击穿问题</h1><p><img src="https://cdn.xiaolincoding.com//mysql/other/61781cd6d82e4a0cc5f7521333049f0d.png" alt="图片"></p><h2 id="5-1-缓存雪崩-1"><a href="#5-1-缓存雪崩-1" class="headerlink" title="5.1. 缓存雪崩"></a>5.1. 缓存雪崩</h2><p>缓存雪崩是指在同一时间，缓存中大量的缓存数据失效，导致大量的请求直接打到了后端数据库上，使得数据库瞬间达到峰值负载，甚至直接宕机。这种情况通常发生在缓存中的数据同时过期时间设置相同，同时失效的情况下。<br>为了避免缓存雪崩问题，可以采取以下措施：</p><ul><li>给缓存数据的过期时间加上随机值，避免同时失效。</li><li>将缓存数据的过期时间分散开来，比如一部分设置为5分钟，一部分设置为10分钟，一部分设置为15分钟，以此类推。</li><li>设置本地缓存，当缓存失效时，先从本地缓存中获取数据，如果本地缓存没有，则去后端数据库取数据，并将数据再次缓存到本地缓存中。</li></ul><h2 id="5-2-缓存击穿-1"><a href="#5-2-缓存击穿-1" class="headerlink" title="5.2. 缓存击穿"></a>5.2. 缓存击穿</h2><p>缓存击穿是指某个热点key在缓存过期的同时，有大量的请求访问该key的时候，这些请求直接穿透到后端数据库，导致数据库瞬间达到峰值负载，甚至直接宕机。<br>为了避免缓存击穿问题，可以采取以下措施：</p><ul><li>在缓存数据不存在时，不直接去查询后端数据库，而是先将该key设置为一个特殊的值（如null），在一段时间内（如5秒）不再查询后端数据库，从而避免瞬间大量请求打到数据库上。</li><li>设置热点数据永不过期，或者过期时间非常长，例如一天、一周、一个月等。</li><li>设置本地缓存，当缓存失效时，先从本地缓存中获取数据，如果本地缓存没有，则去后端数据库取数据，并将数据再次缓存到本地缓存中。</li></ul><p>在使用Redis时需要注意缓存雪崩和缓存击穿问题，采取相应的措施可以避免这些问题的发生，提高系统的稳定性和可靠性。<br>在Redis中，缓存失效可能有以下几种情况：</p><ol><li>过期时间到期：当设置了缓存的过期时间后，到期后缓存将会失效。</li><li>主动删除：使用<code>DEL</code>命令或者程序中的<code>delete</code>方法，主动删除缓存。</li><li>内存空间不足：当Rediss内存空间不足时，Rediss会优先淘汰赛掉内存占用较大，使用较少的缓存，以腾出更多的内存空间。</li><li>内存泄漏：当程序中出现内存泄漏时，会导致缓存失效。</li><li>Redis重启：当Redis服务重启时，缓存也会失效。</li></ol><p>为了避免缓存失效，我们可以设置合适的缓存过期时间，定期检查和清理过期缓存，优化Redis的内存使用，以及避免内存泄漏等问题。</p><h1 id="6-在Spring-Boot中使用Redis-1"><a href="#6-在Spring-Boot中使用Redis-1" class="headerlink" title="6. 在Spring Boot中使用Redis"></a>6. 在Spring Boot中使用Redis</h1><p>Redis是一个流行的内存数据存储解决方案，它可以用作缓存、数据库和消息代理。在Spring Boot应用程序中使用Redis可以提高应用程序的性能和可扩展性。在本文中，我们将介绍如何在Spring Boot应用程序中使用Redis。</p><h2 id="6-1-添加Redis依赖-1"><a href="#6-1-添加Redis依赖-1" class="headerlink" title="6.1. .添加Redis依赖"></a>6.1. .添加Redis依赖</h2><p>要在Spring Boot应用程序中使用Redis，我们首先需要添加Redis依赖，在Maven项目中，我们可以在pom. xml文件中添加以下依赖项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-配置Redis连接-1"><a href="#6-2-配置Redis连接-1" class="headerlink" title="6.2. 配置Redis连接"></a>6.2. 配置Redis连接</h2><p>在我们可以使用Redis之前，我们需要配置Redis连接.在Spring Boot应用程序中，我们可以在application.properties文件中添加以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=6379</span><br></pre></td></tr></table></figure><p>这将配置Redis连接到本地主机的默认端口6379。</p><h2 id="6-3-使用RedisTemplate-1"><a href="#6-3-使用RedisTemplate-1" class="headerlink" title="6.3. 使用RedisTemplate"></a>6.3. 使用RedisTemplate</h2><p>Spring Boot提供了一个RedisTemplate类，它是一个用于与Redis交互的高级API。我们可以使用RedisTemplate来执行Redis操作，如存储、检索和删除数据。以下是一个使用RedisTemplate执行Redis操作的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">public void setValue(String key, Object value) &#123;</span><br><span class="line">    redisTemplate.opsForValue().set(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Object getValue(String key) &#123;</span><br><span class="line">    return redisTemplate.opsForValue().get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们注入了一个RedisTemplate对象，并使用它来存储和检索数据。我们使用opsForValue()方法来访问Redis值操作，如设置和获取值。</p><h1 id="7-使用注解-1"><a href="#7-使用注解-1" class="headerlink" title="7. 使用注解"></a>7. 使用注解</h1><p>除了使用RedisTemplate之外，Spring Boot还提供了一些注解，可以更轻松地使用Redis。例如，我们可以使用@Cacheable注解将方法的结果缓存到Redis中，从而加快方法的执行速度。以下是一个使用@Cacheable注解的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable(value = &quot;users&quot;, key = &quot;#userId&quot;)</span><br><span class="line">public User getUserById(String userId) &#123;</span><br><span class="line">    // 获取用户信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们使用@Cache able注解将User By Id方法的结果缓存到名为”user”的Red is缓存中，缓存键为rId参数。</p><h2 id="7-1-常见客户端比较-lettuce-redisson-jedis-1"><a href="#7-1-常见客户端比较-lettuce-redisson-jedis-1" class="headerlink" title="7.1. 常见客户端比较 lettuce ,redisson,jedis"></a>7.1. 常见客户端比较 lettuce ,redisson,jedis</h2><p><img src="https://rd.dtdream.com/download/attachments/45221264/image2023-9-19_12-14-16.png?version=1&modificationDate=1695096856000&api=v2" alt="img"></p><table><thead><tr><th align="left">特性</th><th align="left">Lettuce</th><th align="left">Redisson</th><th align="left">Jedis</th></tr></thead><tbody><tr><td align="left">完整性</td><td align="left">Lettuce 是一个可扩展的线程安全 Redis 客户端，适用于同步、异步和反应式使用。 如果多个线程避免阻塞和事务性操作（例如 BLPOP 和 MULTI/EXEC），则它们可以共享一个连接。 Lettuce是用netty构建的。 支持高级 Redis 功能，例如 Sentinel、集群、管道、自动重新连接和 Redis 数据模型。</td><td align="left">Redisson提供了完整的Redis协议支持,基于<a href="http://netty.io/">Netty</a> 框架，并在其基础上封装了更丰富的特性，如分布式锁、分布式集合等.线程安全的实现 支持Redis复制、Redis集群、Redis哨兵、Redis主从、Redis单机、Redis代理、Redis多集群设置</td><td align="left">Jedis提供了基本的Redis协议支持，但支持高级功能如Pipelining、Miscellaneous、Cluster、Pub/Sub等。Redis 官方推荐的Java客户端</td></tr><tr><td align="left">连接管理</td><td align="left">支持连接池和连接自动恢复机制，具有更好的连接管理能力。</td><td align="left">支持连接池和连接自动恢复机制，具有较好的连接管理能力。</td><td align="left">支持连接池，但没有连接自动恢复机制，</td></tr><tr><td align="left">异步操作</td><td align="left">提供完善的异步操作接口和功能，支持Reactive编程模型。</td><td align="left">提供完善的异步操作接口和功能，支持Reactive编程模型。</td><td align="left">不支持异步操作，只能使用同步方式进行操作。</td></tr><tr><td align="left">分布式功能</td><td align="left">支持Redis Sentinel和Redis Cluster，可以使用Lettuce进行分布式部署。</td><td align="left">提供了丰富的分布式功能，如分布式锁、分布式集合、分布式对象等。</td><td align="left">不支持Redis Sentinel和Redis Cluster，不适用于分布式部署。</td></tr><tr><td align="left">扩展性</td><td align="left">提供了较好的扩展性，用户可以自定义编解码器、连接池实现等。</td><td align="left">提供了较好的扩展性，用户可以自定义编解码器、连接管理器等。</td><td align="left">较难进行扩展，功能相对固定。</td></tr><tr><td align="left">社区活跃度</td><td align="left">拥有活跃的开源社区，稳定更新并提供技术支持。</td><td align="left">拥有活跃的开源社区，稳定更新并提供技术支持。</td><td align="left">拥有较为活跃的开源社区，但相对于Lettuce和Redisson稍显不足。</td></tr><tr><td align="left"></td><td align="left"><a href="https://github.com/lettuce-io/lettuce-core%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E6%98%AF">https://github.com/lettuce-io/lettuce-core最新版本是</a></td><td align="left"><a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a> 最新版是 3.23.4</td><td align="left"><a href="https://github.com/redis/jedis">https://github.com/redis/jedis</a> 最近版本是5.0.0</td></tr></tbody></table><h1 id="8-结论-1"><a href="#8-结论-1" class="headerlink" title="8. 结论"></a>8. 结论</h1><p><img src="../img/7c19b433-91f4-4575-9536-8fd9050da6d4.gif" alt="7c19b433-91f4-4575-9536-8fd9050da6d4"><br>在Spring Boot应用程序中使用Redis可以提高应用程序的性能和可扩展性。我们可以使用RedisTemplate类来执行Redis操作，也可以使用注解来更轻松地使用Redis。无论是存储会话数据还是缓存结果，Redis都是一个强大的解决方案。如果您正在使用Spring Boot，请考虑在应用程序中使用Redis。<br>Redis是一种开源内存数据存储解决方案，可用作缓存、数据库和消息代理，其主要特点和原理包括：</p><ul><li>内存存储： Redis将所有数据存储在内存中，以便快速读写访问。它还支持各种数据结构，例如字符串、哈希、列表、集合和排序集合。</li><li>持久化：Redis支持将数据持久化到磁盘，以实现可靠的存储和恢复。 它提供两种不同的持久性选项：快照和日志。</li><li>高可用性：Redis支持主从复制和哨兵机制，实现高可用性和故障点转移。</li><li>分布式：Redis Cluster可以将数据分布在多个节点上，以实现水平扩展和高性能。</li><li>事务和Lua脚本： Redis支持原子操作和自定义命令的事务和Lua脚本。</li></ul><p>总体而言，Redis的主要特点是速度、可靠性和可扩展性.广泛应用于缓存、会话存储、消息队列、计数器、排行榜等各种应用场景。<br>与MongoDB相比，Redis是一种专门的内存数据存储，而MongoDB是一种通用的面向文档的数据库。对于读取密集型工作负载，Redis比MongoDB更快，而MongoDB更适合写入密集型工作负载。Redis由于依赖内存，存储容量有限，而MongoDB可以水平扩展以处理大量数据。<br>与常见的关系数据库和图数据库相比，Redis由于其内存存储和简单的数据结构，在读写性能上更快。<br>Redis的一些优点包括速度，简单性和灵活性.它易于使用，可用于广泛的数据存储和处理任务.它的一些缺点包括对内存的依赖，存储容量有限以及缺乏对复杂查询和连接的支持。<br>Redis是一种开源内存数据存储解决方案，可用作缓存、数据库和消息代理，其主要特点和原理包括：</p><ul><li>内存存储： Redis将所有数据存储在内存中，以便快速读写访问。它还支持各种数据结构，例如字符串、哈希、列表、集合和排序集合。</li><li>持久化：Redis支持将数据持久化到磁盘，以实现可靠的存储和恢复。 它提供两种不同的持久性选项：快照和日志。</li><li>高可用性：Redis支持主从复制和哨兵机制，实现高可用性和故障点转移。</li><li>分布式：Redis Cluster可以将数据分布在多个节点上，以实现水平扩展和高性能。</li><li>事务和Lua脚本： Redis支持原子操作和自定义命令的事务和Lua脚本。</li></ul><p>总体而言，Redis的主要特点是速度、可靠性和可扩展性.广泛应用于缓存、会话存储、消息队列、计数器、排行榜等各种应用场景。<br>与MongoDB相比，Redis是一种专门的内存数据存储，而MongoDB是一种通用的面向文档的数据库。对于读取密集型工作负载，Redis比MongoDB更快，而MongoDB更适合写入密集型工作负载。Redis由于依赖内存，存储容量有限，而MongoDB可以水平扩展以处理大量数据。<br>与常见的关系数据库和图数据库相比，Redis由于其内存存储和简单的数据结构，在读写性能上更快。<br>Redis的一些优点包括速度，简单性和灵活性.它易于使用，可用于广泛的数据存储和处理任务.它的一些缺点包括对内存的依赖，存储容量有限以及缺乏对复杂查询和连接的支持。</p><h2 id="8-1-常见的用途"><a href="#8-1-常见的用途" class="headerlink" title="8.1. 常见的用途"></a>8.1. 常见的用途</h2><ol><li>同步session</li><li>分布式事务锁或者是 lock</li><li>注册中心</li><li>缓存中间件</li><li>触发器,订阅-触发的同步机制</li></ol><p>在Spring Boot应用程序中使用Redis可以提高应用程序的性能和可扩展性。我们可以使用RedisTemplate类来执行Redis操作，也可以使用注解来更轻松地使用Redis。无论是存储会话数据还是缓存结果，Redis都是一个强大的解决方案。如果您正在使用Spring Boot，请考虑在应用程序中使用Redis。<br>Redis是一种开源内存数据存储解决方案，可用作缓存、数据库和消息代理，其主要特点和原理包括：</p><ul><li>内存存储： Redis将所有数据存储在内存中，以便快速读写访问。它还支持各种数据结构，例如字符串、哈希、列表、集合和排序集合。</li><li>持久化：Redis支持将数据持久化到磁盘，以实现可靠的存储和恢复。 它提供两种不同的持久性选项：快照和日志。</li><li>高可用性：Redis支持主从复制和哨兵机制，实现高可用性和故障点转移。</li><li>分布式：Redis Cluster可以将数据分布在多个节点上，以实现水平扩展和高性能。</li><li>事务和Lua脚本： Redis支持原子操作和自定义命令的事务和Lua脚本。</li></ul><p>总体而言，Redis的主要特点是速度、可靠性和可扩展性.广泛应用于缓存、会话存储、消息队列、计数器、排行榜等各种应用场景。<br>与MongoDB相比，Redis是一种专门的内存数据存储，而MongoDB是一种通用的面向文档的数据库。对于读取密集型工作负载，Redis比MongoDB更快，而MongoDB更适合写入密集型工作负载。Redis由于依赖内存，存储容量有限，而MongoDB可以水平扩展以处理大量数据。<br>与常见的关系数据库和图数据库相比，Redis由于其内存存储和简单的数据结构，在读写性能上更快。<br>Redis的一些优点包括速度，简单性和灵活性.它易于使用，可用于广泛的数据存储和处理任务.它的一些缺点包括对内存的依赖，存储容量有限以及缺乏对复杂查询和连接的支持。<br>Redis是一种开源内存数据存储解决方案，可用作缓存、数据库和消息代理，其主要特点和原理包括：</p><ul><li>内存存储： Redis将所有数据存储在内存中，以便快速读写访问。它还支持各种数据结构，例如字符串、哈希、列表、集合和排序集合。</li><li>持久化：Redis支持将数据持久化到磁盘，以实现可靠的存储和恢复。 它提供两种不同的持久性选项：快照和日志。</li><li>高可用性：Redis支持主从复制和哨兵机制，实现高可用性和故障点转移。</li><li>分布式：Redis Cluster可以将数据分布在多个节点上，以实现水平扩展和高性能。</li><li>事务和Lua脚本： Redis支持原子操作和自定义命令的事务和Lua脚本。</li></ul><p>总体而言，Redis的主要特点是速度、可靠性和可扩展性.广泛应用于缓存、会话存储、消息队列、计数器、排行榜等各种应用场景。<br>与MongoDB相比，Redis是一种专门的内存数据存储，而MongoDB是一种通用的面向文档的数据库。对于读取密集型工作负载，Redis比MongoDB更快，而MongoDB更适合写入密集型工作负载。Redis由于依赖内存，存储容量有限，而MongoDB可以水平扩展以处理大量数据。<br>与常见的关系数据库和图数据库相比，Redis由于其内存存储和简单的数据结构，在读写性能上更快。<br>Redis的一些优点包括速度，简单性和灵活性.它易于使用，可用于广泛的数据存储和处理任务.它的一些缺点包括对内存的依赖，存储容量有限以及缺乏对复杂查询和连接的支持。</p><h2 id="8-1-常见的用途-1"><a href="#8-1-常见的用途-1" class="headerlink" title="8.1. 常见的用途"></a>8.1. 常见的用途</h2><ol><li>同步session</li><li>分布式事务锁或者是 lock</li><li>注册中心</li><li>缓存中间件</li><li>触发器,订阅-触发的同步机制</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>es查询和简要介绍</title>
      <link href="7d305c2e.html"/>
      <url>7d305c2e.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shade打包后对于META-INF/services数据丢失</title>
      <link href="fa86f8b.html"/>
      <url>fa86f8b.html</url>
      
        <content type="html"><![CDATA[<p>GeoTools 中的 ReferencingFactoryFinder 类用于查找和获取 CRS（坐标参考系统）工厂类实例，其主要查找路径和实现机制如下：</p><ol><li>它会查找所有 META-INF/services/目录下名为 org.opengis.referencing.Factory 的文件。</li><li>这些文件通过 java.util.ServiceLoader 机制存放着可 plug-in 的坐标系统工厂类名。</li><li>GeoTools 会默认在其 jar 包中添加一些内置的坐标系统工厂类到这个文件中。</li><li>用户也可以通过放入额外的 jar 包，在自己的 META-INF/services 中新增工厂类。</li><li>ReferencingFactoryFinder 会加载这些工厂类，并缓存到内部的工厂 Map 中。</li><li>获取工厂时，则直接从 Map 返回，不需要重新扫描。</li><li>如果工厂类不存在，会抛出 FactoryNotFoundException 异常。</li></ol><p>使用特定访问</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>thymeleaf渲染</title>
      <link href="201304a.html"/>
      <url>201304a.html</url>
      
        <content type="html"><![CDATA[<h1 id="解决Thymeleaf模板引擎中的自定义属性和XML命名空间问题"><a href="#解决Thymeleaf模板引擎中的自定义属性和XML命名空间问题" class="headerlink" title="解决Thymeleaf模板引擎中的自定义属性和XML命名空间问题"></a>解决Thymeleaf模板引擎中的自定义属性和XML命名空间问题</h1><p>Thymeleaf是一个流行的模板引擎，常用于生成HTML页面。在使用Thymeleaf时，我们可能会遇到自定义属性和XML命名空间的问题。这篇文章将介绍如何使用Thymeleaf来解决这些问题，并提供了一些实际示例。</p><h2 id="前情介绍"><a href="#前情介绍" class="headerlink" title="前情介绍"></a>前情介绍</h2><p>在使用Thymeleaf时，有两个常见问题需要解决：</p><ol><li>如何添加自定义的HTML属性。</li><li>如何在XML命名空间属性中定义命名空间。</li></ol><p>让我们逐步来解决这些问题。</p><h2 id="添加自定义标签属性"><a href="#添加自定义标签属性" class="headerlink" title="添加自定义标签属性"></a>添加自定义标签属性</h2><p>Thymeleaf允许我们添加自定义属性到HTML标签中，以将数据传递到模板中。这对于动态渲染页面非常有用。我们可以使用<code>th:attr</code>来实现这一点，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ResourceURL th:each&#x3D;&quot;resource:$&#123;layer.resourceUrls&#125;&quot; th:attr&#x3D;&quot;format&#x3D;$&#123;resource.format&#125;, template&#x3D;$&#123;resource.template&#125;, resourceType&#x3D;$&#123;resource.resourceType&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>这将为每个<code>ResourceURL</code>元素添加<code>format</code>、<code>template</code>和<code>resourceType</code>属性，使我们能够以更灵活的方式自定义标签属性。</p><h2 id="XML命名空间属性问题"><a href="#XML命名空间属性问题" class="headerlink" title="XML命名空间属性问题"></a>XML命名空间属性问题</h2><p>有时，我们需要在HTML标签中使用XML命名空间属性，例如<code>xlink:href</code>。然而，Thymeleaf需要命名空间得到正确定义，否则会出现错误。解决这个问题的步骤如下：</p><ol><li>在HTML文档的根元素中，使用<code>xmlns:xlink</code>来定义<code>xlink</code>命名空间。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htmlCopy code&lt;html xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;</span><br><span class="line">      xmlns:xlink&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot;&gt;</span><br></pre></td></tr></table></figure><ol><li>现在，你可以在标签中使用<code>xlink:href</code>属性。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htmlCopy code</span><br><span class="line">&lt;a xlink:href&#x3D;&quot;https:&#x2F;&#x2F;example.com&quot;&gt;My Link&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>这样就能够使用<code>xlink:href</code>属性而不再出现命名空间错误。</p><h2 id="汉字解析"><a href="#汉字解析" class="headerlink" title="汉字解析"></a>汉字解析</h2><p>最后，如果你需要在Thymeleaf中解析汉字或其他文本，你可以使用<code>th:utext</code>。这个属性用于在HTML中安全地渲染未经转义的文本，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htmlCopy code</span><br><span class="line">&lt;span th:utext&#x3D;&quot;$&#123;aa.ddd.fdd&#125;&quot;&gt;汉字内容&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p><code>th:utext</code>将<code>$&#123;aa.ddd.fdd&#125;</code>中的文本进行渲染，确保它能正确显示。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Thymeleaf是一个功能强大的模板引擎，用于生成HTML页面。在使用Thymeleaf时，我们可以轻松解决自定义属性和XML命名空间的问题。请确保在使用XML命名空间属性时正确定义命名空间，以避免出现错误。希望这篇文章对解决Thymeleaf中的这些问题有所帮助。解决Thymeleaf模板引擎中的自定义属性和XML命名空间问题</p><p>Thymeleaf是一个流行的模板引擎，常用于生成HTML页面。在使用Thymeleaf时，我们可能会遇到自定义属性和XML命名空间的问题。这篇文章将介绍如何使用Thymeleaf来解决这些问题，并提供了一些实际示例。</p><h2 id="前情介绍-1"><a href="#前情介绍-1" class="headerlink" title="前情介绍"></a>前情介绍</h2><p>在使用Thymeleaf时，有两个常见问题需要解决：</p><ol><li>如何添加自定义的HTML属性。</li><li>如何在XML命名空间属性中定义命名空间。</li></ol><p>让我们逐步来解决这些问题。</p><h2 id="添加自定义标签属性-1"><a href="#添加自定义标签属性-1" class="headerlink" title="添加自定义标签属性"></a>添加自定义标签属性</h2><p>Thymeleaf允许我们添加自定义属性到HTML标签中，以将数据传递到模板中。这对于动态渲染页面非常有用。我们可以使用<code>th:attr</code>来实现这一点，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htmlCopy code</span><br><span class="line">&lt;ResourceURL th:each&#x3D;&quot;resource:$&#123;layer.resourceUrls&#125;&quot; th:attr&#x3D;&quot;format&#x3D;$&#123;resource.format&#125;, template&#x3D;$&#123;resource.template&#125;, resourceType&#x3D;$&#123;resource.resourceType&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>这将为每个<code>ResourceURL</code>元素添加<code>format</code>、<code>template</code>和<code>resourceType</code>属性，使我们能够以更灵活的方式自定义标签属性。</p><h2 id="XML命名空间属性问题-1"><a href="#XML命名空间属性问题-1" class="headerlink" title="XML命名空间属性问题"></a>XML命名空间属性问题</h2><p>有时，我们需要在HTML标签中使用XML命名空间属性，例如<code>xlink:href</code>。然而，Thymeleaf需要命名空间得到正确定义，否则会出现错误。解决这个问题的步骤如下：</p><ol><li>在HTML文档的根元素中，使用<code>xmlns:xlink</code>来定义<code>xlink</code>命名空间。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">xlink:href</span>=<span class="string">&quot;https://example.com&quot;</span>&gt;</span>My Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就能够使用<code>xlink:href</code>属性而不再出现命名空间错误。</p><p>但是在标签价下列类似的属性的时候就会出现问题,</p><p>在添加  xlink:herf=”${}”是会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error on line 9 at column 64: Namespace prefix xlink for href on ProviderSite is not defined</span><br><span class="line">&lt;?xml-stypos copiable-processing-instruction?&gt;</span><br><span class="line">&#x2F;&#x2F;processors.add(new StandardXmlNsTagProcessor(TemplateMode.XML, dialectPrefix));</span><br></pre></td></tr></table></figure><h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><p>参考下列链接</p><p><a href="https://github.com/mxab/thymeleaf-extras-data-attribute">https://github.com/mxab/thymeleaf-extras-data-attribute</a></p><p>xline:url 这种标签</p><p>是否显示特定标签</p><p>最后实现的效果是  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body xlink:url&#x3D;&quot;$&#123;&#39;bar&#39;&#125;&quot; data:msg&#x3D;&quot;#&#123;my.message&#125;&quot; &gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="汉字解析-1"><a href="#汉字解析-1" class="headerlink" title="汉字解析"></a>汉字解析</h2><p>最后，如果你需要在Thymeleaf中解析汉字或其他文本，你可以使用<code>th:utext</code>。这个属性用于在HTML中安全地渲染未经转义的文本，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htmlCopy code</span><br><span class="line">&lt;span th:utext&#x3D;&quot;$&#123;aa.ddd.fdd&#125;&quot;&gt;汉字内容&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p><code>th:utext</code>将<code>$&#123;aa.ddd.fdd&#125;</code>中的文本进行渲染，确保它能正确显示。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>Thymeleaf是一个功能强大的模板引擎，用于生成HTML,XML页面。在使用Thymeleaf时，我们可以轻松解决自定义属性和XML命名空间的问题。请确保在使用XML命名空间属性时正确定义命名空间，以避免出现错误。希望这篇文章对解决Thymeleaf中的这些问题有所帮助。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>奥卡姆剃刀的谎言(转载)</title>
      <link href="8b149922.html"/>
      <url>8b149922.html</url>
      
        <content type="html"><![CDATA[<p>source：<a href="https://mp.weixin.qq.com/s/enIbP-kMe7AqGqeACLM9Fw">奥卡姆剃刀的“谎言”</a></p><p>假如时光倒流，回到梅西来迈阿密国际球队之前，请你做一个预测。</p><p><strong>情境</strong>：迈阿密国际已经连续9场不胜。</p><p><strong>请问：</strong>球王梅西加入球队后，以下哪个更有可能？</p><p>A. 该队在梅西首秀比赛中获胜。</p><p>B. 该队在梅西首秀比赛中获胜，并且主场球迷将会集体高呼球王的名字。</p><p>你会选择A还是B？</p><p>我猜许多人会选择B。</p><p>但事实上，尽管B的情境似乎更符合想象（并且也发生了），但A的概率实际上是更高的。</p><p>因为A包括了B的可能，所以你预测A可能性更大，才是理性的。</p><p>诺奖得主卡尼曼曾经设计过一个类似的实验，大部分人选择了“看似更有可能然而其实概率更小”的选项，他将其称为“<strong>合取谬误</strong>”。</p><p>增加“球迷集体高呼梅西的名字”这一假设，符合人类的想象力和讲故事的本能，但却是一种<strong>假设负荷</strong>。</p><p>假设负荷会降低一件事情发生的概率。</p><p><strong>而过多的假设，正是奥卡姆剃刀所要砍掉的东西。</strong></p><p>美国化学家霍夫曼说：好的理论，就要尽可能地简单，你把它一减再减，直到再减就什么都剩不下为止。</p><p><strong>因为剩下的每一条都是本质性的。</strong></p><p>人生亦如是。</p><p><strong>一</strong></p><p><strong>少做假设，</strong></p><p><strong>而非尽量简单</strong></p><p>大多数人对“奥卡姆剃刀”的理解是错的。</p><p>奥卡姆剃刀的原理经常被简化为“最简单的解释往往是正确的”，但事实上，这个原则的真正意义更为微妙。</p><p>奥卡姆的威廉所说的“Numquam ponenda est pluralitas sine necessitate”，翻译成中文，大意是：</p><p><strong>“不必要时，不要假设多余的东西”。</strong></p><p><strong>勿增实体，“实体”</strong>指的是<strong>假说、解释或模型的组成部分</strong>。</p><p>例如，你在天线里探测到了微波，你应该寻找熟悉的实体来解释这一现象，如雷达、鸽子，而不是增加新的实体如“三体外星人来袭”来解释它。</p><p>所以，“奥卡姆剃刀”的关键是<strong>少做假设，而非尽量简单</strong>。</p><p>“奥卡姆剃刀”并不是一个绝对法则，而是一个指导原则。</p><p>这个原则强调的是，当我们构建理论或解释现象时，应该避免不必要的假设。</p><p>例如，如果两个理论都能够解释同一个观察到的现象，但其中一个理论需要更多的假设，那么奥卡姆剃刀原则建议我们选择假设较少的那个理论。</p><p><strong>例子A：外星人来过的痕迹</strong></p><p><strong>情境</strong>：假设你有一天早上发现自家的花园里有一块草地被压得扁扁的，图案很特别，就像有什么东西压过。你想找出导致这种情况的原因。</p><p><strong>假设1</strong>：昨晚，一只大猫进入了你的花园，在那块草地上玩耍和躺了一会儿。</p><p><strong>假设2</strong>：昨晚，外星人驾驶着飞碟来到地球，选择了你的花园作为着陆点。在这过程中，飞碟稍微触及了那块草地，但由于某种原因它们决定放弃在此停留，然后又飞走了。</p><p>虽然两个假设都可以解释草地被压扁的现象，但显然，假设2需要许多额外的假设（如外星人存在、他们会来地球、他们正好选择了你的花园、他们只是轻轻触碰了草地而没有留下其他痕迹等）。</p><p>而假设1则更为简单，只需要一个常见动物——大猫作为解释。</p><p>根据奥卡姆剃刀原则，我们应该选择假设1作为更可能的解释，因为它更为简洁，没有额外的、不必要的假设。</p><p>但这并不意味着简单的解释总是正确的。事实上，有时候真实的解释可能是复杂的。</p><p>奥卡姆剃刀只是一个指导原则，告诉我们在等同的解释能力下，应该优先选择假设较少、更为简洁的解释。</p><p><strong>例子B：古代文献中的神秘描述</strong></p><p><strong>情境</strong>：在一些古代文献中，有描述关于“飞天的车辆”。</p><p><strong>假设1</strong>：古代文明拥有高度发达的科技，能制造飞行器。</p><p><strong>假设2</strong>：这些描述可能是象征性的，或者是对某些自然现象（如流星、彗星等）的解释。</p><p>虽然第一个假设为我们提供了一个激动人心的画面，即古代文明拥有高科技，但我们没有确凿的证据表明古代文明有这样的技术。</p><p>根据奥卡姆剃刀原则，第二种假设更为合理，因为它基于我们关于古代文明的现有知识和对自然现象的理解。</p><p><strong>二</strong></p><p><strong>奥卡姆剃刀</strong></p><p><strong>7种“谎言”</strong></p><p>奥卡姆剃刀原则在科学、哲学和其他学科中都被广泛采用，它鼓励我们避免不必要的复杂性和假设。</p><p>但同样因此，现实中充满了奥卡姆剃刀的“谎言”，例如：</p><ul><li>各种“复杂生活简单化”的人生鸡汤；</li><li>“像乔布斯那样追求极致简单”的创业箴言；</li><li>聪明人追求简单，傻瓜把问题搞复杂；</li><li>甚至连“头脑简单”也借奥卡姆剃刀大行其道；</li><li>……</li></ul><p>概括而言，大约有如下常见的奥卡姆剃刀的“谎言”。</p><p><strong>谎言1：奥卡姆剃刀是选择最简单的答案</strong></p><p>这是最常见的误读，奥卡姆剃刀原则往往被过度简化为”最简单的解释就是正确的”。</p><p>然而，实际上奥卡姆剃刀并不是选择最简单的答案，而是当解释某一现象时，我们应尽量减少不必要的假设。</p><p>例如，说地球是平的是一个简单的解释，但我们知道这并不正确。</p><p><strong>解读：</strong> 在科学研究中，这意味着选择最能解释数据并且假设最少的模型。</p><p>在日常生活中，这意味着在面对复杂问题时，我们应先考虑最直接、最明显的因素，而不是寻找复杂的解释。</p><p><strong>谎言2：奥卡姆剃刀是绝对的科学原则</strong></p><p>奥卡姆剃刀被误读为在所有情况下都能确定科学决策的绝对法则。然而，它只是一个建议，一个指导原则，用来指导我们优先选择假设更少的解释。</p><p><strong>解读：</strong> 在某些情况下，更复杂的理论或模型可能会提供更准确的预测或更深入的理解。</p><p>因此，我们不能盲目地依赖奥卡姆剃刀，而应结合实际情况进行判断。</p><p>有些人可能会错误地认为，如果一个解释很简单，那么它就不需要证据支持。这是错误的，因为奥卡姆剃刀并不能代替证据的收集和分析。</p><p><strong>谎言3：奥卡姆剃刀就是简化生活</strong></p><p>有些人错误地将奥卡姆剃刀与简化生活的理念相联系。他们误以为奥卡姆剃刀意味着我们应该追求简单的生活方式，避免复杂和混乱。</p><p><strong>解读：</strong> 实际上，奥卡姆剃刀原则在某种程度上可以应用于生活决策，但它并不直接涉及到如何简化生活方式。</p><p>生活有时候应该断舍离，做减法。尤其是去除那些错误的假设–只要拥有了某某东西我就能够过得更好，但事实上并非如此。</p><p>然而，减法人生是一种积极主动的选择，而非又一个堵塞心灵的万能药。</p><p><strong>谎言4：应该尽量避免复杂性</strong></p><p> 有些人可能会误认为，由于奥卡姆剃刀鼓励我们选择最简单的解释，那么我们在生活或工作中也应该尽量避免复杂性。</p><p><strong>解读：</strong> 在某些情况下，我们可能需要面对并处理复杂性，因为某些问题本身就是复杂的，我们不能过于简化它们。</p><p>iPhone的确很简单，然而里面的芯片很复杂。</p><p>简单指的是用户体验，而非工作不复杂。</p><p>所以任正非说，简单留给客户，复杂留给自己。</p><p>乔布斯的确能够挥舞“奥卡姆剃刀”砍来砍去，那是因为他有一群顶级人才，解决复杂性问题。iPhone最初一样有很多样机。</p><p>“选择”是奥卡姆剃刀，但是如果没有“多样性”，哪里来的选择？</p><p><strong>谎言5：奥卡姆剃刀就是“大道至简”</strong></p><p>尤其是在投资领域，人们总是爱说，你看，巴菲特的投资道理多简单？</p><p>那么简单为什么很少有人能做到呢？只是因为不想慢慢变富？</p><p>显然没那么简单。</p><p>就像围棋，规则最简单，但却是最复杂的棋类游戏。</p><p>价值投资的确有极少的假设，这一点复合奥卡姆剃刀的原则。</p><p>然而要做好价值投资并不容易，某些投资人喜欢让自己显得云淡风轻，是因为按捺不住“成神成仙”的优越感。这么做其实误导了许多“普通人”。</p><p><strong>解读：</strong> 越是“简单”的道理，越需要极深的洞见。这仿佛是某种能量守恒。</p><p>正所谓“功不到不为财”，又省力，又省“距离”，从物理上说不通。</p><p>事实上，巴菲特不仅在专业领域有极深的功底，并且过的是一种苦行僧似的生活。</p><p><strong>谎言6：我们应该追求最少的工作量</strong></p><p>这种理解可能会导致人们认为他们应该尽量避免做额外的工作，或者总是选择最少工作量的路径。</p><p><strong>解读：</strong> 实际上，奥卡姆剃刀的原则并不直接涉及到工作量的问题。它是关于如何选择最好的解释或理论，而这并不一定意味着最少的工作量。</p><p>例如，在设计一台机器或编写一个程序时，应尽量减少不必要的组件或代码，而不是简单地减少它们的数量。</p><p>有时候，为了找到最好的解决方案，我们可能需要付出更多的努力和时间。</p><p>牛顿三大定律很简单，而他的《自然哲学数学原理》则很厚。</p><p>就像本文也许很长，但废话很少；而某些评论很短，但每个字都是废话。</p><p><strong>谎言7：奥卡姆剃刀排斥创新</strong></p><p>有人可能误以为奥卡姆剃刀原理抑制新颖和创新的想法，因为这些新颖的想法往往看起来更复杂。</p><p>然而，实际上，如果一个创新的理论提供了更好的解释，即使它比现有的理论更复杂，也是可以接受的。</p><p><strong>三</strong></p><p><strong>默认选项</strong></p><p><strong>致命的假设</strong></p><p>如下话题，是我这两年看到的最为触动的观念之一，就其本质而言，亦和奥卡姆剃刀同源。</p><p>克里斯坦森在《你要如何衡量你的人生》讲了一个案例：</p><p><strong>巴黎迪斯尼乐园的致命假设。</strong></p><p>迪士尼的前三个乐园都很成功，第四个选址是在巴黎郊区，头两年里，他们损失了将近10亿美元。</p><p>复盘时发现，失败源自项目的规划有如下假设：</p><p>每年有1100万游客，平均逗留3天。于是便是用1100万乘以3，设想出每年有3300万人次“游客逗留”，并据此建酒店和基础设施。</p><p>现实呢？第一年的确有接近1100万游客参观迪士尼，但是，平均每个游客逗留的时间只有一天。</p><p>为什么？其他迪士尼乐园有45个游乐设施，人们可以玩儿3天；而巴黎迪士尼乐园只有15个游乐设施，一天就够了</p><p>可是，在决策时，人们默认了每个迪斯尼乐园的游客数据都是一样的。</p><p>正确的做法是，盘点决策时所作的所有默认假设，并且追问：</p><p>“如果这个假设成立，最重要的条件是什么？怎样跟踪落实呢？”</p><p>由是，克里斯坦森为我们分享了一个简单然而宝贵的方法：</p><p><strong>当你要做一项新的决策时，先做一下“测试前提假设”。</strong></p><p>认真问自己，“在哪些前提假设得到验证的条件下，才能证明你的策略是正确的？”</p><p>很多时候，我们都是默认一些选项，然后慢慢就忘记了这些默认选项的假设前提和适用环境。</p><p>拷问自己的观念和决策的默认假设，是奥卡姆剃刀在现实生活中最有效的应用场景。</p><p>事实上，有很多我们犯下的错误，起初看起来很正确，一路也都很正确，然而却是建立在错误的假设基础之上的。</p><p>我们一开始就默认了这些假设，越往后就越不记得来质疑这些假设成立的前提。</p><p><strong>四</strong></p><p><strong>奥卡姆剃刀</strong></p><p><strong>也许是个概率问题</strong></p><p>请你来做一个测试游戏。</p><p>有一个名叫Linda的女性，她关心社会问题，在学校积极参与学生会活动，经常在网上为女性权益发声。请问，下述两种情况，哪一种更可能为真？</p><p>1、Linda是个银行职员；</p><p>2、Linda是个银行职员并且是女权主义者。</p><p>卡尼曼曾经设计过如上实验，结果大部分人都选择了2。</p><p>这似乎有点儿奇怪，因为“1”包括了“2”，当然是“1”为真的可能性更大。</p><p>但是在很多人看来，“2”更符合他们对Linda的印象。</p><p>这个实验显示，人们在做判断时，可能会过度追求具体性和详细性，而忽视了基本的概率原则。</p><p>虽然看起来有点儿绕，这也是一个奥卡姆剃刀原理被误用的例子，即过度增加不必要的假设，而不是选择更简单、更一般的解释。</p><p>并且，越是受过教育的人，甚至是读书越多的聪明人，如果没有经受太多现实世界的捶打，越容易犯这类错误。</p><p>卡尼曼将这种非理性现象称为合取谬误（”联合偏误”）：</p><p><strong>人们在做决策时，往往会错误地认为一个更具体（因此包含更多假设）的事件比一个更一般的事件更可能发生，这与概率论的基本原则相违背。</strong></p><p>从这个角度看，奥卡姆剃刀原理说到底是个概率问题。</p><p>一旦你为原来的解释引入新的因素，或者提出一个新的假设，那么该解释为正确的概率实际上是下降了。</p><p><strong>最大的默认假设，可能就是黑天鹅问题了。</strong></p><p>黑天鹅和奥卡姆剃刀，都告诉我们，所有的假设都有不确定性，应该冠以概率。</p><p>黑天鹅则提醒我们别把那些默认前提当作100%，甚至于你客观地给予了99%的概率，那1%被忽视的结果也可能是致命的。</p><p><strong>五</strong></p><p><strong>用奥卡姆剃刀</strong></p><p><strong>砍掉假设负荷</strong></p><p>在临床医学中，当面对一个病患的症状组合，医生通常首先考虑那些最常见和最可能的解释，即所谓的“<strong>常见疾病常见</strong>”。</p><p>例如，如果一个年轻人有持续的喉咙痛，首先要考虑的可能是扁桃体炎，而不是立即考虑罕见的喉咙肿瘤。</p><p>当然，医生在诊断过程中需要详细询问病史、做全面体检和必要的检查，确保不错过重要的信息。</p><p>在给各种可能性排序时，如果把每个诊断背后所代表的全新假设加起来（统计其数量及概率大小），就可以算出这会造成多大的<strong>假设负荷</strong>。</p><p>每当我们增加新的假设或因素，我们不仅增加了复杂性，还增加了不确定性，因此增加了出错的可能性。通过尽量限制我们的假设数量和引入高概率的因素，我们可以更有可能获得正确的答案。</p><p><strong>例子A：埃及法老图坦卡蒙的死因</strong></p><p><strong>情境</strong>：年轻的法老图坦卡蒙死于公元前1323年，但他的死因一直是个谜。有人提出了各种假设，包括谋杀、疾病和意外。</p><p><strong>假设负荷</strong>：尽管有一些研究建议图坦卡蒙可能是被谋杀的，但近期的研究表明，他可能是因为腿部感染或其他健康问题死亡。</p><p>这个解释有较低的假设负荷，因为它不需要引入复杂的宫廷阴谋或其他外部因素。</p><p><strong>例子B：波尔图蒂事件</strong></p><p><strong>情境</strong>：1970年代，英国发生了一起家庭持续遭受超自然现象骚扰的事件，包括家具自行移动、声音和其他奇怪的现象。</p><p><strong>假设负荷</strong>：尽管一些人认为这是超自然现象，但其他人则认为，这些事件可能是由于自然原因或家中的某个成员故意制造的。</p><p>后来，有证据表明家中的一名少女可能参与了部分事件的制造。</p><p>这种解释具有较低的假设负荷，因为它只需要考虑家庭内部的动机和行为，而不需要涉及超自然的因素。</p><p>更常见的例子是，假如一位平时遭遇家暴的女性不幸遇害，凶手大概率是其老公。</p><p>奥卡姆剃刀原理可以被视为一种有效的逻辑和决策工具，帮助我们在面对复杂和不确定的情况时，尽可能地减少新的假设，聚焦于最可能的解释，从而降低决策的复杂性和不确定性。</p><p>但这并不代表奥卡姆剃刀不重视小概率的可能性。例如本节开头的喉咙痛，假如排在前面的可能性被排除，医生一定会继续考虑排在后面的较小可能性。</p><p>不过，对于普通人而言，假如突然关心起自己的健康，上网查知识来自我诊断，经常会用小概率的可能性把自己吓个半死。</p><p><strong>六</strong></p><p><strong>多个香炉多个鬼</strong></p><p><strong>太多假设不靠谱</strong></p><p>“多个香炉多只鬼”，是妙极的广东俚语，常见于发烧友，指过多设备堆砌反有损音质。</p><p>这句话在某种程度上可以视为奥卡姆剃刀原则的一种生动表达。</p><p>它直接指出了如果我们在解决问题时引入过多的变量或假设，反而可能导致我们分析问题的复杂度增加，使得问题的解决更为困难。</p><p>在此背景下，”多个香炉多个鬼”意味着，如果你对很多事情都进行祈祷和拜祭，那么你也要面对更多的鬼神，如愿的可能性也就降低了。</p><p>这句话用于形容“太多假设不靠谱”，也很贴切。</p><p><strong>所谓不靠谱，就是有些事情，看起来很漂亮，很巧妙，但是有太多假设：假如…假如…</strong></p><p>一个理论、观点或者计划，如果依赖于太多的“假如”，则其实现的可能性和稳定性就会大大降低。</p><p>有些人，有太多资源，人脉丰富，但却很难成事儿。因为他们的逻辑是“整合资源”，可这类事儿和”多个香炉多只鬼”一样，要依赖太多不确定性事情的同时成立。</p><p>每当我听到有人讲起自己的商业计划，只要涉及到两个以上的“香炉”，就会觉得有些虚无飘渺。</p><p>此外，<strong>很多时候，人的错误假设，往往是因为欲望，或者是所谓美好愿望。</strong></p><p>从这个角度看，英文俗语“Don’t count your chickens before they’re hatched”很有道理。</p><p><strong>别在鸡仔们孵出来之前去数你有多少鸡。</strong>这是一个很好的提醒，因为过早的预期可能会让人忽视或低估实际情况的复杂性和不确定性。</p><p>现实中有太多类似的教训了。记得2015年，有个朋友满仓加杠杆，一天就是几千万“收益”，于是便开始算这一波能赚多。结果后来全栽进去了。</p><p>和奥卡姆剃刀一样，上面这句俗语则提醒我们，在事情尚未确定时，我们应避免过多的假设和预期。</p><p>说起来，别说谎，对自己诚实，也有异曲同工之妙：</p><p><strong>你说了一个谎，就要说更多谎。</strong></p><p>就像一个错误的假设，会令假设之上那些不管看起来多正确的事情都变得错误。</p><p>错误的假设，其实是自己骗自己。而且由于自己最懂自己，所以往往骗得很深，很真诚。</p><p>诚实和简单并不一定总是最容易的选择，但它们往往能引导我们走向更健康、更实质的解决方案。</p><p><strong>七</strong></p><p><strong>复杂模型</strong></p><p><strong>过拟合风险</strong></p><p>冯·诺依曼在一次会议上，听到某物理研究员使用复杂模型，试图论证实验数据点都落在同一条曲线上，“所以”符合模型预期。</p><p>冯·诺依曼调侃道：你还不如说这些点都在同一个平面上……</p><p>这位科学大师戏谑地留下一个经典话语：</p><p><strong>“给我四个参数，我可以画出一头大象；再给我一个，我可以让它鼻子摇摆。”</strong></p><p>1953年，年轻的康奈尔教授戴森，与学生用赝标介子理论得到的计算结果与费米的实验相吻合。</p><p>激动的戴森马上找到费米分享，但费米批评说：“你的计算既没有清晰的物理图像，也不是精确的数学体系。”</p><p>戴森不解，费米问他：“你的计算用了几个参数？”</p><p>戴森说：“四个。”</p><p>费米笑道：“我朋友冯·诺依曼说过，四个参数可以拟合大象，五个还能摇鼻子呢。”</p><p>戴森听后失落，决定调整研究方向。</p><p>冯·诺依曼的故事强调了，给予一个模型过多的参数，它有能力拟合任何数据，但这并不意味着模型具有真实的预测力或对现实世界有深入的理解。</p><p><img src="https://telegra.ph/file/b53b7a33bde1c25a8ea88.png" alt="img"></p><p>事实上，当一个模型有太多的参数，它可能过于复杂，导致过拟合。这意味着它可能在已知数据上的表现很好，但在新的、未知的数据上表现很差。</p><p>奥卡姆剃刀原则恰好警告我们避免不必要的复杂性，因为额外的复杂性可能并不带来更好的预测能力。</p><p>从冯·诺依曼的大象，很容易想起毕加索的牛。</p><p><img src="https://telegra.ph/file/8162242de6c82bed17418.jpg" alt="img"></p><p>毕加索的抽象化减法，就像是对现实世界事物的一种简化和抽象。抽象化的过程中，我们抛弃了许多细节，而保留了最基本、最核心的特征，从而帮助我们更好地理解和表达事物的本质。</p><p>这种思想也与奥卡姆剃刀原则相符，奥卡姆剃刀原则鼓励我们在解决问题时，尽可能地简化我们的理论或假设，只保留最基本和必要的部分。</p><p>实在论者相信存在普遍性的概念，如柏拉图的理念或亚里士多德的普遍性，认为物体的性质有独立的实体存在。</p><p>例如，牛有“牛性”，樱桃有“樱桃性”，而人成为父亲是因为他们具有“父性”。</p><p>然而，奥卡姆反对这种观点，他提出，普遍性只是我们为同类事物所用的词语。这种思想称为唯名论。</p><p>奥卡姆主张，不必为每个概念增加一个实体。例如，父亲之所以是父亲，仅因他有孩子，无需其他复杂解释。</p><p><strong>与过拟合的大象相反，“抽象牛”具有更好的泛化能力。</strong></p><p><strong>泛化 (Generalization)：</strong>是一个过程，通过它我们从特定的例子或经验中提炼出普适性的原则或规则。</p><p>这使我们能够将在某个情境下学到的知识应用到新的、类似的情境中。</p><p>毕加索的抽象牛，更接近牛的本质，也几乎适用于所有的牛。</p><p>虽然只有几根线条，但它们都在诉说着牛的特征，尽管这些线条只是对复杂实物的一种简化，但却足以帮助我们理解和认识牛这个生物。</p><p><strong>八</strong></p><p><strong>成功的“秘诀”</strong></p><p><strong>精确的模糊</strong></p><p>有位朋友对我说，当今短视频创作的流量密码是：</p><p>只要做到以下三点，普通人也能翻身逆袭……</p><p>由于很不幸《人生算法》一书也被归类为成功学，所以我也有过数次被读者追问“你能不能给我具体的方法来实现成功”的经历。</p><p>某种意义上，“成功学”最大的缺陷就是过拟合。</p><p>当你想健身，你可能会模仿某健身达人：早起跑步、严格饮食。</p><p>这就像“过拟合”：盲目复制特定的成功模式，但可能并不适合你。</p><p>如果你从多位达人那汲取智慧，形成如“持续锻炼”、“均衡饮食”等原则，这更像“泛化”，找到适合自己的方法。</p><p><strong>泛化</strong>和<strong>过拟合</strong>也是机器学习和统计建模中常常对立的两个概念。</p><p><strong>泛化（generalization）是模型对新的、未见过的数据的表现能力。</strong></p><p>一个有良好泛化能力的模型能够很好地应用于未见过的数据，即使这些数据在训练时并未出现。</p><p><strong>过拟合（overfitting）则是指模型过度复杂，以至于开始“记忆”训练数据中的噪声或异常值，而不是从数据中学习其内在规律。</strong></p><p>这样的模型虽然在训练数据上的表现很好，但在未见过的新数据上往往表现糟糕。</p><p>所以，我们可以说过拟合是泛化的反面：</p><p>一方面，我们希望模型能尽可能地学习到训练数据中的信息，也就是要尽量减少偏差（bias）；</p><p>另一方面，我们又希望模型不要过度复杂，能够适应新的数据，也就是要尽量减少方差（variance）。</p><p>这就是所谓的偏差-方差权衡（bias-variance tradeoff）。</p><p>为了得到一个好的模型，我们希望找到偏差和方差之间的平衡点，从而实现“模糊的精确”与“精确的模糊”之间的平衡，这也是机器学习中的核心挑战。</p><p><img src="https://telegra.ph/file/15d31350c5903af35b129.png" alt="img"></p><p>奥卡姆剃刀原则在这里也有应用。它鼓励我们选择假设最少、最简单的模型，从而避免过拟合的问题，提高模型的泛化能力。</p><p><strong>九</strong></p><p><strong>“KISS”原则</strong></p><p><strong>以实现复制和适应性</strong></p><p>在工程界，奥卡姆剃刀原则被认为是KISS（Keep it simple，stupid，保持简单，蠢蛋），美国海军在上世纪60年代采用了这一设计法则。</p><p>由此实现的价值大约有两个关键点：</p><p><strong>1、提升复制的效率，降低在复制过程中出错的可能性；</strong></p><p><strong>2、提升适应复杂环境的性能。</strong></p><p>以上这两点，往学术话题靠，就是达尔文理论的生命的复制和生存；往商业话题靠，则是商品与服务的规模效应和竞争优势。</p><p>奥卡姆剃刀原则推崇的是简单和清晰的思考方式，强调做出最少的假设，选择最简洁的解释或理论。</p><p>当应用这个原则时，我们通常会得到一个较为简单和直观的系统或模型，这种模型有助于我们清晰理解现象，并且在我们需要做出改变来适应新环境时，这种简单的模型更容易进行修改和调整。</p><p>与此同时，<strong>健壮性</strong>是系统或模型能够在不确定环境中稳定运行的能力。当环境发生变化时，一个健壮的系统能够有效地适应新环境，继续稳定运行。</p><p>因此，奥卡姆剃刀原则和健壮性有很大的关联。在奥卡姆剃刀原则指导下构建的简单系统，往往更健壮，因为它们的简单性使得它们更容易适应环境的变化。</p><p>再说回工程和商业。</p><p>传统的汽车生产通常包含许多零部件的组装，这意味着在生产过程中存在大量的工艺步骤和可能的出错点。</p><p>而一体化车身的设计则能够减少这些步骤，简化生产流程。例如，特斯拉Model Y就采用了全铝一体化车身，这大大减少了车身生产所需的零部件数量和组装步骤，提高了生产效率。</p><p>另一方面，一体化车身的设计也可能带来更好的车辆性能。比如，一体化车身可以提供更强的刚性和强度，提高车辆的安全性能。</p><p>同时，由于零部件数量的减少，车辆的重量也可能降低，这有助于提高电动汽车的续航里程。</p><p>当然，一体化设计也有其挑战，例如设计和制造过程的复杂性可能增加，需要更高的精度和技术水平。</p><p><strong>所以，每一次奥卡姆剃刀式的简化，都对应着某个更高维度的“复杂”。</strong></p><p>就像特斯拉需要通过不断的技术创新和生产工艺的优化，实现这种“简洁”的设计。</p><p><img src="https://telegra.ph/file/76573c12f5f9bfa577382.jpg" alt="img"></p><p>的确，英国生物学家约翰乔伊·麦克法登在《生活很简单》一书中说，现代性的各个领域都以简洁为宗旨，奥卡姆剃刀是现代世界的基础。</p><p>“从约翰·凯奇的极简主义音乐，到柯布西耶的建筑、贝克特简洁的文字、平板电脑光滑的边缘，现代文化潜心于简洁”。</p><p><strong>可是，在现实世界里，简洁往往需要付出不简单的代价。</strong></p><p><strong>十</strong></p><p><strong>保持简单</strong></p><p><strong>但不能过于简单</strong></p><p>生活并没有那么简单。</p><p>如何定义“简单”，是个很复杂的话题。</p><p>例如，欧拉公式 e^(iπ) + 1 = 0 被广泛认为是一个非常”简单”而优雅的公式，因为它只用了五个基本的数学常数就表达出了一个深刻的数学关系。</p><p>但有多少人能搞懂这个简单呢？</p><p>在奥卡姆剃刀原理的背景下，”简单”通常被理解为假设的数量或复杂性的减少。</p><p>然而，这个概念可能会被误解或误用，下面列出了一些可能的混淆：、</p><p><strong>1、简单不等于简陋：</strong>在追求简洁的过程中，我们不能忽视必要的复杂性。</p><p>一个理论应该足够复杂，能够解释所有相关的观察结果，而不仅仅是其中的一部分。</p><p><strong>2、简单不等于容易理解：</strong>有时候，一个理论可能需要较少的假设，但它的内涵可能非常深刻，需要专业知识才能理解。</p><p>例如，在物理学中，量子力学是一个需要相对较少的基本假设就能解释大量现象的理论，但它并不容易理解。</p><p><strong>3、简单不等于没有变化或动态：</strong>有些人可能会将”简单”理解为静态或不变的，但这并不总是正确的。</p><p>一个理论可以包括动态的元素或变化的过程，同时仍然保持相对的简洁。</p><p><strong>4、简单不等于总是正确：</strong>尽管奥卡姆剃刀原理鼓励我们选择最简单的解释，但这并不意味着最简单的解释总是正确的。</p><p>在许多情况下，更复杂的理论可能会提供更准确的预测或更深入的理解。</p><p>因此，在使用奥卡姆剃刀原理时，我们需要谨慎地理解和应用”简单”这个概念，避免过度简化或误用。</p><p>所以，认为奥卡姆剃刀原则，是要简化生活，过简单的人生，其实只是一种鸡汤话的说法。</p><p>因为奥卡姆剃刀的“简单”，需要极深的洞见，和极高的成本。</p><p>也许有人会说：尊重常识就可以了嘛。</p><p>可是，常识多么昂贵，多么稀缺啊。</p><p>爱因斯坦说：“Everything should be made as simple as possible, but no simpler.” </p><p>这句话强调了简洁和复杂之间的平衡，这也是奥卡姆剃刀原理的一个重要组成部分。</p><p>巴菲特的价值投资，在某种意义上也是奥卡姆剃刀，他将所有的评价标准归结于：</p><p><strong>在企业生存周期里，总共能赚多少钱？折现到现在值多少钱？能够有多少安全边际（也是概率问题）？</strong></p><p>但是，巴菲特的“简单”，事实上非常不简单，他为自己的投资帝国构建了一重又一重的堡垒。</p><p>当我们说“简单”时，我们实际上是在讨论一种能力——那就是从复杂性中提炼出核心的、最关键的因素。</p><p>巴菲特所展现的“简单”其实是经过深入思考和分析后得出的结果，而这背后的复杂性和努力常常被人们忽视。</p><p>奥卡姆剃刀原则与凯恩斯的金融理论都强调简洁性和实用性。凯恩斯将金融回报分为基于资产价值的“投资”和基于市场心态的“投机”。</p><p>聪明如凯恩斯，一辈子踩过几次大坑才磨好自己的奥卡姆剃刀。</p><p>脱离基本功的“简单”，可能只是一种玄学。</p><p>当然，运气可以很简单哈，人的一生很短，一个好运气也够撑得住一生了。</p><p><strong>小结</strong></p><p><strong>奥卡姆剃刀使用指南</strong></p><p>好了，我该用剃刀为本文收尾了。</p><p>1、有选择的才叫简单生活。那些原本就没选择了，然后说过简单生活，不可信。否则就像太监说自己要禁欲。</p><p>也许人生的奥卡姆剃刀，大多是被迫的主动选择吧。</p><p>2、任正非说的简单是给客户的，企业自己则要付出很大的代价。</p><p>3、对于个体而言，遵循常识，可以让生活很简单。这类特性需要有一个完美的家庭和童年来支撑。</p><p>4、乔布斯是一个众所周知的极简主义者，他的产品设计、商业战略，乃至他的个人生活方式，都以简单和易于理解为核心。他对简单的追求为苹果公司带来了众多创新和成功的产品，例如iPod、iPhone、iPad等。</p><p>然而，他是用一流人才，然后让自己的剃刀可以挥舞。</p><p>乔布斯的简单，和他的简单衣服一样，非常昂贵。</p><p>5、<strong>认知升维，行动降维。</strong></p><p>“认知升维”，是指只有全面理解问题，我们才能找到最有效的解决方案。</p><p>然后，当我们实际行动解决问题时，我们需要尽可能地”降维”，即简化行动，专注于最重要和最核心的任务，而不是让自己陷入不必要的细节或复杂性。这种方法可以提高我们的效率，并减少执行的难度。</p><p>这个原则很好地体现了奥卡姆剃刀原理的精神。在理解问题时，我们需要尽可能全面和深入；而在行动时，我们应该尽可能简化和直接。这种思考和行动的方式可以帮助我们更有效地处理复杂的问题和任务。</p><p>6、<strong>奥卡姆剃刀有时候是做除法，例如减少维度；有时候是做减法，例如减少假设。</strong></p><p>7、<strong>第一性</strong>和奥卡姆剃刀的关系千丝万缕。</p><p>牛顿说：对于自然万物的成因，我只认可那些既真实又足以解释其现象的原因，其他皆属多余。</p><p>这里的第一性，既有科学的，也有信仰的。 牛顿认为宇宙的秩序和规律是上帝创造的，科学研究实际上就是去探寻上帝创造的自然规律。</p><p>8、有人说，我想明白了，但就是下不了手，对自己不够狠，自己的奥卡姆剃刀不够锋利。</p><p>但真相是，上面说的“下不了手”，其实就是因为没有想明白。</p><p>9、奥卡姆剃刀认为<strong>假设应该具有可证伪性</strong>。</p><p>奥卡姆剃刀强调我们应该选择那些可以通过经验检验的假设。一个理论如果无法被证伪，那么它就缺乏科学价值。</p><p>我在网上看到一个人的签名和有个性：</p><p><strong>人生没有那么多的假设，现实是一个一个真实的耳光。</strong></p><p>的确，当世界处于下行的周期时，是诸多假设一个个破灭之际。</p><p>“不要浪费了危机”这种提法挺让人烦的–要不我的危机您也拿去？</p><p>但如果我们被迫要为人生做减法，也许可以使用如下奥卡姆剃刀原则：</p><p><strong>方法一、专注于基本的原则和价值观。</strong></p><p>去除那些虚妄的东西，回归真实，回归自我，回归本质。</p><p>此外，在面对复杂的决策时，我们可以将自己的原则和价值观作为决策的基础。</p><p>这可以帮助我们减少不确定性和混乱，也可以保持我们的行动和价值观的一致性。</p><p><strong>方法二、简化生活。</strong></p><p>尽可能减少不必要的物质和精神负担。</p><p>例如，我们可以定期清理不再使用的物品，也可以通过冥想或者其他方式来降低我们的心理压力。</p><p><strong>方法三、减少不必要的假设。</strong></p><p>我们不能假设，未来几十年和过去几十年一样。</p><p>也不能假设，所有跌下去的东西都可能涨回来。</p><p><strong>方法四、直接面对问题。</strong></p><p>当我们面临问题时，我们应该直接面对它，而不是寻找复杂的解决方案或者回避问题。</p><p>通过直接解决问题，我们可以避免不必要的复杂性，并且更快地达到我们的目标。</p><p>概括而言：<strong>与其被生活剃，不如自己剃。</strong></p><p>此外，也许<strong>我们需要习惯于接受失去</strong>。</p><p>这原本是生命和时光的本质，且并不可怕。</p><p>犹如侘寂所欣赏的不完美、有瑕疵和不长久，并对自然的流转、事物的暂时性和衰老持有敬意。</p><p><strong>通过主动失去而得到，经由复杂达至简洁，消除过多假设而拥抱现实的真相–</strong></p><p><strong>奥卡姆剃刀很残酷，但也足够温柔。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>索引入门和常见索引介绍</title>
      <link href="5d8e928a.html"/>
      <url>5d8e928a.html</url>
      
        <content type="html"><![CDATA[<h1 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉平衡树-avt"><a href="#二叉平衡树-avt" class="headerlink" title="二叉平衡树(avt)"></a>二叉平衡树(avt)</h3><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><h1 id="geohash"><a href="#geohash" class="headerlink" title="geohash"></a>geohash</h1><h1 id="R树"><a href="#R树" class="headerlink" title="R树"></a>R树</h1><h1 id="空间填充曲线"><a href="#空间填充曲线" class="headerlink" title="空间填充曲线"></a>空间填充曲线</h1><p>后续补充</p><h1 id="Quad-Trees-四叉树"><a href="#Quad-Trees-四叉树" class="headerlink" title="Quad-Trees(四叉树)"></a>Quad-Trees(四叉树)</h1><h1 id="KD树"><a href="#KD树" class="headerlink" title="KD树"></a>KD树</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>modelmap的使用和部分配置介绍</title>
      <link href="8c1763d5.html"/>
      <url>8c1763d5.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/modelmapper/modelmapper">ModelMapper</a> 是一个智能的Java对象映射库，它提供了一种方便高效的方式来映射不同模型之间的对象，使得在不同模型之间转换数据变得更加容易。</p><p>使用ModelMapper，开发者可以使用简单直观的API定义对象之间的映射关系。它支持不同属性名称或类型之间的映射，使用自定义转换器处理复杂映射，甚至可以映射嵌套对象。</p><p>ModelMapper 的一个关键特点是它能够根据属性的名称和类型智能地确定如何进行映射，这消除了开发者为每个属性编写手动映射代码的需求，节省了时间和精力。ModelMapper 还提供了条件映射等高级功能，允许开发者定义属性何时应该映射或不映射的规则。</p><p>除了映射能力，ModelMapper 还提供其他有用的功能。它支持映射生命周期钩子，允许开发者在映射过程之前或之后执行自定义操作。它还提供对象的深度克隆功能，在处理复杂对象层次结构时非常有用。</p><p>通过使用ModelMapper，开发者可以提高映射过程的效率，降低错误的风险。它自动化了映射对象的繁琐任务，使开发者能够专注于应用程序的其他方面。它还促进了代码的可重用性，因为映射配置可以在应用程序的不同部分轻松复用。</p><p>总的来说，ModelMapper 是一个强烈推荐的Java对象映射库，适用于处理对象映射。它的智能映射能力和用户友好的API使其成为在不同表示之间转换数据的宝贵资产。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以下是一个简单的示例，展示了如何使用ModelMapper进行对象映射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ModelMapper实例</span></span><br><span class="line">ModelMapper modelMapper = <span class="keyword">new</span> ModelMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建源对象</span></span><br><span class="line">SourceObject sourceObject = <span class="keyword">new</span> SourceObject();</span><br><span class="line">sourceObject.setName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">sourceObject.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将源对象映射到目标对象</span></span><br><span class="line">TargetObject targetObject = modelMapper.map(sourceObject, TargetObject.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出目标对象的属性</span></span><br><span class="line">System.out.println(targetObject.getName()); <span class="comment">// 输出：John</span></span><br><span class="line">System.out.println(targetObject.getAge()); <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们使用ModelMapper创建了一个源对象和目标对象，并将源对象的属性映射到目标对象。通过调用<code>map</code>方法，ModelMapper会自动根据属性的名称和类型进行映射。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>智能映射：ModelMapper能够根据属性的名称和类型智能地确定如何进行映射，无需编写冗长的手动映射代码。</li><li>灵活的API：ModelMapper提供了简单直观的API，使开发者能够轻松定义对象之间的映射关系。</li><li>复杂映射支持：ModelMapper支持处理复杂的映射场景，包括不同属性名称或类型的映射，以及嵌套对象的映射。</li><li>高级功能：ModelMapper提供了条件映射、映射生命周期钩子和对象深度克隆等高级功能，增强了映射的灵活性和可控性。</li><li>提高效率：通过自动化映射过程，ModelMapper能够提高映射的效率，减少重复劳动，让开发者能够专注于其他方面的工作。</li></ul><p>无论您是在开发小型项目还是大型应用程序，ModelMapper都能极大地简化对象映射的工作流程，提高开发效率和代码可维护性。不妨尝试一下，体验它为您的开发过程带来的便利和高效。</p><p><a href="https://github.com/modelmapper/modelmapper">ModelMapper</a> 是一个智能的Java对象映射库，它提供了一种方便高效的方式来映射不同模型之间的对象，使得在不同模型之间转换数据变得更加容易。</p><p>使用ModelMapper，开发者可以使用简单直观的API定义对象之间的映射关系。它支持不同属性名称或类型之间的映射，使用自定义转换器处理复杂映射，甚至可以映射嵌套对象。</p><p>ModelMapper 的一个关键特点是它能够根据属性的名称和类型智能地确定如何进行映射，这消除了开发者为每个属性编写手动映射代码的需求，节省了时间和精力。ModelMapper 还提供了条件映射等高级功能，允许开发者定义属性何时应该映射或不映射的规则。</p><p>除了映射能力，ModelMapper 还提供其他有用的功能。它支持映射生命周期钩子，允许开发者在映射过程之前或之后执行自定义操作。它还提供对象的深度克隆功能，在处理复杂对象层次结构时非常有用。</p><p>通过使用ModelMapper，开发者可以提高映射过程的效率，降低错误的风险。它自动化了映射对象的繁琐任务，使开发者能够专注于应用程序的其他方面。它还促进了代码的可重用性，因为映射配置可以在应用程序的不同部分轻松复用。</p><p>总的来说，ModelMapper 是一个强烈推荐的Java对象映射库，适用于处理对象映射。它的智能映射能力和用户友好的API使其成为在不同表示之间转换数据的宝贵资产。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>以下是一个简单的示例，展示了如何使用ModelMapper进行对象映射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ModelMapper实例</span></span><br><span class="line">ModelMapper modelMapper = <span class="keyword">new</span> ModelMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建源对象</span></span><br><span class="line">SourceObject sourceObject = <span class="keyword">new</span> SourceObject();</span><br><span class="line">sourceObject.setName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">sourceObject.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将源对象映射到目标对象</span></span><br><span class="line">TargetObject targetObject = modelMapper.map(sourceObject, TargetObject.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出目标对象的属性</span></span><br><span class="line">System.out.println(targetObject.getName()); <span class="comment">// 输出：John</span></span><br><span class="line">System.out.println(targetObject.getAge()); <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们使用ModelMapper创建了一个源对象和目标对象，并将源对象的属性映射到目标对象。通过调用<code>map</code>方法，ModelMapper会自动根据属性的名称和类型进行映射。</p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ul><li>智能映射：ModelMapper能够根据属性的名称和类型智能地确定如何进行映射，无需编写冗长的手动映射代码。</li><li>灵活的API：ModelMapper提供了简单直观的API，使开发者能够轻松定义对象之间的映射关系。</li><li>复杂映射支持：ModelMapper支持处理复杂的映射场景，包括不同属性名称或类型的映射，以及嵌套对象的映射。</li><li>高级功能：ModelMapper提供了条件映射、映射生命周期钩子和对象深度克隆等高级功能，增强了映射的灵活性和可控性。</li><li>提高效率：通过自动化映射过程，ModelMapper能够提高映射的效率，减少重复劳动，让开发者能够专注于其他方面的工作。</li></ul><p>无论您是在开发小型项目还是大型应用程序，ModelMapper都能极大地简化对象映射的工作流程，提高开发效率和代码可维护性。不妨尝试一下，体验它为您的开发过程带来的便利和高效。</p><p><a href="https://github.com/modelmapper/modelmapper">ModelMapper</a> 是一个智能的Java对象映射库，它提供了一种方便高效的方式来映射不同模型之间的对象，使得在不同模型之间转换数据变得更加容易。</p><p>使用ModelMapper，开发者可以使用简单直观的API定义对象之间的映射关系。它支持不同属性名称或类型之间的映射，使用自定义转换器处理复杂映射，甚至可以映射嵌套对象。</p><p>ModelMapper 的一个关键特点是它能够根据属性的名称和类型智能地确定如何进行映射，这消除了开发者为每个属性编写手动映射代码的需求，节省了时间和精力。ModelMapper 还提供了条件映射等高级功能，允许开发者定义属性何时应该映射或不映射的规则。</p><p>除了映射能力，ModelMapper 还提供其他有用的功能。它支持映射生命周期钩子，允许开发者在映射过程之前或之后执行自定义操作。它还提供对象的深度克隆功能，在处理复杂对象层次结构时非常有用。</p><p>通过使用ModelMapper，开发者可以提高映射过程的效率，降低错误的风险。它自动化了映射对象的繁琐任务，使开发者能够专注于应用程序的其他方面。它还促进了代码的可重用性，因为映射配置可以在应用程序的不同部分轻松复用。</p><p>总的来说，ModelMapper 是一个强烈推荐的Java对象映射库，适用于处理对象映射。它的智能映射能力和用户友好的API使其成为在不同表示之间转换数据的宝贵资产。</p><p><a href="https://github.com/modelmapper/modelmapper/issues/198">https://github.com/modelmapper/modelmapper/issues/198</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 完全匹配</span><br><span class="line"> modelMapper.getConfiguration().setFullTypeMatchingRequired(true);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 匹配策略使用严格模式</span><br><span class="line"> modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Lettuce客户端或者redis连接变化时的触发事件</title>
      <link href="a337c28a.html"/>
      <url>a337c28a.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisConnectionFactory <span class="title">redisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisStandaloneConfiguration config = <span class="keyword">new</span> RedisStandaloneConfiguration();</span><br><span class="line">        config.setHostName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        config.setPort(<span class="number">11</span>);</span><br><span class="line">        config.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LettuceConnectionFactory(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">        GenericJackson2JsonRedisSerializer redisSerializer = <span class="keyword">new</span> GenericJackson2JsonRedisSerializer();</span><br><span class="line">        template.setValueSerializer(redisSerializer);</span><br><span class="line"></span><br><span class="line">        template.setHashValueSerializer(redisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisCacheConfiguration cacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(</span><br><span class="line">                        <span class="keyword">new</span> GenericJackson2JsonRedisSerializer())).disableCachingNullValues();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(redisConnectionFactory).cacheDefaults(cacheConfiguration).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时实现 <strong>RedisConnectionStateListener</strong>  保证在onRedisConnected,onRedisDisconnected,onRedisExceptionCaught下运行时的调用注意下列触发事件需要在RedisClient 下注册进去,保证后续的调用成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class CustomRedisConnectionStateListener implements RedisConnectionStateListener &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onRedisConnected(RedisConnection connection) &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理连接成功的逻辑</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onRedisDisconnected(RedisConnection connection) &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理连接断开的逻辑</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onRedisExceptionCaught(RedisConnection connection, Throwable exception) &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理连接异常的逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows下bat脚本文件编写</title>
      <link href="282c310f.html"/>
      <url>282c310f.html</url>
      
        <content type="html"><![CDATA[<p>先给个实例来表示 使用杀死 指定端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set default_port&#x3D;8080</span><br><span class="line">set &#x2F;p port&#x3D;type need killed port (press enter for default port %default_port%): %&#x3D;%</span><br><span class="line">if &quot;%port%&quot;&#x3D;&#x3D;&quot;&quot; set &quot;port&#x3D;%default_port%&quot;</span><br><span class="line">rem set &#x2F;p port&#x3D;type need killed port:</span><br><span class="line"></span><br><span class="line">for &#x2F;f &quot;tokens&#x3D;5 delims&#x3D; &quot; %%a IN (&#39;netstat -a -n -o ^| findstr :%port%.*LISTENING&#39;) do (</span><br><span class="line">  set pid&#x3D;%%a</span><br><span class="line">)</span><br><span class="line">if not defined pid (</span><br><span class="line">  echo not found port %port%</span><br><span class="line">) else (</span><br><span class="line">  taskkill &#x2F;F &#x2F;pid %pid%</span><br><span class="line">  echo already kill  %port%</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set &#x2F;p port&#x3D;type need killed port:</span><br><span class="line">for &#x2F;f &quot;tokens&#x3D;5 delims&#x3D; &quot; %%a IN (&#39;netstat -a -n -o ^| findstr :%port%.*LISTENING&#39;) do (</span><br><span class="line">  set pid&#x3D;%%a</span><br><span class="line">)</span><br><span class="line">if not defined pid (</span><br><span class="line">  echo not found port %port%</span><br><span class="line">) else (</span><br><span class="line">  taskkill &#x2F;F &#x2F;pid %pid%</span><br><span class="line">  echo already kill  %port%</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set &#x2F;p port&#x3D;type need killed port:</span><br><span class="line">for &#x2F;f &quot;tokens&#x3D;5 delims&#x3D; &quot; %%a IN (&#39;netstat -a -n -o ^| findstr :%port%.*LISTENING&#39;) do (</span><br><span class="line">  set pid&#x3D;%%a</span><br><span class="line">)</span><br><span class="line">if not defined pid (</span><br><span class="line">  echo not found port %port%</span><br><span class="line">) else (</span><br><span class="line">  taskkill &#x2F;F &#x2F;pid %pid%</span><br><span class="line">  echo already kill  %port%</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>postgresql查询表结构和表字段已经合并多个空间类型geometry的表</title>
      <link href="eadc1bcb.html"/>
      <url>eadc1bcb.html</url>
      
        <content type="html"><![CDATA[<p>现在有个需要查询postgresql下表的信息同时统计表下的geometry的数目和对应类型,如果有多个geometry需要合并为一条返回.下面是查询的步骤和考虑.</p><ol><li>查询pg_statio_all_tables </li></ol><blockquote><p> SELECT * FROM  pg_catalog.pg_statio_all_tables WHERE schemaname = ‘public’</p></blockquote><p>上面SQL主要是查询catalog下面的目录在public为schema下的表数据</p><ol start="2"><li>查询information_schema.tables</li></ol><blockquote><p>SELECT * FROM  information_schema.tables WHERE table_schema = ‘public’ ;</p></blockquote><p>上面的SQL其实类似但是整体条SQL会包含很多 内置的表非常不考虑使用</p><ol start="3"><li>查询geometry_columns </li></ol><blockquote><p>select f_table_name ,type,COUNT(f_table_name) as geomcount from geometry_columns WHERE f_table_schema = ‘public’  GROUP BY f_table_name ;</p></blockquote><p>是查询对应的 geometry_columns  表下记录的geometry的字段和对应的类型(点,线,面,多点…等)</p><ol start="4"><li>联合查询 pg_catalog.pg_statio_all_tables 和geometry_columns </li></ol><blockquote><p>SELECT<br>    gc.type AS geo_type,<br>    pg_statio_all_tables.relname,<br>    obj_description(relid) AS description,<br>    pg_total_relation_size(relid) / pg_column_size(relid::regclass) AS data_size,<br>    COUNT(<em>) as num_duplicates<br>FROM<br>    pg_catalog.pg_statio_all_tables<br>    LEFT OUTER JOIN geometry_columns AS gc ON gc.f_table_name = relname<br>WHERE schemaname = ‘public’<br>GROUP BY geo_type, relname<br>HAVING COUNT(</em>) &gt; 1;</p></blockquote><p>这个结果只能过滤 一个表有多个geometry的表不符合要求</p><p>到这一步开始是考虑联合查询,不论是左连接 还是右连接查询</p><blockquote><p>SELECT f_table_name, MAX(type) AS type ,COUNT(type) geomcount<br>FROM geometry_columns   WHERE f_table_schema = ‘public’   GROUP BY f_table_name</p></blockquote><p>查询 geometry_columns    过滤需要用到 MAX函数,而不是distinct .</p><p>distinct 的这种方式例子如下</p><blockquote><p>SELECT f_table_name, type, COUNT(*) as count<br>FROM (<br>    SELECT DISTINCT ON (f_table_name) f_table_name, type<br>    FROM geometry_columns<br>    ORDER BY f_table_name, type<br>) subquery<br>GROUP BY f_table_name;</p></blockquote><p>查询结果其实也是会重复,而且拿不到重复的的geometry的type不合适.</p><ol start="5"><li>最终版方式</li></ol><blockquote><p>SELECT<br>    gc.type AS geo_type,<br>    pg_statio_all_tables.relname,<br>    obj_description(relid) AS description,<br>    pg_total_relation_size(relid) / pg_column_size(relid::regclass) AS data_size,<br>          gc.geomcount<br>FROM<br>    pg_catalog.pg_statio_all_tables<br>    LEFT OUTER JOIN (SELECT f_table_name,<br>       MAX(type) AS type ,COUNT(type) geomcount<br>FROM geometry_columns  GROUP BY f_table_name ) AS gc ON gc.f_table_name = relname<br>WHERE schemaname = ‘public’ </p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>删除自动添加的美式键盘</title>
      <link href="881d194.html"/>
      <url>881d194.html</url>
      
        <content type="html"><![CDATA[<p>其实window默认是可以删除美式键盘的,比较笨的方式是使用第三方的中文输入法可以管理</p><h2 id="1-初级方式"><a href="#1-初级方式" class="headerlink" title="1.初级方式"></a>1.初级方式</h2><p>比如这种</p><p><img src="../img/image-20230604162718487.png" alt="image-20230604162718487"></p><p>如果这种删除不了可以考虑添加美式键盘然后在删除</p><h2 id="2-添加英文-美式-再删除"><a href="#2-添加英文-美式-再删除" class="headerlink" title="2. 添加英文(美式)再删除"></a>2. 添加英文(美式)再删除</h2><p><img src="../img/image-20230604162844278.png" alt="image-20230604162844278"></p><h2 id="3-其他软件自动添加"><a href="#3-其他软件自动添加" class="headerlink" title="3. 其他软件自动添加"></a>3. 其他软件自动添加</h2><p>在window平台会自动添加美式输入法,比如一些英文游戏steam上的,我这边是又有装了 Windows11平台的资源管理器拓展 explorer patcher ,它会自动添加美式输入法,考虑卸载对应软件:),</p><p>使用这两个文件</p><p>Remove_en-US.bat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">control intl.cpl,, &#x2F;f:&quot;%CD%\Remove_en-US.xml&quot;</span><br></pre></td></tr></table></figure><p>Remove_en-US.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;gs:GlobalizationServices xmlns:gs&#x3D;&quot;urn:longhornGlobalizationUnattend&quot;&gt;</span><br><span class="line">    &lt;!--User List--&gt;</span><br><span class="line">    &lt;gs:UserList&gt;</span><br><span class="line">        &lt;gs:User UserID&#x3D;&quot;Current&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;gs:UserList&gt;</span><br><span class="line">    &lt;!--input preferences--&gt;</span><br><span class="line">    &lt;gs:InputPreferences&gt;</span><br><span class="line">        &lt;!--add en-US keyboard input--&gt;</span><br><span class="line">        &lt;gs:InputLanguageID Action&#x3D;&quot;add&quot; ID&#x3D;&quot;0409:00000409&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--remove en-US keyboard input--&gt;</span><br><span class="line">        &lt;gs:InputLanguageID Action&#x3D;&quot;remove&quot; ID&#x3D;&quot;0409:00000409&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;gs:InputPreferences&gt;</span><br><span class="line">&lt;&#x2F;gs:GlobalizationServices&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个文件放在一起可以运行Remove_en-US.bat</p><p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/%E5%85%B3%E4%BA%8E%E8%BE%93%E5%85%A5%E6%B3%95/5411865a-2a25-469b-86be-3643ff34749e">关于输入法栏删掉ು - Microsoft Community</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Geotools中关于filter和ECQL的介绍</title>
      <link href="a0ce9eb1.html"/>
      <url>a0ce9eb1.html</url>
      
        <content type="html"><![CDATA[<h2 id="filter和ECQL的介绍"><a href="#filter和ECQL的介绍" class="headerlink" title="filter和ECQL的介绍"></a>filter和ECQL的介绍</h2><p>在geotools中有datastore就需要对应数据源的查询这边是基于opengis定义的接口来定义现在先看下</p><p>filter这个类的介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public interface Filter &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用Filter.INCLUDE过滤集合将会返回原始集合。</span><br><span class="line">    IncludeFilter INCLUDE &#x3D; new IncludeFilter();</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;使用Filter.EXCLUDE过滤集合将会返回空集合。</span><br><span class="line">    ExcludeFilter EXCLUDE &#x3D; new ExcludeFilter();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;给定一个对象，确定此过滤器对象所表示的测试是否通过。如果测试通过，则返回true，否则返回false</span><br><span class="line">    boolean evaluate(Object object);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;接受一个访问者(FilterVisitor)。实现所有子接口必须具有以下内容的方法:</span><br><span class="line">  &#x2F;&#x2F;visitor.visit(this, extraData);</span><br><span class="line">    Object accept(FilterVisitor visitor, Object extraData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是使用Filter查询Geometry类型为Point且位于指定矩形区域内的要素的示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个矩形过滤器</span><br><span class="line">Filter filter &#x3D; FF.and(</span><br><span class="line">    FF.equal(FF.property(&quot;geometry&quot;).getType(), FF.literal(&quot;Point&quot;)),</span><br><span class="line">    FF.bbox(&quot;geometry&quot;, -180, -90, 180, 90, &quot;EPSG:4326&quot;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;应用过滤器获取要素集合</span><br><span class="line">SimpleFeatureCollection features &#x3D; featureSource.getFeatures(filter);</span><br></pre></td></tr></table></figure><p>ECQL对应filter跟一步封装我们只需要传入参数和对应方法,用一个字符串来传入即可,它基于OGC标准并支持更多的查询操作。与Filter不同的是，ECQL使用类SQL语法编写查询表达式，并可以执行更复杂的查询，例如计算距离或使用正则表达式匹配属性值。下面是使用ECQL查询两个图层之间距离小于指定值的示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个ECQL查询表达式</span><br><span class="line">String query &#x3D; &quot;DWITHIN(geometry, POINT(0 0), 100, meters)&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;应用查询获取要素集合</span><br><span class="line">SimpleFeatureCollection features &#x3D; featureSource.getFeatures(ECQL.toFilter(query));</span><br></pre></td></tr></table></figure><p>需要注意的是，ECQL的语法相对复杂</p><h2 id="实现的原理"><a href="#实现的原理" class="headerlink" title="实现的原理"></a>实现的原理</h2><p>很简单的逻辑对于不同的数据源其实很多方法是不一样的对应数据库也许有对应的函数,对应shp文件这种也许我们只能在内存中操作,对应gpkg这种也许有其他的方式来计算</p><p>对应filter通常有两种 </p><ul><li>一种是属性的判断 类似&lt; &gt; = like 这种</li><li>第二种是 geometry 判断拓扑关系 相交,包含,相切,相离 <del>还有可能是运行 切割或者分离</del></li></ul><p>所以这里有定义一个抽象类来定义了要参考</p><p><strong>AbstractFilterVisitor</strong>： FilterVisitor 的抽象实现类，提供了一些通用的方法，例如visit(Filter)和visitNullFilter()等。</p><p><strong>DefaultFilterVisitor</strong> ：FilterVisitor的默认实现类，提供了对所有Filter对象的访问方法，例如visit(EqualsFilter)、visit(GreaterThanFilter)等。</p><p><strong>ECQLFilterVisitor</strong> ：FilterVisitor的ECQL实现类，用于解析ECQL表达式。ECQLFilterVisitor提供了一组visit方法，用于访问ECQL表达式中的不同类型的Filter对象。</p><p><strong>SQLFilterVisitor</strong> ：FilterVisitor的SQL实现类，用于将Filter对象转换为SQL语句。SQLFilterVisitor提供了一组visit方法，用于访问不同类型的Filter对象，并将其转换为SQL语句。</p><p> <strong>ComparisonFilter</strong> : 这是一个用于比较的过滤器类，它根据给定条件对值进行比较。常见的例子包括大于、小于、等于等比较操作符。使用该类可以方便快捷地进行数据筛选和排序。</p><p> <strong>LogicFilter</strong>: 这是一个用于逻辑运算的过滤器类，它可以将多个过滤器连接起来，并根据给定的逻辑关系进行组合。例如，可以使用 And 或 Or 运算符将两个或更多的过滤器连接在一起，以实现复杂的查询需求。</p><p>举例子来看一读取gpkg数据来看</p><p>对应空间查询最后走到GeoPkgDialect下的simpleSpatialSearch来拼接SQL查询拓扑关系</p><p>里面有filter.accept()来判断</p><p><img src="../img/1280X1280.PNG" alt="1280X1280"></p><p>最后还是走到JDBCDataStore下的selectSQLPS方法下执行对应的sql来实现的查询</p><p><img src="../img/output11111.png" alt="output"></p><p>在geotools中会多次走到重复的方法,会有一定的误导作用主要是反射和部分结构设计导致的,需要我们在特定实现的类上面打断点会好很多</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SDK开发整理和接口设计</title>
      <link href="416e1d94.html"/>
      <url>416e1d94.html</url>
      
        <content type="html"><![CDATA[<h2 id="对于SDK的设计"><a href="#对于SDK的设计" class="headerlink" title="对于SDK的设计"></a>对于SDK的设计</h2><p>这边先整理一个大概的设计方式</p><p>先从接口设计来谈起 目前主要是是参考restful风格和asop两个方式,restful风格主要是通过url,requestMethod,requestParam,requestBody来携带参数和标示动作方式</p><p>起初是参考<a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html">RESTful API 设计指南 - 阮一峰的网络日志</a></p><p>后面主要考虑集合方式 </p><ul><li><p>get请求会如果字符串查询会出现转义和其他影响.</p></li><li><p>部分axios框架不支持delete的方式.</p></li><li><p>post put两者方式和patch区别容易混乱 部分更新和全部字段更新.</p></li><li><p>对应部分批量删除选择post请求但是我选择用requestBody来删除的时候,会直接用数组来输入,这样确实简单明了,但是不好维护和理解,必要还是需要构建对应的对象来完成.</p></li></ul><p>GET  /dog/{id}?sortby=name&amp;order=asc&amp;page=2&amp;per_page=100  查询单个数据</p><p>POST  /dog/query   -requestBody {“param1”:”aaa”,”param2”:”bbb”} 查询批量数据</p><p>POST /dog  -requestBody {“param1”:”aaa”,”param2”:”bbb”} 新增</p><p>PUT  /dog   -requestBody {“param1”:”aaa”,”param2”:”bbb”} 部分更新</p><p>POST  /dog/{id}/delete/   -requestBody {“param1”:”aaa”,”param2”:”bbb”} 删除单个数据</p><p>POST  /dog/delete/   -requestBody {“param1”:[11,22,44],”param2”:”bbb”} 删除批量数据</p><h2 id="关于SDK的设计"><a href="#关于SDK的设计" class="headerlink" title="关于SDK的设计"></a>关于SDK的设计</h2><p><a href="https://cloud.tencent.com/developer/article/1798664">SDK 开发规范 - 腾讯云开发者社区-腾讯云</a></p><p><a href="https://www.cnblogs.com/scar1et/p/15177861.html">通用类命名规范 - 就永远夏天 - 博客园</a></p><p>其实可以参考的比较多主要是</p><ol><li><em>Client 类：</em>Client 类通常用于与远程服务进行交互，例如通过HTTP请求向API发送请求并获取响应。这些类通常封装了与远程服务的所有交互逻辑，并提供了易于使用的方法，以便开发人员可以轻松地与远程服务进行交互。</li><li><em>Helper 类：</em>Helper 类通常包含一些实用方法或函数，这些方法或函数可以用于执行常见的操作。这些方法通常不包含业务逻辑，而是提供了一些工具和辅助函数，以帮助开发人员更轻松地编写代码。</li><li><em>Utils 类：</em>Utils 类也是一种实用程序类，但它们通常包含更广泛的功能，并且可能具有更多的业务逻辑。这些类通常提供了一组静态方法，这些方法可以用于执行各种任务，例如字符串处理、日期时间处理、文件操作等等。</li></ol><hr><p>下列类也是经常被用到的可以参考的</p><ol><li><em>Factory 类：</em>Factory 类通常用于创建对象，这些对象可以是某个接口或抽象类的实例。这些类通常包含一个或多个静态方法，这些方法接受参数并返回一个实例。</li><li><em>Builder 类：</em>Builder 类通常用于构建复杂的对象，这些对象可能需要进行多个步骤的构建。这些类通常包含一组方法，每个方法都负责设置一个特定的属性，并返回自身的实例，以便可以链式调用这些方法。</li><li><em>Adapter 类：</em>Adapter 类通常用于将一个类的接口转换为另一个类的接口。这些类通常实现了目标接口，并持有一个源对象的引用，以便将源对象的方法映射到目标接口的方法。</li><li><em>Decorator 类：</em>Decorator 类通常用于在运行时动态地给对象添加功能，而无需修改原始对象。这些类通常实现了与原始对象相同的接口，并持有一个对原始对象的引用，在运行时添加额外的功能。</li></ol><p>注意命名<a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&mid=2247532818&idx=1&sn=b7267c8a1ed2b38c15ba5728040f443f&chksm=e92a7c1dde5df50b368bf2f872cb9254b5ab19ee0586d0be74c28e5169adbd89d58c3999ffd3&mpshare=1&scene=24&srcid=04172RW1fUxdJlsjRQJUl59b&sharer_sharetime=1681704802354&sharer_shareid=1eaae4cdce27c612a0778b4d4b0007f3#rd">编程中最难的就是命名？这几招教你快速上手</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中io的优化方向</title>
      <link href="d31a1754.html"/>
      <url>d31a1754.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-使用缓冲区"><a href="#1-使用缓冲区" class="headerlink" title="1. 使用缓冲区"></a>1. 使用缓冲区</h3><p>在读写文件时，每次都直接操作磁盘会导致性能降低。因此，可以通过使用缓冲区来减少对磁盘的操作次数，从而提高性能。Java 中提供了 <code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code> 类来支持缓冲区的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java复制代码&#x2F;&#x2F; 创建输入流缓冲区</span><br><span class="line">BufferedInputStream bis &#x3D; new BufferedInputStream(new FileInputStream(file));</span><br><span class="line">&#x2F;&#x2F; 创建输出流缓冲区</span><br><span class="line">BufferedOutputStream bos &#x3D; new BufferedOutputStream(new FileOutputStream(file));</span><br></pre></td></tr></table></figure><h3 id="2-使用-NIO"><a href="#2-使用-NIO" class="headerlink" title="2. 使用 NIO"></a>2. 使用 NIO</h3><p>Java 中的 NIO（New I/O）提供了更高效的 I/O 操作方式，可以提高程序的性能。NIO 引入了通道（Channel）、缓冲区（Buffer）等概念，并且支持非阻塞 I/O 操作。相比之下，传统的 Java I/O 通过流式处理数据，较为低效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java复制代码&#x2F;&#x2F; 创建通道</span><br><span class="line">FileChannel channel &#x3D; FileChannel.open(path, StandardOpenOption.READ);</span><br><span class="line">&#x2F;&#x2F; 创建缓冲区</span><br><span class="line">ByteBuffer buffer &#x3D; ByteBuffer.allocate(1024);</span><br><span class="line">&#x2F;&#x2F; 读取数据到缓冲区</span><br><span class="line">channel.read(buffer);</span><br></pre></td></tr></table></figure><h3 id="3-多线程读取文件"><a href="#3-多线程读取文件" class="headerlink" title="3. 多线程读取文件"></a>3. 多线程读取文件</h3><p>当需要读取大量文件时，可以考虑使用多线程来加速读取操作。Java 中可以使用线程池来创建多个线程，并将文件分成多个部分进行读取。这样可以充分利用 CPU 和磁盘的性能，提高程序的效率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java复制代码&#x2F;&#x2F; 创建固定大小的线程池</span><br><span class="line">ExecutorService executorService &#x3D; Executors.newFixedThreadPool(10);</span><br><span class="line">&#x2F;&#x2F; 将任务分配给不同的线程</span><br><span class="line">for (int i &#x3D; 0; i &lt; files.length; i++) &#123;</span><br><span class="line">    Runnable task &#x3D; new ReadFileTask(files[i]);</span><br><span class="line">    executorService.submit(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-数据压缩"><a href="#4-数据压缩" class="headerlink" title="4. 数据压缩"></a>4. 数据压缩</h3><p>读取大量文件时，数据传输的成本可能会很高。因此，可以考虑使用数据压缩技术来减少数据量，从而提高程序的效率。Java 中提供了 <code>GZIPOutputStream</code> 和 <code>GZIPInputStream</code> 等类来支持数据压缩和解压操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java复制代码&#x2F;&#x2F; 创建输出流并压缩数据</span><br><span class="line">GZIPOutputStream gos &#x3D; new GZIPOutputStream(new FileOutputStream(file));</span><br><span class="line">gos.write(data);</span><br><span class="line">gos.finish();</span><br><span class="line">gos.close();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建输入流并解压数据</span><br><span class="line">GZIPInputStream gis &#x3D; new GZIPInputStream(new FileInputStream(file));</span><br><span class="line">byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">int read &#x3D; -1;</span><br><span class="line">while ((read &#x3D; gis.read(buffer)) !&#x3D; -1) &#123;</span><br><span class="line">    &#x2F;&#x2F; 处理数据</span><br><span class="line">&#125;</span><br><span class="line">gis.close();</span><br></pre></td></tr></table></figure><h3 id="5-批量读写数据"><a href="#5-批量读写数据" class="headerlink" title="5. 批量读写数据"></a>5. 批量读写数据</h3><p>在进行大量数据的读取和写入时，可以采用批量操作的方式来提高效率。例如，可以一次性读取或写入多个字节、字符或对象，减少 I/O 操作的频率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java复制代码&#x2F;&#x2F; 一次性读取多个字节到缓冲区</span><br><span class="line">byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">inputStream.read(buffer, 0, 1024);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 一次性写入多个字符到文件</span><br><span class="line">char[] data &#x3D; &#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;;</span><br><span class="line">fileWriter.write(data, 0, 2);</span><br></pre></td></tr></table></figure><h3 id="6-使用内存映射文件"><a href="#6-使用内存映射文件" class="headerlink" title="6. 使用内存映射文件"></a>6. 使用内存映射文件</h3><p>Java 中的内存映射文件可以将整个文件或者文件的某个部分映射到虚拟内存中，使得可以通过内存地址来访问文件，从而提高程序的效率。内存映射文件通常适用于对大文件的读取和写入操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java复制代码&#x2F;&#x2F; 将整个文件映射到内存中</span><br><span class="line">RandomAccessFile raf &#x3D; new RandomAccessFile(file, &quot;rw&quot;);</span><br><span class="line">FileChannel channel &#x3D; raf.getChannel();</span><br><span class="line">MappedByteBuffer buffer &#x3D; channel.map(FileChannel.MapMode.READ_WRITE, 0, file.length());</span><br></pre></td></tr></table></figure><h3 id="7-原子文件操作"><a href="#7-原子文件操作" class="headerlink" title="7. 原子文件操作"></a>7. 原子文件操作</h3><p>Java 中的 <code>java.nio.file.Files</code> 类提供了一些原子文件操作方法，可以确保文件的读取和写入操作的原子性，从而避免由并发操作引起的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java复制代码&#x2F;&#x2F; 原子写入字符串到文件</span><br><span class="line">Files.writeString(file, &quot;hello&quot;, StandardOpenOption.WRITE, StandardOpenOption.APPEND);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 原子读取文件到字符串</span><br><span class="line">String content &#x3D; Files.readString(file);</span><br></pre></td></tr></table></figure><h3 id="8-磁盘预读取"><a href="#8-磁盘预读取" class="headerlink" title="8. 磁盘预读取"></a>8. 磁盘预读取</h3><p>Java 中可以通过启用磁盘预读取机制来提高程序的效率。磁盘预读取是指在读取文件时，将文件的一部分或者整个文件预先加载到内存中，从而加快读取速度。Java 中可以使用 <code>FileInputStream</code> 类的 <code>getChannel()</code> 方法来获取文件的通道，并使用 <code>map()</code> 方法来实现磁盘预读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java复制代码&#x2F;&#x2F; 获取文件通道</span><br><span class="line">FileInputStream fis &#x3D; new FileInputStream(file);</span><br><span class="line">FileChannel channel &#x3D; fis.getChannel();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将文件映射到内存中</span><br><span class="line">MappedByteBuffer buffer &#x3D; channel.map(FileChannel.MapMode.READ_ONLY, 0, file.length());</span><br></pre></td></tr></table></figure><p>以上是一些常用的优化方案，但实际应用时需要根据具体情况进行选择。在从 MongoDB 上读取文件时，可以结合上述方案进行优化，以提高程序的性能。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>chatgpt介绍</title>
      <link href="9891105b.html"/>
      <url>9891105b.html</url>
      
        <content type="html"><![CDATA[<h2 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h2><p><strong>AI</strong> :全称Artificial Intelligence，是一种模拟人类智能行为的技术或系统，涵盖了许多不同的技术和方法，包括机器学习、自然语言处理、计算机视觉等，可用于许多领域，如自动驾驶、机器人、医疗诊断等。</p><p><strong>ML</strong> :全称Machine Learning 是一种人工智能领域的技术，通过从数据中学习模式和规律来实现智能化决策和行为。机器学习可以分为监督学习、无监督学习和强化学习等不同类型，广泛应用于自然语言处理、计算机视觉、金融、医疗等领域。</p><p><strong>Deep Learning</strong> : 一种基于神经网络的机器学习方法，通过模拟人脑的神经网络结构，实现对复杂模式和规律的学习和识别，被广泛应用于自然语言处理、计算机视觉、语音识别等领域，是实现人工智能的重要技术之一。</p><p><strong>CV</strong>，全称Computer Vision，即计算机视觉，是一种利用计算机和数学算法来模拟人类视觉行为的技术，旨在使计算机能够像人类一样理解和解释图像和视频。计算机视觉涵盖了许多领域，如图像处理、模式识别、目标检测、图像分割等，可应用于人脸识别、自动驾驶、智能安防等众多领域。</p><p><strong>Transformer</strong> :是一种基于自注意力机制的深度学习模型，最初应用于自然语言处理领域的机器翻译任务。相较于传统的循环神经网络和卷积神经网络，Transformer通过并行计算和全局信息的交互，实现了更快的训练速度和更高的精度，并被广泛应用于自然语言处理、计算机视觉、语音识别等领域。</p><p><strong>Reinforcement learning</strong> :是一种机器学习方法，一种通过试错学习来最大化奖励的机器学习方法，旨在让智能体（agent）在与环境的交互中自主探索最优策略，并获得最大化的奖励。Reinforcement Learning可应用于许多领域，如自动驾驶、游戏AI、机器人控制等，是实现人工智能的重要技术之一。在GPT中，强化学习被用于调整模型的生成策略</p><p><strong>General Pretrained Transformer</strong> : 一种基于Transformer模型的通用预训练模型，是一种自然语言处理算法，通过在大规模文本数据上进行无监督训练，可以实现对自然语言文本的深度理解和高效处理。GPT模型的应用包括文本生成、文本分类、问答系统等，是自然语言处理领域中的重要技术。</p><p><strong>Reinforcement Learning from Human Feedback</strong> (RLHF): 是一种结合了强化学习和人类反馈的方法。该方法在训练模型时，通过让人类提供正面或负面反馈来指导模型的学习。在GPT中，这种方法可以帮助模型更好地理解人类语言，并且可使其生成更加符合人类语言特点的内容。是一种通过人类反馈指导机器学习的方法。与传统的强化学习不同，RLHF使用人类专家或众包工作者提供的奖励信号作为机器学习的反馈，以加速智能体（agent）的学习过程。RLHF的应用包括自然语言处理、计算机视觉、机器人控制等领域，是实现人机协作的重要技术之一。</p><p><strong>NLP(自然语言处理)</strong> : 自然语言处理（Natural Language Processing）的缩写，指的是计算机科学、人工智能和语言学等多个领域的交叉学科，致力于研究如何使计算机能够理解、处理和生成人类语言。NLP的应用包括机器翻译、情感分析、问答系统、文本分类等多个领域，是实现计算机与人类语言交互的重要技术之一。</p><p>​    AI的起源可以追溯到20世纪40年代，随着计算机技术的发展，研究人员开始尝试通过机器模拟人类智能。在20世纪50年代至60年代，出现了“逻辑推理”、“神经网络”等多个重要的AI研究方向。70年代后，AI开始应用于专家系统、机器视觉等领域，但在80年代后半期，由于技术和资源的限制，AI的发展进入了低谷。21世纪初，随着深度学习等技术的出现，AI得到了长足的发展，目前已经成为各行业的热门领域。</p><h2 id="1-机器学习（Machine-Learning）"><a href="#1-机器学习（Machine-Learning）" class="headerlink" title="1. 机器学习（Machine Learning）"></a>1. 机器学习（Machine Learning）</h2><ul><li><strong>特点</strong>：机器学习是一种人工智能技术，它通过让计算机根据数据自动学习模型，从而实现对未知数据进行预测或决策。机器学习主要分为有监督学习、无监督学习和强化学习三种类型。</li><li><strong>介绍</strong>：机器学习是目前最火热的技术之一，它应用于各个领域，如商业、医疗、金融等。利用机器学习，我们可以让机器自动地完成一些复杂的任务，如图像识别、语音识别、自然语言处理等。</li></ul><h2 id="2-深度学习（Deep-Learning）"><a href="#2-深度学习（Deep-Learning）" class="headerlink" title="2. 深度学习（Deep Learning）"></a>2. 深度学习（Deep Learning）</h2><ul><li><strong>特点</strong>：深度学习是机器学习的一种，它通过模拟人类神经元网络来构建模型，并利用反向传播算法进行训练，从而实现对数据的预测或决策。深度学习主要应用于图像识别、语音识别、自然语言处理等领域。</li><li><strong>介绍</strong>：深度学习是近年来最受关注的技术之一，它取得了一系列重大突破，如AlphaGo战胜围棋世界冠军李世石、自动驾驶汽车等。深度学习有助于解决各种复杂问题，同时也在不断地推进人工智能技术的发展。</li></ul><h2 id="3-计算机视觉（Computer-Vision）"><a href="#3-计算机视觉（Computer-Vision）" class="headerlink" title="3. 计算机视觉（Computer Vision）"></a>3. 计算机视觉（Computer Vision）</h2><ul><li><strong>特点</strong>：计算机视觉是一项涉及图像和视频处理的技术，它利用计算机对数字图像进行分析和处理，从而实现对图像中物体、场景等的理解和识别。计算机视觉主要应用于图像检测、目标跟踪、三维重建、虚拟现实等领域。</li><li><strong>介绍</strong>：计算机视觉是一项非常应用广泛的技术，它可以应用到很多领域，如安防、医疗、交通等。随着深度学习技术的发展，计算机视觉的性能也得到了极大地提升。</li><li>应用: <em>视觉四小龙</em>(商汤科技、旷视科技、云从科技和依图科技)</li></ul><h2 id="4-自然语言处理（Natural-Language-Processing）"><a href="#4-自然语言处理（Natural-Language-Processing）" class="headerlink" title="4. 自然语言处理（Natural Language Processing）"></a>4. 自然语言处理（Natural Language Processing）</h2><ul><li><strong>特点</strong>：自然语言处理是一种人工智能技术，它利用计算机对自然语言进行处理和理解，从而实现对文本的分析、理解和生成。自然语言处理主要涉及到自然语言标记、词向量表示、文本分类、机器翻译等方面。</li><li><strong>介绍</strong>：自然语言处理是一项非常有挑战性的技术，因为自然语言的表达方式非常复杂，同时也存在很多歧义。利用自然语言处理技术，我们可以实现机器翻译、情感分析、智能客服等应用。</li><li>应用: GPT,语音识别</li></ul><h1 id="相关关键词的关系和梳理"><a href="#相关关键词的关系和梳理" class="headerlink" title="相关关键词的关系和梳理"></a>相关关键词的关系和梳理</h1><p>机器学习、深度学习、计算机视觉和自然语言处理这四个概念之间存在一定的包含关系，具体如下：</p><ul><li>机器学习是一个大的概念，它包括了深度学习在内。深度学习是机器学习中的一种方法，它利用神经网络模拟大脑的处理过程，实现对数据的特征提取和分类。因此可以说深度学习是机器学习的一种重要分支。</li><li>计算机视觉是机器学习和深度学习在图像或视频领域的应用。计算机视觉需要训练模型来识别图像或视频中的物体、场景等，从而实现对图像或视频的理解和识别。因此，计算机视觉可以被看作是机器学习和深度学习在图像或视频领域的应用之一。</li><li>自然语言处理是机器学习和深度学习在文本领域的应用。自然语言处理需要训练模型来识别文本中的词汇、语法、语义等，从而实现对文本的分析和生成。因此，自然语言处理可以被看作是机器学习和深度学习在文本领域的应用之一。</li></ul><h1 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h1><p>​    ChatGPT是由OpenAI开发的一个大型自然语言处理模型，它基于GPT（Generative Pre-trained Transformer）算法，并使用了海量的语料数据进行预训练。ChatGPT在对话生成、情感分析、文本生成等方面表现出色，其生成的回复流畅自然，能够与人类进行高质量的交互。ChatGPT已经被广泛应用于智能客服、虚拟助手、聊天机器人等领域，为用户提供了更加便捷、高效的服务体验。同时，ChatGPT也为自然语言处理技术的发展做出了重要贡献，推动了自然语言处理技术的不断进步和发展。</p><p>在gpt和类似的 <a href="https://yiyan.baidu.com/">文心一言</a> ,<a href="https://bard.google.com/">Bard</a>,等LLM( large language model )大语言模型中参数是非常重要的,通常都是多少多少亿,其实这些参数是该模型中的可调整变量，通过不断地学习和优化，可以使ChatGPT在各种自然语言任务上表现出色。具体来说，ChatGPT中的这175亿个参数主要有以下作用：</p><ol><li>语言表示：ChatGPT的主要任务是生成自然语言文本，因此它需要深入理解语言的结构、语法以及意义等方面。这些参数能够帮助ChatGPT学习到更加准确、丰富的语言表示形式，从而更好地表达和理解人类语言。</li><li>上下文理解：在对话生成和文本生成任务中，上下文信息对于生成的内容非常重要。ChatGPT的参数可以捕获历史上下文信息，并利用这些信息来生成更加合适、连贯的回复或文本内容。</li><li>预测能力：ChatGPT中的参数能够帮助模型预测下一个单词或字符的概率分布，从而决定生成的文本内容。这些参数的精度和数量越高，模型预测的准确性也就越高。</li></ol><p>总之，ChatGPT的175亿个参数起到了至关重要的作用，它们能够帮助模型对自然语言进行深入理解和表达，并且能够生成高质量、连贯的文本内容。同时，这些参数也代表了当今自然语言处理技术的前沿水平，展示了人工智能技术在自然语言处理领域的强大潜力。</p><p><a href="https://zh.wikipedia.org/wiki/%E6%9D%B0%E5%BC%97%E9%87%8C%C2%B7%E8%BE%9B%E9%A1%BF">杰弗里·辛顿 <strong>Geoffrey Everest Hinton</strong></a> 开山鼻祖</p><p><a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E7%AB%8B%E6%98%86">杨立昆,<strong>扬·勒丘恩</strong>  <strong>Yann Le Cun</strong></a> :卷积网络之父,现在ocr的基础</p><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E4%B9%A6%E4%BA%9A%C2%B7%E6%9C%AC%E5%B8%8C%E5%A5%A5">约书亚·本希奥 <strong>Yoshua Bengio</strong></a> <a href="https://zh.wikipedia.org/wiki/%E8%92%99%E7%89%B9%E5%A9%81%E5%A4%A7%E5%AD%B8">蒙特利尔大学</a>计算机科学和运筹学系的教授以及<a href="https://zh.wikipedia.org/w/index.php?title=%E8%92%99%E7%89%B9%E5%A9%81%E5%AD%B8%E7%BF%92%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6%E6%89%80&action=edit&redlink=1">蒙特利尔学习算法研究所</a>科学主任</p><p><a href="https://zh.wikipedia.org/zh-cn/%E4%BC%8A%E7%88%BE%E4%BA%9E%C2%B7%E8%98%87%E8%8C%A8%E5%85%8B%E7%B6%AD">伊尔亚·苏茨克维 - Ilya Sutskever</a> openAI的联合创始人,在开山鼻祖麾下读完研究生,和<a href="https://zh.wikipedia.org/wiki/%E4%BA%9E%E6%AD%B7%E5%85%8B%E6%96%AF%C2%B7%E5%85%8B%E9%87%8C%E6%BE%A4%E5%A4%AB%E6%96%AF%E5%9F%BA">亚历克斯·克里泽夫斯基</a>和<a href="https://zh.wikipedia.org/wiki/%E6%9D%B0%E5%BC%97%E9%87%8C%C2%B7%E8%BE%9B%E9%A1%BF">杰弗里·辛顿</a>是<a href="https://zh.wikipedia.org/wiki/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">卷积神经网络</a><a href="https://zh.wikipedia.org/wiki/AlexNet">AlexNet</a>的共同发明人</p><p>最后这篇文章是一遍问ChatGPT一边结合自己理解生成的</p><p><a href="https://en.wikipedia.org/wiki/Large_language_model">Large language model - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E6%B0%8F%E7%B6%B2%E8%B7%AF">贝叶斯网络 - 维基百科，自由的百科全书</a></p><p><a href="https://ai-scholar.tech/zh/learn/c0/0-1">0-1.了解人工智能、机器学习和深度学习的区别! | AI-SCHOLAR | AI：（人工智能）文章和技术信息媒体</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springmvc配置gson的解析</title>
      <link href="1a9fa948.html"/>
      <url>1a9fa948.html</url>
      
        <content type="html"><![CDATA[<p>springmvc 排除jackson如果使用后使用Gson</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(exclude&#x3D; &#123;DataSourceAutoConfiguration.class,JacksonAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure><p><img src="../img/output111.png" alt="output"></p><p>在autoconfig下gson的配置</p><p><img src="../img/image-20230409113435819.png" alt="image-20230409113435819">如果直接使用expose注解后不会直接生效需要重新bean注入到</p><p>需要gson注入bean到spring里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">new GsonBuilder()</span><br><span class="line">        .addSerializationExclusionStrategy(new ExclusionStrategy() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean shouldSkipField(FieldAttributes fieldAttributes) &#123;</span><br><span class="line">                final Expose expose &#x3D; fieldAttributes.getAnnotation(Expose.class);</span><br><span class="line">                return expose !&#x3D; null &amp;&amp; !expose.serialize();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public boolean shouldSkipClass(Class&lt;?&gt; aClass) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .addDeserializationExclusionStrategy(new ExclusionStrategy() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean shouldSkipField(FieldAttributes fieldAttributes) &#123;</span><br><span class="line">                final Expose expose &#x3D; fieldAttributes.getAnnotation(Expose.class);</span><br><span class="line">                return expose !&#x3D; null &amp;&amp; !expose.deserialize();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public boolean shouldSkipClass(Class&lt;?&gt; aClass) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/4802887/gson-how-to-exclude-specific-fields-from-serialization-without-annotations#:~:text=I%20explicitly%20used-,%40Expose%20to%20exclude,-it.%20I%20used">https://stackoverflow.com/questions/4802887/gson-how-to-exclude-specific-fields-from-serialization-without-annotations#:~:text=I%20explicitly%20used-,%40Expose%20to%20exclude,-it.%20I%20used</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis回顾兼顾分析Invalid bound statement (not found)的问题</title>
      <link href="cf22bc7c.html"/>
      <url>cf22bc7c.html</url>
      
        <content type="html"><![CDATA[<p>项目中需要使用mybatis原生,之前都是使用mybatis plus或者mybatis pagehelper,突然使用偏原生,主要是xml中的简单增删改查都需要手动机械的实现真的是相当死板,搜索一下发型mybatisx这个插件非常好用,没有考虑mybatis pro那个插件插件使用介绍在下面,之前很多mybatis代码生成需要mybatis maven插件配置一堆真的是非常不友好,使用这个插件只需要利用idea连接对应插件即可使用,配置下后生成对应的xml和mapper代码和domain/entity对象,简直是神器.</p><p><a href="https://blog.csdn.net/wyr1235/article/details/124590032">mybatis—mybatis插件根据接口自动生成xml文件_mybatis xml 生成插件_任何时候都要勇敢的博客-CSDN博客</a></p><p>后面依照这个配置一步一步走下去没什么问题</p><p>按照步骤: <a href="https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/zh/index.html">https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/zh/index.html</a></p><p><a href="https://tobebetterjavaer.com/springboot/mybatis.html#%E9%80%9A%E8%BF%87-mybatis-plus-%E5%A2%9E%E5%BC%BA">Spring Boot 整合 MyBatis | Java进阶之路</a></p><p><a href="https://netfilx.github.io/spring-boot/4.%E6%95%B4%E5%90%88mybatis/mybaits">SpringBoot整合mybatis</a></p><p>]</p><p>但是后面一直出现Invalid bound statement (not found)</p><p>想着这种一定是我配置出错,网上搜索都是</p><ol><li><p>mapperscan的配置</p></li><li><p>mybatis.config-location=classpath*:**/mapper/*Mapper.xml</p></li><li><p>xml下的namespace要写正确</p></li></ol><p>认真对了几遍以为是自己没按照模板来,但是mybatisx这个插件都能正常解析,真的是头大,确认再三一定是mybatis加载对应statement的时候没加载到在看到这篇文章后我大概确定了</p><p>MapperAnnotationBuilder 下parse 中有loadXmlResource()</p><blockquote><p>在这里寻找mapper接口对应的xml的资源路径的方式如下：　　　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String xmlResource &#x3D; type.getName().replace(&#39;.&#39;, &#39;&#x2F;&#39;) + &quot;.xml&quot;;</span><br></pre></td></tr></table></figure><p>　　替换接口包名中的.为/ 并在接口添加.xml后缀。<br>　　比如：Mapper接口com.hbfec.encrypt.admin.dao.ocr.TestDao的对应的xml资源路径会解析为com/hbfec/encrypt/admin/dao/ocr/TestDao.xml。<br>　　TestDao.xml在我的项目中的路径是classpath:dao/ocr/TestDao.xml,路径与上面解析出来的不一致，mybatis无法找到TestDao.xml，导致以上错误。所以项目采用使用这种方式绑定<strong>Mapper接口和Mapper.xml</strong>的话，<strong>其路径和名称都要一致</strong>。</p></blockquote><p>所以我项目下resource下面需要有对应的路径,由于太久没写都是直接写mapper导致解析不到</p><p>参考<a href="https://www.cnblogs.com/hopeofthevillage/p/12858565.html">spring boot mybatis 报错Invalid bound statement (not found)解决过程 - 全me村的希望 - 博客园</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows使用vmvare创建mac-intel虚拟机</title>
      <link href="267b5788.html"/>
      <url>267b5788.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.freedidi.com/5257.html">虚拟机安装 macOS 黑苹果系统！所需要的资料 - 零度解说</a><br><a href="https://www.youtube.com/watch?v=FO9Bwa5btn8">Windows 11 上安装 macOS系统！通过虚拟机即可轻松搞定</a></p><p>需要的软件</p><p><strong>1.VMware 下载：【<a href="https://www.freedidi.com/1385.html">点击下载</a>】</strong></p><p><strong>2.Auto-Unlocker 開源輔助工具：【<a href="https://github.com/paolo-projects/auto-unlocker/releases">点击下载</a>】</strong></p><p><strong>3.macOS big sur 系統ISO鏡像</strong>：-&gt; <a href="https://sysin.org/blog/macOS-Monterey/#1-ISO-%E6%A0%BC%E5%BC%8F%E8%BD%AF%E4%BB%B6%E5%8C%85%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89-8">macOS Monterey 12.6.3 (21G419) 正式版 ISO、IPSW、PKG 下载</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>chatgpt关于学习英文</title>
      <link href="24cfb670.html"/>
      <url>24cfb670.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ok ,i pleasure give some questions ,first can you tell me learing english for step by step</span><br><span class="line">Certainly! Here are some steps you can take to learn English:</span><br><span class="line"></span><br><span class="line">1. Start with the basics: Learn the English alphabet, basic grammar rules, and common vocabulary words.</span><br><span class="line"></span><br><span class="line">2. Practice listening and speaking: Listen to English speakers and practice speaking with native speakers or language partners. This will help you improve your pronunciation and fluency.</span><br><span class="line"></span><br><span class="line">3. Read in English: Start with simple texts like children&#39;s books or news articles, and gradually work your way up to more complex texts.</span><br><span class="line"></span><br><span class="line">4. Write in English: Practice writing in English by keeping a journal, writing emails, or participating in online forums.</span><br><span class="line"></span><br><span class="line">5. Take a course or find a tutor: Consider taking an English course at a language school or finding a tutor who can provide personalized instruction.</span><br><span class="line"></span><br><span class="line">6. Use language learning apps: There are many apps available that can help you learn English, such as Duolingo, Babbel, and Rosetta Stone.</span><br><span class="line"></span><br><span class="line">7. Immerse yourself in the language: Watch movies or TV shows in English, listen to music in English, and try to use the language as</span><br></pre></td></tr></table></figure><p>continue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">much as possible in your daily life. This will help you become more comfortable with the language and improve your overall proficiency.</span><br><span class="line"></span><br><span class="line">8. Set goals and track your progress: Set specific goals for yourself, such as learning a certain number of new words each week or practicing speaking for a certain amount of time each day. Keep track of your progress and celebrate your achievements along the way.</span><br><span class="line"></span><br><span class="line">Remember that learning a new language takes time and effort, so be patient with yourself and don&#39;t get discouraged if you make mistakes. With consistent practice and dedication, you can improve your English skills and achieve your language learning goals.</span><br></pre></td></tr></table></figure><p>continue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">9. Join a language exchange program: Find a language exchange partner who speaks English and is learning your native language. This way, you can practice speaking with each other and help each other improve.</span><br><span class="line"></span><br><span class="line">10. Use English in real-life situations: Try to use English in real-life situations, such as ordering food at a restaurant or asking for directions. This will help you become more comfortable using the language in everyday situations.</span><br><span class="line"></span><br><span class="line">11. Learn from your mistakes: Don&#39;t be afraid to make mistakes when speaking or writing in English. Instead, learn from your mistakes and use them as opportunities to improve.</span><br><span class="line"></span><br><span class="line">12. Stay motivated: Learning a new language can be challenging, so it&#39;s important to stay motivated and keep practicing even when it gets difficult. Find ways to make learning fun and enjoyable, such as watching movies or listening to music in English.</span><br><span class="line"></span><br><span class="line">By following these steps and staying committed to your language learning goals, you can improve your English skills and become more confident using the language in a variety of settings.</span><br></pre></td></tr></table></figure><ul><li>so frequently Misspell</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Misspelling words is a common challenge when learning a new language, and it can be frustrating. Here are some tips that may help you improve your spelling in English:</span><br><span class="line"></span><br><span class="line">1. Practice regularly: The more you practice spelling, the better you will become. Try to set aside some time each day to practice spelling words.</span><br><span class="line"></span><br><span class="line">2. Learn the rules: English has many spelling rules that can help you spell words correctly. For example, &quot;i before e except after c&quot; is a common rule that can help you spell words like &quot;believe&quot; and &quot;receive.&quot;</span><br><span class="line"></span><br><span class="line">3. Use mnemonics: Mnemonics are memory aids that can help you remember how to spell difficult words. For example, to remember how to spell &quot;necessary,&quot; you could use the phrase &quot;one collar and two sleeves are necessary.&quot;</span><br><span class="line"></span><br><span class="line">4. Read and write in English: Reading and writing in English can help you become more familiar with the language and its spelling patterns.</span><br><span class="line"></span><br><span class="line">5. Use online resources: There are many online resources available that can help you improve your spelling, such as spelling games, quizzes, and exercises.</span><br><span class="line"></span><br><span class="line">Remember that improving your spelling takes time and practice, so don&#39;t get discouraged if it doesn&#39;t happen overnight. Keep practicing and using these tips, and you will see improvement over time.</span><br></pre></td></tr></table></figure><p>yes you are righ,and when I read some english web content ,I fell hard and want to escape</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Reading English web content can be challenging, especially if you&#39;re not used to reading in English. Here are some tips that may help you improve your reading skills:</span><br><span class="line"></span><br><span class="line">1. Start with easy material: If you&#39;re finding it difficult to read English web content, start with material that is easier to understand. For example, you could start with children&#39;s books or news articles written for English learners.</span><br><span class="line"></span><br><span class="line">2. Use a dictionary: If you come across words that you don&#39;t know, look them up in a dictionary. This will help you expand your vocabulary and understand the text better.</span><br><span class="line"></span><br><span class="line">3. Take breaks: Reading in a new language can be tiring, so take breaks when you need to. This will help you stay focused and avoid getting overwhelmed.</span><br><span class="line"></span><br><span class="line">4. Read out loud: Reading out loud can help improve your pronunciation and comprehension of the text.</span><br><span class="line"></span><br><span class="line">5. Practice regularly: The more you practice reading in English, the easier it will become over time.</span><br><span class="line"></span><br><span class="line">Remember that learning a new language takes time and practice, so don&#39;t get discouraged if it&#39;s difficult at first. Keep practicing and using these tips, and you will see improvement over time.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java命名规则-转载</title>
      <link href="b2964425.html"/>
      <url>b2964425.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://xjjdog.cn/"> 《小姐姐味道 公众号》</a></p><h2 id="管理类命名"><a href="#管理类命名" class="headerlink" title="管理类命名"></a>管理类命名</h2><p> <em>写代码，少不了对统一资源的管理，清晰的启动过程可以有效地组织代码。为了让程序运行起来，少不了各种资源的注册、调度，少不了公共集合资源的管理</em>，</p><p>1.<strong>BootStrap,Starter</strong></p><p>一般作为程序启动器使用，或者作为启动器的基类。通俗来说，可以认为是main函数的入口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AbstractBootstrap ServerBootstrap MacosXApplicationBootstrap DNSTaskStarter </span><br></pre></td></tr></table></figure><p>2<strong>Processor</strong></p><p>某一类功能的处理器，用来表示某个处理过程，是一系列代码片段的集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CompoundProcesser BinaryComparisonProcessor </span><br></pre></td></tr></table></figure><p>3<strong>Manger</strong></p><p>对有生命状态的对象进行管理，通常作为某一类资源的管理入口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AccountManger DevicePolicyManger TransactionManger </span><br></pre></td></tr></table></figure><p>4<strong>Holder</strong></p><p>表示持有某个或者某类对象的引用，并可以对其进行统一管理。多见于不好回收的内存统一处理，或者一些全局集合容器的缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QueryHolder InstructionHolder ViewHolder </span><br></pre></td></tr></table></figure><p>5<strong>Factory</strong></p><p>工厂模式，表示此类为工厂类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SessionFactory ScriptFactory LiveCaptureFactory </span><br></pre></td></tr></table></figure><p>6<strong>Provider</strong></p><p>Provider = Strategy + Factory Method。它更高级一些，把策略模式和方法工厂揉在了一块，让人用起来很顺手。Provider一般是接口或者抽象类，以便能完成子实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AccountFeatureProvider ApplicationFeatureProvider CollatorPorvider </span><br></pre></td></tr></table></figure><p>7<strong>Registrar</strong></p><p>注册并管理一系列资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportServiceRegistrar IKryoRegistrar PipelineOptionRegistrar </span><br></pre></td></tr></table></figure><p>8<strong>Engine</strong></p><p>一般是核心模块，用来处理一类功能。引擎是个非常高级的名词，一般的类是没资格用它的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ScriptEngine DataQLScriptEngine C2DEngine </span><br></pre></td></tr></table></figure><p>9<strong>Service</strong></p><p>某个服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntegratorServiceImpl ISelectionService PersistenceService </span><br></pre></td></tr></table></figure><p>10<strong>Task</strong></p><p>某个任务。通常是个Runnable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WorkflowTask FutureTask ForkJoinTask </span><br></pre></td></tr></table></figure><h2 id="2传播类"><a href="#2传播类" class="headerlink" title="2传播类"></a>2<strong>传播类</strong></h2><p>为了完成一些统计类或者全局类的功能，有些参数需要一传到底。传播类的对象就可以通过统一封装的方式进行传递，并在合适的地方进行拷贝或者更新*</p><p>2.1<strong>Context</strong></p><p>如果你的程序执行，有一些变量，需要从函数执行的入口开始，一直传到大量子函数执行完毕之后。这些变量或者集合，如果以参数的形式传递，将会让代码变得冗长无比。这个时候，你就可以把变量统一塞到Context里面，以单个对象的形式进行传递。</p><p>在Java中，由于ThreadLocal的存在，Context甚至可以不用在参数之间进行传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppContext ServletContext ApplicationContext </span><br></pre></td></tr></table></figure><p>2.2<strong>Propagator</strong></p><p>传播，繁殖。用来将context中传递的值进行复制，添加，清除，重置，检索，恢复等动作。通常，它会提供一个叫做propagate的方法，实现真正的变量管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TextMapPropagator FilePropagator TransactionPropagator </span><br></pre></td></tr></table></figure><h2 id="3-0回调类"><a href="#3-0回调类" class="headerlink" title="3.0回调类"></a>3.0<strong>回调类</strong></h2><p> 使用多核可以增加程序运行的效率，不可避免的引入异步化。我们需要有一定的手段，获取异步任务执行的结果，对任务执行过程中的关键点进行检查。回调类API可以通过监听、通知等形式，获取这些事件。*</p><p>3.1<strong>Handler，Callback，Trigger，Listener</strong></p><p>callback通常是一个接口，用于响应某类消息，进行后续处理；Handler通常表示持有真正消息处理逻辑的对象，它是有状态的；tigger触发器代表某类事件的处理，属于Handler，通常不会出现在类的命名中；Listener的应用更加局限，通常在观察者模式中用来表示特定的含义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChannelHandler SuccessCallback CronTrigger EventListener </span><br></pre></td></tr></table></figure><p>3.2<strong>Aware</strong></p><p>Aware就是感知的意思，一般以该单词结尾的类，都实现了Aware接口。拿spring来说，Aware 的目的是为了让bean获取spring容器的服务。具体回调方法由子类实现，比如ApplicationContextAware。它有点回调的意思。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContextAware ApplicationStartupAware ApplicationEventPublisherAware </span><br></pre></td></tr></table></figure><h2 id="4-0监控类"><a href="#4-0监控类" class="headerlink" title="4.0监控类"></a>4.0<strong>监控类</strong></h2><p>现在的程序都比较复杂，运行状态监控已经成为居家必备之良品。监控数据的收集往往需要侵入到程序的边边角角，如何有效的与正常业务进行区分，是非常有必要的。*</p><p>4.1 <strong>Metric</strong></p><p>表示监控数据。不要用Monitor了，比较丑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TimelineMetric HistogramMetric Metric </span><br></pre></td></tr></table></figure><p>4.2 <strong>Estimator</strong></p><p>估计，统计。用于计算某一类统计数值的计算器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConditionalDensityEstimator FixedFrameRateEstimator NestableLoadProfileEstimator </span><br></pre></td></tr></table></figure><p>4.3 <strong>Accumulator</strong></p><p>累加器的意思。用来缓存累加的中间计算结果，并提供读取通道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AbstractAccumulator StatsAccumulator TopFrequencyAccumulator </span><br></pre></td></tr></table></figure><p>4.4 <strong>Tracker</strong></p><p>一般用于记录日志或者监控值，通常用于apm中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VelocityTracker RocketTracker MediaTracker </span><br></pre></td></tr></table></figure><h2 id="5-内存管理类"><a href="#5-内存管理类" class="headerlink" title="5 内存管理类"></a>5 <strong>内存管理类</strong></h2><p>如果你的应用用到了自定义的内存管理，那么下面这些名词是绕不开的。比如Netty，就实现了自己的内存管理机制。*</p><p>5.1 <strong>Allocator</strong></p><p>与存储相关，通常表示内存分配器或者管理器。如果你得程序需要申请有规律得大块内存，allocator是你得不二选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AbstractByteBufAllocator ArrayAllocator RecyclingIntBlockAllocator </span><br></pre></td></tr></table></figure><p>5.2  <strong>Chunk</strong></p><p>表示一块内存。如果你想要对一类存储资源进行抽象，并统一管理，可以采用它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EncryptedChunk ChunkFactory MultiChunk </span><br></pre></td></tr></table></figure><p>5.3  <strong>Arena</strong></p><p>英文是舞台、竞技场的意思。由于Linux把它用在内存管理上发扬光大，它普遍用于各种存储资源的申请、释放与管理。为不同规格的存储chunk提供舞台，好像也是非常形象的表示。</p><p>关键是，这个词很美，作为后缀让类名显得很漂亮。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BookingArena StandaloneArena PoolArena </span><br></pre></td></tr></table></figure><p>5.4  <strong>Pool</strong></p><p>表示池子。内存池，线程池，连接池，池池可用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConnectionPool ObjectPool MemoryPool </span><br></pre></td></tr></table></figure><h2 id="6-过滤检测类"><a href="#6-过滤检测类" class="headerlink" title="6 过滤检测类**"></a>6 过滤检测类**</h2><p> <em>程序收到的事件和信息是非常多的，有些是合法的，有些需要过滤扔掉。根据不同的使用范围和功能性差别，过滤操作也有多种形式。你会在框架类代码中发现大量这样的名词。</em></p><p>6.1<strong>Pipeline，Chain</strong></p><p>一般用在责任链模式中。Netty，Spring MVC，Tomcat等都有大量应用。通过将某个处理过程加入到责任链的某个位置中，就可以接收前面处理过程的结果，强制添加或者改变某些功能。就像Linux的管道操作一样，最终构造出想要的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipeline ChildPipeline DefaultResourceTransformerChain FilterChain </span><br></pre></td></tr></table></figure><p>6.2<strong>Filter</strong></p><p>过滤器，用来筛选某些满足条件的数据集，或者在满足某些条件的时候执行一部分逻辑。如果和责任链连接起来，则通常能够实现多级的过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FilenameFilter AfterFirstEventTimeFilter ScanFilter </span><br></pre></td></tr></table></figure><p>6.3 <strong>Interceptor</strong></p><p>拦截器，其实和Filter差不多。不过在Tomcat中，Interceptor可以拿到controller对象，但filter不行。拦截器是被包裹在过滤器中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpRequestInterceptor </span><br></pre></td></tr></table></figure><p>6.4 <strong>Evaluator</strong></p><p>英文里是评估器的意思。可用于判断某些条件是否成立，一般内部方法evaluate会返回bool类型。比如你传递进去一个非常复杂的对象，或者字符串，进行正确与否的判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ScriptEvaluator SubtractionExpressionEvaluator StreamEvaluator </span><br></pre></td></tr></table></figure><p>6.5 <strong>Detector</strong></p><p>探测器。用来管理一系列探测性事件，并在发生的时候能够进行捕获和响应。比如Android的手势检测，温度检测等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileHandlerReloadingDetector TransformGestureDetector  ScaleGestureDetector </span><br></pre></td></tr></table></figure><h2 id="7-0-结构类"><a href="#7-0-结构类" class="headerlink" title="7.0 结构类"></a>7.0 <strong>结构类</strong></h2><p> <em>除了基本的数据结构，如数组、链表、队列、栈等，其他更高一层的常见抽象类，能够大量减少大家的交流，并能封装常见的变化。</em></p><p>7.1<strong>Cache</strong></p><p>这个没啥好说的，就是缓存。大块的缓存。常见的缓存算法有LRU、LFU、FIFO等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadingCache EhCacheCache </span><br></pre></td></tr></table></figure><p>7.2 <strong>Buffer</strong></p><p>buffer是缓冲，不同于缓存，它一般用在数据写入阶段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer RingBuffer DirectByteBuffer </span><br></pre></td></tr></table></figure><p>7.3 <strong>Composite</strong></p><p>将相似的组件进行组合，并以相同的接口或者功能进行暴露，使用者不知道这到底是一个组合体还是其他个体。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CompositeData CompositeMap ScrolledComposite </span><br></pre></td></tr></table></figure><p>7.4 <strong>Wrapper</strong></p><p>用来包装某个对象，做一些额外的处理，以便增加或者去掉某些功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IsoBufferWrapper ResponseWrapper MavenWrapperDownloader  </span><br></pre></td></tr></table></figure><p>7.5  <strong>Option, Param,Attribute</strong></p><p>用来表示配置信息。说实话，它和Properties的区别并不大，但由于Option通常是一个类，所以功能可以扩展的更强大一些。它通常比Config的级别更小，关注的也是单个属性的值。Param一般是作为参数存在，对象生成的速度要快一些。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpecificationOption SelectOption AlarmParam ModelParam </span><br></pre></td></tr></table></figure><p>7.6 <strong>Tuple</strong></p><p>元组的概念。由于Java中缺乏元组结构，我们通常会自定义这样的类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tuple2 Tuple3 </span><br></pre></td></tr></table></figure><p>7.7<strong>Aggreatore</strong></p><p>聚合器，可以做一些聚合计算。比如分库分表中的sum，max，min等聚合函数的汇集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigDecimalMaxAggregator PipelineAggregator TotalAggregator </span><br></pre></td></tr></table></figure><p>7.8 <strong>Iterator</strong></p><p>迭代器。可以实现Java的迭代器接口，也可以有自己的迭代方式。在数据集很大的时候，需要进行深度遍历，迭代器可以说是必备的。使用迭代器还可以在迭代过程中安全的删除某些元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BreakIterator StringCharacterIterator </span><br></pre></td></tr></table></figure><p>7.9 <strong>Batch</strong></p><p>某些可以批量执行的请求或者对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SavedObjectBatch BatchRequest </span><br></pre></td></tr></table></figure><p>7.10 <strong>Limiter</strong></p><p>限流器，使用漏桶算法或者令牌桶来完成平滑的限流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DefaultTimepointLimiter RateLimiter TimeBasedLimiter </span><br></pre></td></tr></table></figure><h2 id="8-0-常见设计模式命名"><a href="#8-0-常见设计模式命名" class="headerlink" title="8.0 常见设计模式命名"></a>8.0 <strong>常见设计模式命名</strong></h2><p>8.1 <strong>Strategy</strong></p><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。策略模式。相同接口，不同实现类，同一方法结果不同，实现策略不同。比如一个配置文件，是放在xml里，还是放在json文件里，都可以使用不同的provider去命名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RemoteAddressStrategy StrategyRegistration AppStrategy </span><br></pre></td></tr></table></figure><p>8.2 <strong>Adapter</strong></p><p>将一个类的接口转换为客户希望的另一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类一起工作。</p><p>不过，相对于传统的适配器进行api转接，如果你的某个Handler里面方法特别的多，可以使用Adapter实现一些默认的方法进行0适配。那么其他类使用的时候，只需要继承Adapter，然后重写他想要重写的方法就可以了。这也是Adapter的常见用法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtendedPropertiesAdapter ArrayObjectAdapter CardGridCursorAdapter </span><br></pre></td></tr></table></figure><p>8.3 <strong>Action,Command</strong></p><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p><p>用来表示一系列动作指令，用来实现命令模式，封装一系列动作或者功能。Action一般用在UI操作上，后端框架可以无差别的使用。</p><p>在DDD的概念中，CQRS的Command的C，既为Command。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeleteAction BoardCommand </span><br></pre></td></tr></table></figure><p>8.4 <strong>Event</strong></p><p>表示一系列事件。一般的，在语义上，Action，Command等，来自于主动触发；Event来自于被动触发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObservesProtectedEvent KeyEvent </span><br></pre></td></tr></table></figure><p>8.5 <strong>Delegate</strong></p><p>代理或者委托模式。委托模式是将一件属于委托者做的事情，交给另外一个被委托者来处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LayoutlibDelegate FragmentDelegate </span><br></pre></td></tr></table></figure><p>8.6 <strong>Builder</strong></p><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>构建者模式的标准命名。比如StringBuilder。当然StringBuffer是个另类。这也说明了，规则是人定的，人也可以破坏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JsonBuilder RequestBuilder </span><br></pre></td></tr></table></figure><p>8.7 <strong>Template</strong></p><p>模板方法类的命名。定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JDBCTemplate </span><br></pre></td></tr></table></figure><p>8.8 <strong>Proxy</strong></p><p>代理模式。为其他对象提供一种代理以控制对这个对象的访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProxyFactory  SlowQueryProxy </span><br></pre></td></tr></table></figure><h2 id="9-0解析类命名"><a href="#9-0解析类命名" class="headerlink" title="9.0解析类命名"></a>9.0<strong>解析类命名</strong></h2><p>写代码要涉及到大量的字符串解析、日期解析、对象转换等。根据语义和使用场合的区别，它们也分为多种。*</p><p>9.1 <strong>Converter，Resolver</strong></p><p>转换和解析。一般用于不同对象之间的格式转换，把一类对象转换成另一类。注意它们语义上的区别，一般特别复杂的转换或者有加载过程的需求，可以使用Resolver。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataSetToListConverter LayoutCommandLineConverter InitRefResolver MustacheViewResolver </span><br></pre></td></tr></table></figure><p>9.2<strong>Parser</strong></p><p>用来表示非常复杂的解析器，比如解析DSL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLParser JSONParser </span><br></pre></td></tr></table></figure><p>9.3<strong>Customizer</strong></p><p>用来表示对某个对象进行特别的配置。由于这些配置过程特别的复杂，值得单独提取出来进行自定义设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ContextCustomizer DeviceFieldCustomizer </span><br></pre></td></tr></table></figure><p>9.4<strong>Formatter</strong></p><p>格式化类。主要用于字符串、数字或者日期的格式化处理工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DateFormatter StringFormatter </span><br></pre></td></tr></table></figure><h2 id="10-0-网络类"><a href="#10-0-网络类" class="headerlink" title="10.0 网络类"></a>10.0 <strong>网络类</strong></h2><ol start="10"><li>1<strong>Packet</strong></li></ol><p>通常用于网络编程中的数据包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DhcpPacket PacketBuffer </span><br></pre></td></tr></table></figure><p>10.2 <strong>Protocol</strong></p><p>同样用户网络编程中，用来表示某个协议。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RedisProtocol HttpProtocol </span><br></pre></td></tr></table></figure><p>10.3 <strong>Encoder、Decoder、Codec</strong></p><p>编码解码器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RedisEncoder RedisDecoder RedisCodec </span><br></pre></td></tr></table></figure><p>10.4 <strong>Request，Response</strong></p><p>一般用于网络请求的进和出。如果你用在非网络请求的方法上，会显得很怪异。</p><ul><li>10 <strong>其它</strong></li></ul><p>11 <strong>Util，Helper</strong></p><p>都表示工具类，Util一般是无状态的，Helper以便需要创建实例才能使用。但是一般没有使用Tool作为后缀的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpUtil TestKeyFieldHelper CreationHelper </span><br></pre></td></tr></table></figure><p>12 <strong>Mode，Type</strong></p><p>看到mode这个后缀，就能猜到这个类大概率是枚举。它通常把常见的可能性都列到枚举类里面，其他地方就可以引用这个Mode。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OperationMode BridgeMode ActionType </span><br></pre></td></tr></table></figure><p>13 <strong>Invoker，Invocation</strong></p><p>invoker是一类接口，通常会以反射或者触发的方式，执行一些具体的业务逻辑。通过抽象出invoke方法，可以在invoke执行之前对入参进行记录或者处理；在invoke执行之后对结果和异常进行处理，是AOP中常见的操作方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MethodInvoker Invoker ConstructorInvocation </span><br></pre></td></tr></table></figure><p>14 <strong>Initializer</strong></p><p>如果你的应用程序，需要经过大量的初始化操作才能启动，那就需要把它独立出来，专门处理初始化动作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MultiBackgroundInitialize ApplicationContextInitializer </span><br></pre></td></tr></table></figure><p>15 <strong>Feture，Promise</strong></p><p>它们都是用在多线程之间的，进行数据传递。</p><p>Feture相当于一个占位符，代表一个操作将来的结果。一般通过get可以直接阻塞得到结果，或者让它异步执行然后通过callback回调结果。</p><p>但如果回调中嵌入了回调呢？如果层次很深，就是回调地狱。Java中的CompletableFuture其实就是Promise，用来解决回调地狱问题。Promise是为了让代码变得优美而存在的。</p><p>16 <strong>Selector</strong></p><p>根据一系列条件，获得相应的同类资源。它比较像Factory，但只处理单项资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X509CertSelector NodeSelector </span><br></pre></td></tr></table></figure><p>17 <strong>Reporter</strong></p><p>用来汇报某些执行结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtentHtmlReporter MetricReporter </span><br></pre></td></tr></table></figure><p>18 <strong>Constants</strong></p><p>一般用于常量列表。</p><p>19 <strong>Accessor</strong></p><p>封装了一系列get和set方法的类。像lombok就有Accessors注解，生成这些方法。但Accessor类一般是要通过计算来完成get和set，而不是直接操作变量。这适合比较复杂的对象存取服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ComponentAccessor StompHeaderAccessor </span><br></pre></td></tr></table></figure><p>110 <strong>Generator</strong></p><p>生成器，一般用于生成代码，生成id等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CodeGenerator CipherKeyGenerator </span><br></pre></td></tr></table></figure><p>转载自 [原创：小姐姐味道（微信公众号ID：xjjdog），欢迎分享，转载请保留出处。]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ceph配置</title>
      <link href="4071038d.html"/>
      <url>4071038d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Posted on 2017-05-15 | In <a href="http://www.yangguanjun.com/categories/ceph/">[c]{.ul} [eph]{.ul}</a> | | 4099</p><p><strong>[概]{.ul} [述 ]{.ul}</strong></p><p>Ceph的配置参数很多，从⽹上也能搜索到⼀⼤批的调优参数，但这些参数为什么这么设置？设置为这样是否合理？解释的并不多</p><p>本⽂从当前我们的ceph.conf⽂件⼊⼿，解释其中的每⼀项配置，做为以后参数调优和新⼈学习的依据；</p><p><a href="https://docs.ceph.com/en/latest/rados/configuration/network-config-ref/">Network Configuration Reference — Ceph Documentation</a></p></blockquote><h1 id="1，⼀些固定配置参数"><a href="#1，⼀些固定配置参数" class="headerlink" title="1，⼀些固定配置参数"></a>1，⼀些固定配置参数</h1><blockquote><p>以上通常是通过ceph-deploy⽣成的，都是ceph monitor相关的参数，不⽤修改；</p></blockquote><h1 id="2，⽹络配置参数"><a href="#2，⽹络配置参数" class="headerlink" title="2，⽹络配置参数"></a>2，⽹络配置参数</h1><blockquote><p>public network：monitor与osd，client与monitor，client与osd通信的⽹络，最好配置为带宽较⾼的万兆⽹络；</p><p>cluster network：OSD之间通信的⽹络，⼀般配置为带宽较⾼的万兆⽹络；</p></blockquote><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><blockquote><p> <a href="http://docs.ceph.com/docs/master/rados/configuration/network-config-ref/">[ttp://docs.ceph.com/docs/master/rados/configuration/network-config-ref/]{.ul}</a></p></blockquote><h1 id="3，pool-size配置参数"><a href="#3，pool-size配置参数" class="headerlink" title="3，pool size配置参数"></a>3，pool size配置参数</h1><blockquote><p>这两个是创建ceph pool的时候的默认size参数，⼀般配置为3和1，3副本能⾜够保证数据的可靠性；</p></blockquote><h1 id="4，认证配置参数"><a href="#4，认证配置参数" class="headerlink" title="4，认证配置参数"></a>4，认证配置参数</h1><blockquote><p>以上是Ceph authentication的配置参数，默认值为开启ceph认证；</p><p>在内部使⽤的ceph集群中⼀般配置为none，即不使⽤认证，这样能适当加快ceph集群访问速度；</p></blockquote><h1 id="5，osd-down-out配置参数"><a href="#5，osd-down-out配置参数" class="headerlink" title="5，osd down out配置参数"></a>5，osd down out配置参数</h1><blockquote><p>mon_osd_down_out_interval ：ceph标记⼀个osd为down and out的最⼤时间间隔mon_osd_min_down_reporters ：mon标记⼀个osd为down的最⼩reporters个数（报告该osd为down的其他osd为⼀个reporter）</p><p>mon_osd_report_timeout ：mon标记⼀个osd为down的最⻓等待时间</p><p>osd_heartbeat_interval ：osd发送heartbeat给其他osd的间隔时间（同⼀PG之间的osd才会有</p><p>heartbeat）</p><p>osd_heartbeat_grace ：osd报告其他osd为down的最⼤时间间隔，grace调⼤，也有副作⽤，如果某个osd异常退出，等待其他osd上报的时间必须为grace，在这段时间段内，这个osd负责的pg的io会hang住，所以尽量不要将grace调的太⼤。</p><p>基于实际情况合理配置上述参数，能减少或及时发现osd变为down（降低IO hang住的时间和概率）， 延⻓osd变为down and out的时间（防⽌⽹络抖动造成的数据recovery）；</p></blockquote><h2 id="参考：-1"><a href="#参考：-1" class="headerlink" title="参考："></a>参考：</h2><blockquote><p>[h]{.ul} <a href="http://docs.ceph.com/docs/master/rados/configuration/mon-osd-interaction/">[ttp://docs.ceph.com/docs/master/rados/configuration/mon-osd-interaction/]{.ul}</a> [h]{.ul} <a href="http://blog.wjin.org/posts/ceph-osd-heartbeat.html">[ttp://blog.wjin.org/posts/ceph-osd-heartbeat.html]{.ul}</a></p></blockquote><h1 id="6，objecter配置参数"><a href="#6，objecter配置参数" class="headerlink" title="6，objecter配置参数"></a>6，objecter配置参数</h1><blockquote><p>osd client端objecter的throttle配置，它的配置会影响librbd，RGW端的性能；</p></blockquote><h2 id="配置建议："><a href="#配置建议：" class="headerlink" title="配置建议："></a>配置建议：</h2><blockquote><p>调⼤这两个值</p></blockquote><h1 id="7，ceph-rgw配置参数"><a href="#7，ceph-rgw配置参数" class="headerlink" title="7，ceph rgw配置参数"></a>7，ceph rgw配置参数</h1><blockquote><p>rgw_frontends ：rgw的前端配置，⼀般配置为使⽤轻量级的civetweb；prot为访问rgw的端⼝，根据实际情况配置；num_threads为civetweb的线程数；</p><p>rgw_thread_pool_size ：rgw前端web的线程数，与rgw_frontends中的num_threads含义⼀致，但</p><p>num_threads 优 于 rgw_thread_pool_size 的 配 置 ， 两 个 只 需 要 配 置 ⼀ 个 即 可 ； rgw_override_bucket_index_max_shards ：rgw bucket index object的最⼤shards数，增⼤这个值能减少bucket index object的访问时间，但也会加⼤bucket的ls时间；</p><p>rgw_max_chunk_size ：rgw最⼤chunk size，针对⼤⽂件的对象存储场景可以把这个值调⼤；</p><p>rgw_cache_lru_size ：rgw的lru cache size，对于读较多的应⽤场景，调⼤这个值能加快rgw的响应速度；</p><p>rgw_bucket_default_quota_max_objects ：配合该参数限制⼀个bucket的最⼤objects个数；</p></blockquote><h2 id="参考：-2"><a href="#参考：-2" class="headerlink" title="参考："></a>参考：</h2><blockquote><p>[h]{.ul} <a href="http://docs.ceph.com/docs/jewel/install/install-ceph-gateway/">[ttp://docs.ceph.com/docs/jewel/install/install-ceph-gateway/]{.ul}</a></p><p>[h]{.ul} <a href="http://ceph-users.ceph.narkive.com/mdB90g7R/rgw-increase-the-first-chunk-size">[ttp://ceph-users.ceph.narkive.com/mdB90g7R/rgw-increase-the-first-chunk-size]{.ul}</a> [h]{.ul} <a href="https://access.redhat.com/solutions/2122231">[ttps://access.redhat.com/solutions/2122231]{.ul}</a></p></blockquote><h1 id="8，debug配置参数"><a href="#8，debug配置参数" class="headerlink" title="8，debug配置参数"></a>8，debug配置参数</h1><blockquote><p>关闭了所有的debug信息，能⼀定程度加快ceph集群速度，但也会丢失⼀些关键log，出问题的时候不好分析；</p></blockquote><h2 id="参考：-3"><a href="#参考：-3" class="headerlink" title="参考："></a>参考：</h2><blockquote><p>[h]{.ul} <a href="http://www.10tiao.com/html/362/201609/2654062487/1.html">[ttp://www.10tiao.com/html/362/201609/2654062487/1.html]{.ul}</a></p></blockquote><h1 id="9，osd-op配置参数"><a href="#9，osd-op配置参数" class="headerlink" title="9，osd op配置参数"></a>9，osd op配置参数</h1><blockquote><p>osd_enable_op_tracker ：追踪osd op状态的配置参数，默认为true；不建议关闭，关闭后osd的slow_request，ops_in_flight，historic_ops ⽆法正常统计；</p><p>打开op tracker后，若集群iops很⾼， osd_num_op_tracker_shard 可以适当调⼤，因为每个shard都有个独⽴的mutex锁；</p><p>osd_op_threads ：对应的work queue有peering_wq （osd peering请求），</p><p>recovery_gen_wq （PG recovery请求）；</p><p>osd_disk_threads ：对应的work queue为 remove_wq （PG remove请求）；</p><p>[osd_op_num_shards]{.ul} 和osd_op_num_threads_per_shard ：对应的thread pool为osd_op_tp ，work queue为op_shardedwq ；</p><p>处理的请求包括：</p><p>1.</p><p>2.</p><p>3.</p><p>调⼤osd_op_num_shards 可以增⼤osd ops的处理线程数，增⼤并发性，提升OSD性能；</p></blockquote><h1 id="10，osd-client-message配置参数"><a href="#10，osd-client-message配置参数" class="headerlink" title="10，osd client message配置参数"></a>10，osd client message配置参数</h1><blockquote><p>这个是osd端收到client messages的capacity配置，配置⼤的话能提升osd的处理能⼒，但会占⽤较多的系统内存；</p></blockquote><h2 id="配置建议：-1"><a href="#配置建议：-1" class="headerlink" title="配置建议："></a>配置建议：</h2><blockquote><p>服务器内存⾜够⼤的时候，适当增⼤这两个值</p></blockquote><h1 id="11，osd-scrub配置参数"><a href="#11，osd-scrub配置参数" class="headerlink" title="11，osd scrub配置参数"></a>11，osd scrub配置参数</h1><blockquote><p>Ceph osd scrub是保证ceph数据⼀致性的机制，scrub以PG为单位，但每次scrub回获取PG lock，所以它可能会影响PG正常的IO；</p><p>Ceph后来引⼊了chunky的scrub模式，每次scrub只会选取PG的⼀部分objects，完成后释放PG lock， 并把下⼀次的PG scrub加⼊队列；这样能很好的减少PG scrub时候占⽤PG lock的时间，避免过多影响PG正常的IO；</p><p>同理，引⼊的osd_scrub_sleep 参数会让线程在每次scrub前释放PG lock，然后睡眠⼀段时间，也能很好的减少scrub对PG正常IO的影响；</p></blockquote><h2 id="配置建议：-2"><a href="#配置建议：-2" class="headerlink" title="配置建议："></a>配置建议：</h2><blockquote><p>osd_scrub_begin_hour 和osd_scrub_end_hour ：OSD Scrub的开始结束时间，根据具体业务指定；</p><p>osd_scrub_sleep ：osd在每次执⾏scrub时的睡眠时间；有个bug跟这个配置有关，建议关闭；</p><p>osd_scrub_load_threshold ：osd开启scrub的系统load阈值，根据系统的load average值配置该参数；</p><p>osd_scrub_chunk_min 和osd_scrub_chunk_max ：根据PG中object的个数配置；针对RGW全是</p><p>⼩⽂件的情况，这两个值需要调⼤；</p></blockquote><h2 id="参考：-4"><a href="#参考：-4" class="headerlink" title="参考："></a>参考：</h2><blockquote><p>[h]{.ul} <a href="http://www.jianshu.com/p/ea2296e1555c">[ttp://www.jianshu.com/p/ea2296e1555c]{.ul}</a> [h]{.ul} <a href="http://tracker.ceph.com/issues/19497">[ttp://tracker.ceph.com/issues/19497]{.ul}</a></p></blockquote><h1 id="12，osd-thread-timeout配置参数"><a href="#12，osd-thread-timeout配置参数" class="headerlink" title="12，osd thread timeout配置参数"></a>12，osd thread timeout配置参数</h1><blockquote><p>osd_op_thread_timeout 和osd_op_thread_suicide_timeout 关联的work queue为：</p><p>- 关联的请求为： OpRequestRef ， PGSnapTrim ， PGScrub</p><p>- 关联的请求为：osd peering</p><p>osd_recovery_thread_timeout 和osd_recovery_thread_suicide_timeout 关联的work queue</p><p>为：</p><p>- 关联的请求为：PG recovery</p><p>Ceph的work queue都有个基类WorkQueue_ ，定义如下：</p><p>这⾥的timeout_interval 和suicide_interval 分别对应上⾯所述的配置timeout 和</p><p>当thread处理work queue中的⼀个请求时，会受到这两个timeout时间的限制：</p></blockquote><ul><li><p>  到时间后设置m_unhealthy_workers+1</p></li><li><p>  到时间后调⽤assert，OSD进程crush</p></li></ul><blockquote><p>对应的处理函数为：</p><p>当前仅有RGW添加了worker的perfcounter，所以也只有RGW可以通过perf dump查看total/unhealthy</p><p>的worker信息：</p><p>对应的配置项为：</p><p>filestore_op_threads ：对应的thread pool为op_tp ，对应的work queue为op_wq ；filestore的所有请求都经过op_wq处理；</p><p>增⼤该参数能提升filestore的处理能⼒，提升filestore的性能；配合filestore的throttle⼀起调整；</p><p>配置的含义与上⼀节中的[thread_timeout/thread_suicide_timeout]{.ul} 保持⼀致；</p></blockquote><h1 id="13，filestore-merge-split配置参数"><a href="#13，filestore-merge-split配置参数" class="headerlink" title="13，filestore merge/split配置参数"></a>13，filestore merge/split配置参数</h1><blockquote><p>这两个参数是管理filestore的⽬录分裂/合并的，filestore的每个⽬录允许的最⼤⽂件数为：</p><p>在RGW的⼩⽂件应⽤场景，会很容易达到默认配置的⽂件数（320），若在写的过程中触发了filestore 的分裂，则会⾮常影响filestore的性能；</p><p>每次filestore的⽬录分裂，会依据如下规则分裂为多层⽬录，最底层16个⼦⽬录：</p><p>例如PG 31.4C0, hash结尾是4C0，若该⽬录分裂，会分裂为 DIR_0/DIR_C/DIR_4/{DIR_0, DIR_F} ；</p><p>原始⽬录下的object会根据规则放到不同的⼦⽬录⾥，object的名称格式为: * head_xxxxX4C0_* ，分裂时候X是⼏，就放进⼦⽬录DIR_X⾥。⽐如object： * head_xxxxA4C0_* , 就放进⼦⽬录</p><p>⾥；</p></blockquote><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><ol><li><p> 增⼤merge/split配置参数的值，使单个⽬录容纳更多的⽂件；</p></li><li><p> filestore_merge_threshold 配置为负数；这样会提前触发⽬录的预分裂，避免⽬录在某⼀时间段的集中分裂，详细机制没有调研；</p></li><li><p> 创建pool时指定expected-num-objects ；这样会依据⽬录分裂规则，在创建pool的时候就创建分</p></li></ol><blockquote><p>裂的⼦⽬录，避免了⽬录分裂对filestore性能的影响；</p></blockquote><h2 id="参考：-5"><a href="#参考：-5" class="headerlink" title="参考："></a>参考：</h2><blockquote><p>[h]{.ul} <a href="http://docs.ceph.com/docs/master/rados/configuration/filestore-config-ref/">[ttp://docs.ceph.com/docs/master/rados/configuration/filestore-config-ref/]{.ul}</a> [h]{.ul} <a href="http://docs.ceph.com/docs/jewel/rados/operations/pools/#create-a-pool">[ttp://docs.ceph.com/docs/jewel/rados/operations/pools/#create-a-pool]{.ul}</a></p><p>[h]{.ul} <a href="http://blog.csdn.net/for_tech/article/details/51251936">[ttp://blog.csdn.net/for_tech/article/details/51251936]{.ul}</a> [h]{.ul} <a href="http://ivanjobs.github.io/page3/">[ttp://ivanjobs.github.io/page3/]{.ul}</a></p></blockquote><h1 id="14，filestore-fd-cache配置参数"><a href="#14，filestore-fd-cache配置参数" class="headerlink" title="14，filestore fd cache配置参数"></a>14，filestore fd cache配置参数</h1><blockquote><p>filestore的fd cache是加速访问filestore⾥的file的，在⾮⼀次性写⼊的应⽤场景，增⼤配置可以很明显的提升filestore的性能；</p></blockquote><h1 id="15，filestore-sync配置参数"><a href="#15，filestore-sync配置参数" class="headerlink" title="15，filestore sync配置参数"></a>15，filestore sync配置参数</h1><blockquote><p>filestore_wbthrottle_enable 的配置是关于filestore writeback throttle的，即我们说的filestore处理workqueue op_wq 的数据量阈值；默认值是true，开启后XFS相关的配置参数有：</p><p>若使⽤普通HDD，可以保持其为true；针对SSD，建议将其关闭，不开启writeback throttle；</p><p>filestore_min_sync_interval 和 filestore_max_sync_interval 是 配 置 filestore flush outstanding IO到disk的时间间隔的；增⼤配置可以让系统做尽可能多的IO merge，减少filestore写磁盘的压⼒，但也会增⼤page cache占⽤内存的开销，增⼤数据丢失的可能性；</p><p>filestore_commit_timeout 是配置filestore sync entry到disk的超时时间，在filestore压⼒很⼤时， 调⼤这个值能尽量避免IO超时导致OSD crush；</p></blockquote><h1 id="16，filestore-throttle配置参数"><a href="#16，filestore-throttle配置参数" class="headerlink" title="16，filestore throttle配置参数"></a>16，filestore throttle配置参数</h1><blockquote><p>在jewel版本⾥，引⼊了dynamic throttle，来平滑普通throttle带来的⻓尾效应问题；</p><p>⼀般在使⽤普通磁盘时，之前的throttle机制即可很好的⼯作，所以这⾥默认</p><p>filestore_queue_high_delay_multiple 和filestore_queue_max_delay_multiple 都为0；</p><p>针对⾼速磁盘，需要在部署之前，通过⼩⼯具ceph_smalliobenchfs 来测试下，获取合适的配置参数；</p></blockquote><h2 id="参考：-6"><a href="#参考：-6" class="headerlink" title="参考："></a>参考：</h2><blockquote><p>[h]{.ul} <a href="http://docs.ceph.com/docs/jewel/dev/osd_internals/osd_throttles/">[ttp://docs.ceph.com/docs/jewel/dev/osd_internals/osd_throttles/]{.ul}</a> [h]{.ul} <a href="http://blog.wjin.org/posts/ceph-dynamic-throttle.html">[ttp://blog.wjin.org/posts/ceph-dynamic-throttle.html]{.ul}</a></p><p>[h]{.ul} <a href="https://github.com/ceph/ceph/blob/master/src/doc/dynamic-throttle.txt">[ttps://github.com/ceph/ceph/blob/master/src/doc/dynamic-throttle.txt]{.ul}</a> [C]{.ul} <a href="http://www.yangguanjun.com/2017/05/15/Ceph-configuration/Ceph-BackoffThrottle.md">[eph BackoffThrottle分析]{.ul}</a></p></blockquote><h1 id="17，filestore-finisher-threads配置参数"><a href="#17，filestore-finisher-threads配置参数" class="headerlink" title="17，filestore finisher threads配置参数"></a>17，filestore finisher threads配置参数</h1><blockquote><p>这两个参数定义filestore commit/apply的finisher处理线程数，默认都为1，任何IO commit/apply完成后，都需要经过对应的ondisk/apply finisher thread处理；</p><p>在使⽤普通HDD时，磁盘性能是瓶颈，单个finisher thread就能处理好；</p><p>但在使⽤⾼速磁盘的时候，IO完成⽐较快，单个finisher thread不能处理这么多的IO commit/apply reply，它会成为瓶颈；所以在jewel版本⾥引⼊了finisher thread pool的配置，这⾥⼀般配置为2即可；</p></blockquote><h1 id="18，journal配置参数"><a href="#18，journal配置参数" class="headerlink" title="18，journal配置参数"></a>18，journal配置参数</h1><blockquote><p>journal_max_write_bytes 和journal_max_write_entries 是journal⼀次write的数据量和entries 限制；</p><p>针对SSD分区做journal的情况，这两个值要增⼤，这样能增⼤journal的吞吐量；</p><p>journal_throttle_high_multiple 和journal_throttle_max_multiple 是JournalThrottle 的配置参数， JournalThrottle 是BackoffThrottle 的封装类，所以JournalThrottle 与我们在filestore throttle介绍的dynamic throttle⼯作原理⼀样；</p><p>从上述代码中看出相关的配置参数有：</p></blockquote><h1 id="19，rbd-cache配置参数"><a href="#19，rbd-cache配置参数" class="headerlink" title="19，rbd cache配置参数"></a>19，rbd cache配置参数</h1><blockquote><p>rbd_cache_size ：client端每个rbd image的cache size，不需要太⼤，可以调整为64M，不然会⽐较占client端内存；</p><p>参照默认值，根据rbd_cache_size 的⼤⼩调整rbd_cache_max_dirty 和</p><p>rbd_cache_max_dirty ：在writeback模式下cache的最⼤bytes数，默认是24MB；当该值为0 时，表示使⽤writethrough模式；</p><p>rbd_cache_target_dirty ：在writeback模式下cache向ceph集群写⼊的bytes阀值，默认</p><p>16MB；注意该值⼀定要⼩于rbd_cache_max_dirty 值</p><p>rbd_cache_writethrough_until_flush ：在内核触发flush cache到ceph集群前rbd cache⼀直是writethrough模式，直到flush后rbd cache变成writeback模式；</p><p>rbd_cache_max_dirty_age ：标记OSDC端ObjectCacher中entry在cache中的最⻓时间；</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>chatGPT的介绍转载</title>
      <link href="c0bea6a0.html"/>
      <url>c0bea6a0.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于-ChatGPT-的五个最重要问题"><a href="#关于-ChatGPT-的五个最重要问题" class="headerlink" title="关于 ChatGPT 的五个最重要问题"></a>关于 ChatGPT 的五个最重要问题</h1><p>我们判断，如果ChatGPT不犯大错，两年之内，整个科技行业甚至人类社会都会被颠覆一<br>遍。倒计时已经开始了。</p><p>在ChatGPT纪元中，提问题的能力和判断力也许是人类最重要的两个能力。我们这里提出五<br>个关键问题，并且试图抛开网络上的二手观点，做出基于原理的判断。</p><p> 更详细的科普文可以参考这篇：了解AIGC中的ChatGPT和LLM</p><p> 其中包含如何在公司快速便捷地使用ChatGPT</p><p> 针对中台业务场景的应用：ChatGPT在中台业务应用的可能性与探索</p><h6 id="这篇文章会尽量用准确的说明与类比（如何区分准确的类比和偷换概念的类比）去解读技术。"><a href="#这篇文章会尽量用准确的说明与类比（如何区分准确的类比和偷换概念的类比）去解读技术。" class="headerlink" title="这篇文章会尽量用准确的说明与类比（如何区分准确的类比和偷换概念的类比）去解读技术。"></a>这篇文章会尽量用准确的说明与类比（如何区分准确的类比和偷换概念的类比）去解读技术。</h6><h6 id="但是对于这样一个非常新、非常颠覆、大家对原理和应用都还没形成共识的技术，不了解技术"><a href="#但是对于这样一个非常新、非常颠覆、大家对原理和应用都还没形成共识的技术，不了解技术" class="headerlink" title="但是对于这样一个非常新、非常颠覆、大家对原理和应用都还没形成共识的技术，不了解技术"></a>但是对于这样一个非常新、非常颠覆、大家对原理和应用都还没形成共识的技术，不了解技术</h6><h6 id="细节就去打比方，难免信口开河。所以我们会先尽量无损地把需要的技术细节都盘清楚，然后"><a href="#细节就去打比方，难免信口开河。所以我们会先尽量无损地把需要的技术细节都盘清楚，然后" class="headerlink" title="细节就去打比方，难免信口开河。所以我们会先尽量无损地把需要的技术细节都盘清楚，然后"></a>细节就去打比方，难免信口开河。所以我们会先尽量无损地把需要的技术细节都盘清楚，然后</h6><h6 id="再去进行抽象和提取本质。"><a href="#再去进行抽象和提取本质。" class="headerlink" title="再去进行抽象和提取本质。"></a>再去进行抽象和提取本质。</h6><h2 id="哪五个问题？"><a href="#哪五个问题？" class="headerlink" title="哪五个问题？"></a>哪五个问题？</h2><ol><li><strong>是什么：</strong> ChatGPT是范式突破吗？和过往AI有什么不同？</li><li><strong>会怎样：</strong> ChatGPT两年内会达到什么水准？</li><li><strong>行业格局：</strong> ChatGPT以及GPT有壁垒吗？</li><li><strong>如何参与：</strong> 我们未来应该如何使用ChatGPT？</li><li><strong>人文：</strong> 人类和ChatGPT的本质区别是什么？对人类社会的冲击？</li></ol><p>还有一个不需要讨论的重要问题： <strong>ChatGPT不会开源的</strong> ，因为AGI是一个危险品。国内那些依<br>赖开源+抄的公司可以死心了。指望原子弹开源吗？</p><p>我们搞清楚这五个问题，就能判断市面上大多数解读ChatGPT的观点，无论从技术、商业、<br>投资，等等角度，是否靠谱了。其实就两个关键</p><ol><li>对ChatGPT新能力的认知：这新能力是什么，有什么意义？</li><li>对“能力获取难度”的认知：ChatGPT如何获得的？难度有多大？</li></ol><p>文章结尾我们会做一下总结。让你下次见到某大模型，可以判断这是ChatGPT的80%还是</p><h6 id="0-。"><a href="#0-。" class="headerlink" title="0%。"></a>0%。</h6><h3 id="为什么这样问？"><a href="#为什么这样问？" class="headerlink" title="为什么这样问？"></a>为什么这样问？</h3><p>最近到处都在讨论ChatGPT，就像A股 6000 点的时候所有人都在讨论A股一样。但是大家的<br>问题主要聚焦在于自己会不会被ChatGPT取代，中国如何赶超ChatGPT，ChatGPT相关概念股<br>票是什么，等等。这些问题很重要，但是对于ChatGPT这样一个人类高科技结晶的新物种，<br>不先搞清楚它 <strong>“是什么”和“如何牛逼的”</strong> ，那就没有办法形成自己的判断。没有自己的判断，看<br>ChatGPT就像看元宇宙、Web3、自动驾驶一样，觉得好像牛逼，也有一套看似点只能被别人<br>牵着走。</p><h6 id="所以我们先要搞清楚这两个问题。"><a href="#所以我们先要搞清楚这两个问题。" class="headerlink" title="所以我们先要搞清楚这两个问题。"></a>所以我们先要搞清楚这两个问题。</h6><p>搞清楚ChatGPT“是什么”和“如何牛逼的”是一件困难的事情，因为最顶尖的人工智能大佬们也<br>没有达成共识。比如Meta的AI负责人，深度学习三大佬之一的LeCun就不看好，认为这就<br>是个基于auto-regressive（自回归）的LLM（large language model，大语言模型），从方法上<br>来讲没有啥范式突破。只是因为OpenAI是个创业公司，大家宽容度比较高，ChatGPT在乱说<br>话，大家也能容忍。</p><p>另一面，ChatGPT的火热就不说了，比如特斯拉的首席AI科学家就选择回到OpenAI，共建<br>AGI（artificial general intelligence，通用人工智能，也是OpenAI的追求目标）；Meta的VR创<br>始人卡马克选择离开Meta，自己开一家AGI公司。另外一篇文章截取了大佬们的赞誉</p><h6 id="技术讲解环节：“自回归”“大语言模型”是两个关键词"><a href="#技术讲解环节：“自回归”“大语言模型”是两个关键词" class="headerlink" title="技术讲解环节：“自回归”“大语言模型”是两个关键词"></a>技术讲解环节：“自回归”“大语言模型”是两个关键词</h6><h6 id="-自回归的意思是，我先用模型预测下一个词是什么，然后把预测出来的词带入模型，去预"><a href="#-自回归的意思是，我先用模型预测下一个词是什么，然后把预测出来的词带入模型，去预" class="headerlink" title=" 自回归的意思是，我先用模型预测下一个词是什么，然后把预测出来的词带入模型，去预"></a> 自回归的意思是，我先用模型预测下一个词是什么，然后把预测出来的词带入模型，去预</h6><h6 id="测再下一个词是什么，不断迭代。这是过往语言模型的通用范式。也能让各类语言类任务"><a href="#测再下一个词是什么，不断迭代。这是过往语言模型的通用范式。也能让各类语言类任务" class="headerlink" title="测再下一个词是什么，不断迭代。这是过往语言模型的通用范式。也能让各类语言类任务"></a>测再下一个词是什么，不断迭代。这是过往语言模型的通用范式。也能让各类语言类任务</h6><h6 id="统一成“生成式”任务"><a href="#统一成“生成式”任务" class="headerlink" title="统一成“生成式”任务"></a>统一成“生成式”任务</h6><h6 id="-大语言模型是因为GPT的海量数据与参数。大语言模型本身也值得技术科普一下，我们在"><a href="#-大语言模型是因为GPT的海量数据与参数。大语言模型本身也值得技术科普一下，我们在" class="headerlink" title=" 大语言模型是因为GPT的海量数据与参数。大语言模型本身也值得技术科普一下，我们在"></a> 大语言模型是因为GPT的海量数据与参数。大语言模型本身也值得技术科普一下，我们在</h6><h6 id="第一个问题中展开"><a href="#第一个问题中展开" class="headerlink" title="第一个问题中展开"></a>第一个问题中展开</h6><p>大佬们都认可AGI的重要意义，但是对于ChatGPT是不是有“范式突破”，是不是AGI，有重大<br>分歧。大佬们无法形成共识，我们有两种选择，一种是做“early-adoptor”，早期采用者（特点<br>是懂技术，有vision，想通过技术带来巨大改变），去在体验和探索中形成自己的观点；一种是<br>做“early-mass”，早期大众（特点是厌恶风险，希望追求确定的改善），等着标准成熟，应用也<br>有定论，再去采用。作为中台，我们需要抓住IEG early-adoptor的身份。所以我们需要在纷杂<br>的信息中形成自己的理解和主张。</p><h6 id="这次讨论就想达到这个目的。数科和算法同学会保证信息的准确，知之为知之不知为不知，但"><a href="#这次讨论就想达到这个目的。数科和算法同学会保证信息的准确，知之为知之不知为不知，但" class="headerlink" title="这次讨论就想达到这个目的。数科和算法同学会保证信息的准确，知之为知之不知为不知，但"></a>这次讨论就想达到这个目的。数科和算法同学会保证信息的准确，知之为知之不知为不知，但</h6><h6 id="是观点、主张、区别、共识，需要老板们自己推演出。"><a href="#是观点、主张、区别、共识，需要老板们自己推演出。" class="headerlink" title="是观点、主张、区别、共识，需要老板们自己推演出。"></a>是观点、主张、区别、共识，需要老板们自己推演出。</h6><h2 id="开头：ChatGPT的最基本版历史"><a href="#开头：ChatGPT的最基本版历史" class="headerlink" title="开头：ChatGPT的最基本版历史"></a>开头：ChatGPT的最基本版历史</h2><h6 id="虽然想直接开始问题，但是一定程度的技术科普还是必要的。这样能在思考问题的时候更加高"><a href="#虽然想直接开始问题，但是一定程度的技术科普还是必要的。这样能在思考问题的时候更加高" class="headerlink" title="虽然想直接开始问题，但是一定程度的技术科普还是必要的。这样能在思考问题的时候更加高"></a>虽然想直接开始问题，但是一定程度的技术科普还是必要的。这样能在思考问题的时候更加高</h6><h6 id="效。我们着重参考两篇综述，尽量抓重点："><a href="#效。我们着重参考两篇综述，尽量抓重点：" class="headerlink" title="效。我们着重参考两篇综述，尽量抓重点："></a>效。我们着重参考两篇综述，尽量抓重点：</h6><h6 id="1-大语言模型技术精要（链接）"><a href="#1-大语言模型技术精要（链接）" class="headerlink" title="1. 大语言模型技术精要（链接）"></a>1. 大语言模型技术精要（链接）</h6><ol><li>ChatGPT的各项超能力从哪里来（链接）</li></ol><p>第一份综述主要讲了大语言模型发展中的关键技术突破，第二份综述主要讲了ChatGPT发展<br>过程中的几个重要模型“做到了什么”和“有什么与众不同的做法”。我们把两篇文章的重点挑出<br>来，标注一下里程碑事件，和其意义。</p><h6 id="事件-意义"><a href="#事件-意义" class="headerlink" title="事件 意义"></a>事件 意义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Transformer问世</span><br><span class="line">让深度学习模型可以“自由吸</span><br><span class="line">收”数据中的知识</span><br></pre></td></tr></table></figure><h6 id="大语言模型突破了参数和算力限制，从此语言模型也进入"><a href="#大语言模型突破了参数和算力限制，从此语言模型也进入" class="headerlink" title="大语言模型突破了参数和算力限制，从此语言模型也进入"></a>大语言模型突破了参数和算力限制，从此语言模型也进入</h6><h6 id="参数越多，数据越大，模型效果越好的时代。"><a href="#参数越多，数据越大，模型效果越好的时代。" class="headerlink" title="参数越多，数据越大，模型效果越好的时代。"></a>参数越多，数据越大，模型效果越好的时代。</h6><h6 id="LLM内战，逐渐吊打老NLP"><a href="#LLM内战，逐渐吊打老NLP" class="headerlink" title="LLM内战，逐渐吊打老NLP"></a>LLM内战，逐渐吊打老NLP</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Google的Bert路线和</span><br><span class="line">OpenAI的GPT路线各有所长</span><br></pre></td></tr></table></figure><h6 id="GPT通过“自然语言生成任务”，兼容了几乎所有NLP问"><a href="#GPT通过“自然语言生成任务”，兼容了几乎所有NLP问" class="headerlink" title="GPT通过“自然语言生成任务”，兼容了几乎所有NLP问"></a>GPT通过“自然语言生成任务”，兼容了几乎所有NLP问</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">题；但是Bert比GPT2表现好。此时大语言模型已经开始</span><br><span class="line">吊打传统NLP模型了</span><br><span class="line">GPT3问世</span><br><span class="line">展示in-context learning能</span><br><span class="line">力，简单调教下就能吊打精</span><br><span class="line">调过的很多模型</span><br></pre></td></tr></table></figure><h6 id="一方面让GPT模式初现一统江湖的潜质，一方面GPT3的"><a href="#一方面让GPT模式初现一统江湖的潜质，一方面GPT3的" class="headerlink" title="一方面让GPT模式初现一统江湖的潜质，一方面GPT3的"></a>一方面让GPT模式初现一统江湖的潜质，一方面GPT3的</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in-context learning能力，展示了和过往ML的fine-</span><br><span class="line">tuning模式的本质区别 ，我们在下面单独详细展开</span><br></pre></td></tr></table></figure><p><strong>- InstructGPT</strong><br>ChatGPT的交互模式，让<br>GPT的能力，更加贴近人类<br>真实交互方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在in-context learning基础之上，进一步降低了</span><br><span class="line">prompting的门槛；一定程度解决了GPT- 3 生成结果与用</span><br><span class="line">户期望不一致的非预期输出，大幅降低了有害的、错误或</span><br><span class="line">偏差的输出结果，让GPT更符合人类胃口</span><br></pre></td></tr></table></figure><p><strong>- GPT读代码</strong><br>代码训练能力的提升是GPT<br>到GPT3.5的重要迭代之一，<br>模型可从而可以生成代码和<br>理解代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Codex模型读了大量代码，之后的GPT3.5模型 涌现出了</span><br><span class="line">inference的能力 。不光能读懂和生成代码，对语言本身</span><br><span class="line">的理解和推理能力也解锁了</span><br></pre></td></tr></table></figure><h6 id="RLHF"><a href="#RLHF" class="headerlink" title="- RLHF"></a>- RLHF</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ChatGPT背后的核心技术之</span><br><span class="line">一，让模型学习人类的偏好</span><br><span class="line">全称是reinforcement learning from human feedback，通</span><br><span class="line">过构建人类反馈数据集，训练一个reward模型，模仿人</span><br><span class="line">类偏好对结果打分，是GPT- 3 后时代LLM越来越像人类</span><br><span class="line">对话的核心技术</span><br><span class="line">ChatGPT</span><br><span class="line">InstructGPT的亲戚，但一些</span><br><span class="line">优化方式也带来了ChatGPT</span><br><span class="line">的更泛化和准确能力，再次</span><br><span class="line">引爆了AIGC</span><br><span class="line">ChatGPT总体来说和InstructGPT一样是使用RLHF进行训</span><br><span class="line">练，但模型是基于GPT3.5，而且数据设置上也不同。</span><br><span class="line">ChatGPT是一个输入，模型给出多个输出，然后人给结果</span><br><span class="line">排序，让模型可以学习人类的排序策略，即使是一本正经</span><br><span class="line">的胡说八道看起来也很合理的样子。</span><br></pre></td></tr></table></figure><h6 id="这里面再强调一个关键点。GPT3之后，很多能力是“涌现”的。即不是线性发展，可预测的，"><a href="#这里面再强调一个关键点。GPT3之后，很多能力是“涌现”的。即不是线性发展，可预测的，" class="headerlink" title="这里面再强调一个关键点。GPT3之后，很多能力是“涌现”的。即不是线性发展，可预测的，"></a>这里面再强调一个关键点。GPT3之后，很多能力是“涌现”的。即不是线性发展，可预测的，</h6><p>而是突然就有了。至于这对于OpenAI的人是早晚会发生，还是完全未预料，我们就不知道<br>了。 <strong>这几个“涌现”出的能力，尤其是inference的能力，是ChatGPT和过往AI的范式不同，<br>也会是我们这次讨论关注的重点。“涌现”</strong> 也是大语言模型很神奇的一点，这些能力我们发现模<br>型随着数据量和模型大小的提升，就突然具备了，但是我们对这些能力怎么出现的，只有猜<br>想，没有共识。这篇文章有一个比较全面的总结和比较。</p><p>下图是GPT- 3 到ChatGPT的演变历史</p><p>这里也牵涉到了一个重要的题外话，大概是发生在in-context learning和instruct这一模式<br>下。尤其是对“fine-tuning”这个词的理解。如果用过往模型的经验去想象ChatGPT的运作方<br>式，就会产生错判。这一误解反而更容易发生对AI已经有所了解的从业者身上。</p><h3 id="重要的题外话-–-很多AI从业者为什么对ChatGPT有错误理"><a href="#重要的题外话-–-很多AI从业者为什么对ChatGPT有错误理" class="headerlink" title="重要的题外话 – 很多AI从业者为什么对ChatGPT有错误理"></a>重要的题外话 – 很多AI从业者为什么对ChatGPT有错误理</h3><h3 id="解？"><a href="#解？" class="headerlink" title="解？"></a>解？</h3><h6 id="过往的NLP模型是按照具体任务和具体数据来训练的。所以数据质量越好，模型效果越好。"><a href="#过往的NLP模型是按照具体任务和具体数据来训练的。所以数据质量越好，模型效果越好。" class="headerlink" title="过往的NLP模型是按照具体任务和具体数据来训练的。所以数据质量越好，模型效果越好。"></a>过往的NLP模型是按照具体任务和具体数据来训练的。所以数据质量越好，模型效果越好。</h6><h6 id="而且最好只有正确数据，没有错误数据。大语言模型有一个重要不同，是“数据越多”越好，而"><a href="#而且最好只有正确数据，没有错误数据。大语言模型有一个重要不同，是“数据越多”越好，而" class="headerlink" title="而且最好只有正确数据，没有错误数据。大语言模型有一个重要不同，是“数据越多”越好，而"></a>而且最好只有正确数据，没有错误数据。大语言模型有一个重要不同，是“数据越多”越好，而</h6><h6 id="数据质量变成了重要，但稍显次要因素。"><a href="#数据质量变成了重要，但稍显次要因素。" class="headerlink" title="数据质量变成了重要，但稍显次要因素。"></a>数据质量变成了重要，但稍显次要因素。</h6><p>在一开始，大模型想要在特定任务上取得较好效果，也需要那个领域的具体数据去“fine-tune”<br>一下。通过大量的例子，先教给模型，那个领域中什么是好，什么是坏，调节一下模型的权<br>重，从而输出恰当的结果。这和过往模型的范式是差不多的。</p><p>而GPT- 3 涌现出的in-context learning能力（Google的PaLM大模型也有）和上述范式有本质<br>不同，“过往的fine-tuning”需要更改模型参数。也就是说，换了个新模型，从而在新数据上表<br>现更好。但是in-context learning， <strong>模型并没有变化</strong> ，却能在新数据上表现更好。研究甚至发</p><h6 id="现，你给大模型一堆范例，只要对应关系整体是对的，这时候改变具体对应的顺序，大模型仍"><a href="#现，你给大模型一堆范例，只要对应关系整体是对的，这时候改变具体对应的顺序，大模型仍" class="headerlink" title="现，你给大模型一堆范例，只要对应关系整体是对的，这时候改变具体对应的顺序，大模型仍"></a>现，你给大模型一堆范例，只要对应关系整体是对的，这时候改变具体对应的顺序，大模型仍</h6><h6 id="然能输出正确的结果。这真的很神奇。一定要抓住这一点，模型没有变化，没有被重新训练，"><a href="#然能输出正确的结果。这真的很神奇。一定要抓住这一点，模型没有变化，没有被重新训练，" class="headerlink" title="然能输出正确的结果。这真的很神奇。一定要抓住这一点，模型没有变化，没有被重新训练，"></a>然能输出正确的结果。这真的很神奇。一定要抓住这一点，模型没有变化，没有被重新训练，</h6><h6 id="但是能“理解”新数据，并且表现更好！"><a href="#但是能“理解”新数据，并且表现更好！" class="headerlink" title="但是能“理解”新数据，并且表现更好！"></a>但是能“理解”新数据，并且表现更好！</h6><p>接下来还有更神奇的。在GPT-Codex版本解锁了推理能力，以及InstructGPT提出了instruct<br>这一方法，他们合体的ChatGPT在in-context learning的基础之上，展示出了具备inference<br>能力的样子。我们在下一章详细展开。</p><h2 id="1-ChatGPT是范式突破吗？"><a href="#1-ChatGPT是范式突破吗？" class="headerlink" title="1. ChatGPT是范式突破吗？"></a>1. ChatGPT是范式突破吗？</h2><p>机器学习发展了这么多年，遵循同一个范式。哪怕 2016 年大火的AlphaGo，也完全没有脱离<br>这个范式 – 鹦鹉学舌。</p><h3 id="过往机器学习的范式-–-鹦鹉学舌"><a href="#过往机器学习的范式-–-鹦鹉学舌" class="headerlink" title="过往机器学习的范式 – 鹦鹉学舌"></a>过往机器学习的范式 – 鹦鹉学舌</h3><p>机器学习，包括深度学习，所遵循的范式是“data fitting”，即找到数据中的 <strong>“对应关系”</strong> 并应<br>用。具体来说，就是Y=f(X)，给定一些优化目标，机器学习通过学习已知X和Y的关系，即<br>f，让我们在见到一个未知的X‘的时候，也能根据规律，总结出Y‘是什么，能最好达到我们的<br>目标。</p><h6 id="从信息论的角度，这样的范式，所能总结的规律，应该是在“已有X所包含信息的范畴之内”。"><a href="#从信息论的角度，这样的范式，所能总结的规律，应该是在“已有X所包含信息的范畴之内”。" class="headerlink" title="从信息论的角度，这样的范式，所能总结的规律，应该是在“已有X所包含信息的范畴之内”。"></a>从信息论的角度，这样的范式，所能总结的规律，应该是在“已有X所包含信息的范畴之内”。</h6><h6 id="换句话说，遇到一个新的X‘，虽然没见过，但是应该和过去的X长得差不多。用图像识别举"><a href="#换句话说，遇到一个新的X‘，虽然没见过，但是应该和过去的X长得差不多。用图像识别举" class="headerlink" title="换句话说，遇到一个新的X‘，虽然没见过，但是应该和过去的X长得差不多。用图像识别举"></a>换句话说，遇到一个新的X‘，虽然没见过，但是应该和过去的X长得差不多。用图像识别举</h6><h6 id="例，如果模型只在小狗小猫的数据上训练过，是无法区分马车和汽车的。"><a href="#例，如果模型只在小狗小猫的数据上训练过，是无法区分马车和汽车的。" class="headerlink" title="例，如果模型只在小狗小猫的数据上训练过，是无法区分马车和汽车的。"></a>例，如果模型只在小狗小猫的数据上训练过，是无法区分马车和汽车的。</h6><h6 id="这就很像鹦鹉学舌的机制。鹦鹉是不知道那段话的意义的，它用自己的方式去理解了这个发"><a href="#这就很像鹦鹉学舌的机制。鹦鹉是不知道那段话的意义的，它用自己的方式去理解了这个发" class="headerlink" title="这就很像鹦鹉学舌的机制。鹦鹉是不知道那段话的意义的，它用自己的方式去理解了这个发"></a>这就很像鹦鹉学舌的机制。鹦鹉是不知道那段话的意义的，它用自己的方式去理解了这个发</h6><h6 id="音，并且模仿了出来。计算机能更加精准地进行控制和编程，让这个机制发挥更大作用，比如"><a href="#音，并且模仿了出来。计算机能更加精准地进行控制和编程，让这个机制发挥更大作用，比如" class="headerlink" title="音，并且模仿了出来。计算机能更加精准地进行控制和编程，让这个机制发挥更大作用，比如"></a>音，并且模仿了出来。计算机能更加精准地进行控制和编程，让这个机制发挥更大作用，比如</h6><h6 id="-图像识别-搜索，就能高效找人"><a href="#-图像识别-搜索，就能高效找人" class="headerlink" title=" 图像识别 + 搜索，就能高效找人"></a> 图像识别 + 搜索，就能高效找人</h6><p> Matrix completion + 用户数据收集，就能高效推荐</p><p> 把游戏规则恰当转化为优化方程 + 问题的局部抽象 + 自己生成对局训练，就能下围棋</p><h6 id="推荐算法的原理"><a href="#推荐算法的原理" class="headerlink" title="推荐算法的原理"></a>推荐算法的原理</h6><h6 id="-想象一个矩阵，横着是不同的人，竖着是不同的短视频，格子里是这个人对这个短视频的"><a href="#-想象一个矩阵，横着是不同的人，竖着是不同的短视频，格子里是这个人对这个短视频的" class="headerlink" title=" 想象一个矩阵，横着是不同的人，竖着是不同的短视频，格子里是这个人对这个短视频的"></a> 想象一个矩阵，横着是不同的人，竖着是不同的短视频，格子里是这个人对这个短视频的</h6><h6 id="兴趣指数，我们要想方设法填满这个格子，给每个人推荐最感兴趣的短视频"><a href="#兴趣指数，我们要想方设法填满这个格子，给每个人推荐最感兴趣的短视频" class="headerlink" title="兴趣指数，我们要想方设法填满这个格子，给每个人推荐最感兴趣的短视频"></a>兴趣指数，我们要想方设法填满这个格子，给每个人推荐最感兴趣的短视频</h6><h6 id="-核心问题是在每个人都没看过99-9999999-短视频的情况下，这题怎么解"><a href="#-核心问题是在每个人都没看过99-9999999-短视频的情况下，这题怎么解" class="headerlink" title=" 核心问题是在每个人都没看过99.9999999%短视频的情况下，这题怎么解"></a> 核心问题是在每个人都没看过99.9999999%短视频的情况下，这题怎么解</h6><h6 id="-有很多种方式，传统的运营、策略，也是一些方式。现有算法的主要做法是"><a href="#-有很多种方式，传统的运营、策略，也是一些方式。现有算法的主要做法是" class="headerlink" title=" 有很多种方式，传统的运营、策略，也是一些方式。现有算法的主要做法是"></a> 有很多种方式，传统的运营、策略，也是一些方式。现有算法的主要做法是</h6><h6 id="-1-把每个视频抽象成特征"><a href="#-1-把每个视频抽象成特征" class="headerlink" title=" 1. 把每个视频抽象成特征"></a> 1. 把每个视频抽象成特征</h6><h6 id="-2-把每个人抽象成特征"><a href="#-2-把每个人抽象成特征" class="headerlink" title=" 2. 把每个人抽象成特征"></a> 2. 把每个人抽象成特征</h6><h6 id="-3-通过特征对特征的方式进行泛化和填表，如果用人来理解的角度，可能是"><a href="#-3-通过特征对特征的方式进行泛化和填表，如果用人来理解的角度，可能是" class="headerlink" title=" 3. 通过特征对特征的方式进行泛化和填表，如果用人来理解的角度，可能是"></a> 3. 通过特征对特征的方式进行泛化和填表，如果用人来理解的角度，可能是</h6><h6 id="-中年男人喜欢看钓鱼（内容-画像推荐）"><a href="#-中年男人喜欢看钓鱼（内容-画像推荐）" class="headerlink" title=" 中年男人喜欢看钓鱼（内容+画像推荐）"></a> 中年男人喜欢看钓鱼（内容+画像推荐）</h6><h6 id="-你同事们喜欢看老板点赞过的视频（关系链）"><a href="#-你同事们喜欢看老板点赞过的视频（关系链）" class="headerlink" title=" 你同事们喜欢看老板点赞过的视频（关系链）"></a> 你同事们喜欢看老板点赞过的视频（关系链）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> 看过AB的人喜欢看C（collaborative filtering）</span><br></pre></td></tr></table></figure><p> 但是记得，模型抽象出来的特征是适合机器理解，而不是适合人类理解的。用人类能描述<br>的方式去描述机器的优化，注定是降低效率的</p><h6 id="由此可见。过往AI应用的拓展主要是来自几点"><a href="#由此可见。过往AI应用的拓展主要是来自几点" class="headerlink" title="由此可见。过往AI应用的拓展主要是来自几点"></a>由此可见。过往AI应用的拓展主要是来自几点</h6><h6 id="1-高质量的数据，模型的发展，算力的提升，让模型越来越准、快、和发现更多更深的“对应"><a href="#1-高质量的数据，模型的发展，算力的提升，让模型越来越准、快、和发现更多更深的“对应" class="headerlink" title="1. 高质量的数据，模型的发展，算力的提升，让模型越来越准、快、和发现更多更深的“对应"></a>1. 高质量的数据，模型的发展，算力的提升，让模型越来越准、快、和发现更多更深的“对应</h6><h6 id="关系”，能进行更好的优化"><a href="#关系”，能进行更好的优化" class="headerlink" title="关系”，能进行更好的优化"></a>关系”，能进行更好的优化</h6><h6 id="2-更好地把商业问题转化为优化问题"><a href="#2-更好地把商业问题转化为优化问题" class="headerlink" title="2. 更好地把商业问题转化为优化问题"></a>2. 更好地把商业问题转化为优化问题</h6><h6 id="3-和其他能力的深度结合"><a href="#3-和其他能力的深度结合" class="headerlink" title="3. 和其他能力的深度结合"></a>3. 和其他能力的深度结合</h6><p>但是这些都是基于“鹦鹉学舌”这一范式的。过往的NLP（natural language processing，自然语<br>言处理）就是一个很好的例子。发展了那么多年，语音助手能根据指令来达成一些目标，但是<br>从来都没有真的“懂”那些指令。过往的NLP只能做“填表”，必须背后有一个人设定好具体的任<br>务，规划好如何把语音或者文字形成固定的function，该function如何调用相应的能力。如果<br>没有人提前规划，那模型就无法实现。这篇文章总结的非常好，这里就不赘述了。</p><h6 id="上面这个“懂”字，如果深究的话，会发现大家对这个字的定义其实存在很大分歧。我如果让狗"><a href="#上面这个“懂”字，如果深究的话，会发现大家对这个字的定义其实存在很大分歧。我如果让狗" class="headerlink" title="上面这个“懂”字，如果深究的话，会发现大家对这个字的定义其实存在很大分歧。我如果让狗"></a>上面这个“懂”字，如果深究的话，会发现大家对这个字的定义其实存在很大分歧。我如果让狗</h6><p>狗伸手，狗狗伸手了，是“懂”吗？过去NLP的懂和ChatGPT的懂，又有什么区别呢？分清这一<br>点，我们就能分清ChatGPT“涌现”出来的让大家惊诧的能力是什么了。这里引用朱松纯教授关<br>于乌鸦的例子。</p><h3 id="ChatGPT可能的新范式-–-乌鸦"><a href="#ChatGPT可能的新范式-–-乌鸦" class="headerlink" title="ChatGPT可能的新范式 – 乌鸦"></a>ChatGPT可能的新范式 – 乌鸦</h3><h6 id="原文在这里，介绍了乌鸦是如何“感知、认知、推理、学习、和执行”的："><a href="#原文在这里，介绍了乌鸦是如何“感知、认知、推理、学习、和执行”的：" class="headerlink" title="原文在这里，介绍了乌鸦是如何“感知、认知、推理、学习、和执行”的："></a>原文在这里，介绍了乌鸦是如何“感知、认知、推理、学习、和执行”的：</h6><h6 id="总结一下，城市中的乌鸦学会自主串通"><a href="#总结一下，城市中的乌鸦学会自主串通" class="headerlink" title="总结一下，城市中的乌鸦学会自主串通"></a>总结一下，城市中的乌鸦学会自主串通</h6><h6 id="-汽车能压碎坚果"><a href="#-汽车能压碎坚果" class="headerlink" title=" 汽车能压碎坚果"></a> 汽车能压碎坚果</h6><h6 id="-红绿灯能控制汽车"><a href="#-红绿灯能控制汽车" class="headerlink" title=" 红绿灯能控制汽车"></a> 红绿灯能控制汽车</h6><h6 id="这两件事情，从而利用红绿灯和汽车，来帮自己达到“打开坚果”这一任务结果。"><a href="#这两件事情，从而利用红绿灯和汽车，来帮自己达到“打开坚果”这一任务结果。" class="headerlink" title="这两件事情，从而利用红绿灯和汽车，来帮自己达到“打开坚果”这一任务结果。"></a>这两件事情，从而利用红绿灯和汽车，来帮自己达到“打开坚果”这一任务结果。</h6><h6 id="如果类比成机器学习模型，过往“鹦鹉学舌”范式的解法，是要求所有乌鸦可以共享一个大脑，"><a href="#如果类比成机器学习模型，过往“鹦鹉学舌”范式的解法，是要求所有乌鸦可以共享一个大脑，" class="headerlink" title="如果类比成机器学习模型，过往“鹦鹉学舌”范式的解法，是要求所有乌鸦可以共享一个大脑，"></a>如果类比成机器学习模型，过往“鹦鹉学舌”范式的解法，是要求所有乌鸦可以共享一个大脑，</h6><h6 id="它们有很清晰的优化目标，即“保住性命的前提下打开坚果”。它们的方式是，随机尝试所有事"><a href="#它们有很清晰的优化目标，即“保住性命的前提下打开坚果”。它们的方式是，随机尝试所有事" class="headerlink" title="它们有很清晰的优化目标，即“保住性命的前提下打开坚果”。它们的方式是，随机尝试所有事"></a>它们有很清晰的优化目标，即“保住性命的前提下打开坚果”。它们的方式是，随机尝试所有事</h6><h6 id="件的组合，并向着最优解的方向不断优化。"><a href="#件的组合，并向着最优解的方向不断优化。" class="headerlink" title="件的组合，并向着最优解的方向不断优化。"></a>件的组合，并向着最优解的方向不断优化。</h6><h6 id="但现实世界的乌鸦无法共享大脑，也不能去冒着死亡风险去尝试所有可能。乌鸦只有一次机"><a href="#但现实世界的乌鸦无法共享大脑，也不能去冒着死亡风险去尝试所有可能。乌鸦只有一次机" class="headerlink" title="但现实世界的乌鸦无法共享大脑，也不能去冒着死亡风险去尝试所有可能。乌鸦只有一次机"></a>但现实世界的乌鸦无法共享大脑，也不能去冒着死亡风险去尝试所有可能。乌鸦只有一次机</h6><h6 id="会，把观测到的两个现象，产生了一个新的可能性，并应用在一个全新的场景下。我们文章里"><a href="#会，把观测到的两个现象，产生了一个新的可能性，并应用在一个全新的场景下。我们文章里" class="headerlink" title="会，把观测到的两个现象，产生了一个新的可能性，并应用在一个全新的场景下。我们文章里"></a>会，把观测到的两个现象，产生了一个新的可能性，并应用在一个全新的场景下。我们文章里</h6><p>暂时把这个能力称之为“inference”。中文翻译为推理，但是它和“deduction”，即演绎、推演，<br>又有所不同。</p><p>Inference的翻译是“基于证据和逻辑推演，得到结论”的过程，有的时候，还要加入很多猜测、<br>抽象、泛化。举个例子，ChatGPT其实表现出了很多新能力，但是我们选择专注其“inference”<br>的能力，并且和朱教授五年前的文章联系起来，就是一个inference。朱松纯教授在文章里就呼<br>吁大家去“寻找‘乌鸦’模式的智能，而不要‘鹦鹉’模式的智能”。现在ChatGPT让AI第一次看似拥<br>有了“乌鸦”模式的智能，那当然是一件划时代的大事件。</p><p>但是Inference也不是一个特别好的词，因为在机器学习领域里，inferencing特指使用训练好<br>的深度学习模型来预测新的数据这一件事，会产生误解。另外，我也不确定inference和“乌鸦”<br>的能力是一一对应的。</p><p>在我们自己的文章里，我们会用“乌鸦”来指代ChatGPT的新能力。但是在对外交流的时候，<br>“乌鸦”需要解释的内容太多，所以我们会简化为“理解”。从“乌鸦”到“理解”，当然是一个信息量<br>损失很大的过度概括。但是好处是可以把ChatGPT的本质能力凸显出来。 <strong>过往互联网的两次<br>能力跃进一次来自于搜索，一次来自于推荐，现在ChatGPT带来了“理解”，也非常有结构<br>感。</strong></p><h3 id="ChatGPT看似拥有“理解”能力的证据"><a href="#ChatGPT看似拥有“理解”能力的证据" class="headerlink" title="ChatGPT看似拥有“理解”能力的证据"></a>ChatGPT看似拥有“理解”能力的证据</h3><p>之所以说“看似”，是因为我们并不知道乌鸦为什么会有inference的能力，我们也不完全知道<br>LLM为什么会有“达成inference效果”的能力。我们知道的是，LLM激活inference能力的方式<br>一定与人类和乌鸦不一样。所以我们不把话说死，只说看似拥有，不确定真的拥有。为了节省<br>笔墨，我们接下来就不说“看似”了。</p><h6 id="我们把具体的例子放在附录里，但是有这几点感受很明显"><a href="#我们把具体的例子放在附录里，但是有这几点感受很明显" class="headerlink" title="我们把具体的例子放在附录里，但是有这几点感受很明显"></a>我们把具体的例子放在附录里，但是有这几点感受很明显</h6><p> <strong>ChatGPT拥有in-context correction的能力</strong> ，即如果说错了，给出矫正，ChatGPT能“听<br>懂”错在哪儿了，并向正确的方向修正（案例：）</p><p> <strong>描述越详细清楚，ChatGPT回答得越好</strong> 。要知道，越详细的描述，在预训练的文本里越难</p><h6 id="匹配到"><a href="#匹配到" class="headerlink" title="匹配到"></a>匹配到</h6><p> 在询问ChatGPT互联网上并不存在内容的时候，能给出较好答案（案例：我用ChatGPT学<br>UE5）</p><p> ChatGPT能通过信息猜你心中的想法（案例：跟ChatGPT玩20 questions）</p><p> 你可以制定一个全新的游戏规则让ChatGPT和你玩，ChatGPT可以理解</p><p>前两点是本质，后三点是体感。</p><p>回过来对比过往NLP模型范式如何能达到类似效果，就能看到ChatGPT的神奇之处。过往模<br>型一定需要针对具体的问题进行具体设计，而且只要说的话稍稍不够“结构化”，模型的表现就<br>很难保证，更别提在模型资料库里，没有出现过的问题了。</p><h3 id="打比方时间到"><a href="#打比方时间到" class="headerlink" title="打比方时间到"></a>打比方时间到</h3><h6 id="把该说的细节说清楚，我们现在可以负责任地打比方了。其实朱教授鹦鹉和乌鸦的比方最精确"><a href="#把该说的细节说清楚，我们现在可以负责任地打比方了。其实朱教授鹦鹉和乌鸦的比方最精确" class="headerlink" title="把该说的细节说清楚，我们现在可以负责任地打比方了。其实朱教授鹦鹉和乌鸦的比方最精确"></a>把该说的细节说清楚，我们现在可以负责任地打比方了。其实朱教授鹦鹉和乌鸦的比方最精确</h6><h6 id="不过了，但是毕竟人不是鹦鹉和乌鸦，鹦鹉和乌鸦的能力到底有什么区别，也需要一番解释，"><a href="#不过了，但是毕竟人不是鹦鹉和乌鸦，鹦鹉和乌鸦的能力到底有什么区别，也需要一番解释，" class="headerlink" title="不过了，但是毕竟人不是鹦鹉和乌鸦，鹦鹉和乌鸦的能力到底有什么区别，也需要一番解释，"></a>不过了，但是毕竟人不是鹦鹉和乌鸦，鹦鹉和乌鸦的能力到底有什么区别，也需要一番解释，</h6><h6 id="我们还是打一个“人”的比方。"><a href="#我们还是打一个“人”的比方。" class="headerlink" title="我们还是打一个“人”的比方。"></a>我们还是打一个“人”的比方。</h6><h6 id="过往ML模型是一个“说话不过脑子”的“复读机”类型的人。好处是这个人记忆力和检索能力都"><a href="#过往ML模型是一个“说话不过脑子”的“复读机”类型的人。好处是这个人记忆力和检索能力都" class="headerlink" title="过往ML模型是一个“说话不过脑子”的“复读机”类型的人。好处是这个人记忆力和检索能力都"></a>过往ML模型是一个“说话不过脑子”的“复读机”类型的人。好处是这个人记忆力和检索能力都</h6><h6 id="特别强，而且有自己的一套理解事物对应关系的方式，让你给他看足够多东西的时候，TA就"><a href="#特别强，而且有自己的一套理解事物对应关系的方式，让你给他看足够多东西的时候，TA就" class="headerlink" title="特别强，而且有自己的一套理解事物对应关系的方式，让你给他看足够多东西的时候，TA就"></a>特别强，而且有自己的一套理解事物对应关系的方式，让你给他看足够多东西的时候，TA就</h6><h6 id="能找到对应关系。所以你给TA看的东西越多，离你的目标越近，TA的表现越好。问题是TA"><a href="#能找到对应关系。所以你给TA看的东西越多，离你的目标越近，TA的表现越好。问题是TA" class="headerlink" title="能找到对应关系。所以你给TA看的东西越多，离你的目标越近，TA的表现越好。问题是TA"></a>能找到对应关系。所以你给TA看的东西越多，离你的目标越近，TA的表现越好。问题是TA</h6><h6 id="其实完全听不懂你在说什么，你没教的TA也不可能会。"><a href="#其实完全听不懂你在说什么，你没教的TA也不可能会。" class="headerlink" title="其实完全听不懂你在说什么，你没教的TA也不可能会。"></a>其实完全听不懂你在说什么，你没教的TA也不可能会。</h6><p>ChatGPT是一个“开窍”之后拥有“举一反三”能力的人。而且这个举一反三不光是在“相似问题”<br>上，而是能把看似没有联系的事物联系起来，并且做一些逻辑推演。那ChatGPT就是一个“懂<br>很多”，有很强的“学习能力”，而且“能听懂你”说话。</p><h6 id="提炼对比一下的话"><a href="#提炼对比一下的话" class="headerlink" title="提炼对比一下的话"></a>提炼对比一下的话</h6><h6 id="-过往ML：需要-“喂”-，之后-“模仿”-，基于的是-“对应关系”"><a href="#-过往ML：需要-“喂”-，之后-“模仿”-，基于的是-“对应关系”" class="headerlink" title=" 过往ML：需要 “喂” ，之后 “模仿” ，基于的是 “对应关系”"></a> 过往ML：需要 “喂” ，之后 “模仿” ，基于的是 “对应关系”</h6><p> ChatGPT：需要 <strong>“教”</strong> ，之后 <strong>“懂”</strong> ，基于的是 <strong>“内在逻辑”</strong></p><h6 id="后者的能力上限和应用空间，比起前者岂止百倍。这也是为什么大家如此-兴奋-和-焦虑-。兴奋是"><a href="#后者的能力上限和应用空间，比起前者岂止百倍。这也是为什么大家如此-兴奋-和-焦虑-。兴奋是" class="headerlink" title="后者的能力上限和应用空间，比起前者岂止百倍。这也是为什么大家如此 兴奋 和 焦虑 。兴奋是"></a>后者的能力上限和应用空间，比起前者岂止百倍。这也是为什么大家如此 兴奋 和 焦虑 。兴奋是</h6><p>因为可能性，焦虑是因为目前只有OpenAI一家做出来了ChatGPT，而且并不开源。如果<br>ChatGPT如此重要且牛逼，但所有人只能 <strong>基于ChatGPT做应用</strong> 的话，每个人都要重新考虑自</p><h6 id="己的商业模式了。这两个问题都属于“猜想未来”，一不小心就会变成科幻小说，我们基于事实"><a href="#己的商业模式了。这两个问题都属于“猜想未来”，一不小心就会变成科幻小说，我们基于事实" class="headerlink" title="己的商业模式了。这两个问题都属于“猜想未来”，一不小心就会变成科幻小说，我们基于事实"></a>己的商业模式了。这两个问题都属于“猜想未来”，一不小心就会变成科幻小说，我们基于事实</h6><h6 id="和底层理解，用科学的方式去尽量负责任地推演。"><a href="#和底层理解，用科学的方式去尽量负责任地推演。" class="headerlink" title="和底层理解，用科学的方式去尽量负责任地推演。"></a>和底层理解，用科学的方式去尽量负责任地推演。</h6><h2 id="2-ChatGPT两年内可能达到的上下限是什么？"><a href="#2-ChatGPT两年内可能达到的上下限是什么？" class="headerlink" title="2. ChatGPT两年内可能达到的上下限是什么？"></a>2. ChatGPT两年内可能达到的上下限是什么？</h2><h5 id="通过Prompt催眠ChatGPT，让它突破OpenAI的政策限制"><a href="#通过Prompt催眠ChatGPT，让它突破OpenAI的政策限制" class="headerlink" title="通过Prompt催眠ChatGPT，让它突破OpenAI的政策限制"></a>通过Prompt催眠ChatGPT，让它突破OpenAI的政策限制</h5><h3 id="比方"><a href="#比方" class="headerlink" title="比方"></a>比方</h3><h6 id="我们打两个比方。"><a href="#我们打两个比方。" class="headerlink" title="我们打两个比方。"></a>我们打两个比方。</h6><p> 对比过去的技术：过往模型是弓箭，GPT3是火绳枪，ChatGPT是后膛枪。我们在观望马克<br>沁什么时候出现。火绳枪也许一开始打不过弓箭，但是是 <strong>热兵器迟早会淘汰冷兵器</strong></p><p> 对人类的作用：ChatGPT是不断迭代的交通工具。是需要驾驶员，但是能跑多快，跑多<br>远，取代多少“人力运输”，确实也需要道路、司机、交通规则的配合（产品、商业模式<br>等），可是纤夫肯定是大规模淘汰了</p><h3 id="关键的现状"><a href="#关键的现状" class="headerlink" title="关键的现状"></a>关键的现状</h3><h6 id="我们有如下几个信息"><a href="#我们有如下几个信息" class="headerlink" title="我们有如下几个信息"></a>我们有如下几个信息</h6><ol><li>OpenAI的GPT4已经开发了三年+，大概率会“效率提升很多”，不确定“涌现哪些新能力”</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a. 确定的是 起码会解决GPT3的一些重要问题，比如更加优化的数据-参数比例、更有效</span><br><span class="line">率的信息处理与规律发觉、更高质量的信息输入，等等。极大概率会比GPT3的效率</span><br><span class="line">高很多，inference的成本低很多（很可能是百倍提升）</span><br><span class="line">b. 不确定的是 模型会有多大（大很多基本确定是谣言），会不会有多模态（之前确定没</span><br><span class="line">有，现在难说，不然Andrej Karpathy为什么要去呢），但是如果有的话，也是多模态</span><br><span class="line">理解，不太可能有多模态输出。更重要的是，不知道GPT4会涌现什么新能力</span><br></pre></td></tr></table></figure><ol><li>ChatGPT现在遇到的很多问题，工程上都有相对简单的解</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a. hallucination&#x2F;说胡话：因为ChatGPT没有对准确度进行优化，也没有引入搜索数据等</span><br><span class="line">做矫正；而且人类也可以参与判断过程；另外就是先应用在自己能判断好坏的场景下</span><br><span class="line">做辅助</span><br><span class="line">b. 记忆力有限：OpenAI开放（收费）接口就行了，现有解决方法也很神奇，直接告诉</span><br><span class="line">ChatGPT，现在告诉你的内容只是一部分，听完了再回答我。就行了</span><br><span class="line">c. 危险发言：ChatGPT的自我审查能力不是基于规则的，而是基于理解的。那其实更加</span><br><span class="line">可调节。给出尊重基本规则下，发言尺度可调节的ChatGPT，也是OpenAI公开发表</span><br><span class="line">的愿景</span><br></pre></td></tr></table></figure><ol><li>ChatGPT能写代码，做分析，做总结，做营销方案，并且快速变得更好用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a. 会用的人已经在大幅提高效率了，例子（黄同学说自己公司的经验、Monica的</span><br><span class="line">quote、发在群里chatgpt帮忙写代码的案例）</span><br><span class="line">b. New Bing显著更加好用</span><br></pre></td></tr></table></figure><ol><li>OpenAI内部对AGI的安全问题非常重视</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a. 能力是涌现的，意味着人类是不理解的，也自然会有担心。虽然不太可能出现天网，</span><br><span class="line">但是会不会突然就能破解当前的加密算法？这就很难说</span><br><span class="line">b. 所以OpenAI极大概率是不会开源LLM的</span><br></pre></td></tr></table></figure><h3 id="推演结论"><a href="#推演结论" class="headerlink" title="推演结论"></a>推演结论</h3><h4 id="a-ChatGPT的成本会直线下降，尤其inference的成本会小两个以上数量"><a href="#a-ChatGPT的成本会直线下降，尤其inference的成本会小两个以上数量" class="headerlink" title="a. ChatGPT的成本会直线下降，尤其inference的成本会小两个以上数量"></a>a. ChatGPT的成本会直线下降，尤其inference的成本会小两个以上数量</h4><h4 id="级"><a href="#级" class="headerlink" title="级"></a>级</h4><p>中文媒体对ChatGPT成本的猜想大多不靠谱，我们只选择两条信息源</p><p> Sam在公开场合曾说过ChatGPT的inference成本是每条几分钱</p><p> Key Takes from ChatGPT and Generative AI.pdf，根据Jefferies Research的详细调研，<br>ChatGPT的inference大概率是使用闲置x86 CPU，而非GPU进行的</p><p>叠加我们对于inference和大语言模型优化空间的理解，我们认为inference成本直线下降是极<br>大概率的。成本下降就意味着应用范围以及数据收集的能力。ChatGPT哪怕到了十亿DAU的</p><h6 id="水准（现在一亿DAU的估算也不靠谱），也是能做到免费的。最多限制一下每天的使用次数就"><a href="#水准（现在一亿DAU的估算也不靠谱），也是能做到免费的。最多限制一下每天的使用次数就" class="headerlink" title="水准（现在一亿DAU的估算也不靠谱），也是能做到免费的。最多限制一下每天的使用次数就"></a>水准（现在一亿DAU的估算也不靠谱），也是能做到免费的。最多限制一下每天的使用次数就</h6><p>行了。New Bing一度限制 60 条，现在也没了。这些实际使用中的对话无疑会进一步加强<br>ChatGPT的壁垒。</p><p>PS：文章写完后的3.1日，OpenAI开放了ChatGPT的API接口，成本已经优化了90%，百万<br>字2.7美元</p><h4 id="b-ChatGPT“能力”子模型可能会重新训练，但“知识”子模型只需要通过"><a href="#b-ChatGPT“能力”子模型可能会重新训练，但“知识”子模型只需要通过" class="headerlink" title="b. ChatGPT“能力”子模型可能会重新训练，但“知识”子模型只需要通过"></a>b. ChatGPT“能力”子模型可能会重新训练，但“知识”子模型只需要通过</h4><h4 id="instruct-prompting的方式喂知识"><a href="#instruct-prompting的方式喂知识" class="headerlink" title="instruct prompting的方式喂知识"></a>instruct prompting的方式喂知识</h4><p>过往AI遇到一个新任务，需要在新任务的数据上重新训练一个模型。前面但是InstructGPT范<br>式下不需要这样做。如果ChatGPT基于的pre-train大模型有相关能力，那只要通过对话、引<br>导、教育，不断调教，就能让ChatGPT在子任务中把新能力应用好。</p><p>这里最好的比方可能是钢铁侠 3 。如果打比方的话，ChatGPT是通用型铠甲，出厂就能干绝大<br>多数的活儿。当然，需要“理解”一下如何用现有能力去“创新”性地完成那些工作。工作水平大 8<br>概在出简单医疗建议、给法律参考、写代码框架、做营销方案、做心理咨询、充当面试官，等<br>等的范畴。</p><h6 id="如果想对某些方面进行专精，比如牺牲对话能力来提高上下文理解能力，牺牲对话延续性来提"><a href="#如果想对某些方面进行专精，比如牺牲对话能力来提高上下文理解能力，牺牲对话延续性来提" class="headerlink" title="如果想对某些方面进行专精，比如牺牲对话能力来提高上下文理解能力，牺牲对话延续性来提"></a>如果想对某些方面进行专精，比如牺牲对话能力来提高上下文理解能力，牺牲对话延续性来提</h6><h6 id="高信息精度，等等，就需要回炉重造，进行调整。这里可能也会融合一些其他能力模块，比如"><a href="#高信息精度，等等，就需要回炉重造，进行调整。这里可能也会融合一些其他能力模块，比如" class="headerlink" title="高信息精度，等等，就需要回炉重造，进行调整。这里可能也会融合一些其他能力模块，比如"></a>高信息精度，等等，就需要回炉重造，进行调整。这里可能也会融合一些其他能力模块，比如</h6><p>搜索（new bing）、和其他模型的接口、工具使用，等等。这就像那些专精型铠甲。当然，能</p><p>力+工具能解锁的可能性是巨大的，比如Hulkbuster。</p><h4 id="c-Prompting的能力会大幅增强，猜测会适度开放"><a href="#c-Prompting的能力会大幅增强，猜测会适度开放" class="headerlink" title="c. Prompting的能力会大幅增强，猜测会适度开放"></a>c. Prompting的能力会大幅增强，猜测会适度开放</h4><h6 id="已经在这样做了："><a href="#已经在这样做了：" class="headerlink" title="已经在这样做了："></a>已经在这样做了：</h6><h6 id="这样除了是一个明显的商业化点，有两个更重要的意义"><a href="#这样除了是一个明显的商业化点，有两个更重要的意义" class="headerlink" title="这样除了是一个明显的商业化点，有两个更重要的意义"></a>这样除了是一个明显的商业化点，有两个更重要的意义</h6><ol><li>可以让大家调教出来“属于自己的ChatGPT”，这个ChatGPT跟你长时间聊天之后能适配你<br>的喜好，甚至学会你想让他学会的独有知识（注意，不是能力，能力只能激活）</li><li>可以让大家能在ChatGPT的闭源模型上，发展出自己的独有竞争力。从而解决“我只能给<br>OpenAI做UI”的焦虑</li></ol><h4 id="d-GPT4会大幅提升ChatGPT的能力，在多数领域达到“优秀员工”的水准"><a href="#d-GPT4会大幅提升ChatGPT的能力，在多数领域达到“优秀员工”的水准" class="headerlink" title="d. GPT4会大幅提升ChatGPT的能力，在多数领域达到“优秀员工”的水准"></a>d. GPT4会大幅提升ChatGPT的能力，在多数领域达到“优秀员工”的水准</h4><p>我们现在明显是在范式革命的早期，成长曲线将是陡峭的。New Bing和ChatGPT已经展现出</p><h6 id="巨大差异了。我们有足够多的理由相信，GPT4在如下几个方面几乎“必然”有巨大进步"><a href="#巨大差异了。我们有足够多的理由相信，GPT4在如下几个方面几乎“必然”有巨大进步" class="headerlink" title="巨大差异了。我们有足够多的理由相信，GPT4在如下几个方面几乎“必然”有巨大进步"></a>巨大差异了。我们有足够多的理由相信，GPT4在如下几个方面几乎“必然”有巨大进步</h6><h6 id="-大模型，大数据，更加优化的参数和数据比例-–-参数越大越好，数据越多越好，但是合适"><a href="#-大模型，大数据，更加优化的参数和数据比例-–-参数越大越好，数据越多越好，但是合适" class="headerlink" title=" 大模型，大数据，更加优化的参数和数据比例 – 参数越大越好，数据越多越好，但是合适"></a> 大模型，大数据，更加优化的参数和数据比例 – 参数越大越好，数据越多越好，但是合适</h6><h6 id="的比例才能让模型充分吸收数据知识。这方面优化方向很明确"><a href="#的比例才能让模型充分吸收数据知识。这方面优化方向很明确" class="headerlink" title="的比例才能让模型充分吸收数据知识。这方面优化方向很明确"></a>的比例才能让模型充分吸收数据知识。这方面优化方向很明确</h6><p> 更有针对性的训练数据集 – OpenAI在“造高质量大数据”上的能力几乎独步天下了，而经<br>过GPT3之后的多年摸索，什么数据对增强什么能力更有用，即使不清楚，也早就有了体<br>感，肯定可以更好调整（比如读更多代码，多语言的比例，等）</p><p> 可能的“能力模块融合” – New Bing以ChatGPT为基座，延伸了搜索能力。那有没有办法<br>把搜索能力直接融入到pre-trained大模型里呢？一些工具能力呢？我认为把“搜索能力融<br>入pre-trained大模型里”的方式和把RLHF融入ChatGPT的方式其实是类似的。不是去“用<br>搜索能力丰富语料库”，而是把“GPT的结果更适配搜索引擎的偏好”。</p><h6 id="更加强大的归纳、“理解”能力，看似更好的悟性，结合更多场景的调教，我预测在两年内，基"><a href="#更加强大的归纳、“理解”能力，看似更好的悟性，结合更多场景的调教，我预测在两年内，基" class="headerlink" title="更加强大的归纳、“理解”能力，看似更好的悟性，结合更多场景的调教，我预测在两年内，基"></a>更加强大的归纳、“理解”能力，看似更好的悟性，结合更多场景的调教，我预测在两年内，基</h6><p>于GPT4的ChatGPT类产品，在大多数场合下已经能达到 9 级员工的水平了。详细会在第四问<br>中展开。</p><h3 id="ChatGPT的会取代大多数“搬砖”类工作"><a href="#ChatGPT的会取代大多数“搬砖”类工作" class="headerlink" title="ChatGPT的会取代大多数“搬砖”类工作"></a>ChatGPT的会取代大多数“搬砖”类工作</h3><p>“乌鸦”能力到底能带来什么颠覆性意义呢？意义在于ChatGPT已经接近于“人类调用算力”的究<br>极界面了。从计算机发展以来，一直在三方面进行发展。</p><p> 算力和存储能力的进步，以摩尔定律为代表。在云之后，更让个人可以调用的算力几乎无<br>上限</p><p> “调用算力手段”的抽象与进化。从机器语言、汇编语言、高级语言，到虚拟机（对硬件的<br>抽象）、云服务（对API的抽象）</p><p> 对数据的生产、总结，和使用</p><p>后两者虽然进步了很多，但是编程仍然是阻止大多数人调用算力的门槛。现在，ChatGPT已经<br>可以很好地进行编程辅助了。假以时日，我们可以直接向ChatGPT去要一个结果，把执行过<br>程交给TA，而跳过中间的PM - BRD - 开发 - 交付的冗长流程。</p><p>我们退一步去思考一下，为什么ChatGPT可以取代这类工作？因为这类工作虽然是“技术”工<br>种，但是其实“创新”的比重并不高。我们经常会用“搬砖”来自嘲自己工作的重复，但是其实这<br>正是问题的关键。如果我们所做的无非是去理解问题，寻找互联网上已有答案，把两者进行对<br>接，那如果ChatGPT能理解问题，归纳答案，自然能比我们干得好。</p><p>抽象来看，ChatGPT拥有编程能力，也拥有其他能力。大家需要思考自己工作的本质，是在真<br>的做创新，把已有的点链接起来之后形成新的点，还是在“搬砖”？如果是后者，真的需要去试<br>用一下ChatGPT，看看自己能不能确定比ChatGPT做得好了。</p><h2 id="3-ChatGPT以及GPT有壁垒吗？"><a href="#3-ChatGPT以及GPT有壁垒吗？" class="headerlink" title="3. ChatGPT以及GPT有壁垒吗？"></a>3. ChatGPT以及GPT有壁垒吗？</h2><h6 id="当然有，但是壁垒多高，取决于问题-1-、-2-的结论。我们把几种情况分列一下。"><a href="#当然有，但是壁垒多高，取决于问题-1-、-2-的结论。我们把几种情况分列一下。" class="headerlink" title="当然有，但是壁垒多高，取决于问题 1 、 2 的结论。我们把几种情况分列一下。"></a>当然有，但是壁垒多高，取决于问题 1 、 2 的结论。我们把几种情况分列一下。</h6><ol><li>ChatGPT的“乌鸦”能力不是范式突破，只是错觉</li><li>ChatGPT的“乌鸦”能力是范式突破，竞争者 6 个月内就能“涌现”<br>**3. ChatGPT的“乌鸦”能力是范式突破，竞争者 6 - 24 个月才能“涌现”</li><li>ChatGPT的“乌鸦”能力是范式突破，但是竞争者两年内都无法“涌现”**</li></ol><h6 id="如果是情况-1，那这整个都不值得讨论。但是从实际使用体感来说，-1基本可以排除了。如"><a href="#如果是情况-1，那这整个都不值得讨论。但是从实际使用体感来说，-1基本可以排除了。如" class="headerlink" title="如果是情况#1，那这整个都不值得讨论。但是从实际使用体感来说，#1基本可以排除了。如"></a>如果是情况#1，那这整个都不值得讨论。但是从实际使用体感来说，#1基本可以排除了。如</h6><h6 id="果是情况-2，那各大互联网公司有自己的厉害的大模型只是时间问题，腾讯自己也有机会。就"><a href="#果是情况-2，那各大互联网公司有自己的厉害的大模型只是时间问题，腾讯自己也有机会。就" class="headerlink" title="果是情况#2，那各大互联网公司有自己的厉害的大模型只是时间问题，腾讯自己也有机会。就"></a>果是情况#2，那各大互联网公司有自己的厉害的大模型只是时间问题，腾讯自己也有机会。就</h6><h6 id="像有自己的云、自己的图像识别算法等等，虽然有好有坏，但是可以解决有无的问题。"><a href="#像有自己的云、自己的图像识别算法等等，虽然有好有坏，但是可以解决有无的问题。" class="headerlink" title="像有自己的云、自己的图像识别算法等等，虽然有好有坏，但是可以解决有无的问题。"></a>像有自己的云、自己的图像识别算法等等，虽然有好有坏，但是可以解决有无的问题。</h6><p>如果Google/Meta需要 6 个月才能复现ChatGPT“理解”的能力，可以认定其壁垒极高是很高<br>的，尤其是工程难度极大。这个时候其他巨头想要“追赶”，就很难了。因为ChatGPT的数据飞<br>轮优势已经几乎无法撼动。同时，国产ChatGPT基本不太可能了。</p><p>有人可能不服，过去的很多模型都很快抄的出来，为什么ChatGPT抄不出来？这是因为如下<br>几点原因，让ChatGPT更像“芯片”和“大飞机引擎”，而不是“普通AI模型”或者“原子弹”。</p><h3 id="ChatGPT壁垒的来源"><a href="#ChatGPT壁垒的来源" class="headerlink" title="ChatGPT壁垒的来源"></a>ChatGPT壁垒的来源</h3><h6 id="1-GPT3是闭源的"><a href="#1-GPT3是闭源的" class="headerlink" title="1. GPT3是闭源的"></a>1. GPT3是闭源的</h6><p>ChatGPT更是到现在连API都没开放。OpenAI内部对于AGI的态度是非常审慎的，光从安全<br>这一点考虑，都不可能把ChatGPT开源。所以国产机器学习依赖了十几年的“开源模型国产实<br>现”路径，在ChatGPT上是不要指望的。</p><p><strong>2. OpenAI的工程能力是很强的壁垒</strong></p><p>这是因为创始人真的懂，真的能坚持，真的挖到了这方面最好的一批人，形成了超高的人才密<br>度。“增加模型参数”这件事需要工程能力，更难的是“让大模型有效地学习到大数据中的知<br>识”。这里面的工程积累就可以类比“芯片”和“大飞机引擎”了。下一步的工程积累必须站在上一<br>步的工程突破上。而且要求过程中参与的工程师们都要有“原理性”思考的习惯。据打听来的消<br>息，正是因为OpenAI超高的人才密度，才在互相碰撞中突破了诸多工程瓶颈。</p><p><strong>3. 务实的土壤很难长出OpenAI的能力</strong></p><p>比如字节跳动的推荐算法模型也很大，业界也很羡慕，工程难度也很高。但是本质是面向业务<br>目标不断优化的模型，所有都是基于现有模式进行优化，是不可能形成范式突破的。但是如果<br>不能“一步一脚印”地为业务提供正反馈，整个模型的发展就很受限。老板能给三个月时间，但<br>是很难在三年还没有突破的情况下给耐心，就算有耐心，团队士气也无法保障。</p><p><strong>4. Leadership的技术判断力是稀缺资源</strong></p><p>New Bing与ChatGPT结合地这么快，效果又这么好，在创业历史上其实是罕见的奇迹。这是<br>乔布斯和马斯克的段位，远超市面上其他人。这方面可遇不可求，不是一个可复制的模式。</p><p>听说最近百度在国产LLM的卡位很好（其实并没有），但是Robin在自动驾驶上吃过一次亏，<br>于是对LLM给的时间是很短的。这就是leadership缺乏技术判断力，就无法理解为什么自动驾<br>驶是个空饼，而ChatGPT是真东西的典型例子。</p><h6 id="5-数据飞轮已经形成"><a href="#5-数据飞轮已经形成" class="headerlink" title="5. 数据飞轮已经形成"></a>5. 数据飞轮已经形成</h6><p>ChatGPT不光是一个AI新范式，也是一个现象级成功的C端产品，又有微软的资源和渠道加<br>成，很明显一上来就卡住了非常好的身位。这种情况下，ChatGPT的使用数据是可以不断反补<br>模型本身的。ChatGPT的博客里也反复强调他们有独特的机制，让数据的使用、理解、生产，<br>有紧密的闭环。</p><h3 id="复现ChatGPT“理解”能力要多久？"><a href="#复现ChatGPT“理解”能力要多久？" class="headerlink" title="复现ChatGPT“理解”能力要多久？"></a>复现ChatGPT“理解”能力要多久？</h3><p>以上所说的五条原因都是“困难”。但是到底有多“困难”，还是需要量化。ChatGPT是一个一个<br>学术界和业界都缺乏定论的新技术，具体的量化不太可能，所以我们这里抓住一个核心点，即<br>“涌现‘乌鸦’的能力”，可能性有多高，需要多久？</p><p>很明显，无论中国出了多少个类ChatGPT产品，有多少个国产LLM，我们都知道，离<br>ChatGPT能力最近的是拥有Deepmind，提出Transformer/T5/PaLM的谷歌。我们盯紧Google<br>什么时候涌现“乌鸦”能力就好了。</p><h6 id="“乌鸦”能力是涌现出来的，而不是有确定可复制的路径的。我们虽然知道其能力是在GPT训练"><a href="#“乌鸦”能力是涌现出来的，而不是有确定可复制的路径的。我们虽然知道其能力是在GPT训练" class="headerlink" title="“乌鸦”能力是涌现出来的，而不是有确定可复制的路径的。我们虽然知道其能力是在GPT训练"></a>“乌鸦”能力是涌现出来的，而不是有确定可复制的路径的。我们虽然知道其能力是在GPT训练</h6><h6 id="到什么规模有涌现的，但是不确定别的模型在这个规模也会涌现同样能力，毕竟文本质量和优"><a href="#到什么规模有涌现的，但是不确定别的模型在这个规模也会涌现同样能力，毕竟文本质量和优" class="headerlink" title="到什么规模有涌现的，但是不确定别的模型在这个规模也会涌现同样能力，毕竟文本质量和优"></a>到什么规模有涌现的，但是不确定别的模型在这个规模也会涌现同样能力，毕竟文本质量和优</h6><h6 id="化方式差别很大。就好像引擎的原理都知道，但是能不能达到那个推重比，只有极少数的公司"><a href="#化方式差别很大。就好像引擎的原理都知道，但是能不能达到那个推重比，只有极少数的公司" class="headerlink" title="化方式差别很大。就好像引擎的原理都知道，但是能不能达到那个推重比，只有极少数的公司"></a>化方式差别很大。就好像引擎的原理都知道，但是能不能达到那个推重比，只有极少数的公司</h6><h6 id="能掌握。"><a href="#能掌握。" class="headerlink" title="能掌握。"></a>能掌握。</h6><p>一个典型的话术会是“在OpenAI已经探明路径的情况下，花OpenAI 50%的投入，达到OpenAI<br>80%的效果”。希望看完上面，我们能认知到，我们应该默认这条路是行不通的。基于能力是<br>“涌现”的，要么100%，要么0%；叠加背后隐藏的工程难度，我们大胆推测一下，市面上迟早<br>会出现下一个ChatGPT，大概率是Google做出来的，但是六个月内出现的可能性不大。</p><p>而国产LLM在Google做出来之前，就别看了，无论如何吹，不是ChatGPT，也成不了<br>ChatGPT（希望我是错的）。在这种情况下我们就不去讨论复现ChatGPT需要多少张显卡了，<br>没意义。</p><h2 id="4-我们未来应该如何使用ChatGPT？"><a href="#4-我们未来应该如何使用ChatGPT？" class="headerlink" title="4. 我们未来应该如何使用ChatGPT？"></a>4. 我们未来应该如何使用ChatGPT？</h2><h3 id="OpenAI的的开放方式有待观望"><a href="#OpenAI的的开放方式有待观望" class="headerlink" title="OpenAI的的开放方式有待观望"></a>OpenAI的的开放方式有待观望</h3><p>我们上文基于现有信息，技术理解，和我们的猜想，提出来了ChatGPT的最佳开放模式应该<br>是增强和开放prompting的能力，打比方来说，让健忘的ChatGPT记得你交代的事情，对你<br>来说就有用了太多。接下来就是GPT4的开放和通过不同方式调教出来，各有所长的子能力模<br>型。</p><p>但是以上都是猜想，真正的使用方式还是要看OpenAI自己如何开放。江湖传闻下一步是和<br>Office Suite的深度整合。Notion AI已经给了很好的例子，确实很香。但是究竟是去增强微软<br>现有产品，还是去成为下一代计算机？我认为OpenAI会选择后者。但是站在此时此刻，我们<br>只能猜测和观望，以及做好人和ChatGPT的合理中间层。</p><h3 id="ChatGPT-Wrapper是我们当下可做的"><a href="#ChatGPT-Wrapper是我们当下可做的" class="headerlink" title="ChatGPT Wrapper是我们当下可做的"></a>ChatGPT Wrapper是我们当下可做的</h3><p>其实绝大多数人是不习惯于清晰表达自己脑海中想法的。所以虽然ChatGPT已经把“调用计算<br>力的手段”无限趋近于最合理的手段（用自然语言要求结果），但是我们已经发现，“提出信息完<br>整的prompt”，对现在的人来说，是一个高要求。</p><p>网络上已经有很多prompting的模版（比如这里）。把这一层做好，一方面能显著提高大家对<br>ChatGPT的使用效率，一方面也能让我们积累对用户真实需求的理解和揣测，从而和ChatGPT<br>做好适配。</p><h3 id="对ChatGPT能力的合理运用"><a href="#对ChatGPT能力的合理运用" class="headerlink" title="对ChatGPT能力的合理运用"></a>对ChatGPT能力的合理运用</h3><p>对于ChatGPT，我们应该在现在的条件下思考更合适的应用</p><p> <strong>对症下药</strong> ：ChatGPT不是搜索引擎、不是程序，我们就用它做它擅长的事情，而不是去做<br>搜索引擎和程序可以更高效完成的事情</p><p> <strong>择善而从</strong> ：当前的ChatGPT是有明显的hallucination问题的，那我们就不能100%相信它的<br>结论。一个简单的方法是我们要在自己能判断对错的地方去使用ChatGPT提高我们产生想<br>法，收集归纳信息的效率，但是人要来把关</p><h6 id="同时，我们也要意识到人类有更大的局限，不谈算力和知识面，光从理解能力这一角度来说"><a href="#同时，我们也要意识到人类有更大的局限，不谈算力和知识面，光从理解能力这一角度来说" class="headerlink" title="同时，我们也要意识到人类有更大的局限，不谈算力和知识面，光从理解能力这一角度来说"></a>同时，我们也要意识到人类有更大的局限，不谈算力和知识面，光从理解能力这一角度来说</h6><h6 id="-人类很难意识到自己的错误"><a href="#-人类很难意识到自己的错误" class="headerlink" title=" 人类很难意识到自己的错误"></a> 人类很难意识到自己的错误</h6><p> 人类有ego，会影响自己的认知，也会让观点带入感情色彩</p><p> 人类会故意偷换概念，等等</p><p>所以ChatGPT也许短期不会直接取代人类工作。但是两年内一定可以让一部分人的人效极大<br>程度地提高。虽然说消灭工作的同时会产生新工作，但是很可能是消灭了一百个，产生了一<br>个。那我们必须要思考一下，假如ChatGPT理解能力更上几层楼，拥有了多种能力，并且说<br>话也靠谱不乱说了，我们人类的竞争力还剩下什么呢？</p><h2 id="5-人类和ChatGPT的本质区别是什么？"><a href="#5-人类和ChatGPT的本质区别是什么？" class="headerlink" title="5. 人类和ChatGPT的本质区别是什么？"></a>5. 人类和ChatGPT的本质区别是什么？</h2><h6 id="因为我们的脑科学和神经科学非常不发达，这里只能从哲学寻求解答。BTW，除非脑科学产生"><a href="#因为我们的脑科学和神经科学非常不发达，这里只能从哲学寻求解答。BTW，除非脑科学产生" class="headerlink" title="因为我们的脑科学和神经科学非常不发达，这里只能从哲学寻求解答。BTW，除非脑科学产生"></a>因为我们的脑科学和神经科学非常不发达，这里只能从哲学寻求解答。BTW，除非脑科学产生</h6><p>重大的范式突破，不然neurallink这种脑机接口，是不可能实现大家想像中的那些功能的。</p><h6 id="我们不是哲学专家，这里就仅供参考。"><a href="#我们不是哲学专家，这里就仅供参考。" class="headerlink" title="我们不是哲学专家，这里就仅供参考。"></a>我们不是哲学专家，这里就仅供参考。</h6><h3 id="a-判断力"><a href="#a-判断力" class="headerlink" title="a. 判断力"></a>a. 判断力</h3><p>ChatGPT再厉害，也只能去吸取虚拟数字中的数字信号，是无法与现实世界做真实交互的。它<br>可以听一万个专家告诉他做A就会得到B，但是不从真实世界中做实验，就无法从最底层确认</p><p>这个说法究竟是真是假。绝知此事要躬行，才能有判断力的根基。</p><h3 id="b-“Eureka”"><a href="#b-“Eureka”" class="headerlink" title="b. “Eureka”"></a>b. “Eureka”</h3><h6 id="牛顿看到苹果落地，可以发现万有引力，从而预测星星的运动。哥白尼发现地球是围绕太阳转"><a href="#牛顿看到苹果落地，可以发现万有引力，从而预测星星的运动。哥白尼发现地球是围绕太阳转" class="headerlink" title="牛顿看到苹果落地，可以发现万有引力，从而预测星星的运动。哥白尼发现地球是围绕太阳转"></a>牛顿看到苹果落地，可以发现万有引力，从而预测星星的运动。哥白尼发现地球是围绕太阳转</h6><h6 id="的，而在他之前全地球人天天看着日出日落，都认为太阳是绕着地球转的。如果那个时候有一"><a href="#的，而在他之前全地球人天天看着日出日落，都认为太阳是绕着地球转的。如果那个时候有一" class="headerlink" title="的，而在他之前全地球人天天看着日出日落，都认为太阳是绕着地球转的。如果那个时候有一"></a>的，而在他之前全地球人天天看着日出日落，都认为太阳是绕着地球转的。如果那个时候有一</h6><p>个ChatGPT，一定非常笃定太阳绕着地球转。那个ChatGPT也许能从苹果如何落地推测出桃子<br>如何落地，但是大概率无法推测出星星的运动方式。</p><h6 id="当然，能发现万有引力的人也是少数。更有意义的是去识别这种思维能力到底是什么，以及在"><a href="#当然，能发现万有引力的人也是少数。更有意义的是去识别这种思维能力到底是什么，以及在" class="headerlink" title="当然，能发现万有引力的人也是少数。更有意义的是去识别这种思维能力到底是什么，以及在"></a>当然，能发现万有引力的人也是少数。更有意义的是去识别这种思维能力到底是什么，以及在</h6><p>我们日常生活中如何体现。阿基米德在泡澡时候发现浮力定律的时候喊了“Eureka”，大概可以<br>形容这种“灵感并发、灵光一现”的瞬间。我们这里把这个瞬间稍稍具体地归结为“链接了数个相<br>关的点，并且发现了第三个点”的过程。</p><h3 id="c-增量知识"><a href="#c-增量知识" class="headerlink" title="c. 增量知识"></a>c. 增量知识</h3><p>如果把现有知识归纳总结应用， 那必然PK不过ChatGPT。只有创造互联网上不存在的新知<br>识，才可能是ChatGPT做不到的。注意条件指向，互联网上不存在的新知识，也未必不能从<br>存量知识里总结出来，但是能从存量知识里总结出来的，一定不是人类的优势。</p><h3 id="d-理解人"><a href="#d-理解人" class="headerlink" title="d. 理解人"></a>d. 理解人</h3><h6 id="人类的文本知识里一定存在很多人性的理解，但是也一定有一些人性或者偏好，是没有被记录"><a href="#人类的文本知识里一定存在很多人性的理解，但是也一定有一些人性或者偏好，是没有被记录" class="headerlink" title="人类的文本知识里一定存在很多人性的理解，但是也一定有一些人性或者偏好，是没有被记录"></a>人类的文本知识里一定存在很多人性的理解，但是也一定有一些人性或者偏好，是没有被记录</h6><h6 id="总结在文字里的。如果我们结合-1-和-3-，就会发现，去真实世界理解人，而不是去通过调研、"><a href="#总结在文字里的。如果我们结合-1-和-3-，就会发现，去真实世界理解人，而不是去通过调研、" class="headerlink" title="总结在文字里的。如果我们结合 1 和 3 ，就会发现，去真实世界理解人，而不是去通过调研、"></a>总结在文字里的。如果我们结合 1 和 3 ，就会发现，去真实世界理解人，而不是去通过调研、</h6><h6 id="问卷、网络资料理解人；去带来增量的理解，而不是去人云亦云地重复套路。才是人类相对于"><a href="#问卷、网络资料理解人；去带来增量的理解，而不是去人云亦云地重复套路。才是人类相对于" class="headerlink" title="问卷、网络资料理解人；去带来增量的理解，而不是去人云亦云地重复套路。才是人类相对于"></a>问卷、网络资料理解人；去带来增量的理解，而不是去人云亦云地重复套路。才是人类相对于</h6><p>ChatGPT的优势。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>ChatGPT的范式突破是“乌鸦”能力。恕我能力所限，无法更简单地无损表达这一能力的本质<br>了。如果允许有损，我会用“理解”能力来概括它最重要的一面。作为对比，过往ML的能力<br>模式是“鹦鹉”能力，所做的是寻找“对应关系”</li><li>ChatGPT的意义是对“调用算力、总结信息”最究极的手段，预测会在两年内有能力辅助人类<br>取代大多数可被定义为“搬砖”类型的工作</li><li>ChatGPT的“乌鸦”能力是涌现的，工程难度是极高的。我们应该抛弃各种噪音，聚焦关注<br>Google是否能复现这一能力，从而判定这一能力到底有多难。而现在，建议我们的默认预<br>测是这一能力很难复现，需要别人来用强力证据说服我们他们能复现</li><li>我们对ChatGPT的使用应该观望OpenAI给我们提供的调用方式，在当下，我们应该聚焦<br>用好ChatGPT，并且做好ChatGPT能力与我们所需要解决问题的的中间层</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flyio部署alist在线服务</title>
      <link href="cd8153f9.html"/>
      <url>cd8153f9.html</url>
      
        <content type="html"><![CDATA[<p>alist是一个服务,提供各种存储源包括 阿里云盘,百度云盘,对象存储等,需要可以在内网部署实现一个服务可以接入多个存储源例如</p><p><img src="../img/1677219529577-ab58daf6-21b7-470b-86b0-c9a8b8a0b725.png" alt="image.png"></p><h2 id="使用flyio来部署"><a href="#使用flyio来部署" class="headerlink" title="使用flyio来部署"></a>使用flyio来部署</h2><p>笔者是window平台在powershell上运行</p><blockquote><p>powershell -Command “iwr <a href="https://fly.io/install.ps1">https://fly.io/install.ps1</a> -useb | iex”</p></blockquote><p>初始化flyio和对应的环境文档 <a href="https://fly.io/docs/flyctl/">Introducing Flyctl - The Fly CLI · Fly Docs</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登陆</span></span><br><span class="line">flyctl auth login</span><br></pre></td></tr></table></figure><p><strong>注册完成后，我们就可以正式开始部署应用啦.</strong></p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建应用</span></span><br><span class="line">git clone https://github.com/alist-org/alist-render</span><br><span class="line">cd alist-render</span><br><span class="line">flyctl launch</span><br></pre></td></tr></table></figure><blockquote><p>App Name 只允许 数字、字幕、破折号（-），然后记住App Name下面会用到.其中 <code>App Name</code> 需要是全局唯一的，而且之后不能更改，同时会作为 <code>app</code> 的子域名<br>地区博主选的香港（hkg (Hong Kong)），访问速度会快点.<br>其他一律默认回车.选择<code>NO</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个 1G 的持久存储空间(最小单位 1)</span></span><br><span class="line">flyctl volumes create data --size 1 --app APP_NAME</span><br></pre></td></tr></table></figure><h3 id="修改配置（fly-toml）"><a href="#修改配置（fly-toml）" class="headerlink" title="修改配置（fly.toml）"></a>修改配置（fly.toml）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 端口修改为 5244</span></span><br><span class="line">[[services]]</span><br><span class="line">http_checks = []</span><br><span class="line">internal_port = 5244</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加Alist数据目录</span></span><br><span class="line">[mounts]</span><br><span class="line">destination = &quot;/opt/alist/data&quot;</span><br><span class="line">source = &quot;data&quot;</span><br></pre></td></tr></table></figure><h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><p>准备工作已经完成，现在可以部署 alist 应用，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flyctl deploy --remote-only</span><br></pre></td></tr></table></figure><p>如果部署顺利（看到 deploved successfully），之后就可以用以下命令打开应用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flyctl open</span><br></pre></td></tr></table></figure><p>你也可以直接在浏览器打开 <code>https://APP_NAME.fly.dev</code></p><h3 id="访问密码"><a href="#访问密码" class="headerlink" title="访问密码"></a>访问密码</h3><p>访问密码在后台界面可以看到</p><p><img src="../img/image-20230224112235833.png" alt="image-20230224112235833"></p><p>访问效果如下</p><p><img src="../img/image-20230224142746854.png" alt="image-20230224142746854"></p><h2 id="使用GitHub-action来运行"><a href="#使用GitHub-action来运行" class="headerlink" title="使用GitHub action来运行"></a>使用GitHub action来运行</h2><p><a href="https://github.com/York618/alist-flyio">https://github.com/York618/alist-flyio</a> 来实现需要注意几点</p><ul><li>FLY_API_TOKE 访问 <a href="https://web.fly.io/user/personal_access_tokens">https://web.fly.io/user/personal_access_tokens</a></li><li>APP_NAME  需要提前初始化唯一app name,一般是flyctl来初始化</li><li>DATABASE</li><li>SQLUSER</li><li>SQLPASSWORD</li><li>SQLHOST</li><li>SQLPORT</li><li>SQLNAME</li></ul><p>注意app name需要先初始化好</p><h2 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h2><p><a href="https://alist.nn.ci/guide/install/script.html">One-click Script | AList Docs</a></p><p>上述的链接有安装的步骤,主要是包括docker镜像,二进制文件运行.</p><p>参考链接:</p><p><a href="https://cuojue.org/read/deploy-alist-in-flyio.html">在 Fly.io 上部署 alist 网盘程序 - 春风吹 - 浅秋枫影的博客</a><br><a href="https://isedu.top/index.php/archives/132/">利用Fly.io免费服务部署Alist网盘程序 - 清~幽殇</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> flyio </tag>
            
            <tag> alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webgis相关内容(转发)</title>
      <link href="2438244e.html"/>
      <url>2438244e.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/0f474dbf8cfa">WebGIS引擎现状与未来 - 简书</a></p><p><strong>一  引言</strong></p><p>作为十年GIS老兵，常常遇到同行或领导的灵魂拷问，“为什么我们不用google地图啊，我看它的3D很好啊”，“OpenLayers 6支持3D吗？”，“MapboxGL 2.5D与Cesium的3D优缺点是啥”，“地图不是球，这不是3D的啊？”，“51 World基于游戏引擎与云渲染技术在可视化领域已经对WebGL形成降维打击，WebGIS是不是没前途了？”等等等等。从业人员从技术角度对未来变革的担忧，领导虽然不懂技术也会从非专业角度表达一些关心，诸如此类问题层出不穷却又不是三言两语能讲清楚的，所以本文想稍微系统点介绍WebGIS发展历程、各自特点、未来方向，一家之言仅供读者参考。</p><p><strong>二 地图API分类</strong></p><p>WebGIS系统通常都围绕地图进行内容表达，但并不是有地图就一定是WebGIS，所以有必要讨论下基于Web的地图API分类及应用场景。Web上的Map API主要分类如下5大类：</p><ul><li>Charts：以D3.js，Echarts等为代表。</li><li>LBS：以高德/谷歌/百度地图等为代表。</li><li>WebGIS商业API：ESRI的ArcGIS API For JS，超图的IClient。</li><li>WebGIS开源API:   Leaflet，OpenLayers，Cesium，MapboxGL等。</li></ul><p>Charts类型在各种业务页面或后台管理页面很常见，适用业务场景是地图非页面表达的主体，且几乎没有交互，页面中同时还有其他各类主题，示例如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/68979-05e12e50a83565d3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/format/webp" alt="img"></p><p>charts地图业务场景</p><p>LBS（基于位置的服务）广泛应用于互联网类ToC应用，在这个时代人们的衣食住行与这些地图网站、地图APP及其背后的地理信息服务日益紧密。LBS必须要在连接互联网场景中使用，只能使用地图服务商提供的数据和服务，最多支持自定义用户标记若干兴趣点的简单操作，2G、2B场景如内网离线，复杂企业级地理数据展示分析等几乎无能为力。</p><p><img src="https://upload-images.jianshu.io/upload_images/68979-635b672882b41438?imageMogr2/auto-orient/strip%7CimageView2/2/w/481/format/webp" alt="img"></p><p>LBS地图应用场景 </p><p>WebGIS通常面向复杂业务场景，通常是内网离线的2G，2B定制化应用。与Charts不同，此类应用以地图为表达中心，所有的UI都是与地图交互和联动为目的；与LBS 2C的单一需求不同，此类应用需要自建空间数据库与空间数据服务以支撑前端空间数据的维护，复杂的业务交互，个性化的主题可视化等目的。现代WebGIS引擎种类也非常多，都是Html5时代发展的阶段性成果，各自也有侧重点和合适的业务场景，具体下文阐述。</p><p><strong>三 WebGIS发展历程</strong></p><p>WebGIS发展以Html5标准确立为分水岭分为前H5时代与H5时代，如果以发展的眼光看，当然也有后H5时代。之所以要本节要介绍发展历程，是因为现代的WebGIS引擎的出身和适用场景与其息息相关。</p><p>前H5时代是Flex，JS，Silverlight“三驾马车”时代，这个时代JS还没有取得优势，产品都以Flex为首推，以ArcGIS的Flex API（也有JS版）和开源的OpenScale（openlayer2 是其JS版）为代表，具体不细阐述，主要产品如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/68979-c2b0a974aea29d40?imageMogr2/auto-orient/strip%7CimageView2/2/w/860/format/webp" alt="img"></p><p>图片</p><p>随着时代发展，移动互联网的崛起，H5标准的发布，新的技术变革势不可挡。在2010年乔布斯宣布iphone不支持Flex后，这项技术就开始了落幕演出，H5技术及其主力语言JS获得一统前端的地位，很多基于H5标准的WebGIS引擎纷纷入场，WebGIS H5时代开启，引擎发布大事记如下：</p><ul><li>2011年3月，WebGL1.0标准发布。</li><li>2011年5月，Leaflet发布v0.1版本，基于H5草案，只来得及支持Canvas，与WebGL擦肩而过，以后也再没实现WebGL。</li><li>2012年底，H5标准发布。</li><li>2013年中，OpenLayer3测试版发布，与OpenLayer2不同，3是基于H5标准完全重写的，并不是迭代升级，而是一个全新的产品，只是继承了Openlayer这个已获得认可的名称与产品定位，应该说产品定位继承的相当彻底且发扬光大，只是过于保守，从而没能设想进入三维，满足于自己的二维领域。</li><li>2013年制定WebGL2.0标准。</li><li>2014年秋，Cesium发布1.0版本，开源WebGIS引擎进入三维时代。</li><li>2016年春，ArcGIS API for JS 4.0发布，商业WebGIS引擎进入三维时代。</li><li>2017年2月，WebGL2.0标准发布。</li><li>2019年中，MapboxGL发布1.0版本，地图可视化从功能迈向了性能，颜值等方向，更多人发现原来地图还可以这样展示，更多的客户需要更加个性化的地图更加舒服的用户体验。</li><li>2020年12月，MapboxGL发布2.0版本，支持三维相机参数，地形，地图最大倾角从60°到85°等，终于摆脱2.5D的产品印象。</li></ul><p>从发展历程看，总结了如下几个特点：</p><ul><li>WebGIS引擎与对应的Web技术与标准有较大的时间差。一项Web技术被淘汰，对应基于该技术的引擎就会走向终结，如Flex与Flex GIS引擎的落幕。那么可以设想，是不是WebGL被淘汰，目前所有的引擎都会被淘汰？发展角度看是必然的，并且替代WebGL的WebGPU已经在路上了。</li><li>WebGIS产品设计上的“原罪”，这种引擎层面设计的缺陷和应对场景不足几乎是难以改变的。如LeafLet发布还没WebGL标准因此它只实现了Canvas，所以直到今天它也不支持WebGL；Ol发布完全想的是继承OpenScale（flex)并现代化升级，但是眼光还是不长远，技术实现上性能优化不足，也没有引擎层面支持符合三维的MVP矩阵，相机参数等概念，虽然其支持WebGL，但却没法把三维和地图结合起来，只能用于优化二维图形渲染性能。</li></ul><p><strong>四 WebGIS引擎各自特点与适用业务场景</strong></p><p>仅作简要阐述，不再展开细谈了。</p><ul><li>LeafLet，Canvas渲染机制，仅支持二维表达，地图坐标系墨卡托投影，不支持球，特点是入手简单，缺陷是不支持webgl渲染性能有瓶颈，适用于轻量级简单地理信息主题可视化。</li><li>OL6，WebGL渲染机制，仅支持二维表达，不限制坐标系，不支持球，特点是二维GIS功能最丰富全面，缺陷地图样式简单，难以定制高颜值的可视化效果，不支持三维，适用于传统地理信息强GIS的二维数据Web维护和展示，面向公网地图颜值上有些上不了台面。</li><li>Cesium，WebGL渲染机制，二三维一体化，经纬度坐标系，支持球，明星数据格式是3DTiles，特点是唯一开源的WebGIS三维引擎，缺陷是卡，体验差，地图丑，原因应该是为了支持球，所有的平面瓦片都要进行纹理转换贴球，计算量偏大，最新的矢量切片也是变成图片再纹理转换到球上，栅格化严重一点都不精美，可以说为了球，牺牲了太多性能和地图美观度，适用于Web强三维应用场景。</li><li>ArcGIS API JS 4，对标Cesium，明星数据格式是I3S，也有类似Cesium的问题，但由于有ArcGIS平台的体系支持，应该功能最强大，但是如果不采购这个平台体系，纯API很鸡肋，适合采购了商业平台的用户，如政府采购再定制应用方式。</li><li>MapboxGL，WebGL渲染机制，二三维一体化，墨卡托坐标系，不支持球，明星数据格式是矢量切片，特点是最具美感的专题地图，缺点是没有球，最新2.0必须联网验证token，适用于互联网场景复杂地理信息表达，内网追求地图可视化效果的也适用，Mapbox很多优化都是基于互联网场景的。</li></ul><p>在WebGIS 3D领域，比较有争议性的是cesium与mapboxgl，简单来说，两者都是二三维一体化的GIS引擎，但产品侧重点不同 ，Cesium追求的三维功能全面，Mapbox追求用户体验：</p><p><img src="https://upload-images.jianshu.io/upload_images/68979-2c9964c706987304?imageMogr2/auto-orient/strip%7CimageView2/2/w/801/format/webp" alt="img"></p><p>图片</p><p>对于Cesium的API用户来说，加载倾斜摄影，点云数据，地形数据都是直接调用引擎API就可以了，即使不懂WebGL也很快能做个三维的地图样子，当然高级开发者还会基于WebGL开发自定义高级显示效果。</p><p>对于Mapbox的API用户来说，2.0版本之前三维不足，主打的二维的矢量切片技术，并且切片加载机制导致倾角太大性能很差，因此引擎限制了最大倾角为60°，看起来就很像2.5D的东西。类似Cesium的三维功能只能依靠Deck.gl等库去集成，万幸的是引擎开放了自定义WebGL图层功能，高级开发者可以定制自己的三维图层，但坑爹的是没有三维相机参数需要自己源码扩展。2.0版本之后新增的地形3D展示，三维开发需要的相机参数，地图倾角限制从60°改成85°，比较有三维感觉了，效果辅助和性能优化方向考虑的Sky API等，显示了MapboxGL开始在三维方向发力，但仍然没有在官方API层面支持倾斜摄影的3Dtiles，点云等，不熟悉WebGL的开发者使用仍然很困难。除此以外，值得警惕的地方是2.0的开源协议从商业友好的BSD-3改成了Mapbox自己的使用协议，无论是否使用Mapbox资源强制进行在线token计数，等于完全放弃了内网用户（不联网没法计数等于没法用），因此从安全和商业应用开发角度，请不要升级到2.0，保持在1.13版本进行企业定制化开发。</p><p>虽然两者都是二三维引擎，但是如果认真看他们的三维功能都是很少的几个常用场景，绝大部分业务场景和特效都需要高级开发者定制，也就是说，如果不熟悉WebGL，实际上是很难满足地理信息可视化的要求的。</p><p>总的来说，虽然mapbox更改了使用协议，但不否认它仍是家伟大的公司，在现有的技术体系下，开创性的提出数据用矢量切片技术，图标用sprite（互联网应用场景的同学很熟悉，减少网络请求的优化，合并的图标纹理减少webgl渲染的调用命令次数），字体用字体pbf切片，就是怎么极致优化怎么做，强大的技术流风格。在此分享下个人用mapbox定制的一些二维，三维应用效果：</p><p><img src="https://upload-images.jianshu.io/upload_images/68979-e71a0c5ac18f1844?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/format/webp" alt="img"></p><p>矢量切片的时序播放</p><p><img src="https://upload-images.jianshu.io/upload_images/68979-0c8215870eae6181?imageMogr2/auto-orient/strip%7CimageView2/2/w/970/format/webp" alt="img"></p><p>三维等值面</p><p><img src="https://upload-images.jianshu.io/upload_images/68979-b400f27f90817769?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/format/webp" alt="img"></p><p>三维体渲染</p><p><strong>五 后H5时代的技术变革</strong></p><p>H5时代涌现了很多令人赞叹的GIS引擎，但是也有很多问题，三维效果差强人意，三维模型又受制于网速，只能说有功能，但难以说有好的功能。随着用户对可视化要求越来越高，人们开始思考别的技术方向，例如最近51World搞出了利用C端游戏引擎做GIS，可视化效果通过流媒体传到前台显示的“云渲染”技术，不得不说这是个很投巧的做法，所谓游戏引擎对GIS可视化引擎的降维打击。</p><p>有不少GIS软文认为云渲染是次时代的GIS可视化技术，我个人认为并不是，51World的做法是业务创新而不是实质技术上的创新，并不会形成技术护城河，随着专业GIS公司超图和ESRI的介入很快会失去它目前形成的开创性优势，也就是“投巧”的技术门槛实在太低。另外一方面，云渲染应用面过于狭窄适合无并发无交互的大屏可视化，不具备应用普适性。</p><p>除“云渲染”外，近期WebAssemble和WebGPU是另外两个值得关注的发展方向，如果我们把时间线后移4，5年，在后H5时代的WebGIS会形成新的三足鼎立：</p><p><img src="" alt="img"></p><p>图片</p><p>以下对三个方向做个技术说明：</p><ul><li><p>云渲染</p><p>原理：C端使用游戏引擎做数据可视化，可视化的结果通过视频流传到客户端显示。</p><p>优点：游戏引擎比较成熟，效果好，三维大量数据，美术资源等不用传到客户端。</p><p>缺点：完全放弃日益先进强大的客户端计算资源（摩尔定律），完全依靠服务器资源，导致服务器资源投入很大，如果有高并发，起码得有分布式GPU计算引擎吧？所以不可能广泛应用，业务场景很小，只适合大屏可视化目前。</p></li><li><p>WebAssemble</p><p>原理：能让c++,rust等高性能语言写的功能以wasm形式在Web端应用，弥补JS性能的缺陷，（经过谷歌V8引擎优化，JS的性能也是直逼后台，缺陷有点牵强，而且前端计算可以使用GPGPU，WebWork等技术在gpu，在多线程非阻塞计算）当然更主要的用处是有利于原先C端图形软件如CAD，GoogleEarth搬到BS上，例如GoogleEarth的BS版已经实现了。</p><p>优点：可以用高性能语言写的算法应用到前端改进JS的算法（牵强，实际投入产出比不大对绝大部分公司），大量的后端程序员开始进入前端搞事情，前端不再是JS程序员的前端（从性能方向考虑甚至产生是否WebAssemble会取代JS的疑问）。</p><p>缺点：WebAssemble不能操作dom，因此它只是一个补充，给前端留个“后路”而已，并没有取代JS的能力也没有这样的定位。另外业务应用场景非常狭窄，只适合有成熟C端图形产品搬到BS，对一般业务产品冲击不大。从公司角度如果没有C端成熟图形产品就不值得投入，从程序员个人角度，如果是JS程序员可以直接无视，这种技术不会对你产生任何影响，如果是后端程序员，可以兴奋起来，你可以去前端玩玩了。。。</p></li><li><p>WebGPU</p><p>原理：下一代Web图形引擎，WebGL的替代者，业务场景就是现在用WebGL的地方，将来也都是WebGPU应用的场景。</p><p>优点：BS端的图形引擎与C端几乎一致（差半代），可以设想很多原先只有C端能做的酷炫效果B端也能做。（WebGL与C端差了好多代了，所以没法做出能追上C端效果的东西）</p><p>缺点：目前正式标准还没发布，那么基于WebGPU的图形，GIS引擎当然也没有了，就算有了，酷炫效果也不是GIS API这种，更多是图形学领域，大部分目前的业务API开发者会失去竞争力。</p></li></ul><p><strong>六 思考与建议</strong></p><p>从H5时代个人的职业经历来看，如果不懂图形学原理，就算使用了WebGL的GIS引擎是做不出符合业务发展的东西来的，顶多加加地形加个建筑做做项目而已，稍微个性化的展示都做不了。从后H5时代来看，一方面可能C++,Rust等技术会更加如鱼得水，那么依靠JS的程序员和依靠JS实现可视化的公司只能抱紧WebGPU的大腿，要在图形学领域持续进行技术投入，纯调用API实现效果的时代一去不复返了，更加先进的图形引擎与更加灵活的渲染管线，再与更加个性化的业务展示要求结合与促进，会产生新的思想膨胀和化学反应，如果个人和公司跟不上，那么在下个时代，才真的是遇到”降维打击”了。</p><p>地理可视化（尤其3D）的未来并不属于GIS，而是属于图形学，所谓万变不离其宗。。。（首发于微<em>信</em>公<em>众</em>号：Spatial Data）</p><p>作者：遥想公瑾当年<br>链接：<a href="https://www.jianshu.com/p/0f474dbf8cfa">https://www.jianshu.com/p/0f474dbf8cfa</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>synchronizer_upgrade</title>
      <link href="3b9fc184.html"/>
      <url>3b9fc184.html</url>
      
        <content type="html"><![CDATA[<p>是一个c++类</p><p>ObjectMonitor() {<br>    _header       = NULL;<br>    _count        = 0; //记录个数<br>    _waiters      = 0,<br>    _recursions   = 0;  // 线程重入次数<br>    _object       = NULL;<br>    _owner        = NULL;<br>    _WaitSet      = NULL; // 调用wait方法后的线程会被加入到_WaitSet<br>    _WaitSetLock  = 0 ;<br>    _Responsible  = NULL ;<br>    _succ         = NULL ;<br>    _cxq          = NULL ; // 阻塞队列，线程被唤醒后根据决策判读是放入cxq还是EntryList<br>    FreeNext      = NULL ;<br>    _EntryList    = NULL ; // 没有抢到锁的线程会被放到这个队列<br>    _SpinFreq     = 0 ;<br>    _SpinClock    = 0 ;<br>    OwnerIsThread = 0 ;<br>  }</p><p>ObjectMonitor中有五个重要部分，分别为_ower,_WaitSet,_cxq,_EntryList和count。</p><p>_ower 用来指向持有monitor的线程，它的初始值为NULL,表示当前没有任何线程持有monitor。当一个线程成功持有该锁之后会保存线程的ID标识，等到线程释放锁后_ower又会被重置为NULL;<br>_WaitSet 调用了锁对象的wait方法后的线程会被加入到这个队列中；<br>_cxq  是一个阻塞队列，线程被唤醒后根据决策判读是放入cxq还是EntryList;<br>_EntryList 没有抢到锁的线程会被放到这个队列；<br>count 用于记录线程获取锁的次数，成功获取到锁后count会加1，释放锁时count减1。</p><p>当有一个线程获得synchronized锁后，monitor对象中的count就会被加1，并且会将这个线程的id存入到monitor的_ower中。此时，如果其他线程来尝试拿锁则会被放入到_EntryList队列中阻塞。<br>还记得上一节中我们立的一个Flag了吗？synchronized锁的是container对象，而wait和notify也是container对象的方法，这么一看我们上一节中留下的问题就有些眉目了。是不是调用wait方法的时候线程也会被加入到一个等待队列，而等到notify或者notifyAll的时候再从等待队列中将线程唤醒呢？关于这个问题在这一次，彻底搞懂Java中的synchronized关键字这篇文章中其实已经有解读了，就是调用wait方法的线程会被加入到一个_WaitSet集合中，并会将线程挂起。但是，这里要再次强调一下_WaitSet与_EntryList这两个集合。_EntryList集合中存放的是没有抢到锁，而被阻塞的线程，而_WaitSet集合中存放的是调用了wait方法后，处于等待状态的线程。**<br><a href="https://juejin.cn/post/6977993272538955806">这一次，彻底搞懂Java并发包中的Atomic原子类 - 掘金</a><br><a href="https://juejin.cn/post/6975435256111300621">这一次，彻底搞懂Java中的ReentrantLockt实现原理 - 掘金</a></p><p>作者：赌一包辣条<br>链接：<a href="https://juejin.cn/post/6973571891915128846">https://juejin.cn/post/6973571891915128846</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentHashMap解析-转载</title>
      <link href="b7c8f71.html"/>
      <url>b7c8f71.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://qwerhuan.gitee.io/2020/12/09/java/hashmap-xiang-guan-lei-jie-xi/">HashMap相关类：Hashtable、LinkHashMap、TreeMap | HuanBlog</a> </p><p><a href="https://qwerhuan.gitee.io/2020/12/07/java/shen-ru-jie-xi-concurrenthashmap-gan-shou-bing-fa-bian-cheng-zhi-hui/">深入解析ConcurrentHashMap：感受并发编程智慧 | HuanBlog</a></p><p>本次先简要讨论ConcurrentHashMap 顺便讨论下HashMap,HashTable这些Map的数据的结构,线程安全,在get,put部分的业务逻辑</p><p>ConcurrentHashMap : 是线程安全的主要是通过node来加锁,同时要结构是数组+链表,但是在1.7的版本是数组加链表 使用segemen的分块锁来完成</p><p>HashMap: 数据加链表 分为大概是 hash函数–hash冲突–扩容方案–线程安全的设计</p><p>HashTable: 1.2版本现在使用的少,它是基于synchronize对象来加锁的</p><p>fast-fail  fail-safe</p><p>记录一个count在并发的操作和影响</p><p>最后我把<a href="https://qwerhuan.gitee.io/2020/12/07/java/shen-ru-jie-xi-concurrenthashmap-gan-shou-bing-fa-bian-cheng-zhi-hui/">深入解析ConcurrentHashMap：感受并发编程智慧 | HuanBlog</a>的这篇文章总结下(jdk 1.8)</p><h3 id="CAS与自旋锁"><a href="#CAS与自旋锁" class="headerlink" title="CAS与自旋锁"></a>CAS与自旋锁</h3><p>主要是在并发下处理</p><h3 id="如何控制并发"><a href="#如何控制并发" class="headerlink" title="如何控制并发"></a>如何控制并发</h3><h3 id="添加数据：putVal"><a href="#添加数据：putVal" class="headerlink" title="添加数据：putVal()"></a>添加数据：putVal()</h3><h3 id="初始化数组：initTable"><a href="#初始化数组：initTable" class="headerlink" title="初始化数组：initTable()"></a>初始化数组：initTable()</h3><h3 id="修改节点总数：addCount"><a href="#修改节点总数：addCount" class="headerlink" title="修改节点总数：addCount()"></a>修改节点总数：addCount()</h3><h3 id="扩容方案：transfer"><a href="#扩容方案：transfer" class="headerlink" title="扩容方案：transfer()"></a>扩容方案：transfer()</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kafka小结</title>
      <link href="88809bac.html"/>
      <url>88809bac.html</url>
      
        <content type="html"><![CDATA[<p>kafka开源流处理平台，由Scala和Java编写。该项目的目标是为处理实时数据提供一个统一、高吞吐、低延迟的平台。这是维基百科上的描述,这也是区别于rabbitmq等其他的消息队列的特点,kafka基于订阅-消费模式,自定义的协议,不同于MQTT,AMPQ,JMS等这些协议</p><ul><li>Provider/MessageProvider：生产者</li><li>Consumer/MessageConsumer：消费者</li><li><strong>PTP：Point To Point，点对点通信消息模型</strong></li><li><strong>Pub/Sub：Publish/Subscribe，发布订阅消息模型</strong></li><li>Queue：队列，目标类型之一，和PTP结合</li><li>Topic：主题，目标类型之一，和Pub/Sub结合</li><li>ConnectionFactory：连接工厂，JMS用它创建连接</li><li>Connnection：JMS Client到JMS Provider的连接</li><li>Destination：消息目的地，由Session创建</li><li>Session：会话，由Connection创建，实质上就是发送、接受消息的一个线程，因此生产者、消费者都是Session创建的</li></ul><p>值得注意的是 在kafka中需要注意的名词包括 broke,topic,producer,consumer,partition,replica</p><p>类似的</p><h2 id="图解相关的kafka概念"><a href="#图解相关的kafka概念" class="headerlink" title="图解相关的kafka概念"></a>图解相关的kafka概念</h2><p><img src="../img/kafka.drawio.png" alt="未命名绘图-第 2 页.drawio"></p><h2 id="leader-follower同步过程中截断机制"><a href="#leader-follower同步过程中截断机制" class="headerlink" title="leader,follower同步过程中截断机制"></a>leader,follower同步过程中截断机制</h2><p><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF%EF%BC%88%E5%AE%8C%EF%BC%89/14%20%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%A7%A3%E8%AF%BB%20Kafka%20%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%9C%BA%E5%88%B6.md#:~:text=2.-,%E6%88%AA%E6%96%AD%E6%9C%BA%E5%88%B6,-%E5%9C%A8%E7%AC%AC%2012">kafka截断机制</a></p><p>注意在消费中HW(High Watermark).LEO(Log End Offset),在ISR(in-sync replica )列表需要保持hw一致,在leader变更中需要注意leo,HW(High Watermark)是所有副本中最小的LEO。</p><p><img src="../img/image-20230104112036179.png" alt="image-20230104112036179"></p><h2 id="针对kafka的幂等性PID-Producer-ID-和sequence-numbers。"><a href="#针对kafka的幂等性PID-Producer-ID-和sequence-numbers。" class="headerlink" title="针对kafka的幂等性PID(Producer ID)和sequence numbers。"></a>针对kafka的幂等性PID(Producer ID)和sequence numbers。</h2><p>product会维护一个生产序列seq来表现.如果对应的seq和broke的对不上</p><p>product_seq&gt;broke_seq 消息丢失</p><p>product_seq&lt;broke_seq+1 重复保存</p><p>参考链接:<a href="https://juejin.cn/post/7084062283453693965">Kafka的ISR机制+日志数据清理 - 掘金</a>,<a href="https://www.cnblogs.com/dw3306/p/14318226.html">MQ（消息队列）的使用场景以及常见的MQ - 邓维-java - 博客园</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springAOP和bean生命周期</title>
      <link href="45ca8a5d.html"/>
      <url>45ca8a5d.html</url>
      
        <content type="html"><![CDATA[<p>Springboot是Spring的脚手架,提供的自动配置功能初始化spring的ioc容器,</p><p>BeanDefinition:可以理解为定义bean</p><p>bean的生命周期,大部分初始化和赋值在AbstractAutowireCapableBeanFactory.doCreateBean 下来定义的: </p><pre><code>- 创建bean- 赋值和变量- 初始化bean 包括 BeanPostProcessor,initMethod等- AOP相关的内容- 被销毁</code></pre><p><img src="../img/instantation.jpg" alt="/assets/images/bean/instantation.jpg"></p><p>SpringApplicationContext:Spring的容器负责放置初始化好的bean</p><p>SpringFactoriesLoader  加载 spring.factories</p><p>1． 生成一个SpringApplication的对象</p><ul><li>1． webApplicationType ＝ 推测web应用类型（NONE、REACTIVE、SERVLET）</li><li>2． 从spring．factories中获取BootstrapRegistryInitializer对象</li><li>3． initializers ＝ 从spring．factories中获取ApplicationContextInitializer对象</li><li>4． listeners ＝ 从spring．factories中获取ApplicationListener对象</li></ul><p>2． SpringApplication的对象．run（）</p><ul><li>1． 获取SpringApplicationRunListener—-＞EventPublishingRunListener</li><li>\2. SpringApplicationRunListener.starting()</li><li>3．创建一个Spring容器</li><li>4． ApplicationContextInitializer—＞初始化Spring容器</li><li>\5. SpringApplicationRunListener.contextPrepared()</li><li>6． 把传给run方法的配置类注册成为一个Bean</li><li>\7. SpringApplicationRunListener.contextLoaded()</li><li>8．会解析配置类、扫描、启动Tomcat／Jetty／Undertow</li><li>(AutoConfigurationImportSelector,DeferredImportSelector)</li><li>\9. SpringApplicationRunListener.started() I</li><li>10.</li><li>\10. SpringApplicationRunListener.ready()</li></ul><h2 id="从注解开始说"><a href="#从注解开始说" class="headerlink" title="从注解开始说"></a>从注解开始说</h2><p>@enableSpringAutoConfig -&gt;Configeration -&gt;inportSelector-&gt; AutoConfigurationImportSelector</p><p>@SpringBootConfig- mapperScan</p><p>@ComponentScan</p><p>autoConfigerationSelector.class 会解析 autoconfig包下面的bean.factory</p><h2 id="从SpringBoot-run-说"><a href="#从SpringBoot-run-说" class="headerlink" title="从SpringBoot.run()说"></a>从SpringBoot.run()说</h2><p><img src="../img/image-20230104122503870.png" alt="image-20230104122503870"></p><p>SpringApplication.run()入口</p><p>AbstractApplicationContext.refresh()创建了ApplicationContext容器后刷新</p><p>DefaultListableBeanFactory,deGetBean()  ApplicationContext集成了 ListableBeanFactory</p><p>DefaultSingletonBeanRgistry.getSingleton() 获取单例的bean实例</p><p>AbstractAutowireCapableBeanFactory.createBean();创建对应的bean对应上面的Bean的生命周期</p><p>newInstance() 初始化一个bean实例</p><p>在refresh()方法下对应的方法注释:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">            <span class="comment">//1:准备刷新上下文环境</span></span><br><span class="line">            prepareRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2:获取初始化Bean工厂</span></span><br><span class="line">            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3:对bean工厂进行填充属性</span></span><br><span class="line">            prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//4:Spring开放接口 留给子类去实现该接口</span></span><br><span class="line">                postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//5:调用我们的bean工厂的后置处理器</span></span><br><span class="line">                invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//6:注册我们bean后置处理器 </span></span><br><span class="line">                registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//7:初始化国际化资源处理器</span></span><br><span class="line">                initMessageSource();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//8:初始化事件多播器</span></span><br><span class="line">                initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//9:这个方法同样也是留个子类实现,其中springboot也是从这个方法进行tomcat的启动</span></span><br><span class="line">                onRefresh();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//10:把我们的事件监听器注册到多播器上</span></span><br><span class="line">                registerListeners();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//11:实例化所有的非懒加载的单实例bean</span></span><br><span class="line">                finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//12:最后刷新容器 发布刷新事件(Spring cloud eureka也是从这里启动的)</span></span><br><span class="line">                finishRefresh();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">                destroyBeans();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">                cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">                <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">                resetCommonCaches();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="../img/640_spring_bean.png" alt="图片"></p><h2 id="postProcessBeanFactory"><a href="#postProcessBeanFactory" class="headerlink" title="postProcessBeanFactory()"></a>postProcessBeanFactory()</h2><h2 id="invokeBeanFactoryPostProcessors"><a href="#invokeBeanFactoryPostProcessors" class="headerlink" title="invokeBeanFactoryPostProcessors()"></a>invokeBeanFactoryPostProcessors()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">processConfigBeanDefinitions的调用逻辑</span><br><span class="line"> 读取所有的自动配置类(带有<span class="meta">@Configuration</span>注解的类)</span><br><span class="line"> 相当于加载beanDefination</span><br><span class="line"> invokeBeanFactoryPostProcessors实现这两个接口可以定制</span><br><span class="line">    - BeanDefinitionRegistry对象</span><br><span class="line">    - ConfigurableListableBeanFactory对象。</span><br><span class="line">    </span><br><span class="line">    AbstractAutowireCapableBeanFactory.doCreateBean() 下的方法熟悉</span><br><span class="line">    - populateBean()</span><br><span class="line">    - initializeBean()</span><br><span class="line">    - applyBeanPostProcessorsBeforeInitialization()</span><br><span class="line">    - processor.postProcessBeforeInitialization(result, beanName)</span><br><span class="line">    - invokeAwareInterfaces</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="../img/image-20230106123943743.png" alt="image-20230106123943743"></p><h2 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh();"></a>onRefresh();</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AbstractApplicationContext.onRefresh 是空但是AnnotationConfigServletWebServerApplicationContext是实际实现的类,下面有留言</span><br></pre></td></tr></table></figure><p>​        /**</p><p>Create a new {@link AnnotationConfigServletWebServerApplicationContext} that needs</p><ul><li>to be populated through {@link #register} calls and then manually</li><li>{@linkplain #refresh refreshed}.<br>   */<br>AnnotationConfigServletWebServerApplicationContext 继承了ServletWebServerApplicationContext 实现实现onRefresh的类是 </li></ul><p><img src="../img/image-20230106124800528.png" alt="image-20230106124800528"></p><p>实际会启动tomcat服务的</p><p><img src="../img/image-20230106125919039.png" alt="image-20230106125919039"></p><p>启动</p><p><img src="../img/image-20230106131402394.png" alt="image-20230106131402394"></p><p><img src="../img/image-20230106131700726.png" alt="image-20230106131700726"></p><p>在探究AOP原理之前，让我们先来了解AOP的术语：</p><p>Aspect（切面）：要实现的散布应用中多处的功能，例如日志记录；</p><p>Joinpoint（连接点）：应用执行中可以插入切面的点，这个点可以是方法调用、异常抛出甚至是字段值修改，由于Spring AOP构建在动态代理的基础上，所以连接点只支持方法层面；</p><p>Pointcut（切点）：定义了切面应该插入到哪些连接点，我们并不希望切面插入到所有的连接点，切点能让我们决定切面应该插入到哪些连接点；</p><p>Weaving（织入）：把切面插入到目标对象上并生成新的代理对象的过程。我们可以在目标对象的编译期（需要特殊的编译器）、类加载期（需要特殊的类加载器）或运行期织入，由于Spring AOP构建在动态代理的基础上，所以只支持在运行期织入；</p><p>Introduction（引入）：为目标对象添加新方法或新属性的过程，引入使得在不改变目标对象的情况下，让目标对象具有新的行为和状态；</p><p>Advice（通知）：定义了切面何时被触发，Spring目前有5种类型的通知，分别是：BeforeAdvice（前置通知）、AfterAdvice（后置通知）、AfterReturningAdvice（返回通知）、ThrowsAdvice（异常通知）和AroundAdvice（环绕通知）。</p><p><img src="../img/04170857_Aoog.jpg" alt="one-ok"></p><p>参考链接:<a href="https://juejin.cn/post/7155884227714613285">聊透Spring bean的生命周期 - 掘金</a>,<a href="https://zhuanlan.zhihu.com/p/130309481?utm_id=0">Spring Boot详细生命周期介绍 - 知乎</a>,<a href="https://zhuanlan.zhihu.com/p/123008720">Spring详细生命周期介绍 - 知乎</a>,<a href="https://blog.csdn.net/java_green_hand0909/article/details/90238242">@Pointcut()的execution、@annotation等参数说明<em>Normal Developer的博客-CSDN博客</em>@annotation</a> ,<a href="https://mp.weixin.qq.com/s/kKHJPehbnCeoiR_BtCxSWw">Spring IOC和Bean生命周期源码分析</a> ,<a href="https://juejin.cn/post/7185934630116130872">Spring中Bean注入源码分析 - 掘金</a> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>集合相关总结</title>
      <link href="b9faaa6a.html"/>
      <url>b9faaa6a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>LinkHashMap,HashMap,TreeMap</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap:"></a>HashMap:</h2><p> 继承了AbstractMap,实现Map,实现的数据结构是 数组+链表,通过计算传过来的</p><h2 id="LinkHashMap"><a href="#LinkHashMap" class="headerlink" title="LinkHashMap:"></a>LinkHashMap:</h2><p> 继承了HashMap,同时自己维护着一个双向链表</p><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap:"></a>TreeMap:</h2><p>  继承了AbstractMap,自己实现的数据结构是红黑树<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">     K key;</span><br><span class="line">     V value;</span><br><span class="line">     Entry&lt;K,V&gt; left;</span><br><span class="line">     Entry&lt;K,V&gt; right;</span><br><span class="line">     Entry&lt;K,V&gt; parent;</span><br><span class="line">     boolean color &#x3D; BLACK;&#125;</span><br></pre></td></tr></table></figure></p><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>继承了AbstractList 基于数组来实现的.</p><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>继承AbstractSequentialList -&gt;AbstractList 基于链表来实现</p><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>内部实现是使用的HashMap</p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>基于红黑树来实现</p><h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>基于数组的队列最大是INTEGER.MAX_VALUE,</p><h2 id="ArrayBlockingQueue-1"><a href="#ArrayBlockingQueue-1" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>基于列表来实现</p><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><p>和HashMap比较,性能不强但是保存的逻辑还是hash值来作为插入的关键词,加入了synchronized</p><p>参考链接: <a href="https://endwas.cn/blog/80">𝑬𝒏𝒅𝒘𝒂𝒔 – 总结常见的五种BlockingQueue</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm概念梳理</title>
      <link href="e430a961.html"/>
      <url>e430a961.html</url>
      
        <content type="html"><![CDATA[<p>class文件 动态代理 静态代理</p><p>javac 编译 .java文件 为 class文件,后面.class文件转换为 机器指令</p><h2 id="现代CPU下程序运行"><a href="#现代CPU下程序运行" class="headerlink" title="现代CPU下程序运行"></a>现代CPU下程序运行</h2><p>多CPU –&gt;CPU寄存器 –&gt; 高速缓存cache –&gt; 内存RAM </p><p><img src="../img/v2-1a7b7bb752799b6c067a0eaca0a1a9b2_r.jpg" alt="img"></p><h3 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h3><p>多个线程可能不在一个CPU中运行,那么对于的变量可能不太一致,需要同步 volatile</p><h3 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h3><p>对编译的时候对代码进行重排序,优化执行的效率,但是是一个变量,多个线程去执行的时候也行会导致,执行的变量的问题,不是说这个重排序是错的比如说不相干的变量查询,可能在CPU执行过程中可能有先后顺序的差异.</p><h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><p>相当于 你方法内的变量 需要传递出去,给别人用,不是基础类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title">craeteStringBuffer</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createStringBuffer</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一段代码中的<code>sb</code>就逃逸了，而第二段代码中的<code>sb</code>就没有逃逸。</p><p>使用逃逸分析，编译器可以对代码做如下优化：</p><p>一、同步省略。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</p><p>二、将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配。</p><p>三、分离对象或标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</p><p>作者：HollisChuang<br>链接：<a href="https://juejin.cn/post/6844903639308304397">https://juejin.cn/post/6844903639308304397</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="逃逸分析优化"><a href="#逃逸分析优化" class="headerlink" title="逃逸分析优化"></a>逃逸分析优化</h2><p>针对上面第三点，当一个对象没有逃逸时，可以得到以下几个虚拟机的优化。</p><p><strong>1) 锁消除</strong></p><p>我们知道线程同步锁是非常牺牲性能的，当编译器确定当前对象只有当前线程使用，那么就会移除该对象的同步锁。</p><p>例如，StringBuffer 和 Vector 都是用 synchronized 修饰线程安全的，但大部分情况下，它们都只是在当前线程中用到，这样编译器就会优化移除掉这些锁操作。</p><p>锁消除的 JVM 参数如下：</p><ul><li>开启锁消除：-XX:+EliminateLocks</li><li>关闭锁消除：-XX:-EliminateLocks</li></ul><p>锁消除在 JDK8 中都是默认开启的，并且锁消除都要建立在逃逸分析的基础上。</p><p><strong>2) 标量替换</strong></p><p>首先要明白标量和聚合量，基础类型和对象的引用可以理解为标量，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象。</p><p>对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做标量替换。</p><p>这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能。</p><p>标量替换的 JVM 参数如下：</p><ul><li>开启标量替换：-XX:+EliminateAllocations</li><li>关闭标量替换：-XX:-EliminateAllocations</li><li>显示标量替换详情：-XX:+PrintEliminateAllocations</li></ul><p>标量替换同样在 JDK8 中都是默认开启的，并且都要建立在逃逸分析的基础上。</p><p><strong>3) 栈上分配</strong></p><p>当对象没有发生逃逸时，该对象就可以通过标量替换分解成成员标量分配在栈内存中，和方法的生命周期一致，随着栈帧出栈时销毁，减少了 GC 压力，提高了应用程序性能。</p><h2 id="happen-before原则"><a href="#happen-before原则" class="headerlink" title="happen-before原则"></a>happen-before原则</h2><ul><li><p>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</p></li><li><p>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</p></li><li><p>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</p></li><li><p>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</p></li></ul><h2 id="GC垃圾回收"><a href="#GC垃圾回收" class="headerlink" title="GC垃圾回收"></a>GC垃圾回收</h2><h3 id="定义垃圾"><a href="#定义垃圾" class="headerlink" title="定义垃圾"></a>定义垃圾</h3><ol><li>引用计数算法</li><li>可达性分析算法</li></ol><h3 id="内存中的分配"><a href="#内存中的分配" class="headerlink" title="内存中的分配"></a>内存中的分配</h3><p>主要是手机heap(堆内存)主要是堆内存最大,同时是零碎的不像 stack(栈内存)是在方法调用完或者方法的引用完后就自动回收的.</p><p>目前堆内存中主要是初始化好的对象实例,和对象实例的类里面的变量,</p><ul><li><p>虚拟机栈（栈帧中的本地变量表）中引用的对象</p></li><li><p>方法区中类静态属性引用的对象</p></li><li><p>方法区中常量引用的对象</p></li><li><p>本地方法栈中 JNI（即一般说的 Native 方法）引用的对象</p></li></ul><p>Java 堆(Java Heap)是JVM所管理的内存</p><p><img src="../img/image-20221209125328758.png" alt="image-20221209125328758"></p><h3 id="清除方式"><a href="#清除方式" class="headerlink" title="清除方式"></a>清除方式</h3><p>1.标记清除算法</p><p>…</p><p>2.复制算法</p><p>…</p><p>3.标记整理算法</p><p>…</p><p>参考链接: </p><ul><li><p><a href="https://mp.weixin.qq.com/s/aA1eDYIUHuIfigTw2ffouw">咱们从头到尾说一次 Java 垃圾回收</a>  </p></li><li><p><a href="https://zhuanlan.zhihu.com/p/29881777">Java内存模型（JMM）总结 - 知乎</a></p></li><li><p><a href="https://juejin.cn/post/6844903639308304397">深入理解Java中的逃逸分析 - 掘金</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/69136675">面试问我 Java 逃逸分析，瞬间被秒杀了。。 - 知乎</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java内存和系统内存以及栈和堆</title>
      <link href="a87a9ae1.html"/>
      <url>a87a9ae1.html</url>
      
        <content type="html"><![CDATA[<p>参考链接: <a href="https://kylenxu.github.io/2019/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%A0%86%E3%80%81%E6%A0%88%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A0%86%E5%86%85%E5%AD%98%E3%80%81%E6%A0%88%E5%86%85%E5%AD%98%E7%9A%84%E5%8C%BA%E5%88%AB/">数据结构的堆、栈和操作系统的堆内存、栈内存的区别 - Kylen的博客 | Kylen Blog</a></p><p>CPU 处理数据需要 寄存器但是仅仅是寄存器是不够的还需要外部的内存支持 这个时候就需要 </p><p>RAM的支持 stack 栈 ,支持push ,pop</p><p>类似于这个结构</p><p><img src="../img/image-20221209113726223.png" alt="image-20221209113726223"></p><p><a href="https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap#:~:text=Stack%3A,for%20memory%20leaks">stack over flow </a></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul><li>就像堆一样存储在计算机 RAM 中。</li><li>在堆栈上创建的变量将超出范围并自动释放。</li><li>与堆上的变量相比，分配速度要快得多。</li><li>使用实际的堆栈数据结构实现。</li><li>存放本地数据，返回地址，用于参数传递。</li><li>当使用太多堆栈时可能会发生堆栈溢出（主要来自无限或太深的递归，非常大的分配）。</li><li>在堆栈上创建的数据可以在没有指针的情况下使用。</li><li>如果您确切地知道在编译之前需要分配多少数据并且它不是太大，那么您将使用堆栈。</li><li>通常在程序启动时已经确定了最大大小。</li></ul><h2 id="堆："><a href="#堆：" class="headerlink" title="堆："></a>堆：</h2><ul><li>就像堆栈一样存储在计算机 RAM 中。</li><li>在 C++ 中，堆上的变量必须手动销毁并且永远不会超出范围。 使用 delete、delete[] 或 free 释- 放数据。<br>与堆栈上的变量相比，分配速度较慢。</li><li>按需用于分配数据块供程序使用。</li><li>当有很多分配和释放时，可能会产生碎片。</li><li>在 C++ 或 C 中，在堆上创建的数据将通过指针指向并分别使用 new 或 malloc 进行分配。</li><li>如果请求分配的缓冲区太大，可能会出现分配失败。</li><li>如果您不确切知道在运行时需要多少数据或者需要分配大量数据，则可以使用堆。</li><li>负责内存泄漏。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>认证和权限</title>
      <link href="d573592c.html"/>
      <url>d573592c.html</url>
      
        <content type="html"><![CDATA[<p>参考文档:  <a href="https://www.raosong.cc/2019/11/26/32.%E8%B0%88%E8%B0%88%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/">谈谈单点登录｜R_song’s blog</a></p><p><img src="../img/image-20221210173435164.png" alt="image-20221210173435164"></p><p>SAML</p><p><img src="../img/124011" alt="SAML 2.0 Flow"></p><p>OAuth2</p><p><img src="../img/1240" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>理解java的BIO/NIO/AIO</title>
      <link href="ff3a358d.html"/>
      <url>ff3a358d.html</url>
      
        <content type="html"><![CDATA[<p>在理解Java的BIO/NIO/AIO之前我们先梳理下linux的相关io概念,下面是参考的连接</p><p>我在网络上搜索相关io 有句话很熟悉  </p><p><strong>BIO 下的连接对应一个线程</strong>  , <strong>NIO 下的请求对应一个线程</strong> ,  <strong>AIO下的有效请求对应一个线程</strong></p><ul><li>BIO：线程发起 IO 请求，不管内核是否准备好 IO 操作，从发起请求起，线程一直阻塞，直到操作完成。</li><li>NIO：客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有 I/O 请求时才启动一个线程进行处理。</li><li>AIO：线程发起 IO 请求，立即返回；内存做好 IO 操作的准备之后，做 IO 操作，直到操作完成或者失败，通过调用注册的回调函数通知线程做 IO 操作完成或者失败。</li></ul><p>请求可以是读写都会创建对应线程处理,而有效请求着是 处理完对应io操作后才会调用对应的线程去操作</p><p>netty介绍<br><a href="http://thoreauz.com/2019/01/19/rpc1-netty-reactor/">RPC一-线程模型 · 造舟野渡</a></p><p><a href="http://thoreauz.com/2019/01/19/rpc2-netty-handler/">RPC二-NettyHandler处理消息 · 造舟野渡</a><br><a href="http://thoreauz.com/2019/01/19/rpc3-protocol-e-decode/">RPC三-rpc协议和编解码 · 造舟野渡</a><br><a href="http://thoreauz.com/2019/01/19/rpc4-netty-chain-of-responsibility-pattern/">RPC四-netty异步双向责任链 · 造舟野渡</a><br><a href="http://thoreauz.com/2019/01/19/rpc5-reliability/">RPC五-可靠性设计 · 造舟野渡</a><br><a href="http://thoreauz.com/2019/01/19/rpc6-dynamic-proxy/">RPC六-动态代理 · 造舟野渡</a></p><p>Java io相关内容 </p><p><a href="https://segmentfault.com/a/1190000037714804">java - 理解什么是BIO/NIO/AIO_个人文章 - SegmentFault 思否</a></p><p><a href="https://alibaba-cloud.medium.com/essential-technologies-for-java-developers-i-o-and-netty-ec765676fd21">Java Development: BIO, NIO, AIO and Netty | Medium</a></p><p>linux io的相关链接</p><p><a href="https://www.cnblogs.com/jmcui/p/14145488.html">套接字 socket 和 tcp 连接过程 - JMCui - 博客园</a></p><p><a href="https://www.cnblogs.com/jmcui/p/14132849.html">网络 IO 模型简单介绍 - JMCui - 博客园</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>github，gitlab相关的操作</title>
      <link href="f1f7a0f1.html"/>
      <url>f1f7a0f1.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.7ed.net/start/raw-cdn.html">Github RAW 加速服务 | 7ED</a></p><p><a href="https://cloud.tencent.com/developer/article/1807308">提高国内访问 GitHub 的速度的 9 种方案 - 腾讯云开发者社区-腾讯云</a></p><blockquote><p><a href="https://raw.githubusercontent.com/SpotX-CLI/SpotX-Win/main/Install.ps1">https://raw.githubusercontent.com/SpotX-CLI/SpotX-Win/main/Install.ps1</a></p><p>在githubusercontent 后面添加个大写的   <strong>S</strong> -&gt;    <a href="https://raw.githubusercontents.com/SpotX-CLI/SpotX-Win/main/Install.ps1">https://raw.githubusercontentS.com/SpotX-CLI/SpotX-Win/main/Install.ps1</a></p></blockquote><p><a href="https://blog.frytea.com/archives/504/">无需代理直接加速各种 GitHub 资源拉取 | 国内镜像赋能 | 助力开发 - Frytea’s Blog</a></p><p><a href="https://github.com/fastgh/fgit">fastgh/fgit: 加速100～3000倍的github.com</a></p><p><a href="https://github.com/hunshcn/gh-proxy">hunshcn/gh-proxy: github release、archive以及项目文件的加速项目</a></p><p>举个例子现在需要clone某个GitHub的仓库或者是用某个shell脚本搭建某种服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --single-branch --branch v1.4.9 https:&#x2F;&#x2F;github.com&#x2F;rook&#x2F;rook.git</span><br></pre></td></tr></table></figure><p>时常会返回下列错误</p><blockquote><p>正克隆到 ‘rook’…<br>error: RPC failed; result=35, HTTP code = 0<br>fatal: The remote end hung up unexpectedly</p></blockquote><p>亦或者是ssh连接失败访问失败连接超时这种，如果你手动去找GitHub镜像站费时间而且有些git clone是写在二进制文件里面不方便去一个一个修改，之前有用过修改linux服务器的hosts来实现加速访问但是速度时好时坏，稳定性太差。</p><p>参考上面博主的文章我有了新想法，定义使用 fgit然后软连接 <strong>/usr/bin/git</strong></p><p>第二种就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global url.&quot;https:&#x2F;&#x2F;gitclone.com&#x2F;github.com&quot;.insteadOf https:&#x2F;&#x2F;ghproxy.seekme.workers.dev</span><br></pre></td></tr></table></figure><p><a href="https://ghproxy.seekme.workers.dev/">https://ghproxy.seekme.workers.dev/</a> 这个是我参考上面的介绍搭建的加速站，目前下载文件没啥问题就是加clone加速还是有问题</p><p><a href="https://hub.fastgit.xyz/rook/rook.git">https://hub.fastgit.xyz/rook/rook.git</a></p><p><a href="https://github.com.cnpmjs.org/rook/rook.git">https://github.com.cnpmjs.org/rook/rook.git</a></p><p><a href="https://gitclone.com/github.com/rook/rook.git">https://gitclone.com/github.com/rook/rook.git</a></p><p><a href="https://hub.fastgit.xyz/rook/rook.git">https://hub.fastgit.xyz/rook/rook.git</a> 速度最快</p><p>替换步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 方法二：配置git自动替换</span><br><span class="line">$ git config --global url.&quot;https:&#x2F;&#x2F;hub.fastgit.xyz&quot;.insteadOf https:&#x2F;&#x2F;github.com</span><br><span class="line"># 测试</span><br><span class="line">$ git clone --single-branch --branch v1.4.9 https:&#x2F;&#x2F;github.com&#x2F;rook&#x2F;rook.git</span><br><span class="line"># 查看git配置信息</span><br><span class="line">$ git config --global --list</span><br><span class="line"># 取消设置</span><br><span class="line">$ git config --global --unset url.https:&#x2F;&#x2F;github.com&#x2F;.insteadof</span><br></pre></td></tr></table></figure><p><img src="../img/image-20220216151406670.png" alt="image-20220216151406670"></p><h2 id="gitlab引用仓库里的图片"><a href="#gitlab引用仓库里的图片" class="headerlink" title="gitlab引用仓库里的图片"></a>gitlab引用仓库里的图片</h2><p>一起在typora上使用的引用相对位置的图片是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![image-20220127150651513](C:&#x2F;Program%20Files&#x2F;img&#x2F;image-20220127150651513.png)</span><br></pre></td></tr></table></figure><p>但是在gitlab不会去找相对位置的图片，很多人反馈在github这样写是可以在仓库readme上显示，但是在gitlab应该没优化，这边在StackOverflow上找到的解决方案是用&lt;&gt;括一下，确实可以实现，而且在语法是兼容的。</p><p><a href="https://stackoverflow.com/questions/27016052/how-can-i-reference-an-image-in-gitlab-markdown-in-the-current-directory-with-th#:~:text=My%20images%20where,Mind%20the%20%3C%3E">StackOverflow的建议</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![image-20220215103753937](&lt;C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;img&#x2F;image-20220215103753937.png&gt;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
            <tag> github </tag>
            
            <tag> 加速 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ananotation_async介绍和使用</title>
      <link href="3766dac5.html"/>
      <url>3766dac5.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.aliyun.com/article/768513">Spring中异步注解@Async的使用、原理及使用时可能导致的问题-阿里云开发者社区</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql_json函数使用</title>
      <link href="7c7b32f9.html"/>
      <url>7c7b32f9.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/57904266/how-to-use-mysql-json-contains-with-jpa-specification">How to use mysql “json_contains” with JPA Specification - Stack Overflow</a></p><p><a href="https://stackoverflow.com/questions/36249828/how-to-search-json-array-in-mysql">How to search JSON array in MySQL? - Stack Overflow</a></p><p><a href="https://stackoverflow.com/questions/66576018/mysql-json-extract-value-of-property-based-on-criteria">json - MySQL JSON_EXTRACT value of property based on criteria - Stack Overflow</a></p><p><a href="https://blog.csdn.net/fenglailea/article/details/124687284">spring jpa function(函数) JSON_EXTRACT 复杂查询，jpa josn查询_风.foxwho的博客-CSDN博客_jpa json查询</a></p><p><a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/json-search-functions.html#function_json-contains">MySql 中文文档 - 12.17.3 搜索 JSON 值的函数 | Docs4dev</a></p><p>json字符串搜索模糊匹配等相关的内容</p><p>1.JSON_SEARCH 直接使用这个来查询还可以模糊匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">JSON_SEARCH(</span><br><span class="line">&#39;[&#123;&quot;id&quot;:10002444,&quot;qrCode&quot;:&quot;44444417&quot;,&quot;sticker&quot;:&quot;44444416&quot;,&quot;deckId&quot;:&quot;N3MWSF52666&quot;,&quot;vehicleType&quot;:&quot;SCOOTER&quot;&#125;,&#123;&quot;id&quot;:10002444,&quot;qrCode&quot;:&quot;44444416&quot;,&quot;sticker&quot;:&quot;44444416&quot;,&quot;deckId&quot;:&quot;N3MWSF52666&quot;,&quot;vehicleType&quot;:&quot;SCOOTER&quot;&#125;]&#39;,</span><br><span class="line">&#39;all&#39;,</span><br><span class="line">&#39;%44444%&#39;,</span><br><span class="line">NULL,</span><br><span class="line">&#39;$**.sticker&#39;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM incident_report WHERE (JSON_SEARCH(users,&#39;one&#39;,&#39;39717&#39;,null,&#39;$**.id&#39;) is not null)</span><br><span class="line">SELECT users FROM incident_report LIMIT 10  15890    qrCode  44444403</span><br><span class="line">SELECT JSON_SEARCH(users,&#39;one&#39;,&#39;%51230%&#39;,null,&#39;$**.qrCode&#39;) FROM incident_report LIMIT 10</span><br></pre></td></tr></table></figure><p> 2.JSON_EXTRACT(解析json数据),使用JSON_CONTAIN来查询 解析后的JSON信息</p><p>对对于是数组里面的特定对象字段譬如 下面这种,这需要进一步抽取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;id&quot;:10002444,&quot;qrCode&quot;:&quot;44444417&quot;,&quot;sticker&quot;:&quot;44444416&quot;,&quot;deckId&quot;:&quot;N3MWSF52666&quot;,&quot;vehicleType&quot;:&quot;SCOOTER&quot;&#125;,&#123;&quot;id&quot;:10002444,&quot;qrCode&quot;:&quot;44444416&quot;,&quot;sticker&quot;:&quot;44444416&quot;,&quot;deckId&quot;:&quot;N3MWSF52666&quot;,&quot;vehicleType&quot;:&quot;SCOOTER&quot;&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>JSON_CONTAINS(JSON_EXTRACT(json_field, ‘$[*].id’), 11, ‘$’)    </p></blockquote><pre><code>SELECT JSON_EXTRACT(users,&#39;$.id&#39;) FROM incident_report LIMIT 10SELECT JSON_EXTRACT(users, &#39;$[*].userTrips[*].id&#39;) FROM incident_report LIMIT 10SELECT users,JSON_CONTAINS(JSON_EXTRACT(users, &#39;$[*].userTrips[*].id&#39;), &#39;12689&#39;, &#39;$&#39;) FROM incident_report LIMIT 10</code></pre><p><a href="https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html">https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html</a>)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring缓存管理Redis+本地</title>
      <link href="a0b38034.html"/>
      <url>a0b38034.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.baeldung.com/spring-multiple-cache-managers">Using Multiple Cache Managers in Spring | Baeldung</a></p><p>caffice+redis</p><p>```java</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>transactionl介绍(转载)</title>
      <link href="f3616705.html"/>
      <url>f3616705.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>🔗 原文链接： <a href="https://mp.weixin.qq.com/s/rvcb6xzBODqbCE03bwsKag">https://mp.weixin.qq.com/s/rvcb6xzB…</a></p></blockquote><blockquote><p>⏰ 剪存时间：2022-11-21 11:52:31 (UTC+8)</p></blockquote><blockquote><p>✂️ 本文档由 <a href="https://www.feishu.cn/hc/zh-CN/articles/606278856233?from=in_ccm_clip_doc">飞书剪存 </a>一键生成</p></blockquote><p>veezean 石杉的架构笔记 <em>2022-11-16 07:50 发表于 江苏</em></p><p>「 关注 “石杉的架构笔记” ，大厂架构经验 倾囊相授 」</p><h2 id="文章来源：【公众号：架构悟道-】"><a href="#文章来源：【公众号：架构悟道-】" class="headerlink" title="文章来源：【公众号：架构悟道 】"></a><strong>文章来源：【公众号：架构悟道 】</strong></h2><p>在大部分涉及到数据库操作的项目里面， <strong>事务控制、事务处理都是一个无法回避的问题</strong> 。比如，需要对SQL执行过程进行事务的控制与处理的时候，其整体的处理流程会是如下的示意：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MzllYTI1MTQ5ZjU1ODk1YWEwNTQ5MWNjMzljZWYyOTZfZzIzQ1pxaDR6d0ZoTDlxUVVKNnpqa01OamNiam1Kck1fVG9rZW46Ym94Y25hek01d0RUR1IwMDVqTmFNYnoxeUtiXzE2NjkwMTA2NTM6MTY2OTAxNDI1M19WNA" alt="img"></p><p>首先是要开启事务、然后执行具体SQL，如果执行异常则回滚事务，否则提交事务，最后关闭事务，完成整个处理过程。按照这个流程的逻辑，写一下对应的实现代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public void testJdbcTransactional(DataSource dataSource) &#123;</span><br><span class="line">    Connection conn = null;</span><br><span class="line">    int result = 0;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 获取链接</span><br><span class="line">        conn = dataSource.getConnection();</span><br><span class="line">        // 禁用自动事务提交，改为手动控制</span><br><span class="line">        conn.setAutoCommit(false);</span><br><span class="line">        // 设置事务隔离级别</span><br><span class="line">        conn.setTransactionIsolation(</span><br><span class="line">            TransactionIoslationLevel.READ_COMMITTED.getLevel()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        // 执行SQL</span><br><span class="line">        PreparedStatement ps = </span><br><span class="line">            conn.prepareStatement(&quot;insert into user (id, name) values (?, ?)&quot;);</span><br><span class="line">        ps.setString(1, &quot;123456&quot;);</span><br><span class="line">        ps.setString(2, &quot;Tom&quot;);</span><br><span class="line">        result = ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">        // 执行成功，手动提交事务</span><br><span class="line">        conn.commit();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        // 出现异常，手动回滚事务</span><br><span class="line">        if (conn != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                // write log...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // 执行结束，最终不管成功还是失败，都要释放资源，断开连接</span><br><span class="line">        try &#123;</span><br><span class="line">            if (conn != null &amp;&amp; !conn.isClosed()) &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">             // write log...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难发现，上面大段的代码逻辑并不复杂，对于业务而言其实仅仅只是执行了一个insert操作而已。但是杂糅的事务控制代码，显然 <strong>干扰了业务自身的代码处理逻辑的阅读与理解</strong> 。</p><p>常规项目的代码中，涉及到DB处理的场景很多，如果每个地方都有这么一段事务控制的逻辑，那么整体代码的可维护性将会比较差，想想都令人窒息。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YzYwOGYwNjM2Y2JlMTVmOTJhNjY0ZmY3YjE0M2MyNjVfSWZuQXc2ZFI2UjBzZjZZY0JKZHhiOUtSWU9UcGduU09fVG9rZW46Ym94Y25MMzAxVXhmakMzRjFZUHZQTFZTTkpjXzE2NjkwMTA2NTM6MTY2OTAxNDI1M19WNA" alt="img"></p><p>好在，JAVA中很多项目现在都是基于Spring框架进行构建的。得益 于 Spring框架的封装，业务代码中进行事务控制操作起来也很简单，直接加个 @Transactional注解即可，大大简化了对业务代码的 <strong>侵入性</strong> 。那么对 @Transactional事务注解了解的够全面吗？知道有哪些场景可能会导致 @Transactional注解并不会如你预期的方式生效吗？知道应该怎么使用 @Transactional才能保证对性能的影响最小化吗？</p><p>下面我们一起探讨下这些问题。</p><blockquote><p><strong>Spring声明式事务处理机制</strong></p></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><p>为了简化业务开发场景对事务的处理复杂度，让开发人员可以更关注于业务自身的处理逻辑， <strong>Spring</strong> 提供了声明式事务的能力支持。</p><p><strong>Spring</strong> 数据库事务约定处理逻辑流程如下图所示，对比前面示例中基于 <strong><code>JDBC</code></strong> 的事务处理，Spring的事务的处理操作交给了 <strong>Spring框架</strong> 处理，开发人员仅需要实现自己的业务逻辑即可，大大简化了事务方面的处理投入。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NzMxMjNhOGRhYTE5ZDU0NjIzM2RiZmYwZDI5Y2VmZDdfcTBjVGhoRFlpSU1HMzhuR2U3dWw0VWt5dDBBYWU0VlBfVG9rZW46Ym94Y25lZGZ3ZzRZWEUwMmlKT3ZuNUpadnRoXzE2NjkwMTA2NTM6MTY2OTAxNDI1M19WNA" alt="img"></p><p>基于Spring事务机制，实现上述DB操作事务控制的代码，我们的代码会变得非常的简洁：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">public void insertUser() &#123;</span><br><span class="line">    userDao.insertUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与JDBC事务实现代码相比，基于Spring的方式只需要添加一个 <strong><code>@Transactional</code></strong> 注解即可，代码中只需要实现业务逻辑即可，实现了事务控制机制对业务代码的 <strong>低侵入性</strong> 。</p><p>Spring支持的基于 <strong><code>Spring AOP</code></strong> 实现的 <strong>声明式事务</strong> 功能，所谓声明式事务，即使用@Transactional注解进行声明标注，告诉Spring框架在什么地方启用数据库事务控制能力。 <strong><code>@Transactional</code></strong> 注解， <em>可以添加在类或者方法上</em> 。如果其添加在类上时，表明此类中所有的 <em>public非静态方法</em> 都将启用事务控制能力。</p><p>既然@Transactional注解承载了Spring框架对于事务处理的相关能力，那么接下来我们就一起看下该注解的一些可选配置以及具体使用场景。</p><blockquote><p><strong>@Transactional主要可选配置</strong></p></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><p>只读事务配置</p><p>通过 <strong><code>readonly</code></strong> 参数指定当前事务是否为一个只读事务。设置为true标识此事务是个只读事务，默认情况为false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(readOnly = true)</span><br><span class="line">public DomResponse&lt;CiCdItemDetail&gt; queryCicdItemDetail(String appCode) &#123;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及一个概念，叫做 <strong>只读事务</strong> ，其含义描述如下：</p><blockquote><p>在多条查询语句一起执行的场景里面会涉及到的概念。表示在事务设置的那一刻开始，到整个事务执行结束的过程中，其他事务所提交的写操作数据，对该事务都不可见。</p></blockquote><p>举个例子：</p><blockquote><p>现在有一个复合查询操作，包含2条SQL查询操作：先获取用户表count数，再获取用户表中所有数据。 (1) 先执行完获取用户表count数，得到结果10 (2) 在还没开始执行后一条语句的时候，另一个进程操作了DB并往用户表中插入一条新数据 (3) 复合操作的第二条SQL语句，获取用户列表的操作被执行，返回了11条记录</p></blockquote><p>很明显，复合操作中的两条SQL语句获取的数据结果无法匹配上。原因就是非原子性操作导致，即2条查询操作执行的间隔内，有另一个写操作修改了目标读取的数据，导致了此问题的出现。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YzZhNzIwYWNhZWZkY2E1NWViMDE3MWJmYzQyZGY0YTlfV2t0R05OQXV1MmgzYlM4dUJtdnRObWRJckpqOThkQzhfVG9rZW46Ym94Y25zUTA3dkpQdmk5aXRtMXpNRWNVZURoXzE2NjkwMTA2NTM6MTY2OTAxNDI1M19WNA" alt="img"></p><p>为了避免此情况的发生，可以给复合查询操作添加上只读事务，这样事务控制范围内，事务外的写操作就不可见，这样就保证了事务内多条查询语句执行结果的一致性。</p><p>那为什么要设置为只读事务、而不是常规的事务呢？主要是从执行效率角度的考虑。因为这个里的操作都是一些只读操作，所以设置为只读事务，数据库会为只读事务提供一些优化手段，比如不启动回滚段、不记录回滚log之类的。</p><p>回滚条件设定</p><p><strong><code>@Transactional</code></strong> 有提供4个不同属性，可以支持传入不同的参数，设定需要回滚的条件：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>含义说明</strong></th></tr></thead><tbody><tr><td>rollbackFor</td><td>用于指定需要回滚的特定异常类型，可以指定一个或者多个。当指定 <strong><code>rollbackFor</code></strong> 或者 <strong><code>rollbackForClassName</code></strong> 之后，方法执行逻辑中只有抛出指定的异常类型，才会触发事务回滚</td></tr><tr><td>rollbackForClassName</td><td>与 <strong><code>rollbackFor</code></strong> 相同，设置字符串格式的类名</td></tr><tr><td>noRollbackFor</td><td>用于指定不需要进行回滚的异常类型，当方法中抛出指定类型的异常时，不进行事务回滚。而其余的类型的异常将会触发事务回滚。</td></tr><tr><td>noRollbackForClassName</td><td>与 <strong><code>noRollbackFor</code></strong> 相同，设置字符串格式的类名</td></tr></tbody></table><p>其中，rollbackFor支持指定单个或者多个异常类型，只要抛出指定类型的异常，事务都将被回滚掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 指定单个异常</span><br><span class="line">@Transactional(rollbackFor = DemoException.class)</span><br><span class="line">public void insertUser() &#123;</span><br><span class="line">    // do something here</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指定多个异常</span><br><span class="line">@Transactional(rollbackFor = &#123;DemoException.class, DemoException2.class&#125;)</span><br><span class="line">public void insertUser2() &#123;</span><br><span class="line">    // do something here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>rollbackFor</code></strong> 和 <strong><code>rollbackForClassName</code></strong> 作用相同，只是提供了2个不同的指定方法，允许执行Class类型或者ClassName字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 指定异常名称</span><br><span class="line">@Transactional(rollbackForClassName = &#123;&quot;DemoException&quot;&#125;)</span><br><span class="line">public void insertUser() &#123;</span><br><span class="line">    // do something here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理， <strong><code>noRollbackFor</code></strong> 和 <strong><code>noRollbackForClassName</code></strong> 的使用与上面示意的相似，只是其含义功能点是相反的。</p><p>事务传播行为</p><p><strong><code>propagation</code></strong> 用于指定此事务对应的传播类型。所谓的事务传播类型，即当前已经在一个事务的上下文中时，又需要开始一个事务，这个时候来处理这个将要开启的新事务的处理策略。</p><p>主要有7种类型的事务传播类型：</p><table><thead><tr><th><strong>传播类型</strong></th><th><strong>含义描述</strong></th></tr></thead><tbody><tr><td>REQUIRED</td><td>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务</td></tr><tr><td>SUPPORTS</td><td>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行</td></tr><tr><td>MANDATORY</td><td>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常</td></tr><tr><td>REQUIRES_NEW</td><td>创建一个新的事务，如果当前存在事务，则把当前事务挂起</td></tr><tr><td>NOT_SUPPORTED</td><td>以非事务方式运行，如果当前存在事务，则把当前事务挂起</td></tr><tr><td>NEVER</td><td>以非事务方式运行，如果当前存在事务，则抛出异常</td></tr><tr><td>NESTED</td><td>如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于REQUIRED</td></tr></tbody></table><p>事务的传播行为，将会影响到事务控制的结果，比如最终是在同一事务中，一旦遇到异常，所有操作都会被回滚掉，而如果是在多个事务中，则某一个事务的回滚，不影响已提交的其余事务的回滚。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NDkyMDQ1OTg4NThmYWYzOGE5YjAxOTM2ODQzMDk0ZTVfRjhQUkNjcWhYUmRwNHlIUEFMNndkb3dxb3BSSnR2Wm1fVG9rZW46Ym94Y25rNTk2YWRHSFRrd2QwMlJJVTV2TlBiXzE2NjkwMTA2NTM6MTY2OTAxNDI1M19WNA" alt="img"></p><p>实际编码的时候，可以通过@Transactional注解中的 <strong><code>propagation</code></strong> 参数来指定具体的传播类型，取值由 <strong><code>org.springframework.transaction.annotation.Propagation</code></strong> 枚举类提供。如果不指定，则默认取值为 <strong><code>Propagation.REQUIRED</code></strong> ，也即 <strong>如果当前存在事务，则加入该事务，如果当前没有事务，则创建一个新的事务</strong> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The transaction propagation type.</span><br><span class="line"> * &lt;p&gt;Defaults to &#123;@link Propagation#REQUIRED&#125;.</span><br><span class="line"> * @see org.springframework.transaction.interceptor.TransactionAttribute#getPropagationBehavior()</span><br><span class="line"> */</span><br><span class="line">Propagation propagation() default Propagation.REQUIRED;</span><br></pre></td></tr></table></figure><p>事务超时设定</p><p>可以使用 <strong><code>timeout</code></strong> 属性来设置事务的超时秒数，默认值为-1，表示永不超时。</p><blockquote><p><strong>@Transactional失效场景避坑</strong></p></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><p>同一个类中方法间调用</p><p>Spring的事务实现原理是AOP，而AOP的原理是动态代理。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NGNhYjZlYjJkOWIyNDFiZTI3ZWFkZjgyZmQ5YzA2NTBfdVRiRDBvQkNlZ00wWGROUmNKNW5jSEFwcldEdmkwNDVfVG9rZW46Ym94Y25HaDd6aUgxVTM2ZE1SWFk4d0F6UUVnXzE2NjkwMTA2NTM6MTY2OTAxNDI1M19WNA" alt="img"></p><p>在类内部方法之间相互调用的时候，本质上是类对象自身的调用，而不是使用代理对象去调用，也就不会触发AOP，这样其实Spring也就无法将事务控制的代码逻辑织入到调用代码流程中，所以这里的事务控制就无法生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void insertUser() &#123;</span><br><span class="line">    writeDataIntoDb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Transactional</span><br><span class="line">public void writeDataIntoDb() &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以遇到同一个类中多个方法之间相互调用，且调用的方法需要做事务控制的时候需要特别注意下这个问题。解决方式，可以建2个不同的类，然后将方法放到两个类中，这样跨类调用，Spring事务机制就可以生效。</p><p>添加在非public方法上</p><p>如果将@Transactional注解添加在protected、private修饰的方法上，虽然代码不会有任何的报错，但是实际上注解是不会生效的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">private void writeDataIntoDb() &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法内部Try Catch吞掉相关异常</p><p>这个其实很容易理解，业务代码中将所有的异常给catch并吞掉了，等同于业务代码认为被捕获的异常不需要去触发回滚。对框架而言，因为异常被捕获了，业务逻辑执行都在正常往下运行，所以也不会触发异常回滚机制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// catch了可能的异常，导致DB操作失败的时候事务不会触发回滚</span><br><span class="line">@Transactional</span><br><span class="line">public void insertUser() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        UserEntity user = new UserEntity();</span><br><span class="line">        user.setWorkId(&quot;123456&quot;);</span><br><span class="line">        user.setUserName(&quot;王小二&quot;);</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;failed to create user&quot;);</span><br><span class="line"></span><br><span class="line">        // 直接吞掉了异常，这样不会触发事务回滚机制</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在业务处理逻辑中，如果确实需要知晓并捕获相关处理的异常进行一些额外的业务逻辑处理，如果要保证事务回滚机制生效，最后需要往外抛出 <strong><code>RuntimeException</code></strong> 异常，或者是继承RuntimeException实现的 <em>业务自定义异常</em> 。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// catch了可能的异常，对外抛出RuntimeException或者其子类,可触发事务回滚</span><br><span class="line">@Transactional</span><br><span class="line">public void insertUser() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        UserEntity user = new UserEntity();</span><br><span class="line">        user.setWorkId(&quot;123456&quot;);</span><br><span class="line">        user.setUserName(&quot;王小二&quot;);</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;failed to create user&quot;);</span><br><span class="line"></span><br><span class="line">        // @Transactional没有指定rollbackFor，所以抛出RuntimeException或者其子类，可触发事务回滚机制</span><br><span class="line">        throw new RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果@Transactional注解指定了 <strong><code>rollbackFor</code></strong> 为某个具体的异常类型，则最终需要保证异常时对外抛出相匹配的异常类型，才可以触发事务处理逻辑。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// catch了指定异常，对外抛出对应类型的异常,可触发事务回滚</span><br><span class="line">@Transactional(rollbackFor = DemoException.class)</span><br><span class="line">public void insertUser() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        UserEntity user = new UserEntity();</span><br><span class="line">        user.setWorkId(&quot;123456&quot;);</span><br><span class="line">        user.setUserName(&quot;王小二&quot;);</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;failed to create user&quot;);</span><br><span class="line">        // @Transactional有指定rollbackFor，抛出异常要与rollbackFor指定异常类型一致</span><br><span class="line">        throw new DemoException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应数据库引擎类型不支持事务</p><p>以 <strong>MySQL</strong> 数据库而言，常见的数据库引擎有 <strong><code>InnoDB</code></strong> 和 <strong><code>Myisam</code></strong> 等类型，但是 <strong>MYISAM引擎类型是不支持事务</strong> 的。所以如果建表时设置的引擎类型设置为 <strong><code>MYISAM</code></strong> 的话，即使代码里面添加了@Transactional最终事务也不会生效的。</p><blockquote><p><strong>@Transactional使用策略</strong></p></blockquote><blockquote></blockquote><blockquote></blockquote><blockquote></blockquote><p>因为事务处理对性能会有一定的影响，所以事务也不是说任何地方都可以随便添加的。对于一些性能敏感场景，需要注意几点：</p><ol><li>仅在必要的场合添加事务控制</li></ol><blockquote><p>（1）不含有DB操作相关，无需添加事务控制 （2）单条查询语句，没必要添加事务控制 （3）仅有查询操作的多条SQL执行场景，可以添加只读事务控制 （4）单条 <strong><code>insert/update/delete</code></strong> 语句，其实也不需要添加 <strong><code>@Transactional</code></strong> 事务处理，因为单条语句执行其实数据库有 <strong>隐性事务控制机制</strong> ，如果执行失败，是属于 <strong><code>SQL</code></strong> 报错，数据不会更新成功，自然也无需回滚。</p></blockquote><ol><li>尽可能缩小事务控制的代码段处理范围</li></ol><blockquote><p>主要从性能层面考虑，事务机制，类似于并发场景的加锁处理， <em>范围越大对性能影响越明显</em></p></blockquote><ol><li>事务控制范围内的业务逻辑尽可能简单、避免非事务相关耗时处理逻辑</li></ol><blockquote><p>也是从性能层面考虑，尽量将耗时的逻辑放到事务控制之外执行， <em>事务内仅保留与DB操作切实相关的逻辑</em></p></blockquote><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NjY0MzY1MzdmZTQzNGEwYTgzN2MyNjk0YWZmZmZiYmJfMHlQbVBNMmdab2VjMUJaU2NNQk51dFZuWjVvbTBqb1ZfVG9rZW46Ym94Y25nT29MU0szV2xLcEhKN28wMEk1S0dmXzE2NjkwMTA2NTM6MTY2OTAxNDI1M19WNA" alt="img"></p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MTM0ZmRmMjFiNmEwYjc1Mzc1M2QzYmI4NjU4NTJiODRfMG1DTFJjZE1YNFJIeHBrZVBacklXcVk5UVVEaEZ0Z0tfVG9rZW46Ym94Y25nc2lqbUNpMDl6Z0tYRURtRFVTMkVkXzE2NjkwMTA2NTM6MTY2OTAxNDI1M19WNA" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次单元测试优化的过程总结(转载)</title>
      <link href="a6af0ce2.html"/>
      <url>a6af0ce2.html</url>
      
        <content type="html"><![CDATA[<p>🔗 原文链接： <a href="https://mp.weixin.qq.com/s/VdftYMXu">https://mp.weixin.qq.com/s/VdftYMXu</a>…<br>⏰ 剪存时间：2022-11-20 17:54:29 (UTC+8)<br>✂️ 本文档由 飞书剪存 一键生成<br>原创 李一飞（一骞） 大淘宝技术 2022-09-14 16:20 发表于 浙江</p><p>[图片]</p><p>本文将介绍淘宝用户运营平台团队最近在实践单元测试过程中遇到的一个问题。</p><p>前言</p><p>淘宝原用户增长团队（现用户运营平台团队）是比较早践行单测增量覆盖率的团队，坚持了近两年下来，我们积累了数千个test case，在开发新功能、修改原功能的过程中帮助我们发现了许多问题，显著地提升了代码质量、减少线上故障。在这里郑重地向大家推荐，单测是值得认真做的，开头是痛苦的，但是积累一段时间后，量变就会带来质变。</p><p>言归正传，接下来谈一谈最近在实践单测过程中遇到的一个问题。在研发协同平台aone（下文简称aone）的发布流水线中，我们针对单元测试设置了增量代码覆盖率85%和test case 100%通过的流程卡点，在每次发布前，要保证test case完全通过才能提交工单。我们遇到了因并发导致的test case失败，调整并发度导致的单测时间过长，但又影响研发效能的问题。最终在并发度和成功率之间找到了一个平衡点，解决了单测流程降低研发效率的问题。</p><p>单侧流水线配置</p><p> 在单测流程中呢，我们主要用到了JUnit、JaCoCo和Surefire三套工具，通过aone提供的容器自动化运行单元测试，搜集测试报告。下面简单介绍一下这三个工具。</p><p>▐ JUnit</p><p>java界最大名鼎鼎的单元测试框架，无须多言，会java的应该都知道。</p><p>▐ JaCoCo</p><p>EclEmma团队开发的开源代码覆盖率统计工具，也是java业内最主流的代码覆盖率统计工具。增量代码覆盖率就是通过该工具进行统计的，全量、增量、按类、包统计都支持，非常灵活。</p><p>▐ Maven Surefire Plugin</p><p>surefire是maven的一个插件，在maven生命周期的test阶段执行单元测试用例。运行完成后还会生成测试报告，方便用户查看单测情况。</p><p>我们利用三种工具，加上aone提供的容器和流水线配置能力，完成了自动化单测的流程和发布卡点校验。</p><p>单元实践过程</p><p>▐ 两个阶段</p><p>积累test case时期</p><p>在刚刚开始单测时，大家新增的代码都相对比较独立，随着业务的发展、工作职责的调整，单测会不断变复杂，不同的service之间互相交织、单测的维护、运行成本都会增加。我们在这个阶段遇到了一个比较棘手的问题。日常开发过程中，单测都是以类为粒度在本地跑的，都能通过后再去流水线验证，一旦提交到流水线，就会遇到个别case失败的问题，一开始排查起来完全没有思路，test case的失败可以说是随机的，任何一个类的任何一个用例都有可能失败。</p><p>[图片]</p><p>经过分析和排查，得出结论是并发导致的，于是我们限制了并发，做了如下配置，确实解决了这个问题。</p><ul><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li><plugin>    <groupId>org.apache.maven.plugins</groupId>    <artifactId>maven-surefire-plugin</artifactId>    <version>2.16</version>    <configuration>        <reuseForks>false</reuseForks>        <forkCount>1</forkCount>    </configuration></plugin></li></ul><p>大家可以留意一下reuseForks和forkCount参数，这时候我们还没有深究两个配置的含义，只是简单的限制了并发，这也为后续的故事埋下了伏笔。</p><p>test case达到一定规模时期</p><p>在完成了test case的初始积累以后，新的问题又随之而来。因为没有并发，test case又很多，所以每次单测运行时长长达50分钟。也严重影响了大家的研发效率。在分秒必争的发布窗口期，经常会出现大家等着单测跑完提交发布单的情况。</p><p>[图片]</p><p>▐ 问题</p><p>看了上述两个不同阶段反映的问题，本质上就是成功率和实效性的trade off问题，如何能提高并发、提升运行速度的同时保障成功率，这就是我们需要解决的最终命题。</p><p>▐ 原理和解决方案 </p><p>上文提到了reuseForks和forkCount参数，这些都是maven-surefire-plugin提供的配置项，把surefire插件研究清楚了，应该就能解决如何兼顾速度和实效性的问 题。</p><p>Surefire配置详解</p><p>parallel<br>jvm内并行执行<br>通 过parallel参数开启，可选为methods，classes，both，suites等<br>其他参数</p><ol><li><p>useUnlimitedThreads，不限制线程数</p></li><li><p>threadCount，线程数</p></li><li><p>perCoreThreadCount，每核（默认true，和threadCount组合使用）</p></li><li><p>parallelTestsTimeoutInSeconds，timeout时间<br>注</p></li><li><p>设置了parallel后，useUnlimitedThreads或者threadCount必须设置一个，不然会报错</p></li><li><p>parallel级别还有suitesAndClasses等更复杂的配置项，本文不多探讨</p><p>参数示例如下，代表methods级别并发，10 条线程执行。</p></li></ol><ul><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li><plugins>      <plugin>        <groupId>org.apache.maven.plugins</groupId>        <artifactId>maven-surefire-plugin</artifactId>        <version>3.0.0-M7</version>        <configuration>          <parallel>methods</parallel>          <threadCount>10</threadCount>        </configuration>      </plugin></plugins></li></ul><p>fork<br>多jvm并行执行</p><ol><li>forkCount 最多同时生成的JVM个数，特殊语法是nC，代表n倍的CPU核数，2.5C在4核机器上就是10的意思。</li><li>reuseForks 是否重复使用fork出的JVM，true代表一个测试类运行完后，进程继续处理下一个，false代表一个类运行完了JVM销毁，重新生成新的JVM</li><li>默认配置 forkCount=1/reuseFork=true，forkCount设置为0会被自动替换为1</li></ol><p>parallel和fork<br>parallel和fork组合后，就可以有更好的并发效率，也会带来更大的冲突可能。</p><p>并发导致case失败原因</p><p>surefire的文档原文如下，</p><p>[图片]</p><p>简单说来，就是因为JUnit的实现机制，对于JVM内的线程并发，会出现一些race condition或者其他难以复现的问题；对于forkCount大于1且开启复用的情况，因为测试类是在复用的JVM内，也会因为相同的原因产生并发问题导致测试失败。</p><p>结果和建议</p><p>在彻底搞清楚surefire的配置原理后，我们回到问题来。经过各种排列组合的尝试，我们得出了比较合适的配置，reuseForks=true/ forkCount=2C，最终效果是每次运行时间在10分钟左右，出错概率较低，通过重跑也能解决。</p><p>[图片]</p><p>小tip<br>mvn默认是按模块串行的，可开启并行提高整体速度（例：mvn -T 1C clean test)，但是在我们的场景下，2000多个test case有1800个都在一个模块里，所以开启并行的效果不大。<br>其实这个问题没有最优组合，只有最合适的组合。 在优化了这个单测耗时最久的应用后，我们又分析了其他几个应用，有的应用test case不多，单测运行时长不长，就没有必要开启并发，优先保证成功率即可； 有的应用test case直接相互干扰较小，并发度可以调整得更高……<br>总的来说，在弄明白了原理之后，还需要具体情况具体分析，“纸上得来终觉浅，绝知此事要躬行”，大家可以分析一下自己应用的情况，结合surefire的并发机制进行实践，相信测过几次以后就能找到最合适的配置组合。</p><p>单元实践过程</p><p>在整个过程中，笔者还留有两个想法：</p><ol><li>有没有办法通过提高单测代码质量来避免或者降低因为并发引起的失败？一些思路是通过suite分组，将可能冲突的类分开跑，这样的做法可能会极大的提高单测开发成本，投入产出比不高。</li><li>test case通过率可以不用严格卡100%，设定到99.5%都能显著的提升效率，因为每次失败的test case是不固定的，所以偶发的个别问题不影响整体的回归。</li></ol><p>在实践卓越工程的过程中，笔者深切的感受到纵观整个软件研发的生命周期，有很多值得研究和切入的点，一些微小的改动，都能有效地提升研发效能和交付质量。在当前的环境下，业务竞争日趋激烈，所谓开源节流，“开源”难，重心就会偏向“节流”，降本增效一定会是下一个阶段的重点。而且对于技术人来说，效率一定是永远的追求。其实提升性能、效率往往不是特别高大上的事情，希望大家能在日常繁重的工作之余，有点时间做些有趣的研究，享受技术带来的快乐！</p><p>参考资料</p><ol><li><a href="https://stackoverflow.com/questions/3365628/junit-tests-pass-in-eclipse-but-fail-in-maven-surefire">https://stackoverflow.com/questions/3365628/junit-tests-pass-in-eclipse-but-fail-in-maven-surefire</a></li><li><a href="https://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html">https://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html</a></li><li><a href="https://www.baeldung.com/maven-junit-parallel-tests">https://www.baeldung.com/maven-junit-parallel-tests</a></li></ol><p>团队介绍</p><p>大淘宝技术-用户平台技术团队<br>用户平台技术团队是一支集研发、数据、算法一体的团队，负责淘宝天猫的用户增长，游戏互动，平台会员和私域运营等消费者核心业务。在对用户争夺进入白热化的时期，团队正承担着捍卫电商主板块增长的重要使命，是阿里核心电商战场的参与者，用持续的技术创新来驱动阿里电商引擎的稳步前行。<br>这是一支年轻开放的团队，在这里你将收获超大规模高并发场景的架构设计能力，洞悉用户增长最前沿的实践方法，在数字化时代收获最核心的竞争力。团队技术氛围浓厚，倡导创新和工程师文化，鼓励用数据和代码发现解决问题。团队研发流程规范，代码质量高，学习成长速度快。</p><p>✿  拓展阅读</p><p>[图片]</p><p>[图片]</p><p>作者 | 李一飞（一骞）</p><p>编辑| 橙子君<br>[图片]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试在美团外卖的实践与落地(转载)</title>
      <link href="ead6381e.html"/>
      <url>ead6381e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>🔗 原文链接： <a href="https://mp.weixin.qq.com/s/vLR1FqGi6TiICEcWzOnHfQ">https://mp.weixin.qq.com/s/vLR1FqGi…</a></p></blockquote><blockquote><p>⏰ 剪存时间：2022-11-20 17:50:19 (UTC+8)</p></blockquote><blockquote><p>✂️ 本文档由 <a href="https://www.feishu.cn/hc/zh-CN/articles/606278856233?from=in_ccm_clip_doc">飞书剪存 </a>一键生成</p></blockquote><p>原创 少飞 闫旭 文文等 美团技术团队 <em>2022-09-15 19:58 发表于 北京</em></p><p>收录于合集</p><p>#美团外卖 19 个</p><p>#自动化测试 3 个</p><p>#前端 22 个</p><p>#到家 9 个</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NzczYjE2NGRkZmQ4ZDQ2N2ZmZTc4NWVmMDlmMGE0ZTFfM2VuV1dBVmxnaGlUc1JhcU9BNFZud3FoZndnM3I4NWdfVG9rZW46Ym94Y25WdWMzdmtFemtYdEtPMGJGZ1NNNjhiXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p><strong>总第535 篇 | 2022年 第052篇</strong></p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MWVjMWI1NDRlOWNhZDJkZjI2ZDU4M2FkN2E0Y2VlMTlfenIxdjNBSFNWcGRxZkhXVDdoTTVtZHcyU0tJQUVwcWdfVG9rZW46Ym94Y25nWlE1WDY0NFo5TGNHZE5UZVQzQlplXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>随着美团到家业务的发展，系统复杂度也在持续增长。测试用例数量近两年增长约一倍，单端数量超过1万2千条，而研发人员的工作从大部分时间在开发，转变成一半时间在开发、一半时间在模拟环境和自测。因此，引入自动化测试就显得十分有必要，本文介绍了美团外卖在自动化测试方向做的一些探索和实践，希望对从事相关领域工作的同学能够带来一些启发或帮助。</p><ul><li><p>\1. 项目背景</p></li><li><p>\2. 项目目标</p></li><li><p>\3. 方案选型</p></li><li><p>\4. 实践和探索</p><ul><li>4.1 问题和挑战</li><li>4.2 前置条件准备</li><li>4.3 用例录制与回放的数据一致性</li><li>4.4 用例录制与回放的操作一致性</li><li>4.5 可溯源的自动化测试</li><li>4.6 用例的维护</li><li>4.7 跨App回放用例</li><li>4.8 埋点的录制回放</li></ul></li><li><p>\5. 测试流程</p><ul><li>5.1 自动化任务触发</li><li>5.2 回放集群调度</li><li>5.3 断言服务</li><li>5.4 消息推送</li></ul></li><li><p>\6. 落地与实践</p><ul><li>6.1 业务共建</li><li>6.2 实践效果</li></ul></li></ul><h2 id="1-项目背景"><a href="#1-项目背景" class="headerlink" title="1. 项目背景"></a><strong>1. 项目背景</strong></h2><p>美团外卖的业务场景比较多元化，除了外卖自身的业务，还作为平台承接了闪购、团好货、医药、跑腿等其他业务。除此之外，在全链路动态化的大基调下，外卖各个页面的技术形态也变得越来越复杂，除了Native代码，还包括Mach（ 外卖自研动态化框架 ）、React Native、美团小程序、H5等，不同技术栈的底层技术实现不同，渲染机制不同，进而对测试方式要求也有所不同，这也在无形中增加了测试的难度。下图汇总了美团多业务、多技术、多App的一些典型场景。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NDMzZmE0ZjVlMDFhODcxODVhOTMyNWFlMGIyNGM1NjlfU2hsMFZubkF3REppak5qSDEyamZDUk1rRHBOT0NGa0JfVG9rZW46Ym94Y25JVlBodnZaTWhpNGYzdWJWS3VreUZmXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图1 多业务、多技术栈、多App</p><p>在产品交付上线的过程中，测试的占比也是非常大的，甚至大于总时长的30%。如下图所示，整个测试包括了冒烟测试、新功能测试、二轮回归测试、三轮测试。然而，现在需求测试绝大部分还是采用非自动化的方式，这就使得人力成本变得非常之高。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=N2MyNTAyNzY1ZTY4ZTllZmJlZDA2YTZhNDkxZTI4N2ZfcURhamVVclZMMUxnc3daQjVDYTRUN3RDZkNKTm11RnlfVG9rZW46Ym94Y254a0pXVXhTVnhORWRBc2VxN2pEYUFlXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图2 外卖迭代模型</p><p>另一方面，相比于2018年，2022年的测试用例数量增长近3倍，已经超过1万2千条（ 如下图所示 ）。同时，外卖的业务是“三端复用”，除了外卖App，还需要集成到美团App和大众点评App上，这样一来，测试工作量就翻了3倍，业务测试压力之大可想而知。如果按照当前的增长趋势持续下去，要保障外卖业务的稳定，就必须持续不断地投入大量的人力成本，所以引入能够支持外卖“多业务场景”、“多App复用”、“多技术栈” 特点的自动化测试工具来提升人效和质量，势在必行。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MzRlNThkMGMxN2I3ZDI0Mjc2ZGJjN2QyNTQ2ZmRkNmVfOW9JNWswYTdWRDhrTW5pSTRoVXBPcW5BSE5kQ1FkQ0JfVG9rZW46Ym94Y25kSjR5ZjhQa0ZtOWh1cUJpdUlWQkJiXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图3 近几年用例增长变化</p><h2 id="2-项目目标"><a href="#2-项目目标" class="headerlink" title="2. 项目目标"></a><strong>2. 项目目标</strong></h2><p>为了解决外卖面临的测试困境，我们尝试去探索一种零学习成本、低维护、高可用的自动化测试方案，能够支持外卖复杂多变的测试场景，它必须同时满足下面几点要求：</p><ul><li><p><strong>易用性</strong> ：工具/平台的上手难度，使用复杂度应该尽可能的低，因为自动化测试的目的是提效人力，而不是增加人力负担。</p></li><li><p><strong>平台支持</strong> ：移动端至少需要覆盖iOS和Android双平台，同时基于外卖的业务特点，不仅需要对Native支持，也需要支持Mach（ 自研局部动态化框架 ）、H5、React Native、美团小程序等技术栈。</p></li><li><p><strong>稳定性</strong> ：自动化测试用例的执行需要有足够的稳定性和准确性，测试过程中不应因测试工具本身的不稳定而出现稳定性问题。</p></li><li><p><strong>维护成本</strong> ：维护成本很大程度上决定了测试工作量的大小，因需求产生变动或架构重构等问题时，用例的维护成本应该尽可能的小。</p></li><li><p><strong>可扩展性</strong> ：当测试方案不能满足测试需求时，工具/平台应具备可扩展的能力。</p></li></ul><h2 id="3-方案选型"><a href="#3-方案选型" class="headerlink" title="3. 方案选型"></a><strong>3. 方案选型</strong></h2><blockquote><p>自动化测试工具那么多，自研是重复造轮子吗？</p></blockquote><p>针对终端的UI自动化测试工具/平台可谓“屡见不鲜”，市面上也有很多相对成熟的方案，相信大家都有用过，或者至少有所耳闻，但这些方案是否能真的满足我们提效的诉求呢？以下我们挑选了三类非常具有代表性的自动化测试工具/平台 - Appium、Airtest Project、SoloPi进行了分析，来帮助大家对自动化测试技术建立一个认知：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YzZjYTJiOTZmZGVhNDBjYWVjYWY5ZjUwMjFkYTBlYzVfU1NDa1l5aTNjOVppMkgyM2RNRTdwaTZDZ2JoQTdWUDhfVG9rZW46Ym94Y254ZElSdmthYURKYnhRMlhFV3h3cWRjXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><ul><li><p>Appium是一个开源工具，用于自动化测试iOS手机、Android手机和Windows桌面平台上的原生、移动 Web和混合应用。它使用了各系统自带的自动化框架，无需SDK集成，Appium把这些系统本身提供的框架包装进一套API——WebDriver API中，可以使用任何语言编写Client脚本向服务器发送适当的HTTP请求。这让不同技术栈的人员都能快速上手编写测试用例，可以选择自己最为熟悉的语言，但是对于没有语言开发基础的人来说，还是有一定学习成本，而且这种方式在多人协作时并没有太大作用，为了保证自动化用例的可维护性，团队内部应该需要统一脚本语言。值得一提的是：Appium在iOS、Android和 Windows 测试套件之间可做的一定程度的复用代码。但是由于不同端界面及元素定位的差异，这往往是不现实的，更无法保证测试的准确性，所以这种所谓的“跨端”就变得毫无意义。</p></li><li><p>Airtest Project是由网易游戏推出的一款自动化测试平台，除了支持通过系统自带的自动化测试框架，还支持了通过图像识别的方式，对于非基于原生UI系统的一些游戏引擎提供了SDK的支持。其上手难度稍低，可以一定程度上通过IDE进行相关操作来生成简单的脚本指令。Airtest虽然基于图像进行控件识别，为跨端提供了一定的可能性，然而图像识别并不能达到人眼识别的准确度，除此之外移动端页面的构成和游戏页面也存在不小的差别，页面元素的展示规则和样式受屏幕分辨率影响较大，单纯依靠图像识别来进行元素查找成功率不高，无法保证测试的准确性。</p></li><li><p>SoloPi是一个无线化、非侵入式的自动化测试工具，通过录制回放的方式进行UI自动化测试，SoloPi虽然只支持Android，但是在录制回放的这种方式中，还是极具代表性的。传统的自动化测试工具由于需要编写测试脚本，所以存在着一定的上手难度（ Airtest还是存在代码编辑的 ），便产生了SoloPi这种纯基于录制回放的自动化测试方式，将用例的所有操作事件进行录制，生成一个完整的录制脚本，通过对脚本的回放来还原所有的操作，从而进行自动化测试。但是，这种方式只能记录操作，而不能记录数据，在外卖这种数据驱动展示的场景下无法满足测试要求。并且外卖的业务要复用到美团App和大众点评App中，不同App存在部分视图和逻辑性的差异，SoloPi也无法支持我们“一端录制多端回放”的测试场景。</p></li></ul><p>可以看出，以上这些自动化测试工具/平台对于数据记录，环境模拟、维护成本、跨App复用等方面，都是有所欠缺的。所以无论是哪种方案，在易用性、维护成本、稳定性、可扩展性以及最终的测试效果上，都无法满足我们对自动化测试的需求。我们并不是为了自动化而自动化，而是要解决实际的提效问题。</p><p>那么，怎样才能确定一个自动化工具/平台的可用性，并长期落地去使用自动化，带着上述提到的较高门槛的上手成本、操作繁琐的环境模拟、差强人意的测试成功率、定位模糊的测试缺陷、难以维护的用例脚本等几大重要痛点， <strong>本文我们将介绍美团外卖自研的测试平台——AlphaTest</strong> ，都具备哪些能力以及是如何解决这些问题。</p><h2 id="4-实践和探索"><a href="#4-实践和探索" class="headerlink" title="4. 实践和探索"></a><strong>4. 实践和探索</strong></h2><p>一个自动化测试工具/平台能不能用起来，取决于他的上手成本和稳定性，即使工具的测试稳定性做的再好，使用的门槛高也会让人望而生却，反之亦然。所以AlphaTest平台为了上手简单，降低使用成本，采用了 <strong>基于录制回放</strong> 的方式进行设计，并且弥补了常规录制回放无法编辑的痛点，同时在手势操作的基础上增加了数据录制。整合美团系App的特性增加了环境模拟、跨App支持、混合技术栈的支持等能力，在使用简单的同时，也保障了用例的可维护性、测试的准确性等。我们先通过视频简单的了解一下：</p><p><strong>用例录制：</strong></p><p><a href="https://v.qq.com/txp/iframe/player.html?origin=https://mp.weixin.qq.com&containerId=js_tx_video_container_0.5273447298572995&vid=l3356se7yyc&width=660&height=371.25&autoplay=false&allowFullScreen=true&chid=17&full=true&show1080p=false&isDebugIframe=false">🎦 点击观看视频</a></p><p><strong>用例回放：</strong></p><p><a href="https://v.qq.com/txp/iframe/player.html?origin=https://mp.weixin.qq.com&containerId=js_tx_video_container_0.944923673371538&vid=a3356pw74ls&width=660&height=371.25&autoplay=false&allowFullScreen=true&chid=17&full=true&show1080p=false&isDebugIframe=false">🎦 点击观看视频</a></p><p><strong>回放报告：</strong></p><p><a href="https://v.qq.com/txp/iframe/player.html?origin=https://mp.weixin.qq.com&containerId=js_tx_video_container_0.6311952878907903&vid=o3356mbeb6a&width=660&height=371.25&autoplay=false&allowFullScreen=true&chid=17&full=true&show1080p=false&isDebugIframe=false">🎦 点击观看视频</a></p><h3 id="4-1-问题和挑战"><a href="#4-1-问题和挑战" class="headerlink" title="4.1 问题和挑战"></a><strong>4.1 问题和挑战</strong></h3><blockquote><p>注：这里我们将生成的自动化脚本统称为指令，将平台生成的用例统称自动化用例，将录制回放变成可视化的脚本指令，让用例变的易懂、易维护。</p></blockquote><p>录制回放本身是一连串的操作数据的集合，是连续性的、不可拆分，因此几乎不具备可编辑性，这也就导致了用例维护成本极高。AlphaTest虽然同样基于录制回放的方式生成自动化用例，但是我们将每一步的操作都具化成结构化的指令数据，并提供可视化指令编辑器，以支持查看编辑。</p><p>这些可视化的指令，完全通过录制自动生成，也不依赖于任何脚本语言。通过可视化用例指令编辑器，不仅为用例提供了编辑的可能性，同时大大地提高了用例的可阅读性，每一条测试用例在测试过程中每一步都做了什么、当时的界面是什么样的、都有哪些断言校验点，是显而易见的，不会存在像传统图文描述的测试用例那样，出现理解偏差。指令生成演示，手机录制与平台远端录制双模式支持：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjIzMDRmZjhiNWZhZTdhYWU0OGNmYzc4YjkxNDE4YTlfTmQxM0I0c3ZKbzludmpSUENnTlg5UXNzN3NmOXNFRDBfVG9rZW46Ym94Y250N3BnV1lnVGVQbHp1S2xMVG5kYmJkXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图4 指令编辑器</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmE3MWNhODQ3MzIyZTJlNWZhNjY0NTE1MWRkMDdhMThfb3pPZXZWSXlpRVBVYjJHcUx5SGV1cWt1T2hyUE1zYm5fVG9rZW46Ym94Y25OWGNDUDRCRlpWZ25aUUNwMlh6UXdGXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图5 手机录制演示</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NDFjZTA0NGJkMjllNWI1ODA5OWVkMjBkOTZkMzQ2Y2RfRnNndE9JbkZEak1ZUlRIYTZ4YkJXaUdpSUxpdHdEVFVfVG9rZW46Ym94Y25PVjNjZXV4c3NROWN1VWF3ekI1Y2VoXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图6 平台远端录制演示</p><h3 id="4-2-前置条件准备"><a href="#4-2-前置条件准备" class="headerlink" title="4.2 前置条件准备"></a><strong>4.2 前置条件准备</strong></h3><blockquote><p>一键环境模拟，解决操作繁琐的用例执行前的环境准备。</p></blockquote><p>进行一个用例的测试之前，往往需要做大量的准备工作，比如切换API环境，定位到某个地点，登录指定账户等。这些需要准备的环境条件我们统称为前置条件。我们知道，前置条件的准备操作通常都不是一两个步骤就可以完成的，比如账号登录/切换：我们需要进入登录页，填写手机号+密码/验证码，点击登录等一系列动作来完成这个过程，非常繁琐，并且每次测试我们都需要准备，重复性高。因此，我们给AlphaTest设计了独立的前置条件模块，将用例拆成了两个部分：前置条件 + 操作步骤。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=Y2Q5MzhmYjAyNTY4MGYwNmJjMzYxZTM1YjJhODkzOGJfcWdHdTJLb1BEWnpZYWk2TWNxSHZZclpyZU80aTZROENfVG9rZW46Ym94Y25ndkp6dW5WbmdhejZLY0xDd1N6TmJnXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图7 前置条件</p><p>与其它测试框架不同的是，AlphaTest采用了SDK集成，但对业务无侵入的方式，因此可以通过编写白盒代码来实现前置条件的自动配置，只需要在平台添加需要的指令，下发到SDK后，即可根据相关指令完成前置条件的自动配置，不再需要重复进行相关的操作。并且这些前置条件支持复用，也不需要每次进行用例准备时的重复配置。AlphaTest的前置条件，不仅有着基于美团内部服务及底层Hook的默认实现，也提供了API支持业务方自定义实现，比如实现不同的账号体系。</p><h3 id="4-3-用例录制与回放的数据一致性"><a href="#4-3-用例录制与回放的数据一致性" class="headerlink" title="4.3 用例录制与回放的数据一致性"></a><strong>4.3 用例录制与回放的数据一致性</strong></h3><blockquote><p>影响用例执行的不仅是代码，还有数据。</p></blockquote><p>很多时候，自动化用例无法正常执行完成，可能是因为App回放时的本地数据及网络数据与录制时的不一致，从而导致用例执行流程的阻塞或App界面展示的不同。这也是大多数自动化测试工具/平台测试通过率不高的主要因素，因此要保证测试成功率，我们需要控制变量，排除由数据产生的影响。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=N2MyNjdjYzNlZTZiOWYyNzgzODQ0NjY3M2I3MGVhODBfcXpaeG01SkQ5WXN3UDhTb3h4SEhEZW5XWmc1bmdJM1dfVG9rZW46Ym94Y25HRm80OVlIM1VFYlVORDAxeUJtTndlXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图8 数据一致性</p><p>App运行依赖的数据，有两部分——本地数据和网络数据：</p><ul><li><p>本地数据是App在运行期间产生的缓存数据或持久化的存储数据。为了让用例在录制回放时都能够保持一致的本地数据环境，我们在录制和回放前都对App的本地数据进行了清理操作，这样用例在录制和回放的过程中，都可以保持一致的App初始化环境。</p></li><li><p>网络数据是驱动App交互呈现的基石，各种策略和API升级都会影响网络数据的响应，因此我们将用例录制过程中产生的网络数据也进行了录制，并将网络数据和对应的操作指令进行了关联和绑定，确定了数据产生的事件源。排除数据影响后，我们的自动化测试的成功率就取决于自动化操作的准确性了，这就回到了常见自动化框架范畴。</p></li></ul><h3 id="4-4-用例录制与回放的操作一致性"><a href="#4-4-用例录制与回放的操作一致性" class="headerlink" title="4.4 用例录制与回放的操作一致性"></a><strong>4.4 用例录制与回放的操作一致性</strong></h3><blockquote><p>目标定位的准确性与手势定位的精准性。</p></blockquote><p>UI自动化测试的本质就是代替人去自动的做一步步的操作（ 点击、长按、输入、滑动等 ）。录制与回放过程的操作能否一致，是否精准，直接影响测试的成功率，决定了工具/平台的可用性。</p><ul><li><strong>目标控件定位准确性：</strong></li></ul><p>操作行为是否一致首先需要确认操作目标是否一致。与一般测试工具/平台不同的是AlphaTest采用了ViewPath + 图像 + 坐标的多重定位方案。得益于SDK集成的方式，我们的ViewPath可以记录更多的元素视图特征和执行不同的匹配策略。定位过程中会优先使用ViewPath进行目标控件检索，当目标控件查找异常时，会结合图像匹配和坐标匹配的方式进行兜底查找，来确保界面变化程度不大时，也能准确的查找到目标控件。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MzY4NDMwMzhlOGFmZmYyM2I1MmI3ZmEyMmY5ZTUyNDRfMjdNUjV0Mk9zUXRqcHU4aXFUZGJJd1pwTFczUTJYQnBfVG9rZW46Ym94Y25rMzdDVTJsWDhCVjAzWUJjTXJYUnloXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图9 图像识别示意图</p><ul><li><strong>手势定位的精准性：</strong></li></ul><p>有了基于控件的目标定位之后，对于一些常用简单操作手势，比如点击、长按、断言、甚至输入都可以做到很好的支持，只需要找到对应的控件，在控件所在位置下发相应的触摸事件即可。我们知道，App真正接收的触摸事件是屏幕上一个个精准的触摸点，在系统处理后，分发给当前App窗口，App在接收事件后再继续分发，直到找到事件的最佳响应者，后续通过响应者链对事件消化处理。那我们要还原一个触摸事件的坐标点要如何确定呢？由于我们确定的只有控件，所以这个点自然而然就成了控件的中心点了。</p><p>大多数情况下，这些都可以很好地进行工作，但是对于一些多响应控件重叠的情况，可能会产生预想不到的操作误差。为了解决这样的问题，我们把控件定位与坐标定位进行了结合：基于纯坐标的定位是一种定位精准度非常高的定位方式，但是稳定性非常差，只有在屏幕分辨率完全一致且回放页面控件位置完全一致的情况下，才具备足够的可靠性，但这往往是不现实的，对测试环境机器量要求过高。</p><p>基于控件的定位，又存在着精准度不够的问题。使用坐标定位，如果定位区域足够小的话，那么受屏幕尺寸的影响就会越小，只需要确定在小范围内的相对位置即可。而基于控件目标的定位，恰恰可以把目标区域缩小到一个指定区域，我们刚好可以将二者结合起来，同时解决定位精准度和稳定性的问题。</p><p>对于复杂手势的支持，我们同样可以采用微分的方式，将一个复杂手势拆成多个简单手势的组成，比如我们可以将一个滑动操作的定位拆成两个部分：起始位置和终止位置，而这两个位置的定位，就变成了两个普通的单点手势操作定位了，可以通过上面提到的一个目标控件+相对坐标的形式进行定位。核心思想都是将基于屏幕坐标点的定位操作，缩小的目标控件的区域范围内，以达到不受设备分辨率的影响，实现操作行为一致的效果。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YWQ5ODljMjIzZDAxODUxYzk0YTEwOGI1NzdmMjg3ZTBfTFZqeUJ2TkoxMFdDd3pGeFQ3SnV1ZktUUEc1UzN4R0pfVG9rZW46Ym94Y25XdW1NM2hEVDdDWFdyMUxicVBraGtlXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图10 手势识别示意图</p><h3 id="4-5-可溯源的自动化测试"><a href="#4-5-可溯源的自动化测试" class="headerlink" title="4.5 可溯源的自动化测试"></a><strong>4.5 可溯源的自动化测试</strong></h3><blockquote><p>测试全流程记录，问题溯源一键即达。</p></blockquote><p>测试的目的是保证App运行的稳定，测试过程中出现Bug导致测试未通过时，需要溯源问题原因，发生的场景，乃至具体的执行步骤。这也是大多自动化测试工具/平台所欠缺的，即使发现了问题，排查工作也很困难；这个问题在手工测试的时候，更为严重，往往因为很多缺陷无法复现而难以定位。</p><p>AlphaTest的自动化用例最小执行单元是操作指令，我们将测试过程的每一条指令的执行状况和过程中的界面快照进行了记录，并在指令执行失败时，对异常原因进行了初步分析。然后将整个用例的执行组合成了一份完整的测试报告，可快速溯源问题步骤。除此之外，我们还增加大量的日志上报，并将整个用例测试过程进行了视频录制，来进一步帮助疑难问题的排查。真正做到了用例回放测试可溯源。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NTVmYzEyNDFjNjA5OWM5OTU3YzEzNmVmYzFjZDE4MzFfNTBTc1hDenkwcTBZRTJreDJUaTVra3Y1MDU3aEtWVWFfVG9rZW46Ym94Y25XNU14YUpjdW5ESWhYYmNlZnFKckljXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图11 回放报告-图文详情</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YzMwZTNiMDc0NmI5MDczYWI5YmM2ODRmNDAyYWJjZDFfZTNaaUhaQVpneE93WWdaVVk1N2pQd29iV1hVZUFEbzBfVG9rZW46Ym94Y25pR0R6SnFUcXliT3BGUGNnRWdjMzNlXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><h3 id="4-6-用例的维护"><a href="#4-6-用例的维护" class="headerlink" title="4.6 用例的维护"></a><strong>4.6 用例的维护</strong></h3><blockquote><p>自动化用例需要持续地投入人力来维护么？架构升级，页面重构，用例需要全部重新录制么？</p></blockquote><p>因自动化工具/平台众多，阻碍长期落地使用的一大问题是用例维护成本高，很多工具/平台让我们即便是使用上了自动化，但还需要持续投入人力维护用例的更新，最终的提效收益微乎其微。对于用例更新维护，我们可以梳理划分成三个场景：</p><ul><li><p>需求发生重大变更，整体的业务执行流程及相关的校验点都需要进行大量的调整。对于这种情况，无论是何种自动化测试工具/平台，都是需要正常进行用例变更重录以适应新的需求。</p></li><li><p>需求发生略微变更，业务流程基本一致，需要调整的校验点、操作以及数据或不影响整体流程的步骤。对于此场景，AlphaTest通过指令编辑器与操作录制，支持指令增删改以及数据和场景的还原，帮助用户快速的进行用例调整，而无需重新录制用例。例如：修改网络数据字段、视图变更路径、断言替换目标等。</p></li></ul><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjY3YTA2ZGM0YTAwMmFjYWM2Yjk2MTg4MGRkNGQ1NDFfa2Z0bTBtY0Z2Nmp5SUl1S3VkNzVKM2E5QWdDbnZUQlBfVG9rZW46Ym94Y24wbmoxMUZRVVBkZTM5cTRaZDJFY3dkXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图14 指令编辑</p><ul><li>和业务需求不同，我们的技术实现也会发生迭代。随着App技术架构不断的演进，经常会面临着架构升级，页面重构甚至技术栈变迁等这样的技术升级。这些变动需要覆盖大量的测试用例，其中大量的自动化用例又可能会因为变动而导致失效，需要重新录制。为此，AlphaTest设计一套利用相近分辨率机器进行用例自动修正的功能：利用图像 + 坐标进行二次识别定位，元素定位成功并校验通过后，生成新的ViewPath，更新对应的用例指令，对用例进行自动修复，修复后可在任意回放。</li></ul><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YmE0N2U2NmQ0MzQwZDk3MDE2YmE4ODUwY2E3OWM1NmFfdHNHYW10SWNRNW1qNDhjTmZIM2d3aXd1VDNydmNEZjRfVG9rZW46Ym94Y251UFNHZmNrUHRESkNIcmFWMHk0Q2hlXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图15 自修复能力</p><h3 id="4-7-跨App回放用例"><a href="#4-7-跨App回放用例" class="headerlink" title="4.7 跨App回放用例"></a><strong>4.7 跨App回放用例</strong></h3><blockquote><p>同一份代码运行在不同的App上，是否需要重新编写多份用例？</p></blockquote><p>美团系的一些业务可能会复用在多个App上。比如外卖有独立App，但同时也要复用到美团和点评App上，这些功能，几乎共用一份代码，而测试人员却不得不对每个App上的业务功能都进行测试，维护多份用例。由于业务本身实现是一致的，那我们可以通过适配不同App之间的差异，来让一个业务Case可以横跨多个App回放，这便可以将成本缩减好几倍，这些差异主要体现在：</p><ul><li><p><strong>前置条件和初始页面</strong> ：业务的初始页面进入路径不同，例如外卖App打开App就进入到了外卖首页，但是在美团App中就需要从美团首页跳转到外卖频道。同时由于不同App的样式风格、设计规范、业务特性等因素，也会造成首页代码逻辑和视图层级的差异。</p></li><li><p><strong>AB实验配置</strong> ：不同App所配置的实验可能不同，不同的实验会导致不同的样式和代码逻辑。</p></li><li><p><strong>网路接口映射</strong> ：不同App中相同业务场景涉及的接口有所不同。</p></li><li><p><strong>页面Scheme映射</strong> ：不同App中相同页面的跳转Scheme也不相同。</p></li></ul><p>AlphaTest平台支持App维度各项差异数据配置，当SDK检测用例回放环境与录制环境不一致时，会自动进行映射适配，从而让用例运行到了不同App上。</p><h3 id="4-8-埋点的录制回放"><a href="#4-8-埋点的录制回放" class="headerlink" title="4.8 埋点的录制回放"></a><strong>4.8 埋点的录制回放</strong></h3><p>除了功能测试，我们在日常开发和测试的工作中，还会面临另外一个比较重要的问题就是埋点测试。因此，我们在自动化的基础上扩展出埋点自动化测试。埋点自动化测试的核心思想是，通过对比录制时期和回放时期的埋点上报时机和上报参数进行判断。为了保证埋点自动化测试的稳定性，我们主要采用以下的障机制：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=OGY1ZTZjMmQwMDkwODhiMTM1NTNlNDVjZjc0ZGFhYTBfbGVYNzI5M1RqOFFENzVsRWtGTTc2czRQSUtscUFva2tfVG9rZW46Ym94Y24ydUFyelJPZTI5OE9Ub3BFeXRyTzJlXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图16 埋点自动化测试示意图</p><ul><li><strong>字段规则配置</strong> ：埋点自定义参数千姿百态，甚至有些字段每次代码执行都不一致，如果进行完全匹配结果注定是失败的，所以我们在AlphaTest平台提供了埋点字段规则配置功能，通过人为设置的方式来避免埋点自定义参数校验失败。App重启进入录制状态时，用户就可以操作App，平台会记录用户的操作行为，当产生相应的埋点日志的时候会将日志信息打印在日志区域（ 如下图17所示 ），在该过程中也会对埋点日志进行一定的校验。重点将操作时机、埋点日志一并保存到服务端。</li></ul><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ODlmMDgzZjdhZGM1MGU2ZDE4NzNmM2YwMjE5MWM0OThfZmc4NzhTZmhmYkgyTGh0bTFhRGJrQTU0ZFJnY1oyRExfVG9rZW46Ym94Y25Wb2h1a2dEek04azFVaUlNUVVsNld5XzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图17 埋点上报数据控制台打印</p><ul><li><p><strong>埋点时机校验</strong> ：针对时机校验，程序并不支持埋点曝光的”1px曝光”，”下拉刷新曝光”，”页面切换曝光”，”切前后台曝光”这些规则，主要的原因是每一个业务方在对埋点曝光的规则都是不一致的，而且该规则的实现会极大耦合业务代码。在针对时机校验我们目前只支持：</p></li><li><p>[1] 点击埋点上报时机校验，程序通过事件监听和埋点类型信息来判断点击埋点上报的时机是否是在点击的操作下产生的，如果不是则报错。</p></li><li><p>[2] 埋点重复上报校验，针对一般情况下用户一次操作不会产生两个相同的埋点上报，所以程序会校验某个事件下发生的所有埋点日志进行一一校验，检测是否具有2个或多个埋点日志完全一致，如有发生则会上报错误。</p></li><li><p><strong>结果校验</strong> ：回放完成后，我们会对比录制和回放时的埋点数据，根据配置好的字段规则校验埋点上报是否符合预期。</p></li></ul><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NmMxNDY2MzBhODRmOTNjMjM1OTAxZTM2YzdkYmM5NDVfNks1eHJYcGJMdkpPSWs1Q2F2Z2FFbzlSWXRpR0lHM2xfVG9rZW46Ym94Y24xcll2QnY0anBCQkh2Q3JLV0w2aGFnXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图18 埋点校验流程图</p><h2 id="5-测试流程"><a href="#5-测试流程" class="headerlink" title="5. 测试流程"></a><strong>5. 测试流程</strong></h2><blockquote><p>AlphaTest的核心测试流程始终聚焦在用例的录制与回放环节，整个流程涉及到自动化任务触发、回放集群调度、断言服务、消息推送等核心模块。</p></blockquote><p>以UI自动化和埋点自动化的流程为例，AlphaTest以业务团队为基本单元，可以和各团队的测试用例进行关联，定时同步状态。同时利用需求评审线上化做为基础，将自动化用例和研发流程中的PR、集成打包、二轮回归等节点相结合，定时触发自动化用例并将结果报告推送给相关负责人。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTgyYmM3NDQ1MWIzZjhmYjQ1YzJjYjMwZjQyMzNmMTVfWHFzQzVIazF2U29OOEF4OG05ZHlReHZPNFBRb1dlcU1fVG9rZW46Ym94Y24xbmhDa0pETWtraHpwS09aUHp1emZkXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图19 建设自动化测试流程闭环</p><ul><li><p><strong>录制用例：</strong></p></li><li><p>[1] 首先在AlphaTest平台选择要录制的测试用例，打开待测试App进行扫码即可进入用例待录制状态，此时可以设置用例需要的前置条件（ 账号信息、Mock数据、定位信息等 ），之后点击开始按钮后，手机便会自动重启，开始录制。</p></li><li><p>[2] 用户按照测试用例步骤，正常操作手机，AlphaTest会将用户的操作行为全部记录下来，并自动生成语义化的描述语言显示在AlphaTest平台上，与此同时产生的网络数据、埋点数据等校验信息也会一并存储下来。</p></li><li><p>[3] 在录制的过程中可以快捷的打开断言模式，将页面上想要校验的元素进行文本提取/截图等操作记录下来，用于后续回放过程中对相同元素进行校验。</p></li><li><p>[4] 测试步骤全都执行完毕后，点击保存按钮即可生成本条自动化用例。</p></li><li><p><strong>用例回放：</strong></p></li><li><p>[1] 扫描对应自动化用例的二维码即可进行回放，回放过程中会将用户录制的行为、网络数据进行一比一还原，并且辅助有全过程视频录像，用于后续问题排查和溯源。</p></li><li><p>[2] 回放过程中碰到断言事件时，会将断言的元素进行文本提取/截图，上传至AlphaTest平台。回放完成后，会将回放时候的断言截图和录制时的断言截图进行图像对比，作为整个测试结果的一项。</p></li><li><p>[3] 回放过程中的埋点数据也会一并记录下来，并和录制时候的埋点数据和上报时机进行对比，自动提取出其中的差异项。</p></li><li><p>[4] 回放完成后，会生成完整的测试报告并将结果通过OA推送至相关人员。</p></li><li><p><strong>回放计划</strong> ：二轮回归测试中，回放用例数量多达几百条，为了做到全流程的自动化，我们提供了回放计划的概念，可以将多个自动化用例进行编组管理，每一组就是一个回放计划。触发一个计划的回放即可自动触发计划内的所有自动化用例。整个计划都执行完成后，会通知到指定的计划负责人或群组。</p></li></ul><h3 id="5-1-自动化任务触发"><a href="#5-1-自动化任务触发" class="headerlink" title="5.1 自动化任务触发"></a><strong>5.1 自动化任务触发</strong></h3><p>在整个外卖C端敏捷迭代的流程中，打包平台主要承接了业务需求发起到需求交付的流程，作为AlphaTest的上游平台，可以提供打包信息并触发自动化用例回放任务。以下简单展示AlphaTest与敏捷协同平台的交互流程：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MWVjMGI2M2JhNDAyZDI1Y2VkMmE3MTRiMzA2NTllYjNfN1lRUGZ0dGhleDVDUVBZUm1uTmNTRlN6OFZPQzZqR2tfVG9rZW46Ym94Y24wUmhyR0R2dkl1cU8yclRjRlR6ckl5XzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图20 AlphaTest与敏捷协同平台交互流程图</p><h3 id="5-2-回放集群调度"><a href="#5-2-回放集群调度" class="headerlink" title="5.2 回放集群调度"></a><strong>5.2 回放集群调度</strong></h3><p>整个测试过程真正的解放双手，才能算的上是自动化。因此，我们着手搭建了自己的自动化机器集群，可以 24小时不间断的执行测试任务。为了保证任务回放能够顺利完成，我们在不同阶段增加了相应的保活策略。在极大程度上提高了任务执行完毕的成功率。</p><ul><li><p><strong>执行流程</strong> ：回放任务通过用户在平台手动触发或者二轮自动触发。新增的回放任务经过任务拆分系统拆分成n个子任务，加入到不同设备的回放任务队列中。每个子任务经过占用设备-&gt;安装待测App-&gt;应用授权-&gt;打开scheme-&gt;上报结果等步骤完成回放操作。</p></li><li><p><strong>节点保活机制</strong> ：针对回放流程中每一个节点，失败后进行N（ 默认为3 ）次重试操作。减少因网络波动，接口偶现异常导致的回放失败数量。</p></li><li><p><strong>子任务保活机制</strong> ：每个回放流程，失败后进行N（ 默认为3 ）次断点重试。减少因设备异常，SDK心跳上报异常导致的回放失败数量。</p></li><li><p><strong>父任务保活机制</strong> ：一个父任务会被拆分成N个子任务，当其中的一个子任务S1在节点保活机制和子任务保活机制下仍然执行失败之后，父任务保活机制会尝试将子任务S1中未执行完毕的用例转移到其他活跃状态的子任务中。减少因设备异常，设备掉线等问题导致的回放失败数量。</p></li></ul><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjNmOGU1MzM0ZDVlZjZkNDdjMDIxMjQ2Njg1YTZhMjFfZEhlV1Y2enFTY2lQQ0FTS3A4RXNpOEk1U05qeWRENjZfVG9rZW46Ym94Y25DRVo5RjBLbUVlRG9Sb3RQbmlKRzRmXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图21 机器集群</p><h3 id="5-3-断言服务"><a href="#5-3-断言服务" class="headerlink" title="5.3 断言服务"></a><strong>5.3 断言服务</strong></h3><p>用例断言是整个自动化用例验证的核心步骤，我们的断言服务依据用例的实际情形可以分别进行文字与图像的断言。其中图像断言服务依托于自建的图像对比算法服务，可以高效进行录制回放断言图像的对比，图像对比准确率可以达到99%以上。</p><ul><li><p><strong>录制阶段：</strong></p></li><li><p>[1] 录制时增加断言决策信息的自动采集。</p></li><li><p>[2] 和正常流程一样，提取区域的截图信息。</p></li><li><p>[3] 如果是文本组件，则提取文本内容，如果是图片组件，则提取图片二进制编码或图片URL，同时提取区域内的布局信息。</p></li><li><p><strong>回放阶段：</strong></p></li><li><p>[1] 回放时，提取和录制时一致的内容（ 文本信息、图片编码、区域截图、布局信息 ）。</p></li><li><p>[2] 将回放时的断言信息上传至AlphaTest平台。</p></li><li><p>[3] AlphaTest平台对断言结果进行校验，首先是基于模型的图像对比，如果判定为一致，则直接标记结果。</p></li><li><p>[4] 如果判定为不一致、则匹配“断言失败数据集”，如果能够匹配上，则标记结果。如果匹配不上，则需要人工选择匹配类型。</p></li><li><p>[5] 匹配类型为“文本校验”、“根据图片信息校验”、“人工校验”。如果前两项判定为一致，则直接标记结果。如果“人工校验”的结果为确实两张图不一致，则直接标记结果，结束。</p></li><li><p>[6] 如果“人工校验”结果为一致，既上述所有判定都不准确，则需要人工对两张图中判定错误的原因进行分类（ 具体类型待定 ），同时将断言存储到失败数据集。</p></li><li><p>[7] 模型自动训练，当数据集超过一定的阈值、通过定时触发、或者手动触发的方式，触发模型自动训练，训练完成后自动部署到AlphaTest平台，不断迭代。</p></li><li><p><strong>图像服务</strong> ：图像对比模型采用基于度量学习的对比算法，将图像对的一致性判别转换为图像语义的相似度量问题。度量学习（ Metric Learning ），也称距离度量学习（ Distance Metric Learning，DML ）属于机器学习的一种。其本质就是相似度的学习，也可以认为距离学习。因为在一定条件下，相似度和距离可以相互转换。比如在空间坐标的两条向量，既可以用余弦相似度的大小，也可以使用欧式距离的远近来衡量相似程度。度量学习的网络采用经典的Siamese结构，使用基于resnext50的主干网络提取图像的高级语义特征，后接spplayer完成多尺度特征融合，融合后的特征输出作为表达图像语义的特征向量，使用ContrastiveLoss进行度量学习。</p></li></ul><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ODE0YjMyYzA5ZTUwZjA4MDkyMmM3MzJmYzBjYTJmMWVfbmRKOGQ2dnp2QzFsVHdRMVRHUGFqWFdSejNta0xJTkNfVG9rZW46Ym94Y24wMThrMDRUWTJyMTlXVFhQbkEwcVlSXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图22 训练过程</p><p>[1] <strong>预训练过程</strong> ：resnext50网络是使用ImageNet的预训练模型。</p><p>[2] <strong>数据增强</strong> ：为增加数据的丰富性、提高网络的泛化性能，数据增强的方式主要包括：图像右下部分的随机剪切和添加黑色蒙层（ 相应改变图像对的标签 ）。这种数据增强符合控键截图实际情况，不会造成数据分布的改变。</p><p>[3] <strong>对比损失</strong> ：对比损失函数采用ContrastiveLoss，它是一种在欧式空间的pair based loss，其作用是减少一致图像对距离，保证不一致图像对的距离大于margin，其中margin=2。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YmYxOGVkZTgzYTk3MDM4MTcyNTc4NTYzYTYyYTE5MDZfMWZRZDZ3U2lEYzhzcXU0eE93cWdYak1ReTNaR2FZWmJfVG9rZW46Ym94Y24xbkFha3dOVkdmTmpnUGJHMWhySThmXzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><p>图23 训练过程</p><p>[4] <strong>相似度量</strong> ：相似度量也是采用计算图像对特征向量的欧式距离的方法，并归一化到区间[0, 1]，作为输出的图像对相似度。</p><h3 id="5-4-消息推送"><a href="#5-4-消息推送" class="headerlink" title="5.4 消息推送"></a><strong>5.4 消息推送</strong></h3><p>消息推送作为回放流程的最终环节，我们依赖于美团内部自建的消息队列服务与OA SDK消息推送能力，可以进行测试报告的实时推送。在此之上，还可以针对不同团队的推送诉求，做消息模板的定制化。</p><ul><li><p><strong>消息定制</strong> ：消息推送与触达的核心，是满足业务诉求；不同业务对自动化测试报告中各项指标的关注点不同，这就需要AlphaTest具备消息推送定制的能力；将消息推送的模板以配置文件的形式提供出来，不同的业务使用不同的业务消息配置文件；再利用OA提供的图文、多媒体等消息推送能力，可以将自动化测试报告的各项指标自定义拆分；除此之外，消息还需要减少冗余，在这个信息泛滥的时代，我们愿意为无孔不入的消息、通知做减法，只将最重要、最核心的消息推送给最需要的人，既可以推动自动化测试流程的高效流转，又可以让各相关业务人员享受到自动化测试能力的便捷性。</p></li><li><p><strong>一键触达</strong> ：以往的研发人员冒烟测试，主要依赖于测试人员在用例管理平台建立测试计划，研发人员根据用例进行手工用例测试结果标记，之后去提测完成后续流程。这中间缺失的主要环节是，难以对研发人员冒烟测试的质量进行把控。而AlphaTest正可以解决此问题，流程转换为，研发人员在敏捷协同平台触发一键提测流程，调用AlphaTest的自动化测试能力对冒烟用例进行自动化测试回归，完成之后将测试生成的测试报告同步提测平台，作为研发人员冒烟的结论依据，同时在冒烟过程中发生的问题，也可以及时通知到对应的研发人员与测试人员进行改正。既保证了质量，又避免了人力空耗。</p></li></ul><h2 id="6-落地与实践"><a href="#6-落地与实践" class="headerlink" title="6. 落地与实践"></a><strong>6. 落地与实践</strong></h2><blockquote><p>外卖C端主要承担了用户在App端点餐、下单、配送的所有核心流程，场景繁多、业务复杂，这也给测试人员的版本测试带来了诸多挑战，其中最核心也最耗费人力的便是二轮回归测试环节。目前，C端采用的双周敏捷迭代的开发方式，每个迭代周期给测试人员用来进行二轮核心流程回归的时间为三天，为此C端测试团队投入了许多人力资源，但即便如此，仍难以覆盖全部流程；而AlphaTest的设计初衷也正是为解决此问题——UI测试流程全覆盖及自动化验证。</p></blockquote><h3 id="6-1-业务共建"><a href="#6-1-业务共建" class="headerlink" title="6.1 业务共建"></a><strong>6.1 业务共建</strong></h3><p><strong>用例的转化与维护</strong></p><p>AlphaTest 在外卖C端测试团队的落地初期，我们采用了共建的模式，也就是业务研发人员与对应测试人员共同来进行用例录制与维护的工作；推荐这种工作模式的核心原因是，在C端功能迭代流程中的二轮周期的原有工作模式为，研发人员进行二轮冒烟测试，完成测试之后提交二轮包交由测试人员进行二轮回归测试，所以这本来就是一个双方都需要参与的环节；而二轮测试作为版本上线前的最重要一个测试流程，保证核心流程的正常也是测试人员与研发人员所关心重点。</p><p>经过多轮的使用与磨合之后，这种模式被证明是行之有效的，在整个C端二轮用例的转化过程中，测试人员主要负责了用例的录制与迭代流程，研发人员则主要负责版本回放数据的统计及问题用例的发现与解决。</p><p><strong>外卖二轮落地情况</strong></p><p>目前，AlphaTest已经在外卖多个业务落地，支持了大于15个版本的二轮回归测试，用例覆盖率达到70%。现已 覆盖了Native、Mach、React Native、美团小程序、H5 技术栈的测试工作，能力上可进行支持： UI自动化测试、埋点自动化测试、动态化加载成功率自动化测试、无障碍适配率自动化测试。</p><p>未来，我们会朝着“智能化”和“精准化”两个方向探索，覆盖更多测试场景的同时，更进一步提升测试人效。</p><h3 id="6-2-实践效果"><a href="#6-2-实践效果" class="headerlink" title="6.2 实践效果"></a><strong>6.2 实践效果</strong></h3><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YmY2ODRkNzhjODcxYjgwYzZjZTRmZDkxOTcxYzJkZWFfUTBUbTZzcTFId1A3T2VGMnRpeW1uZTNVQ3dDbWpKUE1fVG9rZW46Ym94Y25nU1NmbmNKV3Zkb1dhOEhEUnhxOTI1XzE2Njg5Mzc4Njk6MTY2ODk0MTQ2OV9WNA" alt="img"></p><h1 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7. 参考资料"></a><strong>7. 参考资料</strong></h1><p>[1] <strong><a href="https://appium.io/">https://appium.io</a></strong></p><p>[2] <strong><a href="http://docs.seleniumhq.org/projects/webdriver">http://docs.seleniumhq.org/projects/webdriver</a></strong></p><p>[3] <strong><a href="http://airtest.netease.com/index.html">http://airtest.netease.com/index.html</a></strong></p><p>[4] <strong><a href="https://github.com/alipay/SoloPi">https://github.com/alipay/SoloPi </a></strong></p><p>———- END ———-</p><p><strong>也许你还想看</strong></p><p><strong>|</strong>  <a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651764420&idx=1&sn=392b2a0b187521aad5742cbfe7ca9452&chksm=bd126f898a65e69f6f56368c8dfd2e16dd0a987c3b0136d61205ae0e166a14fb0f3e21b70917&scene=21#wechat_redirect">Spock单元测试框架以及在美团优选的实践</a></p><p><strong>|</strong> <a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651749742&idx=2&sn=52e37feddb076a2421993b9b4ad99739&chksm=bd12a4238a652d352ebacadf0d6aaf30e2291abe55dace7c04e48c1d824fda75a1dfef689b15&scene=21#wechat_redirect">美团智能支付稳定性测试实战</a></p><p><strong>|</strong> <a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651747335&idx=1&sn=6ca3a91ecc31878b0249f8ae98594ab6&chksm=bd12ad4a8a65245cf74ee314aa8bfb8768ccb065910313a37f796abf202c18aa05240504d385&scene=21#wechat_redirect">Lego：美团接口自动化测试实践</a></p><p><strong>阅读更多</strong></p><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651765958&idx=1&sn=8201546812e5a95a2bee9dffc6d12f00&chksm=bd12658b8a65ec9de2f5be1e96796dfb3c8f1a374d4b7bd91266072f557caf8118d4ddb72b07&scene=21#wechat_redirect">前端 </a><strong>|</strong> <a href="https://t.1yb.co/jo7v"> </a><a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651765981&idx=1&sn=c2dd86f15dee2cbbc89e27677d985060&chksm=bd1265908a65ec86d4d08f7600d1518b61c90f6453074f9b308c96861c045712280a73751c73&scene=21#wechat_redirect">算法 </a><strong>|</strong> <a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651765982&idx=1&sn=231b41f653ac7959f3e3b8213dcec2b0&chksm=bd1265938a65ec85630c546169444d56377bc2f11401d251da7ca50e5d07e353aa01580c7216&scene=21#wechat_redirect">后端 </a><strong>|</strong> <a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651765964&idx=1&sn=ab6d8db147234fe57f27dd46eec40fef&chksm=bd1265818a65ec9749246dd1a2eb3bf7798772cc4d5b4283b15eae2f80bc6db63a1471a9e61e&scene=21#wechat_redirect">数据</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651765965&idx=1&sn=37e0c56c8b080146ce5249243bfd84d8&chksm=bd1265808a65ec96d3a2b2c87c6e27c910d49cb6b149970fb2db8bf88045a0a85fed2e6a0b84&scene=21#wechat_redirect">安全 </a><strong>|</strong> <a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651765972&idx=1&sn=afe02ec92762c1ce18740d03324c4ac3&chksm=bd1265998a65ec8f10d5f58d0f3681ddfc5325137218e568e1cda3a50e427749edb5c6a7dcf5&scene=21#wechat_redirect">Android </a><strong>|</strong> <a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651765973&idx=1&sn=32a23bf1d278dda0398f993ab60a697e&chksm=bd1265988a65ec8e630ef4d24b4946ab6bd7e66702c1d712481cf3c471468a059c470a14c30d&scene=21#wechat_redirect">iOS </a><strong>|</strong> <a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651765963&idx=1&sn=a3de9ef267d07d94118c1611776a4b28&chksm=bd1265868a65ec906592d25ad65f2a8516338d07ec3217059e6975fc131fc0107d66a8cd2612&scene=21#wechat_redirect">运维 </a><strong>|</strong> <a href="http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651765974&idx=1&sn=763c1e37d04acffd0142a2852ecfb000&chksm=bd12659b8a65ec8dfcfeb2028ef287fae7c38f134a665375ba420556ce5d2e4cf398147bd12e&scene=21#wechat_redirect">测试</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok注解@Data和@Builder冲突(转载)</title>
      <link href="75bc1ba6.html"/>
      <url>75bc1ba6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>🔗 原文链接： <a href="https://mp.weixin.qq.com/s/wRkQVpZzIX0EhlYZ6_sEAg">https://mp.weixin.qq.com/s/wRkQVpZz…</a></p></blockquote><blockquote><p>⏰ 剪存时间：2022-11-20 17:29:28 (UTC+8)</p></blockquote><blockquote><p>✂️ 本文档由 <a href="https://www.feishu.cn/hc/zh-CN/articles/606278856233?from=in_ccm_clip_doc">飞书剪存 </a>一键生成</p></blockquote><p>方志朋 <em>2022-11-18 16:00 发表于 广东</em></p><p><strong>点击关注公众号，Java干货</strong> <strong>及时送达 👇</strong></p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWQxZGU0MGY3MzQxNGQxMTQyZjNjNmVjZTI5NDE1MmZfNTlpcm43YWVOTmpkajlEdjE3M21FQUJ5SlFRRlNadm9fVG9rZW46Ym94Y25sbVJ4cVBNUEh5MTIyQmZaZ3JmOTdmXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>来源： juejin.cn/post/7103011031672176677</p><ul><li><p>问题背景</p></li><li><p>Lombok @Data和@Builder分别单独分析用法</p></li><li><p>解决方法</p><ul><li>方法一</li><li>方法二</li></ul></li><li><p>Lombok原理</p></li><li><p>总结 </p></li></ul><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a><strong>问题背景</strong></h2><p>Lombok使⽤ 同时使⽤@Data和@Builder ，构建无参构造器报错！编译不通过。如下图：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YmZmYjg3NGYzY2M0ODBiNWEzNjdhOTZiNWNhYjBhODNfb3loTjRXRld1VTZhVmZYcVIxdU9VQ05qVTFwYVJNaFNfVG9rZW46Ym94Y245UnBlRnZNNUdsOElEdGhSSUF2OHRlXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><h2 id="Lombok-Data和-Builder分别单独分析用法"><a href="#Lombok-Data和-Builder分别单独分析用法" class="headerlink" title="Lombok @Data和@Builder分别单独分析用法"></a><strong>Lombok @Data和@Builder分别单独分析用法</strong></h2><p>Lombok使⽤@Data可以⽣成⽆参构造和类⾥⾯所有属性的getter/setter⽅法。可以简化我们代码的开发。（需要安装Lombok插件和引⼊Lombok依赖）。</p><p>例如下⾯的⼀个实体类,引⼊Lombok后，可以⾃动⽣成GET/SET⽅法和⽆参构造函数。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDYxNTk3MWM4NjNiMGIzMjMwOTdjMjZlMzIzMDliNGNfaFhlNTJmeUtvTnc5eGE4Z0JzTDVLWFpEU3VBYjJLa0ZfVG9rZW46Ym94Y256enJOWnJjQll4OWthV29pZHA5YXBnXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p> 编译后的class为:可以看到不仅帮我们生成了get和set ，同时也有默认的无参构造器</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MTY3YmIwZjI2YmRmNzAyZTBmNDhlZDRjNTYxMWMwNGRfMUJCSHRYakFhZGE3SWs5ZDZaYUtXenJrQzlNZnhnMUJfVG9rZW46Ym94Y25NTFdRejU2eUR3WURXVzFtM0RRNmZoXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p>那么怎么自动生成有参构造器呢？使用@Builder注解，将会帮助我们⽣成全属性的构造⽅法。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NjM2NWEzZjliYWQwYzI2NjA1OGNiZTY2MGUzZGQxOGZfRldlMzh5WHJMbTBWVHlRR1ZsclUxVzJoZHE3T1Z4TUVfVG9rZW46Ym94Y25NRTMxN0hYbzhDY0tLNFdDQktPNXpLXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p>编译后的class为：可以看到 已经帮我们构建好了全属性的构造方法，但是如果值只引用@Builder注解是无法生成get和set的。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YjQ5OGQzZmQxODU4MGU1MmFjNDhjMDdkNDI3MGZiNWNfTjhoTjJoS0pFdk9PdjBtcUkwd0RIdVhjTnZKTmNJY2NfVG9rZW46Ym94Y25EOHp6ZXY4TXhIZUQ4cFZtczRJSFFoXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p>但是如果同时使⽤@Data和@Builder的话，可以看出尽管⽣成了GET/SET⽅法，但是⽆参构造⽅法没有了，这显然是不能接受的，因为很多框架都会调⽤⽆参构造去创建对象。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MTQ4NTI4Y2IwMzVjNzE4NDdjYzQxYjNlNzA1NzBlMTNfRlQ1VDZmSEJPOTY2NUlhMlp6Q1NrbTkwTnJFYnhaZ2xfVG9rZW46Ym94Y25SZ21KUXoydllhRHdobjVwWFM5MTFkXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p>编译后的class：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTY5YTlkZTQwM2JjYTBlMzQwNzhmMzYzYWQ3YjU0ZTNfWFJqMGlzYzJjamUxQ21PNTRpaUtFQkZlZDI0UDBNbGZfVG9rZW46Ym94Y25WcGNDZFBTcVRVQkJMS1RLczZxVWliXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>我们尝试在Tet1类，⼿动添加⽆参构造⽅法。编译发现报错不通过：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YWQ0ZThlMjRiNjlkZjcxODQ4ODFjZjA1YzE3YzIwNGRfSE1YTWxJWmFSOVQ2SkYzenp2QmdkSUNPOUtCMmRTU29fVG9rZW46Ym94Y25PYnZLaGg3WGYzQWJzUHRFRTJlM3diXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><strong>解决方法</strong></h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><strong>方法一</strong></h3><p>Lombok同时使⽤@Data和@Builder的时候，如果要⽣成⽆参构造，需要在代码⾥⾯⼿动引⼊注解@Tolerate，让Lombok在⽣成类的时候，对指定的构造函数不感知。</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MjIwZTg1YWI3NWNhMzFjMjI4OWVmZmVkYTc5OGY0MWZfMWRMcHZGcFloeDEycGdqbDVIMDBvbzlGWGRDZm5JQTZfVG9rZW46Ym94Y25rTkxRRTFXVkZvQjcycVl1cmNMR2djXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><strong>方法二</strong></h3><p>直接使用无参构造器+有参构造器的方式，@RequiredArgsConstructor 来构建有参，@NoArgsConstructor来构建无参构造器，如图所示：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=YmJjZmQ4YWJlNjc5NjZiYWUwNzllNWFiNDg2MmJhZmFfT2lubWJtbnZnWnpMYmpFcXRMcE1jZkIyUm13MGtya1dfVG9rZW46Ym94Y25QZjVXclRjMTEyUm0yS2RjMVM5bERjXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>编 译后效果：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MTYwNDUwNmVmODg3NTUyMjZmZjAzODk3MjM2MDBmZDhfb2hLTlgxWHB0eGNqRGZDT2M4NWlNN3NNeHNHSlpKdFNfVG9rZW46Ym94Y25QV28xT1p4YUUxRGdEUjlyaThad3ZEXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><h2 id="Lombok原理"><a href="#Lombok原理" class="headerlink" title="Lombok原理"></a><strong>Lombok原理</strong></h2><p>Java的编译分为以下⼏个阶段：</p><p>解析与填充符号表-&gt;注解处理-&gt;分析与字节码⽣成-&gt;⽣成⼆进制class⽂件。</p><ul><li><p>Lombok 使⽤的是 JDK 6 实现的 JSR 269: Pluggable Annotation Processing API (编译期的注解处理器)，它是在编译期时把 Lombok 的注解代码，转换为常规的 Java ⽅法⽽实现注⼊。</p></li><li><p>在编译期阶段，当 Java 源码被抽象成语法树 (AST) 之后，Lombok 会根据⾃⼰的注解处理器动态的修改AST，增加新的代码 (节点)，在这⼀切执⾏之后，再通过分析⽣成了最终的字节码 (.class) ⽂件，这就是Lombok 的执⾏原理。</p></li></ul><p>可以借助注解处理器实现⼀个简单的 Setter，我们的实现步骤是:</p><ul><li><p>⾃定义⼀个注解标签接⼝，并实现⼀个⾃定义的注解处理器；</p></li><li><p>利⽤ tools.jar 的 javac api 处理 AST (抽象语法树)3. 使⽤⾃定义的注解处理器编译代码。</p></li></ul><p>1.定义⾃定义注解和注解处理器</p><p>⾸先创建⼀个 MySetter.java ⾃定义⼀个注解，代码如下：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWQ2Mjg2NzlhYjQyMWQyNGJjYjY3ODNkMzFiMDAwYzZfOFBFU2ZGdGVxak0zWXBROUp2eE5PNUhxTU5mMk1aY1pfVG9rZW46Ym94Y256Yklxb0xuNXQ4RFpPNmpXN2VQY0NiXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p>再实现⼀个⾃定义的注解处理器，代码如下：</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MGQwYzdlYTFmZDcwYmFjOWYwOGFiMTkzMzg3NGRiZDhfa3F1YzdCbTVoaHo0Q2RVMnRteWNvYkRoSXAzWUUwcEJfVG9rZW46Ym94Y256Mk1wSEhOd2JWdUU1aXVsclRWT2dkXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NjRjNzI4NTFiZTUyYWFlMDU1YjdkZDlkZWEzZWIyYjJfSUhDQURTZzZ1RHBGZjlMQnAyZ01mZUNJRTluTFBHS0dfVG9rZW46Ym94Y254Z3NqeUdjV3JmZno2a3JmcVlFMkhkXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=NTUzNTUzNzlkNjUwMjI5YTNjZGYxOGQ4MzIxMDdiMTVfazFKZ3ZQUlNzVjRnZnFZMzhYdnpjelc0eWZFaGh0VlVfVG9rZW46Ym94Y25IeHo1V1ppUHV3SlltVzA1RUp5VnZkXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p>测试类如下:</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=OTI5NDE5N2QzNDE5YjU2OWVjY2RhNjU1ZWJlZmE2ZmFfMXR3bEl6QzRnMk95QWxvV3ZHUVJuR2pLeW9uNTVwQkxfVG9rZW46Ym94Y252bXpXR3RwQUhTaTBaOG9RaEZTYVZkXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p>2.对注解处理器进⾏编译，随后使⽤注解处理器对类进⾏编译</p><p>⾸先需要先对注解处理器进⾏编译（javac -cp ⽤于引⼊第三⽅jar包进⾏编译）</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MGFjYzJiZDcwMTU0MjUwODhiOGJjYTRhODk3NzFjMDFfWnBxQ3E3TFgySTFDZTkyZTJrRWpva1RPVnozVG1IZExfVG9rZW46Ym94Y254TEJzQ0tUOU1lVmh5enVTY3BISGJnXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p>然后使⽤注解处理器对这个Person测试类进⾏编译:</p><p>这时候再看⽣成的Person.class，可以发现Setter⽅法已经⽣成了:</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=ODQ2NzMxZTAyZWUwMmI2OTdkMGQ5ZTIyOGJhMmMxYmRfSUJGbUtuaFZZa1RHZGg3c2lSc0t1V3RCcDA2UXBtOFpfVG9rZW46Ym94Y25BQUk1c1VrMTlhSzV1NTdmZ2ZpUHhjXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><p><img src="https://jbfhxmeaps.feishu.cn/space/api/box/stream/download/asynccode/?code=MjI3MGY4YzNkNmVlMmRhYzAyOTVmZDY3ZDFiMDc1ODZfWEtaNnFBcWt0b1RHUGpaa1pYVnRkM2M5bFhrS2R2R1ZfVG9rZW46Ym94Y250ck10TWdtMllhelpqTGZKZ0xsc1ViXzE2Njg5MzY1OTA6MTY2ODk0MDE5MF9WNA" alt="img"></p><p>图片</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>当然尽管测试类已经⽣成Setter⽅法，但是因为是在编译时期⽣成的，因此我们在开发的时候是没法直接调⽤Setter⽅法的，因此Lombok提供了插件机制，⽅便我们在开发的时候可以直接去调⽤Lombok的特性。</p><p>热门内容：</p><ul><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxNjk4ODE4OQ==&mid=2247534179&idx=1&sn=819e79794b5796daacc74ed2d15ebf41&chksm=9bee6711ac99ee072e48d6d23b2f9af81527bf5e005afaef7e8cd575b65a95d2aea8fa07401e&scene=21#wechat_redirect">业务开发时，接口不能对外暴露怎么办？</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxNjk4ODE4OQ==&mid=2247534166&idx=1&sn=14a69bf61866ffc02c4eef6e91b4b257&chksm=9bee6724ac99ee327e825fc7df6fa5826e648dfe92a90730b7695a2f92f03ea91701bc0d8cf0&scene=21#wechat_redirect">我，40岁码农，还在荷兰写低级代码，不敢回国…</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxNjk4ODE4OQ==&mid=2247534160&idx=1&sn=2d4fcb36152cff3758839c5888c02112&chksm=9bee6722ac99ee34fdb054d330d39ed60511afa9c21c82b260bbe5117268248d8f014b84dd7e&scene=21#wechat_redirect">面试官问：select……for update会锁表还是锁行？</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxNjk4ODE4OQ==&mid=2247534154&idx=1&sn=05480a5a789a99dec01d5c0bfbf77669&chksm=9bee6738ac99ee2e43d1647eca233b4e86616e8526a36e5397436b179c8bc333ce708c2938d2&scene=21#wechat_redirect">就加了一行log日志，结果引发了 P1 线上事故…</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxNjk4ODE4OQ==&mid=2247534148&idx=1&sn=a081b14bf90d5c7ac0bf85d541407073&chksm=9bee6736ac99ee20c4a9a27ff634a3902ba5a77ddb10a63330cc01718430f0bb2bb2726d654a&scene=21#wechat_redirect">别用XShell了，这款SSH工具绝对惊艳，还支持网页版…..</a></p></li><li></li></ul><p>最近面试BAT，整理一份面试资料《<strong>Java面试BAT通关手册</strong>》，覆盖了Java核心技术、JVM、Java并发、SSM、微服务、数据库、数据结构等等。</p><p>获取方式：点“在看”，关注公众号并回复 666 领取，更多内容陆续奉上。</p><p><strong>明天见(｡･ω･｡)</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>integrate_saml</title>
      <link href="ae50aff9.html"/>
      <url>ae50aff9.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://medium.com/digital-software-architecture/spring-boot-spring-security-with-saml-2-83d87df5b470">Spring Boot + Spring Security with SAML 2.0 | Digital Software Architecture</a></p><p><a href="https://github.com/okta/okta-sdk-java/tree/master/integration-tests">okta-sdk-java/integration-tests at master · okta/okta-sdk-java</a></p><p><a href="https://developer.okta.com/docs/concepts/redirect-vs-embedded/#:~:text=Okta%20deployment%20models%20%E2%80%94%20redirect%20vs.%20embedded">Okta deployment models — redirect vs. embedded</a></p><p><img src="../img/image-20221114175806875.png" alt="image-20221114175806875"></p><p><img src="../img/image-20221114175729566.png" alt="image-20221114175729566"></p><p><img src="../img/image-20221114205002949.png" alt="image-20221114205002949"></p><p><a href="https://www.securew2.com/blog/oauth-vs-openid-which-is-better#:~:text=OpenID%20vs.,accounts%20that%20you%20already%20have.">OAuth Vs. OpenID? Which is better?</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2022个人博客网站搭建</title>
      <link href="df34252.html"/>
      <url>df34252.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.reaktor.com/blog/how-to-deal-with-life-after-heroku/">Life after Heroku: What’s a dev to do? - Reaktor</a></p><ul><li><p>Fly.io 让您可以部署 Docker 映像，还支持免费设置 PostgreSQL 数据库。他们的免费套餐包括 256MB RAM 和 3GB 持久存储，没有休眠的测功机——这比 Heroku 的要好。虽然你很可能需要一个 Dockerfile，但这并不难，而且学习 Docker 是你未来项目的一项很好的可转移技能。此外，作为一个巨大的奖励，每个组织都定义了免费层级，因此您可以为每个项目拥有单独的免费层级配额！他们基于 Web 的工具以及 CLI 都很好用。</p></li><li><p>Vercel 和 Netlify 都允许您部署静态站点和 lambda 函数，其中 Vercel 专门为部署 Next.js 应用程序（来自同一家公司的 React 框架）量身定制。除了慷慨的免费套餐外，Vercel 还拥有非常好的用户体验。作为顶部的樱桃，两者都自动为 Github 上的每个 Pull Request 构建一个预览站点。</p></li><li><p>Render 有一个类似于 Heroku 历史上的免费层：512MB RAM；服务在 15 分钟不活动后停止，这意味着冷启动延迟；您帐户中所有免费 Web 服务的每月最长运行时间为 750 小时（一个月大约有这么多小时）；静态网站是免费的。</p></li><li><p>GitHub Pages 和 Actions 也是静态站点的流行选项。</p></li><li><p>Heroku 可能仍然是您的首选。爱好 dynos 每月 7 美元，您可以升级并保持您的项目在原处并不间断地运行（除了您的钱包）。当然也可以使用更高的等级。</p></li></ul><p>我之前用过Github Pages,Coding的相关博客搭建现在要么不提供服务,要么被墙,看到现在还支持的服务就上述几个,我目前使用的是vervel还算稳定.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jackson-redis-集成</title>
      <link href="ef9a1729.html"/>
      <url>ef9a1729.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://reflectoring.io/jackson/">All You Need To Know About JSON Parsing With Jackson</a></p><p>对应spring 集成redis来实现,需要主要在序列化 对象过程中,如果使用Jackson来序列化需要注意Jackson相关的配置.目前就先补充这么多</p><p>下面是摘录官网的文章来大概展示然后集成最后会补充注意事项 <a href="https://juejin.cn/post/6844904094545477640">Introduction to Spring Data Redis | Baeldung , Spring Data Redis 最佳实践！ - 掘金</a></p><h3 id="Spring-Cache-简介"><a href="#Spring-Cache-简介" class="headerlink" title="Spring Cache 简介"></a>Spring Cache 简介</h3><blockquote><p>当Spring Boot 结合Redis来作为缓存使用时，最简单的方式就是使用Spring Cache了，使用它我们无需知道Spring中对Redis的各种操作，仅仅通过它提供的@Cacheable 、@CachePut 、@CacheEvict 、@EnableCaching等注解就可以实现缓存功能。</p></blockquote><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><h4 id="EnableCaching"><a href="#EnableCaching" class="headerlink" title="@EnableCaching"></a>@EnableCaching</h4><p>开启缓存功能，一般放在启动类上。</p><h4 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h4><p>使用该注解的方法当缓存存在时，会从缓存中获取数据而不执行方法，当缓存不存在时，会执行方法并把返回结果存入缓存中。<code>一般使用在查询方法上</code>，可以设置如下属性：</p><ul><li>value：缓存名称（必填），指定缓存的命名空间；</li><li>key：用于设置在命名空间中的缓存key值，可以使用SpEL表达式定义；</li><li>unless：条件符合则不缓存；</li><li>condition：条件符合则缓存。</li></ul><h4 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h4><p>使用该注解的方法每次执行时都会把返回结果存入缓存中。<code>一般使用在新增方法上</code>，可以设置如下属性：</p><ul><li>value：缓存名称（必填），指定缓存的命名空间；</li><li>key：用于设置在命名空间中的缓存key值，可以使用SpEL表达式定义；</li><li>unless：条件符合则不缓存；</li><li>condition：条件符合则缓存。</li></ul><h4 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h4><p>使用该注解的方法执行时会清空指定的缓存。<code>一般使用在更新或删除方法上</code>，可以设置如下属性：</p><ul><li>value：缓存名称（必填），指定缓存的命名空间；</li><li>key：用于设置在命名空间中的缓存key值，可以使用SpEL表达式定义；</li><li>condition：条件符合则缓存。</li></ul><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul><li>在pom.xml中添加项目依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>修改配置文件application.yml，添加Redis的连接配置；</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.6</span><span class="number">.139</span> <span class="comment"># Redis服务器地址</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">password:</span> <span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">1000ms</span> <span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="string">复制代码</span></span><br></pre></td></tr></table></figure><ul><li>在启动类上添加@EnableCaching注解启动缓存功能；</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableCaching</span></span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class MallTinyApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(MallTinyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>接下来在PmsBrandServiceImpl类中使用相关注解来实现缓存功能，可以发现我们获取品牌详情的方法中使用了@Cacheable注解，在修改和删除品牌的方法上使用了@CacheEvict注解；</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PmsBrandService实现类</span></span><br><span class="line"><span class="comment"> * Created by macro on 2019/4/19.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PmsBrandServiceImpl</span> <span class="title">implements</span> <span class="title">PmsBrandService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PmsBrandMapper brandMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheEvict(value = RedisConfig.REDIS_KEY_DATABASE, key = <span class="meta-string">&quot;&#x27;pms:brand:&#x27;+#id&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> int update(<span class="built_in">Long</span> id, PmsBrand brand) &#123;</span><br><span class="line">        brand.setId(id);</span><br><span class="line">        <span class="keyword">return</span> brandMapper.updateByPrimaryKeySelective(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheEvict(value = RedisConfig.REDIS_KEY_DATABASE, key = <span class="meta-string">&quot;&#x27;pms:brand:&#x27;+#id&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> int delete(<span class="built_in">Long</span> id) &#123;</span><br><span class="line">        <span class="keyword">return</span> brandMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = RedisConfig.REDIS_KEY_DATABASE, key = <span class="meta-string">&quot;&#x27;pms:brand:&#x27;+#id&quot;</span>, unless = <span class="meta-string">&quot;#result==null&quot;</span>)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PmsBrand getItem(<span class="built_in">Long</span> id) &#123;</span><br><span class="line">        <span class="keyword">return</span> brandMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置Redisconfig类 </p><ul><li>我们可以通过给RedisTemplate设置JSON格式的序列化器，并通过配置RedisCacheConfiguration设置超时时间来实现以上需求，此时别忘了去除启动类上的@EnableCaching注解，具体配置类RedisConfig代码如下；</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis配置类</span></span><br><span class="line"><span class="comment"> * Created by macro on 2020/3/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis数据库自定义key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> final <span class="built_in">String</span> REDIS_KEY_DATABASE=<span class="string">&quot;mall&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; <span class="function"><span class="title">redisTemplate</span>(<span class="params">RedisConnectionFactory redisConnectionFactory</span>)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;<span class="built_in">Object</span>&gt; serializer = redisSerializer();</span><br><span class="line">        RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(serializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(serializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisSerializer&lt;<span class="built_in">Object</span>&gt; <span class="function"><span class="title">redisSerializer</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//创建JSON序列化器</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;<span class="built_in">Object</span>&gt; serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(<span class="built_in">Object</span>.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> serializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheManager <span class="function"><span class="title">redisCacheManager</span>(<span class="params">RedisConnectionFactory redisConnectionFactory</span>)</span> &#123;</span><br><span class="line">        RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//设置Redis缓存有效期为1天</span></span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer())).entryTtl(Duration.ofDays(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(redisCacheWriter, redisCacheConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>此时我们再次调用获取商品详情的接口进行测试，会发现Redis中已经缓存了标准的JSON格式数据，并且超时时间被设置为了1天。</li></ul><h3 id="Finaly重中之重就是-序列化要注意"><a href="#Finaly重中之重就是-序列化要注意" class="headerlink" title="Finaly重中之重就是 序列化要注意"></a>Finaly重中之重就是 序列化要注意</h3><p><img src="../img/image-20221109221426931.png" alt="image-20221109221426931"></p><p>作者：MacroZheng<br>链接：<a href="https://juejin.cn/post/6844904094545477640">https://juejin.cn/post/6844904094545477640</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql相关内容</title>
      <link href="f0e475b6.html"/>
      <url>f0e475b6.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES                                &#x2F;&#x2F;列出 MySQL Server 数据库。</span><br><span class="line">SHOW TABLES [FROM db_name]                    &#x2F;&#x2F;列出数据库数据表。</span><br><span class="line">SHOW CREATE TABLES tbl_name                    &#x2F;&#x2F;导出数据表结构。</span><br><span class="line">SHOW TABLE STATUS [FROM db_name]              &#x2F;&#x2F;列出数据表及表状态信息。</span><br><span class="line">SHOW COLUMNS FROM tbl_name [FROM db_name]     &#x2F;&#x2F;列出资料表字段</span><br><span class="line">SHOW FIELDS FROM tbl_name [FROM db_name]，DESCRIBE tbl_name [col_name]。</span><br><span class="line">SHOW FULL COLUMNS FROM tbl_name [FROM db_name]&#x2F;&#x2F;列出字段及详情</span><br><span class="line">SHOW FULL FIELDS FROM tbl_name [FROM db_name] &#x2F;&#x2F;列出字段完整属性</span><br><span class="line">SHOW INDEX FROM tbl_name [FROM db_name]       &#x2F;&#x2F;列出表索引。</span><br><span class="line">SHOW STATUS                                  &#x2F;&#x2F;列出 DB Server 状态。</span><br><span class="line">SHOW VARIABLES                               &#x2F;&#x2F;列出 MySQL 系统环境变量。</span><br><span class="line">SHOW PROCESSLIST                             &#x2F;&#x2F;列出执行命令。</span><br><span class="line">SHOW GRANTS FOR user                         &#x2F;&#x2F;列出某用户权限</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SHOW DATABASES </span><br><span class="line">SHOW TABLES FROM DB_NAME</span><br><span class="line"></span><br><span class="line">SHOW COLUMNS FROM </span><br><span class="line">select * from information_schema.columns where table_schema&#x3D;&#39;DB_NAME&#39;</span><br><span class="line"></span><br><span class="line">select table_name,column_name,collation_name,character_set_name from information_schema.columns where table_schema&#x3D;&#39;DB_NAME&#39; </span><br><span class="line">select table_name,column_name,column_name,collation_name,character_set_name from information_schema.columns where table_schema&#x3D;&#39;DB_NAME&#39; and column_name like &#39;%description&#39;</span><br><span class="line">select * from information_schema.columns where table_schema&#x3D;&#39;DB_NAME&#39; and column_name like &#39;%description&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select table_name,column_name,collation_name,character_set_name from information_schema.columns where table_schema&#x3D;&#39;DB_NAME&#39; and COLUMN_NAME like &#39;%a%&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询逻辑和相关</p><h2 id="编码集"><a href="#编码集" class="headerlink" title="编码集"></a>编码集</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引和锁相关的整理</title>
      <link href="2fd84806.html"/>
      <url>2fd84806.html</url>
      
        <content type="html"><![CDATA[<p>ToDo</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html">MySQL :: MySQL 5.7 Reference Manual :: 14.7.2.1 Transaction Isolation Levels</a></p><p>针对MySQL5,.7</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring-data-jap入门和测试用例以及介绍</title>
      <link href="db9f3902.html"/>
      <url>db9f3902.html</url>
      
        <content type="html"><![CDATA[<h2 id="springJpa介绍"><a href="#springJpa介绍" class="headerlink" title="springJpa介绍"></a>springJpa介绍</h2><p>springjpa 是springdata下面的框架用来对接数据 是门面框架定义 数据交互到数据库,很多的接口规范使用的是 JPA规范 *<em>javax.persistence.**</em> ,我们选择内部实现为habernate ,具体的实现可以选择xxxx等,</p><p>下面是关于spring -orm的介绍<a href="https://www.geeksforgeeks.org/spring-orm-framework/">Spring - ORM Framework - GeeksforGeeks</a></p><p><strong>Spring-ORM</strong> is a technique or a Design Pattern used to access a relational database from an object-oriented language. ORM (Object Relation Mapping) covers many persistence technologies. They are as follows:</p><ul><li><strong>JPA(Java Persistence API):</strong> It is mainly used to persist data between Java objects and relational databases. It acts as a bridge between object-oriented domain models and relational database systems.</li><li><strong>JDO(Java Data Objects):</strong> It is one of the standard ways to access persistent data in databases, by using plain old Java objects (POJO) to represent persistent data.</li><li><strong>Hibernate –</strong> It is a Java framework that simplifies the development of Java applications to interact with the database.</li><li><strong>Oracle Toplink, and iBATIS:</strong> Oracle TopLink is a mapping and persistence framework for Java development.</li></ul><p>需要了解常用的注解</p><ul><li>支持基于 Spring 和 JPA 构建存储库</li><li>支持<a href="http://www.querydsl.com/">Querydsl</a>谓词，因此支持类型安全的 JPA 查询</li><li>透明审计</li><li>分页支持、动态查询执行、集成自定义数据访问代码的能力</li><li><code>@Query</code>在引导时验证带注释的查询</li><li>支持基于 XML 的实体映射</li><li>通过引入基于 JavaConfig 的存储库配置<code>@EnableJpaRepositories</code></li></ul><h2 id="字段映射"><a href="#字段映射" class="headerlink" title="字段映射"></a>字段映射</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Table(name &#x3D; &quot;malfunction_report&quot;) &#x2F;&#x2F;标记表的名称</span><br><span class="line">@Entity：标识这是一个JPA的实体，当项目启动时会更具这个实体创建相应的表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Id &#x2F;&#x2F;标记表的自增的ID</span><br><span class="line">@GeneratedValue</span><br><span class="line"></span><br><span class="line">@Column(name &#x3D; &quot;items&quot;)&#x2F;&#x2F;标记字段的对应的映射</span><br><span class="line">@Convert(converter &#x3D; JpaConverterListJson.class)&#x2F;&#x2F; 保存和查询时能解析为对应的变量</span><br><span class="line">@Enumerated(EnumType.STRING)&#x2F;&#x2F;对应枚举这种最后在数据库需要保存为你字符串</span><br></pre></td></tr></table></figure><h3 id="查询继承JpaRepository"><a href="#查询继承JpaRepository" class="headerlink" title="查询继承JpaRepository"></a>查询继承JpaRepository</h3><p>直接可以字段拼接一个简单的查询,在继承了JpaRepository后可以发现,</p><h3 id="注解query"><a href="#注解query" class="headerlink" title="注解query"></a>注解query</h3><p>使用注解可以使用jpa定义的hql来查询利用对象的映射关系,而且比较存在的ORM(<em>Object-Relational Mapping</em>)逻辑,同时如果部分字段需要调用特殊的函数也支持直接写SQL,需要在SQL后用逗号分割讲native设置为true</p><h3 id="查询继承JpaSpecificationExecutor的灵活查询"><a href="#查询继承JpaSpecificationExecutor的灵活查询" class="headerlink" title="查询继承JpaSpecificationExecutor的灵活查询"></a>查询继承JpaSpecificationExecutor的灵活查询</h3><p>org.springframework.data.jpa.domain.Specification 需要实现<strong>toPredicate</strong>这里需要多个学习多个对象</p><ul><li><p>Root<T> root</p><p>主要要使用</p></li><li><p>CriteriaQuery&lt;?&gt; query</p><p>criterialQuery ToDo</p></li><li><p>CriteriaBuilder criteriaBuilder</p><p>CriteriaBuilder todo</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javax.persistence.criteria.Predicate</span><br><span class="line"></span><br><span class="line">javax.persistence.criteria.Expression</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述对象能最大程度实现灵活的查询,加上 org.springframework.data.domain.Page可以最大程度的满足查询的需要</p><h2 id="编辑和新增数据"><a href="#编辑和新增数据" class="headerlink" title="编辑和新增数据"></a>编辑和新增数据</h2><p>在自己实现的方法需要 @modify才会生效</p><p><a href="https://github.com/pkainulainen/spring-data-jpa-examples/blob/master/tutorial-part-seven/src/test/java/net/petrikainulainen/spring/datajpa/repository/PersonSpecificationsTest.java">spring-data-jpa-examples/PersonSpecificationsTest.java at master · pkainulainen/spring-data-jpa-examples</a></p><p><a href="https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-seven-pagination/">Spring Data JPA Tutorial: Pagination</a></p><p><a href="https://www.baeldung.com/mockito-java-8">Mockito’s Java 8 Features | Baeldung</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac初始化环境配置加优化</title>
      <link href="ea7eedfa.html"/>
      <url>ea7eedfa.html</url>
      
        <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>Cmd + Shift +。 （点）  显示隐藏文件</p><p>fn + command + enter    insert快捷键</p><p>option + cmd +l 格式化</p><p>ctr + option +o 除去多的导入包</p><p>cmd+ + 增加</p><p>cmd+ - 缩小</p><p>cmd +n 新窗口</p><p>cmd+t 新标签页</p><p>cmd+w 退出当前页</p><p>cmd+ option + p  显示当前路径</p><p>ctrl+左右的箭头切换工作区</p><p>三指拖移动  技术右键加移动</p><p>发散手指 显示dashboard </p><h2 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h2><p>init.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        def ALIYUN_REPOSITORY_URL &#x3D; &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#39;</span><br><span class="line">        def ALIYUN_JCENTER_URL &#x3D; &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;jcenter&#39;</span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            if(repo instanceof MavenArtifactRepository)&#123;</span><br><span class="line">                def url &#x3D; repo.url.toString()</span><br><span class="line">                if (url.startsWith(&#39;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#39;)) &#123;</span><br><span class="line">                    project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                if (url.startsWith(&#39;https:&#x2F;&#x2F;jcenter.bintray.com&#x2F;&#39;)) &#123;</span><br><span class="line">                    project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot;</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url ALIYUN_REPOSITORY_URL</span><br><span class="line">            url ALIYUN_JCENTER_URL</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="zshrc"><a href="#zshrc" class="headerlink" title="~/.zshrc"></a>~/.zshrc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;zulu-11.jdk&#x2F;Contents&#x2F;Home</span><br><span class="line">export GRADLE_HOME&#x3D;&#x2F;Users&#x2F;XXX&#x2F;gradle-7.5</span><br><span class="line">export GRADLE_USER_HOME&#x3D;&#x2F;Users&#x2F;XXXX&#x2F;gradle-7.5&#x2F;repository</span><br><span class="line">export PATH&#x3D;$PATH:$GRADLE_HOME&#x2F;bin</span><br></pre></td></tr></table></figure><p>使用 软连接python3 到python</p><blockquote><p>python: aliased to /usr/local/bin/python3</p></blockquote><h2 id="V2RayX-提供三种模式："><a href="#V2RayX-提供三种模式：" class="headerlink" title="V2RayX 提供三种模式："></a>V2RayX 提供三种模式：</h2><p><strong>全局模式：</strong>如果网络流量服从操作系统的网络规则，V2RayX 会要求 macOS 将所有互联网流量路由到 v2ray 核心。</p><p><strong>PAC 模式：</strong>macOS 将根据 pac 文件确定路由，某些流量可能会路由到 v2ray 核心。</p><p><strong>手动模式：</strong>V2RayX 不会修改任何 macOS 网络设置，只会启动或停止 v2ray 核心。</p><p>菜单列表中的选项 Routing Rule 确定 v2ray 核心如何处理传入流量。核心路由规则适用于上述所有三种模式。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>程序员梗百科</title>
      <link href="88dbcb79.html"/>
      <url>88dbcb79.html</url>
      
        <content type="html"><![CDATA[<p>转载自 <a href="https://mp.weixin.qq.com/s/EcV8ZoPaBKmrbo_Ohqzg7g">开发常用的缩写 你能看懂几个？</a></p><h2 id="LGTM"><a href="#LGTM" class="headerlink" title="LGTM"></a>LGTM</h2><p>Look Good To Me 对我来说，还不错 常见于 Code Review中，表示认可，同意merge合并代码到远程仓库。</p><h2 id="ASAP"><a href="#ASAP" class="headerlink" title="ASAP"></a>ASAP</h2><p>As  Soon As  Possible 尽快</p><h2 id="WIP"><a href="#WIP" class="headerlink" title="WIP"></a>WIP</h2><p>Work In Progress「进展中」常见词汇， 这里作为 Best Practice单独提出来， 主要针对改动较多的PR。</p><p>标题或Tag加上WIP，表示尚未完成，这样别人可以先review 已提交的部分</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL:DR"></a>TL:DR</h2><p>Too Long.Didn’ t Read 「太长懒得看」</p><h2 id="NP"><a href="#NP" class="headerlink" title="NP"></a>NP</h2><p>no  problem 没问题</p><h2 id="TBH"><a href="#TBH" class="headerlink" title="TBH"></a>TBH</h2><p>pull  Request 拉取请求</p><h2 id="TPAL"><a href="#TPAL" class="headerlink" title="TPAL"></a>TPAL</h2><p>Please Take A Look 用来提示别人来看一下</p><h2 id="TBH-1"><a href="#TBH-1" class="headerlink" title="TBH"></a>TBH</h2><p>To be honest.老实说 </p><h2 id="ACK"><a href="#ACK" class="headerlink" title="ACK"></a>ACK</h2><p>Acknowledgement</p><p>「承认，确认，同意」</p><p>i.e.agreed/accepted change </p><h2 id="TBD"><a href="#TBD" class="headerlink" title="TBD"></a>TBD</h2><p>To Be Done(or Defined/Discussed/ Decided/Determined).</p><p>「未完成，将被做」 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lucene的demo使用ikAnalyzer</title>
      <link href="c3e283f6.html"/>
      <url>c3e283f6.html</url>
      
        <content type="html"><![CDATA[<p>–2022-7-7补充</p><p><a href="https://www.amazingkoala.com.cn/Lucene/Search/2021/0817/198.html">GeoQuery（一）-html</a></p><p><a href="https://www.cnblogs.com/hanfight/p/5776769.html">Lucene Spatial构建地理空间索引 - 韩要奋斗 - 博客园</a></p><p>Lucene下面关于地理信息的内容</p><p><a href="https://blog.csdn.net/Never_1213/article/details/105093018">lucene多条件查询_三天打鱼_的博客-CSDN博客_lucene多条件查询</a></p><h1 id="lucene和ik分词器"><a href="#lucene和ik分词器" class="headerlink" title="lucene和ik分词器"></a>lucene和ik分词器</h1><p><a href="https://www.cnblogs.com/chenying99/archive/2012/06/23/2559621.html">使用Lucene-Spatial实现集成地理位置的全文检索 - 刺猬的温驯 - 博客园</a></p><p><a href="https://blog.csdn.net/hj7jay/article/details/101017364">Springboot下的Lucene(详细版)_程序猿开发日志【学习永无止境】-CSDN博客</a></p><p><a href="http://majsunflower.cn/2020/05/10/Lucene%E6%90%AD%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%88%9D%E6%8E%A2/">Lucene搭建搜索引擎初探 | 大嘴怪的小世界</a></p><p><img src="../img/1641799344593-2bfa1c5c-6702-49ee-ad16-a2ad4715d778.png" alt="image.png"></p><p>索引(Index) –&gt; 段(segment) –&gt; 文档(Document) –&gt; 域(Field) –&gt; 词(Term)</p><p><a href="https://hub.fastgit.org/blueshen/ik-analyzer.git">https://hub.fastgit.org/blueshen/ik-analyzer.git</a> 使用的ik分词器地址同时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">       <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;lucene.version&gt;8.9.0&lt;/lucene.version&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lucene.version</span>&gt;</span>7.2.1<span class="tag">&lt;/<span class="name">lucene.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- Lucene 核心库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Lucene 解析库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Lucene 附加的分析库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-test-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.wltea.ik-analyzer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ik-analyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用luke来查询索引的数据</p><p><img src="../img/image-20220111100347933.png" alt="image-20220111100347933"></p><h2 id="lucene集成ik和pinyin分词器"><a href="#lucene集成ik和pinyin分词器" class="headerlink" title="lucene集成ik和pinyin分词器"></a>lucene集成ik和pinyin分词器</h2><p> <a href="..%5Cfiles%5Cpinyin4j-2.5.1.jar">pinyin4j-2.5.1.jar</a> </p><p> <a href="..%5Cfiles%5CpinyinAnalyzer4.3.1.jar">pinyinAnalyzer4.3.1.jar</a> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.belerweb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;system&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/resources/lib/pinyin4j-2.5.0.jar&lt;/systemPath&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;pom.basedir&#125;/src/main/resources/lib/pinyin4j-2.5.1.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shentong<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyinAnalyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;pom.basedir&#125;/src/main/resources/lib/pinyinAnalyzer4.3.1.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该部分参考</p><ul><li><a href="https://blog.csdn.net/jayson1001/article/details/78113306">lucene6.6+拼音分词+ik分词实现_jayson1001的博客-CSDN博客_lucene 拼音分词</a></li></ul><p>实现的原理就是使用创建个 IndexPinyinAnalyzer 使用IKTokenizer 和PinyinTransformTokenFilter实现分词汉字和拼音的效果</p><p>测试的部分代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    Analyzer analyzer &#x3D; new IndexPinyinAnalyzer(false);</span><br><span class="line">    TokenStream tokenStream &#x3D; analyzer.tokenStream(&quot;fff&quot;, &quot;标高1-KL33&quot;);</span><br><span class="line">    &#x2F;&#x2F;添加一个引用，可以获得每个关键词</span><br><span class="line">    CharTermAttribute charTermAttribute &#x3D; tokenStream.addAttribute(CharTermAttribute.class);</span><br><span class="line">    &#x2F;&#x2F;添加一个偏移量的引用，记录了关键词的开始位置以及结束位置</span><br><span class="line">    OffsetAttribute offsetAttribute &#x3D; tokenStream.addAttribute(OffsetAttribute.class);</span><br><span class="line">    &#x2F;&#x2F;将指针调整到列表的头部</span><br><span class="line">    tokenStream.reset();</span><br><span class="line">    &#x2F;&#x2F;遍历关键词列表，通过incrementToken方法判断列表是否结束</span><br><span class="line">    while(tokenStream.incrementToken()) &#123;</span><br><span class="line">        &#x2F;&#x2F;关键词的起始位置</span><br><span class="line">        System.out.println(&quot;start---------------&quot; + offsetAttribute.startOffset());</span><br><span class="line">        &#x2F;&#x2F;取关键词</span><br><span class="line">        System.out.println(&quot;分词内容： &quot;+charTermAttribute);</span><br><span class="line">        &#x2F;&#x2F;结束位置</span><br><span class="line">        System.out.println(&quot;end---------------------&quot; + offsetAttribute.endOffset());</span><br><span class="line">    &#125;</span><br><span class="line">    tokenStream.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果</p><blockquote><p>start—————0<br>分词内容标高<br>end———————2<br>start—————0<br>分词内容bg<br>end———————2<br>start—————2<br>分词内容1-kl33<br>end———————8<br>start—————4<br>分词内容kl<br>end———————6<br>start—————6<br>分词内容33<br>end———————8</p></blockquote><p>需要注意几点</p><ol><li>pinyin4j 需要是2.5.1</li><li>分词和使用的dic有关,笔者使用的默认值,在日志中会打印org.wltea.analyzer.dic.Dictionary - 加载扩展停止词典:org/wltea/analyzer/dic/stopword.dic</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>http-rpc的区别和介绍</title>
      <link href="224b9f31.html"/>
      <url>224b9f31.html</url>
      
        <content type="html"><![CDATA[<p>参考内容 <a href="https://www.zhihu.com/question/41609070/answer/1030913797">既然有 HTTP 请求，为什么还要用 RPC 调用？ - 知乎</a></p><h2 id="http介绍"><a href="#http介绍" class="headerlink" title="http介绍"></a>http介绍</h2><p>​        说到http 其实开发过接口的都很少熟悉，目前最流行的是HTTPS，其实无论是OSI的<del>5层</del>七层还是TCP/IP五层模型，http都是属于上层封装偏向于应用的部分，主要是浏览器和一些客户端通信用的协议，通常请求会有特定请求头而且是长连接，占用服务器的连接资源，</p><p>​        通常情况下浏览器会存储cookie 在服务端会存储session来确定连接的情况，如果是restful风格的http请求是无状态的，服务器是不知道这次请求的数据。</p><p>下面是附带的7层协议</p><p>第一层 物理层  网卡 网口</p><p>第二层  数据链路层 网关交换器</p><p>第三层 网络层  </p><p>第四层 传输层 tcp,udp</p><p>第五层 会话层  dns.smtp</p><p>第六层表示层 telnet,snmp</p><p>第七层 应用层 http,rtsp,imap</p><p>上面是我大脑能列出来的第一反应</p><p>​        对于HTTPS是结合了http+<strong>SSL/TLS</strong>的混合，传统的http是明文传输的在互联网中网关和每个转发节点都能知道里面的内容，但是如果在http上包裹一层ssl那么传输者只知道传给谁但是具体的内容是不清楚的，ssl的非对称加密的，网站的拥有方需要去申请免费提供的let entry ，发送的证书是分别为公钥和私钥，他们拿私钥加密，我们客户端拿到数据用公钥解析内容，同时需要注意</p><p>具体的内容在网上搜索具体的介绍</p><p>RPC介绍</p><p>​        为什么会需要rpc，主要是服务的解耦，当整个系统越来越复杂后处于维护和迭代的需要，通常会将服务组件拆分，单独提供，譬如单独的订单服务，查询服务，认证服务，搜索服务等，但是当一个请求需要涉及到几个服务的功能的时候就会遇到 A服务 需要B服务，C服务的数据或者行动后A服务才能执行后续内容。</p><p>​        此时需要RPC来调用别人的服务服务，这个过程同时还设计到分布式事务，我们目前只考虑数据的使用，但是在调用过程中由于不同语言，和调用方能是接受的语法等限制通常需要跨平台的库来实现比较有名的是 <a href="https://dubbo.apache.org/zh/blog/2019/01/07/%E6%B5%85%E8%B0%88-rpc/">浅谈 RPC | Apache Dubbo</a>,<a href="https://grpc.io/">gRPC</a> 等来实现。</p><p>​        </p><p><img src="https://segmentfault.com/img/remote/1460000037470064" alt="img"></p><p>对应目前</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈文件传输/共享协议(转载)</title>
      <link href="bce5fd0b.html"/>
      <url>bce5fd0b.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://hellodk.cn/post/1051">浅谈文件传输/共享协议｜内网共享文件协议选择｜自建公网文件管理同步和共享方案推荐 - Allen Hua 的网络博客</a></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>关于文件传输协议/文件共享协议，可以拿出来介绍的可以有很多，本文列举了一些通用的基础的发展较早的协议详细的介绍（当然了，没有深入的原理，咱也不会啊 :笑），一些较新的作了简单陈述，没有深究原理和实现。</p><p>本文主要分为三个部分</p><ol><li>基础的文件传输/共享协议，更加推荐在内网使用的，不允许也不推荐暴露到公网。使用建议 <a href="https://hellodk.cn/post/1051#cl-21">点我</a></li><li>个人公网文件管理方案</li><li>实践: 在内网自建一个 seafile server, 并通过 frp 暴露在公网 serving，实现内外网都可以上传、下载、同步、分享。如何食用？<a href="https://hellodk.cn/post/1051#cl-23">点我</a></li></ol><h2 id="2-总览"><a href="#2-总览" class="headerlink" title="2. 总览"></a>2. 总览</h2><ol><li>SMB/CIFS/SAMBA</li><li>FTP/FTPS/TFTP</li><li>SCP/SFTP</li><li>WebDAV/WebDAVS</li><li>NFS</li><li>DLNA+UPnP</li><li>HTTP/HTTPS</li><li>rsync</li><li>AFP</li><li>MTP</li><li>others (列举了一些非常规的协议)</li></ol><hr><h2 id="3-正片"><a href="#3-正片" class="headerlink" title="3. 正片"></a>3. 正片</h2><h3 id="3-1-SMB-CIFS-SAMBA"><a href="#3-1-SMB-CIFS-SAMBA" class="headerlink" title="3.1 SMB/CIFS/SAMBA"></a>3.1 SMB/CIFS/SAMBA</h3><p>SMB(Server Message Block) 通信协议是微软和英特尔在 1987 年制定的协议，主要是作为 Microsoft 网络的通讯协议，它是当今世上网络文件系统协议两极之一的存在。</p><p>SMB 使用了 NetBIOS 的 API。另外，它是一个开放性的协议，允许了协议扩展，这使得它可以变得更大而且复杂；大约有 65 个最上层的作业，而每个作业都超过 120 个函数，甚至 Windows NT 自己也没有全部支持到，后来<del>著名的微软改名部门</del>又把 SMB 重新设计了一套新的实现: CIFS(Common Internet File System) 协议，并且加入了许多新的特色功能。</p><p>一开始微软设计的 SMB 不支持在 Linux 上运行，著名黑客、技术大牛安德鲁·垂鸠 (Andrew Tridgell) 通过逆向工程，于 1992 年在澳洲国立大学（ANU）开发了第一版的 Samba Unix 软件，实现了 SMB/CIFS 兼容协议，并命名为 <code>Samba</code>，通过该程序实现了 Windows 和 Linux 之间的文件共享。 Debian 上的软件包名称就是 <code>samba</code>，OpenWrt 中一般有 <code>samba36-server</code> 和 <code>samba4-server</code> (版本 4，性能更强，更新的一个版本)。</p><p>SMB 是 C/S (Client and Server) 类型协议，客户机可以访问服务器上的共享文件系统、打印机及其他资源。更进阶一点，通过设置 “NetBIOS over TCP/IP”，Samba 不但能与局域网络主机分享资源，还能与全世界的电脑分享资源，但一般很少这样使用。</p><p>SMB 的优点之一是兼容性特别好，在各平台都获得了广泛支持，包括 Windows、Linux、macOS、Android、iOS、iPadOS，甚至一些嵌入式系统比如 OpenWrt，挂载访问都很方便。另外 SMB 也是各种电视、电视盒子默认支持的协议，这些电视和盒子通过 SMB 访问服务器端的资源可以达到播放电影、音乐、访问图片和预览普通文件的目的。</p><p>另外 SMB 提供端到端加密、安全性高，配置选项丰富，支持 ACL(Access Control List) 并支持多种用户认证方式。</p><p>不过 SMB 的缺点也是最令极客们诟病的，是传输效率稍低，速度不太稳定，受机器网络和硬件资源波动较大。</p><p>简而言之，SMB 协议是在局域网上用于服务器文件访问和打印的协议。CIFS 可以看做是应用程序协议如文件传输协议和超文本传输协议的一个实现。</p><p>关于传输端口， SMB/CIFS 传输端口是 139 或 445，具体是 TCP port 139 over NetBIOS，TCP port 445 over IP。TCP 445 是基于 IP 的 SMB，这是较新的版本，可以在 IP 网络上正常使用 SMB，也就是公网使用 SMB。</p><p><em>ps: samba 最新稳定版是 version 4.x.x</em></p><h3 id="3-2-FTP-TFTP-FTPS"><a href="#3-2-FTP-TFTP-FTPS" class="headerlink" title="3.2 FTP/TFTP/FTPS"></a>3.2 FTP/TFTP/FTPS</h3><p>FTP(File Transfer Protocol) 我们都很熟悉，它是 TCP/IP 协议簇中的一员，是 1971 年发展起来的文件传输协议，作为标准网络协议出现它包含两个部分实现，一个是 FTP Server，一个是 FTP Client，其中 Server 用来存储文件，Client 供客户机使用以访问远程资源。</p><p>现在暴露在公网的 FTP 站点已经越来越少，找了半天只发现 GNU 的 FTP 站点 <a href="ftp://ftp.gnu.org/">ftp://ftp.gnu.org/</a> 目前还能匿名访问。Windows 可在 <code>Windows Explorer</code> 的 address bar 上直接键入地址然后回车即可以匿名身份访问。</p><p>默认情况下，FTP 使用 TCP 20 和 TCP 21 两个端口传输数据，TCP 20 用于数据传输，TCP 21 用于控制信息传输。而是否使用 20 端口传输数据与 FTP 传输模式有关，如果 FTP 主动模式，那么数据传输端口就是 20，如果采用的被动模式，那最终传输数据的端口由 FTP 的服务器和客户机协商决定。</p><p><strong>FTP 的两种数据传输模式: Standard(主动) 和 Passive(被动)。</strong></p><ol><li><p>Standard 模式</p><p>FTP 客户端首先和服务器的 TCP 21 建立连接并发送指令，客户端需要接收数据的时候在这个通道上发送 PORT 命令。 PORT 命令包含了客户端用什么端口接收数据。在传输数据的时候，服务器通过自己的 TCP 20 连接到客户端的指定端口发送数据。FTP Server 必须和 Client 建立一个新的连接用来传输数据。</p></li><li><p>Passive 模式</p><p>建立控制通道和 Standard 模式类似，但建立连接后发送的是 PASV 命令，服务端收到 PASV 命令后打开一个临时端口 tempPort (<code>1023 &lt; tempPort &lt; 65535</code>) 并且通知客户端在这个端口上传送数据，客户端连接 FTP 服务端的此端口，然后服务端将会通过此端口 serving.</p><p>很多防火墙在设置的时候都是不允许接受外部发起的连接的，所以许多位于防火墙后或内网的 FTP 服务器不支持 Passive 模式，因为客户端无法穿过防火墙打开 FTP 服务器的高端端口；而许多内网的客户端不能用 Standard 模式登陆 FTP 服务器，因为从服务器的 TCP 20 无法和内部网络的客户端建立一个新的连接，造成无法工作。</p></li></ol><p><strong>FTP 传输数据也有两种方式：ASCII 和 二进制。</strong></p><ol><li><p>ASCII 传输方式</p><p>假定用户正在拷贝的文件包含的简单 ASCII 码文本(plain text)，如果在远程机器上运行的不是 UNIX，当文件传输时 FTP 通常会自动地调整文件的内容以便于把文件解释成另外那台计算机存储文本文件的格式。</p><p>但是常常有一些“特殊”情况，用户正在传输的文件包含的不是文本文件，它们可能是可执行程序、电影、音乐、数据库或者压缩文件。在拷贝任何非文本文件之前，用 binary 命令告诉 FTP 逐字拷贝。</p></li><li><p>二进制传输方式</p><p>在二进制传输中，保存文件的位序，以便原始和拷贝的是逐位一一对应的。即使目的机器上包含位序列的文件是没意义的。例如，macintosh (早期的 macOS 叫法) 以二进制方式传送可执行文件到 Windows 系统，在对方系统上，此文件不能执行。</p></li></ol><p>时间已经来到了 2022 年，FTP 已经很少被应用在生产环境下，通过 http 传输文件的高效更能替代这个使用场景。它的优点不足以掩盖众多缺点，优点比如说能同时传输多个目录，自动备份等等，但是缺点众多，其他协议也支持它的优点，所以必然会被时代淘汰。</p><p>FTP 的缺点：数据传输模式不够合理，工作方式设计不合理，与防火墙工作不协调，安全认证策略不完善，相对而言整个传输过程效率也低下。此部分就不展开了，详情可见下面文章</p><ul><li><a href="https://blog.csdn.net/ixidof/article/details/8119017">文件传输协议（FTP）的缺点</a></li><li><a href="https://content.jianguoyun.com/28197.html">FTP文件传输的优势与不足对比分析</a></li></ul><p>通过上面的描述，可以感受到 FTP 的复杂性，1981 年在 RFC 783 中定义了一个简化的文件传输协议 TFTP(Trivial File Transfer Protocol)，称作简单文件传输协议，也称小型/琐碎文件传输协议。TFTP 比 FTP 简单得多，并且执行客户端和服务器进程之间的文件传输。但是，它不提供 FTP 所支持的用户身份验证和其他有用的功能。FTP 使用 TCP 时，TFTP 使用 UDP，这使得它成为了不可靠的文件传输协议。由于简单，透过少量存储器就能轻松实现，在计算机发展早期还是有用处的，例如从一台网络主机或服务器引导一个远程 X Window System 终端或其他的瘦客户端。由于小型文件传输协议缺少安全性，在公网传输非常危险，所以普遍仅仅用于私有网络。</p><p>对于 FTP 在安全上的不足，后面发展了 FTPS。</p><p>FTPS(FTP over SSL/TLS)，是一种安全的 FTP，添加了传输层安全（TLS）和安全套接层（SSL）的加密协议。尽管在数据传输方面加固了安全，但 FTP 的底层设计依然还是没有改变，所以直到现在应用也不够广泛。偶尔在内网中会有部署的 FTP 服务，但大家也更倾向于使用 samba, nfs, http, webdav 这些协议共享文件。</p><h3 id="3-3-SCP-SFTP"><a href="#3-3-SCP-SFTP" class="headerlink" title="3.3 SCP/SFTP"></a>3.3 SCP/SFTP</h3><p>SCP(Secure CoPy) 和 SFTP(Secure File Transfer Protocol) 都基于 SSH(Secure SHell) 协议，OpenSSH 是 SSH 协议的一个开源实现，一些嵌入式设备可以通过 dropbear 建立 ssh 连接，dropbear 也实现了 SSH 协议的基础功能。</p><p>SCP 用来进行远程文件复制，并且整个复制过程是加密的。数据传输使用 ssh tunnel，并且使用和 ssh 相同的认证方式，提供相同的安全保证。密码认证或密钥对 (key-pair)验证。</p><p>SFTP 与 FTP 有着几乎一样的语法和功能。SFTP 为 SSH 的一部分，是一种传输文件到服务器的安全方式。在 SSH 软件包中，已经包含了一个叫作 SFTP 的安全文件传输子系统，SFTP 本身没有单独的守护进程，它必须使用 sshd 守护进程（端口号默认是22）来完成相应的连接操作，所以从某种意义上来说，SFTP 并不像一个服务器程序，而更像是一个客户端程序。SFTP 同样是使用加密传输认证信息和传输的数据，所以，使用 SFTP 是安全的。但是，正由于这种传输方式使用了加密/解密技术，所以比起普通 FTP，开销大得多，传输效率低得多。如果用户对网络安全性要求更高，则可以使用 SFTP 代替 FTP。</p><p>目前最新的 OpenSSH 稳定版本是 9.0，<a href="https://www.openssh.com/">OpenSSH 9.0 released April 8, 2022</a>，服务端配置文件 <code>/etc/ssh/sshd_config</code> 中有一行 sftp 配置就是配置这个文件传输子系统的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># override default of no subsystems</span><br><span class="line">Subsystem       sftp    &#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;sftp-server</span><br></pre></td></tr></table></figure><h4 id="SCP-和-SFTP-的比较"><a href="#SCP-和-SFTP-的比较" class="headerlink" title="SCP 和 SFTP 的比较"></a>SCP 和 SFTP 的比较</h4><p>两者都基于 SSH，但是传输效率和安全性上也有区别。</p><ul><li>SCP 不支持断点续传，一次 timeout 就得重来，而 SFTP 支持</li><li>SCP 单次传输不支持 4Gib 以上文件，SFTP 支持</li><li>SCP 不检查传输的数据包，效率更高但安全性更低</li></ul><p><strong>简单总结：SCP 适合小文件传输，速度更快。SFTP 适合更大文件，安全性更高的传输场景。</strong></p><p>另外上文所述的 FTPS 不应与基于 SSH 的 SCP 和 SFTP 混淆。</p><p>Windows 端经典强大的开源程序 <code>WinSCP</code> 就实现了 SSH 的 SCP 和 SFTP 功能，界面直观非常易于使用。</p><h3 id="3-4-WebDAV-WebDAVS"><a href="#3-4-WebDAV-WebDAVS" class="headerlink" title="3.4 WebDAV/WebDAVS"></a>3.4 WebDAV/WebDAVS</h3><p>WebDAV(WEb-Based Distributed Authoring and Versioning) 一种基于 HTTP 1.1 协议的通信协议。它扩展了 HTTP 1.1，在 GET、POST、HEAD、PUT、DELETE、PATCH 等 HTTP 标准方法以外添加了一些新的方法，使应用程序可对 Web Server 直接读写，并支持写文件锁定 (Locking) 及解锁 (Unlock)，还支持文件的版本控制。</p><p>简单而言，WebDAV 就是在服务器上划出一块存储空间，使用它扩展的一套 HTTP method 来管理文件，可以将磁盘映射到本地磁盘使用，对文件的每次改动都是一个 HTTP 请求。遗憾的是，目前只有用户名和密码的认证方式，安全性上有所欠缺。</p><p>WebDAV 为实现远程文件管理，向 HTTP/1.1 中追加了以下这些方法</p><ul><li>PROPFIND：获取属性</li><li>PROPPATCH：修改属性</li><li>MKCOL：创建集合</li><li>COPY：复制资源及属性</li><li>MOVE：移动资源</li><li>LOCK：资源加锁</li><li>UNLOCK：资源解锁</li></ul><p>HTTP status code 也随之扩展</p><ul><li>102 Processing：可正常处理请求， 但目前是处理中状态</li><li>207 Multi-Status：存在多种状态</li><li>422 Unprocessible Entity：格式正确， 内容有误</li><li>423 Locked：资源已被加锁</li><li>424 Failed Dependency：处理与某请求关联的请求失败， 因此不再维持依赖关系</li><li>507 Insufficient Storage：保存空间不足</li></ul><p>由于 WebDAV 是基于 HTTP 的，所以具有 HTTP 的所有优点，包括容易穿越防火墙、使用 HTTPS 来传输数据，因此在很多方面可以替代 FTP。通过 Nginx 或 Apache 或 Caddy 等 web server（也有其他实现，比如 Golang 实现的 webdav <a href="https://github.com/hacdias/webdav">https://github.com/hacdias/webdav</a> ） 非常容易就能搭建一个 WebDAV 服务。</p><p>WebDAVS(WebDAV over SSL/TLS) 就是加了一层 SSL/TLS ，数据安全更能得到保障，不过一般的使用场景多是 WebDAV + 配合 SSL 的 web server 实现 http 流量的加密，这样反而开销更小。</p><h3 id="3-5-NFS"><a href="#3-5-NFS" class="headerlink" title="3.5 NFS"></a>3.5 NFS</h3><p>NFS(Network File System)，即网络文件系统，是 FreeBSD 支持的文件系统中的一种。NFS 允许一个系统在网络上与它人共享目录和文件。通过使用 NFS，用户和程序可以像访问本地文件一样访问远端系统上的文件。它由 Sun 公司（已被 Oracle 收购）开发，于 1984 年发布，最新版本 NFSv4.2 于 2016 年发布。NFS 基于开放网络运算远程过程调用（ONC RPC）协议：一个开放、标准的 RFC 协议，任何人或组织都可以依据标准实现它。</p><p>NFS 通常使用在 Unix 操作系统上（比如 Solaris、AIX 及 HP-UX）和其他类 Unix 操作系统（例如 Linux 及 FreeBSD），同时在 macOS 和 Windows 系统也提供了 NFS 实现。不过在 Windows 系统上挂载 NFS 共享目录时，由于 Windows 自带的 NFS 客户端长久以来不支持 UTF-8，会致中文文件和目录显示为乱码。有解决方法但有代价，请见 <a href="https://zhuanlan.zhihu.com/p/46254792">一个小设置，让Win10 NFS正常显示中文UTF-8</a></p><p>NFS 的优点是 kernel 直接支持，部署简单、运行稳定，协议简单、传输效率高。</p><p>NFS 的缺点是没有加密授权等功能，仅依靠 IP 地址或主机名来决定用户能否挂载共享目录，对具体目录和文件无法进行 ACL 控制（NFSv4 以前）。通常的做法是通过 Kerberos 对 NFS 进行认证及加密，不过部署配置比较麻烦。</p><h3 id="3-6-DLNA-UPnP"><a href="#3-6-DLNA-UPnP" class="headerlink" title="3.6 DLNA+UPnP"></a>3.6 DLNA+UPnP</h3><p>DLNA(Digital Living Network Alliance, 数字生活网络联盟)，其前身是 DHWG（Digital Home Working Group，数字家庭工作组），成立于 2003 年 6 月 24 日， 是由索尼、英特尔、微软等发起成立的一个非营利性的、合作性质的商业组织。</p><p>DLNA 旨在解决个人 PC，消费电器，移动设备在内的无线网络和有线网络的互联互通，使得数字媒体和内容服务的无限制的共享和增长成为可能。DLNA 的口号是 Enjoy your music, photos and videos, anywhere anytime。</p><p>DLNA 将其整个应用规定成 5 个功能组件。从下到上依次为：网络互连，网络协议，媒体传输，设备的发现控制和管理，媒体格式。</p><p><img src="https://pic3.zhimg.com/80/ac96a32309b15d9099b70bca2a204cd8_720w.jpg" alt="DLNA"></p><blockquote><p>DLNA 架构图 <a href="https://www.zhihu.com/question/22362647/answer/43637899">image source</a></p></blockquote><p>UPnP(Universal Plug and Play) 通用即插即用协议，官方的解释太过理论。微软的说法是</p><blockquote><p>通用即插即用 （UPnP） 是一种用于 PC 机和智能设备（或仪器）的常见对等网络连接的体系结构，尤其是在家庭中。UPnP 以 Internet 标准和技术（例如 TCP/IP、HTTP 和 XML）为基础，使这样的设备彼此可自动连接和协同工作，从而使网络（尤其是家庭网络）对更多的人成为可能。</p></blockquote><p>实际上，普通用户理解 UPnP 可以理解为基于 TCP/IP 上的自动端口映射，一般路由器在 NAT 的工作模式下可以打开此功能，自动处理局域网内设备中的各个软件的 UPnP 请求。</p><p>DLNA 可以高效的访问服务器中的各种类型资源，由 DLNA 服务器帮用户索引好离线文件。比如图片，音乐专辑，电影，电视剧集，适合多媒体的场景使用。</p><h3 id="3-7-HTTP-HTTPS"><a href="#3-7-HTTP-HTTPS" class="headerlink" title="3.7 HTTP/HTTPS"></a>3.7 HTTP/HTTPS</h3><p>HTTP(HyperText Transfer Protocol)即超文本传输协议，我们都不陌生了，通过 http 共享文件可以很简单，比如使用 nginx 标准模块 <code>Auto Index</code> 可以很快创建一个可以共享的文件服务器，效率也非常之高。</p><p>比如在 nginx 创建一个共享本地文件夹的配置文件 <code>/etc/nginx/sites-enabled/files-sharing.conf</code> ，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"> </span><br><span class="line">    listen 82;</span><br><span class="line">    server_name 192.168.10.10;</span><br><span class="line">    charset gbk,utf-8;</span><br><span class="line"> </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root &#x2F;home&#x2F;xxx&#x2F;nginx-static-files&#x2F;; </span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        autoindex on;</span><br><span class="line">        autoindex_exact_size on;</span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <a href="http://192.168.10.10:82/">http://192.168.10.10:82</a> (a fake address) 后的效果</p><p><img src="https://image.940304.xyz/i/2022/06/16/62aabb96789e4.png" alt="20220616131149"></p><p>HTTPS(HTTP over SSL/TLS)，加密后的 http 流量，目前正是主流 web 交互的方式。</p><h3 id="3-8-rsync"><a href="#3-8-rsync" class="headerlink" title="3.8 rsync"></a>3.8 rsync</h3><p>rsync 全称 remote synchronize，即”远程同步”，是 Liunx/Unix 下的一个远程数据同步工具。它可通过 LAN/WAN 快速同步多台主机间的文件和目录，并适当利用 rsync 算法（差分编码）以减少数据的传输，即可做到增量传输/备份。严格来说，rsync 算不上底层的文件传输/共享协议，但是本文为了介绍的尽量全面还是提一下。</p><p>在常驻模式（daemon mode）下，rsync 默认监听 TCP 端口 873，以原生 rsync 传输协议或者透过远程 shell 如 RSH 或者 SSH 提供文件。SSH 模式下，rsync 客户端执行程序必须同时在本地和远程机器上安装。</p><p>rsync 首度发布于 1996 年 6 月 19 日。原始作者为安德鲁·垂鸠（Andrew Tridgell）<em>（很巧的是，又是这个大神）</em>与保罗·麦可拉斯（Paul Mackerras）。</p><p>rsync 现在应用广泛，使用起来也非常方便易用，效率也高，最初设计就是替代 SCP 的。既能在本地用于数据拷贝、移动（可用来替代 Linux <code>cp</code> 和 <code>mv</code> 命令），也能做增量备份存储。通过 SSH 实现远程复制也非常好用。</p><p>关于 rsync 的基础用法和高级用法可以看看阮一峰的 <a href="https://www.ruanyifeng.com/blog/2020/08/rsync.html">rsync 用法教程</a> , 写得易懂且全面。</p><p>其实类似于 rsync 的工具，还有 <code>rclone</code>、<code>robocopy</code>、<code>freefilesync</code> 等，这里就不做过多介绍了。</p><h3 id="3-9-AFP"><a href="#3-9-AFP" class="headerlink" title="3.9 AFP"></a>3.9 AFP</h3><p>AFP(Apple Filing Protocol)，是一种专门为 MAC OS X(现名: macOS) 系统提供文件共享服务的协议，通过开源的 Netatalk 实现 AFP 共享。主要应用是苹果笔记本的 Time Machine 时间机器系统备份，macOS 物理接口是 type-c，并有微软的雷电 Thunderbolt 授权，协议就是 AFP 。但是这东西不够完善，复杂使用场景下都有 bug，现在连苹果自己都很少用。</p><h3 id="3-10-MTP"><a href="#3-10-MTP" class="headerlink" title="3.10 MTP"></a>3.10 MTP</h3><p>MTP(Media Transfer Protocol) 媒体传输协议，是基于 PTP(Picture Transfer Protocol) 协议的扩展，主要用于传输媒体文件，其中有价值的应用就是同步 DRM 文件的 license。</p><p>MTP 既可以实现在 USB 协议上，也可以实现在 TCP/IP 协议上，它属于上层的应用协议，而不关心底层传输协议。目前大部分设备的应用都是基于 USB 协议。在 Android 设备上应用广泛，使用 USB A cable 连接 Windows PC 和 Android 设备，默认的文件传输协议就是 MTP，但除此之外，内网文件的传输很少应用到此协议。</p><h3 id="3-11-others"><a href="#3-11-others" class="headerlink" title="3.11 others"></a>3.11 others</h3><p>我把他们归为一类，不够通用，具有一定的专用性，主要是为企业服务的。</p><h4 id="AS2-AS3-AS4"><a href="#AS2-AS3-AS4" class="headerlink" title="AS2/AS3/AS4"></a>AS2/AS3/AS4</h4><p>AS2(Applicability Statement 2)，下同。</p><p>AS2，AS3 和 AS4 都是用来发送和保护关键文件传输的流行协议。</p><p>AS2 用于在因特网上安全可靠地传输敏感数据。AS2 利用数字证书和加密标准来保护在系统、网络和位置之间传输的关键信息。AS2 消息可以通过安全的 SSL 隧道进行压缩、签名、加密和发送。</p><p>AS3 是一个标准，几乎可以用来传输任何文件类型。它通过数字签名和数据加密为数据传输提供了一层安全性。它最初是为了传输数据文件而创建的，如 XML 和 EDI 商业对企业数据的文件。与 AS2 不同，AS2 是一种定义的传输协议，AS3 是一种消息标准，它侧重于在从服务器发送到服务器时应该如何格式化消息。一旦 AS3 消息被合成，它就可以通过任何其他协议(FTP、SFTP、HTTPS 等)传输。只要双方能够访问已放置消息的位置。</p><p>AS4 是一种协议，允许企业与其合作伙伴安全地交换数据。它建立在最初由 AS2 设置的基础上，但与 Web 服务一起工作，并提供改进的交付通知。作为企业对企业的标准，AS4 有助于使在互联网上进行文件交换变得安全和简单。</p><blockquote><p>see also <a href="https://www.goanywhere.com/blog/whats-the-difference-between-as2-as3-and-as4">What’s the Difference Between AS2, AS3, and AS4?</a></p></blockquote><h4 id="OFTP（Odette-文件传输协议）"><a href="#OFTP（Odette-文件传输协议）" class="headerlink" title="OFTP（Odette 文件传输协议）"></a>OFTP（Odette 文件传输协议）</h4><p>OFTP(Odette FTP)，另一种专为 EDI 设计的文件传输协议 OFTP。OFTP 在欧洲应用非常普遍。OFTP 和 AS2 本质上都是安全的，甚至支持电子交付收据，使它们非常适合 B2B 交易。</p><h4 id="AFTP"><a href="#AFTP" class="headerlink" title="AFTP"></a>AFTP</h4><p>AFTP(Accelerated FTP)，是 JSCAPE 开发的一种文件传输协议（中文：加速文件传输协议），旨在进行 WAN 环境下的文件传输，尤其是远距离下的文件传输，但很容易受到延迟和数据包丢失等不良网络条件的影响，从而导致吞吐量大幅下降。AFTP 是一种 TCP-UDP 混合体，它使文件传输几乎不受这些网络条件的影响，理想情况下能比 FTP 传输快 100 倍。属于企业级应用协议。</p><h4 id="raysync"><a href="#raysync" class="headerlink" title="raysync"></a>raysync</h4><p>镭速文件传输协议 FTP 加速产品是专为企业定制开发的一款完全替代现有文件传输协议 FTP 的高效传输软件，能够在现有结构的基础上实现文件的高速传输，使用镭速文件传输协议 FTP 加速后，文件传输协议 FTP 传输速度可提升 10-100 倍。</p><p>这是国产深圳的一个公司的商业化产品。</p><h4 id="PeSIT"><a href="#PeSIT" class="headerlink" title="PeSIT"></a>PeSIT</h4><p>PeSIT, short for Protocol d’Echanges pour un Systeme Interbancaire de Telecompensation (Protocol for data Exchange within the French Systems for Interbank Tele-clearance) 协议是一种端到端文件传输协议，由法国银行间电信系统经济利益集团 (GSIT) 开发。它在北美应用较少，主要用于满足欧洲银行标准，以及向欧洲银行和从欧洲银行转移通信。</p><blockquote><p>see also <a href="https://www.goanywhere.com/blog/what-is-pesit">What is PeSIT?</a></p></blockquote><h3 id="内网文件共享选择协议建议"><a href="#内网文件共享选择协议建议" class="headerlink" title="内网文件共享选择协议建议"></a>内网文件共享选择协议建议</h3><p><img src="https://image.940304.xyz/i/2022/06/16/62aad5af2f7a7.png" alt="20220616150310"></p><blockquote><p><a href="http://www.92nas.com/forum.php?mod=viewthread&tid=352">image source</a></p></blockquote><ul><li><strong>samba 对于大多数人绝对是最优最优的选择，适配日常使用的所有平台，没有各种乱码问题，兼容性极佳。目前的 samba3 samba4 性能也不错</strong></li><li><strong>对于 Linux 用户可以优选 NFS，效能比起 samba 还是高</strong></li><li><strong>平常使用 Linux 传送一些小文件可以直接使用 scp 命令行，或者使用 WinSCP 这些工具（或者更推荐使用 rsync）</strong></li><li><strong>如果是内网磁盘想要暴露到公网，推荐 WebDAV + nginx + SSL，可以方便的将家里的磁盘暴露到公网(不过强烈建议使用 strong strong password)</strong></li><li><strong>DLNA 这种，偶尔使用多媒体还行，但如果是重度用户建议搭建 Plex、Emby、Jellyfin 服务端</strong> （诶我怎么歪题了）</li><li><strong>其实内网的文件共享需求和 nas 上文件共享需求不谋而合</strong></li><li><strong>FTP, SFTP 不是很推荐</strong></li><li><strong>HTTP 配合 nginx 搭建一个存储文件的静态 public 站点还是不错的</strong></li></ul><p>引用一段 V2EX 网友的评论 来自帖子 <a href="https://www.v2ex.com/t/818478">https://www.v2ex.com/t/818478</a></p><blockquote><p>奉劝一句，别瞎折腾。最完善的远程文件访问协议就是 SMB 。macOS 下 Finder 中协议语法为“SMB://”。在群晖、威联通中打开 SMB 协议访问即可。<br>别玩苹果自身的 AFP ，macOS 间互访都有 bug ，苹果默认都不用这个，默认用的是 SMB （我家里有 3 台苹果电脑，6 台不同的 NAS 设备，足够验证这个）。群晖启用 AFP 也有 bug ，反倒是威联通的 AFP 比较完善。<br>也别冲 WebDAV ，这个居然自身没搞定文件名编码方案（当然我猜测实际上应该是搞定了，我说的没搞定是默认配置下没搞定，估计需要用户各种场景测试然后通过命令行什么的指定编码方案）。我的一些小姐姐影片 NAS 间同步后文件名就变了。<br>FTP 这些完全是闹着玩的，首次配置好能用，过一段时间登录就有问题。<br>截至今日，世界上使用最广的操作系统依然是 windows ，至今依然是 windows 自己的远程文件访问协议其他厂商支持 /测试的最完善，那就是 SMB （ Samba ）。其他的各种协议，不同操作系统中要么不自带需要安装第三方软件，即使带了默认可能也没启用需要用户自己启用甚至配置。考虑到家用环境的复杂性，iOS 设备、安卓设备、电视、windows 、macos 、NAS 、甚至可能还有监控摄像头存储，这些不同操作系统要同时支持 /验证某个文件互访协议，想想都能明白有多麻烦。</p></blockquote><p><strong>结合我自身的各种协议的使用经验，我的整体评价也是，samba 保你用户体验，一般情况下 samba 就够了，需要公网映射就加上 WebDAV。</strong></p><h2 id="4-个人公网文件管理方案"><a href="#4-个人公网文件管理方案" class="headerlink" title="4. 个人公网文件管理方案"></a>4. 个人公网文件管理方案</h2><p>我们可以用各种大公司的云产品，比如百度云盘，阿里云盘，夸克网盘等等，这些是面向普通用户的产品。还有一些面向开发者、企业的云产品等等不在本文讨论范围。我们想要知道的是普通用户如何建立起属于自己的公网网盘。我搜集了一些开源产品。见下表</p><table><thead><tr><th align="left">名称</th><th align="center">开源仓库</th><th align="left">优缺点</th></tr></thead><tbody><tr><td align="left">NextCloud (其前身是 OwnCloud)</td><td align="center"><a href="https://github.com/nextcloud">https://github.com/nextcloud</a></td><td align="left">- 功能极其强大，具备丰富的 extensions - 后端核心程序使用 php 开发，效率并不算优</td></tr><tr><td align="left">Seafile</td><td align="center"><a href="https://github.com/haiwen/seafile">https://github.com/haiwen/seafile</a></td><td align="left">- 功能稍微单一，但是后端核心程序使用 C 语言编写，文件传输高效</td></tr><tr><td align="left">Cloudreve</td><td align="center"><a href="https://github.com/cloudreve/Cloudreve">https://github.com/cloudreve/Cloudreve</a></td><td align="left">- Material-UI 个人认为简洁美观 - 支持本机、从机、七牛、阿里云 OSS、腾讯云 COS、又拍云、OneDrive (包括世纪互联版) 作为存储端 - 后端原本是 php 编写，而后使用了 Golang 重构</td></tr><tr><td align="left">ZFile</td><td align="center"><a href="https://github.com/haiwen/seafile">https://github.com/haiwen/seafile</a></td><td align="left">- 基于 Java 的在线网盘程序，支持对接 S3、OneDrive、SharePoint、又拍云、本地存储、FTP 等存储源，支持在线浏览图片、播放音视频，文本文件等文件类型</td></tr><tr><td align="left">KodExplorer(可道云)</td><td align="center"><a href="https://github.com/kalcaddle/KodExplorer">https://github.com/kalcaddle/KodExplorer</a></td><td align="left">- 类似于群晖桌面式 ui，适合对于计算机操作不熟悉的用户使用 - 他们发布了新产品 kodbox <a href="https://github.com/kalcaddle/kodbox">https://github.com/kalcaddle/kodbox</a></td></tr></tbody></table><p>我目前几乎是 <em>我全都要.gif</em>，但是最终留下了 <code>Seafile</code> 和 <code>Nextcloud</code> 和 <code>Cloudreve</code> 三款产品。</p><p>下文我将介绍在局域网搭建一个 Seafile Server，然后通过一台具备公网 IP 的机器将其服务暴露到公网 serving.</p><h2 id="5-自建-Seafile-Server-并使用-frp-暴露到公网"><a href="#5-自建-Seafile-Server-并使用-frp-暴露到公网" class="headerlink" title="5. 自建 Seafile Server 并使用 frp 暴露到公网"></a>5. 自建 Seafile Server 并使用 frp 暴露到公网</h2><p>我简而言之。</p><h3 id="5-1-使用-docker-compose-安装-Seafile-Server"><a href="#5-1-使用-docker-compose-安装-Seafile-Server" class="headerlink" title="5.1 使用 docker-compose 安装 Seafile Server"></a>5.1 使用 docker-compose 安装 Seafile Server</h3><p>compose file 参考官网的 <a href="https://docs.seafile.com/d/cb1d3f97106847abbf31/files/?p=/docker/docker-compose.yml">https://docs.seafile.com/d/cb1d3f97106847abbf31/files/?p=/docker/docker-compose.yml</a></p><p>也可以参考 <a href="https://cloud.seafile.com/published/seafile-manual-cn/docker/%E7%94%A8Docker%E9%83%A8%E7%BD%B2Seafile.md">https://cloud.seafile.com/published/seafile-manual-cn/docker/%E7%94%A8Docker%E9%83%A8%E7%BD%B2Seafile.md</a></p><p>创建 <code>/your/path/seafile-compose.yml</code>，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;2.0&#39;</span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mariadb:10.5</span><br><span class="line">    container_name: seafile-mysql</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD&#x3D;123456 # Requested, set the root&#39;s password of MySQL service.</span><br><span class="line">      - MYSQL_LOG_CONSOLE&#x3D;true</span><br><span class="line">    volumes:</span><br><span class="line">      - .&#x2F;seafile-mysql&#x2F;db:&#x2F;var&#x2F;lib&#x2F;mysql  # Requested, specifies the path to MySQL data persistent store.</span><br><span class="line">    networks:</span><br><span class="line">      - seafile-net</span><br><span class="line"> </span><br><span class="line">  memcached:</span><br><span class="line">    image: memcached:1.6</span><br><span class="line">    container_name: seafile-memcached</span><br><span class="line">    entrypoint: memcached -m 256</span><br><span class="line">    networks:</span><br><span class="line">      - seafile-net</span><br><span class="line"> </span><br><span class="line">  seafile:</span><br><span class="line">    image: seafileltd&#x2F;seafile-mc:latest</span><br><span class="line">    container_name: seafile</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8088:80&quot;</span><br><span class="line">#      - &quot;443:443&quot;  # If https is enabled, cancel the comment.</span><br><span class="line">    volumes:</span><br><span class="line">      - .&#x2F;seafile-data:&#x2F;shared   # Requested, specifies the path to Seafile data persistent store.</span><br><span class="line">    environment:</span><br><span class="line">      - DB_HOST&#x3D;db</span><br><span class="line">      - DB_ROOT_PASSWD&#x3D;123456  # Requested, the value shuold be root&#39;s password of MySQL service.</span><br><span class="line">      - TIME_ZONE&#x3D;Asia&#x2F;Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.</span><br><span class="line">      - SEAFILE_ADMIN_EMAIL&#x3D;email@example.com # Specifies Seafile admin user, default is &#39;me@example.com&#39;.</span><br><span class="line">      - SEAFILE_ADMIN_PASSWORD&#x3D;123456     # Specifies Seafile admin password, default is &#39;asecret&#39;.</span><br><span class="line">      - SEAFILE_SERVER_LETSENCRYPT&#x3D;false   # Whether use letsencrypt to generate cert.</span><br><span class="line">      - SEAFILE_SERVER_HOSTNAME&#x3D;seafile.example.com # Specifies your host name.</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - memcached</span><br><span class="line">    networks:</span><br><span class="line">      - seafile-net</span><br><span class="line"> </span><br><span class="line">networks:</span><br><span class="line">  seafile-net:</span><br><span class="line"># 启动一个 docker stack, 建立三个容器</span><br><span class="line"># docker-compose -f .&#x2F;seafile-compose.yml up -d</span><br></pre></td></tr></table></figure><p>默认 WebDAV 是关闭的，我们将它打开</p><p><code>docker exec -it seafile bash</code> 进入容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 下面这是在容器中</span><br><span class="line"> </span><br><span class="line"># vim &#x2F;shared&#x2F;seafile&#x2F;conf&#x2F;seafdav.conf</span><br><span class="line"> </span><br><span class="line"># 将 [WEBDAV] enabled 由 false 改成 true</span><br><span class="line"> </span><br><span class="line"># 然后重启 seafile 服务</span><br><span class="line"> </span><br><span class="line"># cd &#x2F;opt&#x2F;seafile&#x2F;seafile-server-9.0.4 #读者操作的时候 latest 镜像版本应该比这个更新</span><br><span class="line"> </span><br><span class="line"># .&#x2F;seafile.sh restart</span><br><span class="line"> </span><br><span class="line">Stopping seafile server ...</span><br><span class="line">Starting seafile server, please wait ...</span><br><span class="line">** Message: 20:02:59.972: seafile-controller.c(621): No seafevents.</span><br><span class="line"> </span><br><span class="line">Seafile server started</span><br><span class="line"> </span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>Seafile Server 基本就部署好了。</p><h3 id="5-2-在公网机器上安装-frps"><a href="#5-2-在公网机器上安装-frps" class="headerlink" title="5.2 在公网机器上安装 frps"></a>5.2 在公网机器上安装 frps</h3><p>FRP 是一个非常优秀的内网穿透程序，GitHub 链接: <a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a> ，其在 GitHub 上拥有 57.2k 个 star（截止 2022-06-15）。很多用户家里的网络 NAT 类型都是 Symmetric 对称型，我们一般称之为 NAT type 4，是一种最难穿透的类型。要想 nat 穿越成功，如果用户没法提升 nat 类型（最高 nat 1，叫做 FullCone 全锥形），那就必须要使用一台公网服务器中转，但这其实也是一种最高效的方式（花钱就行）。</p><p>如何搭建 frps 这一部分互联网上已经有太多教程了，我简单综述一下。</p><ol><li>frp 是 go 写的，搭建 frp 环境需要一台具备公网的 VPS 或者国内叫轻量应用服务器，云服务器之类的</li><li>在公网机器上运行 frps（binary, Linux 可执行文件），需配合 <code>frps.ini</code> 配置文件</li><li>在内网机器（Seafile Server 所在机器）运行 frpc，需配合 <code>frpc.ini</code> 配置文件</li></ol><p>比如拉取 frp x86_64 0.39.0 版本的源程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget -O &#x2F;home&#x2F;xxx&#x2F;temp&#x2F;frp_0.39.0_linux_arm64.tar.gz https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.39.0&#x2F;frp_0.39.0_linux_arm64.tar.gz</span><br></pre></td></tr></table></figure><p>配置一下 <code>/usr/local/frp/frps.ini</code> 配置文件，以下所有端口都使用了 12345 代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># [common] is integral section</span><br><span class="line">[common]</span><br><span class="line"># A literal address or host name for IPv6 must be enclosed</span><br><span class="line"># in square brackets, as in &quot;[::1]:80&quot;, &quot;[ipv6-host]:http&quot; or &quot;[ipv6-host%zone]:80&quot;</span><br><span class="line">bind_addr &#x3D; 0.0.0.0</span><br><span class="line">bind_port &#x3D; 12345</span><br><span class="line"># udp port used for kcp protocol, it can be same with &#39;bind_port&#39;</span><br><span class="line"># if not set, kcp is disabled in frps</span><br><span class="line">kcp_bind_port &#x3D; 12345</span><br><span class="line"># bind udp port</span><br><span class="line">bind_udp_port &#x3D; 12345</span><br><span class="line"># if you want to configure or reload frps by dashboard, dashboard_port must be set</span><br><span class="line">dashboard_port &#x3D; 12345</span><br><span class="line"># dashboard assets directory(only for debug mode)</span><br><span class="line">dashboard_user &#x3D; YOUR_USERNAME</span><br><span class="line">dashboard_pwd &#x3D; YOUR_PASSWORD</span><br><span class="line"># assets_dir &#x3D; .&#x2F;static</span><br><span class="line">vhost_http_port &#x3D; 12345</span><br><span class="line">vhost_https_port &#x3D; 12345</span><br><span class="line"># console or real logFile path like .&#x2F;frps.log</span><br><span class="line">log_file &#x3D; &#x2F;var&#x2F;log&#x2F;frp&#x2F;frps.log</span><br><span class="line"># debug, info, warn, error</span><br><span class="line">log_level &#x3D; info</span><br><span class="line">log_max_days &#x3D; 3</span><br><span class="line"># auth token</span><br><span class="line">token &#x3D; A_STRONG_PASSWORD</span><br><span class="line"># only allow frpc to bind ports you list, if you set nothing, there won&#39;t be any limit</span><br><span class="line">#allow_ports &#x3D; 1-65535</span><br><span class="line"># pool_count in each proxy will change to max_pool_count if they exceed the maximum value</span><br><span class="line">max_pool_count &#x3D; 50</span><br><span class="line"># if tcp stream multiplexing is used, default is true</span><br><span class="line">tcp_mux &#x3D; true</span><br></pre></td></tr></table></figure><p>Systemd 是 Linux 系统工具，用来启动守护进程，现已成为大多数发行版的标准配置。我们也用 systemd 管理 frps 和 frpc。创建文件 <code>/lib/systemd/system/frps.service</code> 内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D; Frps Service Daemon</span><br><span class="line">After&#x3D;network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;frp&#x2F;frps -c &#x2F;usr&#x2F;local&#x2F;frp&#x2F;frps.ini</span><br><span class="line">KillSignal&#x3D;SIGQUIT</span><br><span class="line">TimeoutStopSec&#x3D;5</span><br><span class="line">KillMode&#x3D;process</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line">StandardOutput&#x3D;syslog</span><br><span class="line">StandardError&#x3D;inherit</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>启用开机自启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable frps</span><br></pre></td></tr></table></figure><p>启动程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start frps</span><br></pre></td></tr></table></figure><h3 id="5-3-在内网机器上安装-frpc"><a href="#5-3-在内网机器上安装-frpc" class="headerlink" title="5.3 在内网机器上安装 frpc"></a>5.3 在内网机器上安装 frpc</h3><p>和 5.2 类似，我们需要 <code>frpc</code> 可执行程序和 <code>frpc.ini</code> 配置文件。</p><p>创建配置文件 <code>/etc/frp/frpc.ini</code>，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">log_file &#x3D; &#x2F;tmp&#x2F;frpc.log</span><br><span class="line">log_level &#x3D; info</span><br><span class="line">log_max_days &#x3D; 3</span><br><span class="line">login_fail_exit &#x3D; false</span><br><span class="line">protocol &#x3D; tcp</span><br><span class="line">server_addr &#x3D; example.com</span><br><span class="line">server_port &#x3D; 12345</span><br><span class="line">tcp_mux &#x3D; true</span><br><span class="line">token &#x3D; A_STRONG_PASSWORD</span><br><span class="line">user &#x3D; YOUR_USERNAME</span><br><span class="line"></span><br><span class="line">[second-n1-seafile]</span><br><span class="line">type &#x3D; http</span><br><span class="line">custom_domains &#x3D; seafile.example.com</span><br><span class="line">local_ip &#x3D; x.x.x.x</span><br><span class="line">local_port &#x3D; 8088</span><br><span class="line">remote_port &#x3D; 12345</span><br><span class="line">use_compression &#x3D; true</span><br><span class="line">use_encryption &#x3D; true</span><br></pre></td></tr></table></figure><p>frpc 这边也使用 systemd 管理程序。创建 <code>/lib/systemd/system/frpc.service</code>，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;FRPC Client Daemon</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">Wants&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;frpc -c &#x2F;etc&#x2F;frp&#x2F;frpc.ini</span><br><span class="line">Restart&#x3D;always</span><br><span class="line">RestartSec&#x3D;20s</span><br><span class="line">User&#x3D;xxx</span><br><span class="line">Group&#x3D;xxx</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>设置开机自启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable frpc</span><br></pre></td></tr></table></figure><p>启动 frpc 程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start frpc</span><br></pre></td></tr></table></figure><h3 id="5-4-其他事项"><a href="#5-4-其他事项" class="headerlink" title="5.4 其他事项"></a>5.4 其他事项</h3><p>域名相关的东西我就不说了。</p><p>配置的时候注意可执行文件、配置文件的权限，和文件拥有者和所在组。</p><p>还有防火墙。除了 Linux distro 自身安装的各种防火墙程序之外，类似良心云这种厂商在虚拟化的应用服务器之外还有一层硬件级别的防火墙，如果配置后发现不能访问可以优先往这些方面排查。</p><p>下面我们在 VPS 上使用 nginx 反代 seafile 服务，并使用 SSL/TLS 加密（在最外层套 SSL）。得先准备好申请好的证书和私钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 比如 nginx 配置中的证书和私钥形式如下</span><br><span class="line"> </span><br><span class="line">ssl_certificate    &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;example.com&#x2F;fullchain.pem;</span><br><span class="line">ssl_certificate_key    &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;example.com&#x2F;privkey.pem;</span><br></pre></td></tr></table></figure><p>创建 nginx 配置文件 <code>/etc/nginx/sites-enabled/seafile-home.conf</code> 内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  seafile.example.com;</span><br><span class="line">        rewrite ^ https:&#x2F;&#x2F;$http_host$request_uri? permanent;    # Forced redirect from HTTP to HTTPS</span><br><span class="line">        server_tokens off;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">        ssl_certificate    &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;example.com&#x2F;fullchain.pem;</span><br><span class="line">        ssl_certificate_key    &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;example.com&#x2F;privkey.pem;</span><br><span class="line">        server_name seafile.example.com;</span><br><span class="line">        server_tokens off;</span><br><span class="line"> </span><br><span class="line">        # HSTS for protection against man-in-the-middle-attacks</span><br><span class="line">        add_header Strict-Transport-Security &quot;max-age&#x3D;31536000; includeSubDomains&quot;;</span><br><span class="line"> </span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">        ssl_prefer_server_ciphers off;</span><br><span class="line"> </span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line"> </span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                proxy_pass         http:&#x2F;&#x2F;127.0.0.1:12345;</span><br><span class="line">                proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_set_header   X-Forwarded-Host $server_name;</span><br><span class="line">                proxy_set_header   X-Forwarded-Proto https;</span><br><span class="line">                proxy_set_header   Host $host:$server_port;</span><br><span class="line"> </span><br><span class="line">                access_log      &#x2F;var&#x2F;log&#x2F;nginx&#x2F;seahub.access.log;</span><br><span class="line">                error_log       &#x2F;var&#x2F;log&#x2F;nginx&#x2F;seahub.error.log;</span><br><span class="line"> </span><br><span class="line">                proxy_read_timeout  1200s;</span><br><span class="line"> </span><br><span class="line">                client_max_body_size 0;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查 nginx 语法并重载 nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># nginx -t &amp;&amp; nginx -s reload</span><br></pre></td></tr></table></figure><p>然后就可以通过 <a href="https://seafile.example.com/">https://seafile.example.com</a> 访问属于自己的 seafile 服务。</p><hr><p><img src="https://hellodk.cn/usr/uploads/spot_loading.gif" alt="20220616144938"></p><blockquote><p>进入后台管理页面，可以随意切换公网和内网访问，大部分时候还是使用公网的域名访问配置</p></blockquote><p><img src="https://hellodk.cn/usr/uploads/spot_loading.gif" alt="20220616144704"></p><blockquote><p>跑到了 100MiB/s，但是没有截到图 🤣</p></blockquote><p><img src="https://hellodk.cn/usr/uploads/spot_loading.gif" alt="20220616145227"></p><blockquote><p>切换到内网，打开浏览器上传的速度，受限于机器性能，比如我的 Phicomm N1 最多只能跑到 50MiB/s</p></blockquote><p>全文完。</p><h2 id="6-引用与致谢"><a href="#6-引用与致谢" class="headerlink" title="6. 引用与致谢"></a>6. 引用与致谢</h2><ul><li>各个协议的 wikipedia 简体中文页面</li><li>各个开源项目</li><li><a href="https://zhuanlan.zhihu.com/p/411161467">NFS、FTP、SMB、WebDav、DLNA协议，傻傻分不清？</a></li><li><a href="https://post.smzdm.com/p/ar6k932q/">SMB、FTP、WebDAV协议，傻傻分不清？5000字教程，教你快速上手</a></li><li><a href="https://www.lategege.com/?p=466">nas各种共享访问协议的使用</a></li><li><a href="https://www.raysync.cn/news/post-id-864">13 种适用于企业的文件传输协议</a></li></ul><p>end.</p><p>打赏: <img src="https://img.gejiba.com/images/6e24e0daffd9f056c2488ba1810b0711.png" alt="微信收款二维码">微信, <img src="https://img.gejiba.com/images/3f53c114d523608679ec81d24e4c2a3a.jpg" alt="支付宝收款二维码">支付宝</p><p>标签: <a href="https://hellodk.cn/tag/Linux/">Linux</a>, <a href="https://hellodk.cn/tag/%E7%BD%91%E7%BB%9C/">网络</a></p><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/4.0/">知识共享署名-相同方式共享 4.0 国际许可协议</a> 进行许可。</p><h3 id="添加新评论"><a href="#添加新评论" class="headerlink" title="添加新评论"></a>添加新评论</h3><p>OωO表情</p><p><img src="https://hellodk.cn/action/captcha" alt="captcha"><br><strong>请输入验证码：</strong> </p><p>提交评论</p><ul><li>上一篇: <a href="https://hellodk.cn/post/1048">解决 webdav 连接 seafile 无法重命名文件等操作造成的 SeafDAV: MOVE returns 502 Bad Gateway 错误</a></li><li>下一篇: 没有了</li></ul><p>Copyright © 2017 - 2022 by hellodk.cn | Proudly Powered by <a href="http://www.typecho.org/">Typecho</a> &amp; <a href="https://www.offodd.com/17.html">Initial </a>&amp; <a href="https://hellodk.cn/">❤.</a></p><p><a href="https://hellodk.cn/archives">Archives | </a><a href="https://hellodk.cn/sitemap.xml">SiteMap | </a><a href="https://hellodk.cn/about">About</a></p><p>Site has been running for 3 year(s) 71 days 11 hours.</p><p>小破站总访问量才 792276 次，要加油鸭！</p><p>页面加载用时: 524 ms</p><ul><li></li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机硬件相关知识</title>
      <link href="814126a1.html"/>
      <url>814126a1.html</url>
      
        <content type="html"><![CDATA[<p>主板 上有各种芯片 南桥,北桥,接口芯片连接总线</p><p>CPU 频率,核心,架构</p><p>GPU 专用矢量渲染,并行能力强,算力丰富</p><p>目前显卡 消费端就是 gtx,gnx 生产端 tesla</p><table><thead><tr><th><strong>通用并行运算</strong></th><th><strong>显示的api</strong></th></tr></thead><tbody><tr><td>cude</td><td>directx</td></tr><tr><td>opencl</td><td>opengl()</td></tr><tr><td></td><td>vulkan逐渐替代</td></tr><tr><td></td><td>webgl(浏览器基于opengl 封装的api 包括cesuim 等很多js 三维基于这个 来进一步封装和集成)</td></tr></tbody></table><p>实时画面渲染 可能是GPU集群来实现 一方面是处理速度网络是有延时的</p><p>主板上多GPU功能主要需要使用NVIDIA上面的SLI来实现目前pci-e 主板来实现目前ue4官方并不支持多GPU</p><p>对应运行gpu算力的部分 一般是用 NVIDIA-smi来实现集中接口调用 类似于 opencl</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gdal镜像集成和dockerfile使用</title>
      <link href="59cba8fc.html"/>
      <url>59cba8fc.html</url>
      
        <content type="html"><![CDATA[<h2 id="gdal介绍"><a href="#gdal介绍" class="headerlink" title="gdal介绍"></a>gdal介绍</h2><p>gdal的一个用c++语言编写的库，用于处理地理信息相关的数据包括转换，识别数据，格式化数据以及解析</p><p>同时提供第三方语言的SDK包括python，java上述需要编译后使用 java是需要使用jni接口调用实现方法在window平台是DLL文件，在linux平台是so文件，最后需要使用和初始化服务。</p><h3 id="gdal命令使用"><a href="#gdal命令使用" class="headerlink" title="gdal命令使用"></a>gdal命令使用</h3><p>1、ogrinfo</p><p>orginfo –version</p><p>ogrinfo –help</p><p>2、ogr2ogr</p><blockquote><ul><li>ogr2ogr postgis转shp 并执行SQL</li></ul><p>ogr2ogr -f  “ESRI Shapefile” file1.shp    PG:”host=’192.168.7.11’ port=’5432’ dbname=’postgres’ user=’postgres’ password=’1111’” -sql “select * from like_fff_xztc”   -dialect PostgreSQL</p><ul><li>ogr2ogr postgis转化为shp文件且指定SQL执行</li></ul><p>ogr2ogr -f  “ESRI Shapefile” /app/tmp/result_like_fff_xztc/result_like_fff_xztc.shp PG:”host=’192.168.7.11’ port=’5432’ dbname=’postgres’ user=’postgres’ password=’1111’” -sql “select fid,objectid,bsm,dlmc,qsdwmc,zldwmc,f_xzqhmc,f_year,f_month,partitionno,se_anno_cad_data,tbdlmj,ysdm,dlbm,qsxz,qsdwdm,zldwdm,xzgdlx,zldj,f_xzqhdm,f_diccode,f_fileid,tbbh,shape_length,shape_area,st_transForm(geom,4490) as geom  from like_fff_xztc where ST_Intersects(geom,st_transform(st_geomFromText(‘MULTIPOLYGON(((112.973570327973 30.634569982416,112.973501343979 30.6344597898424,112.973423613701 30.6344687491655)))’,4490),4490))” -dialect PostgreSQL  –config SHAPE_ENCODING ‘UTF-8’</p><ul><li>ogr2ogr shp导入shp 命令</li></ul><p>ogr2ogr   -f  “PostgreSQL” PG:”host=’192.168.7.11’ port=’5432’ dbname=’test’ user=’postgres’ password=’1111’” C:\Users\Administrator\Desktop\ceshi\old\Water_region.shp -progress  -nlt PROMOTE_TO_MULTI -lco GEOMETRY_NAME=geom -lco FID=fid  -overwrite -nln ‘like_test_update’  -unsetFieldWidth  –config SHAPE_ENCODING ‘utf-8’</p><ul><li>ogr2ogr mdb导入shp命令</li></ul><p>ogr2ogr -f “PostgreSQL” PG:”host=’192.168.7.11’ port=’5432’ dbname=’test_new_app’ user=’postgres’ password=’1111’” /app/laohekou.mdb  -progress  -nlt PROMOTE_TO_MULTI -lco GEOMETRY_NAME=geom -lco FID=fid  -overwrite -nln ‘test_mdb_001’</p><ul><li>ogr2ogr shp转入postgis</li></ul><p>ogr2ogr -f “PostgreSQL” PG:”host=xxx user=xxx password=xxx dbname=cxxxhina”  -nlt GEOMETRY 省级行政区.shp</p></blockquote><p>3、</p><h2 id="官方gdal的dockerfile简介"><a href="#官方gdal的dockerfile简介" class="headerlink" title="官方gdal的dockerfile简介"></a>官方gdal的dockerfile简介</h2><p><a href="https://github.com/OSGeo/gdal/tree/01490692487cb436bb4b10740cd2aabb403531fe/docker"><a href="https://github.com/OSGeo/gdal/tree/master/docker">gdal/docker at master · OSGeo/gdal</a></a></p><blockquote><h1 id="Alpine-based"><a href="#Alpine-based" class="headerlink" title="Alpine based"></a>Alpine based</h1><p>Alpine version:</p><ul><li>3.15 for 3.5</li><li>3.16 for GDAL 3.6dev</li></ul><h2 id="Small-osgeo-gdal-alpine-small-latest"><a href="#Small-osgeo-gdal-alpine-small-latest" class="headerlink" title="Small: osgeo/gdal:alpine-small-latest"></a>Small: <code>osgeo/gdal:alpine-small-latest</code></h2><ul><li>Image size: ~ 59 MB</li><li>Raster drivers: ultrasmall + built-in + SQLite-based ones + network-based ones</li><li>Vector drivers: ultrasmall + built-in + most XML-based ones + network-based ones + PostgreSQL</li><li>Using internal libtiff and libgeotiff</li><li>External libraries enabled: ultrasmall + libexpat, libpq, libssl</li><li><em>No</em> GDAL Python</li><li>Base PROJ grid package (<a href="http://download.osgeo.org/proj/proj-datumgrid-1.8.zip">http://download.osgeo.org/proj/proj-datumgrid-1.8.zip</a>)</li><li>Overall licensing terms of the GDAL build: permissive (MIT, BSD style, Apache, etc..)</li></ul><p>See <a href="https://github.com/OSGeo/gdal/blob/master/docker/alpine-small/Dockerfile">alpine-small/Dockerfile</a></p><h2 id="Normal-osgeo-gdal-alpine-normal-latest"><a href="#Normal-osgeo-gdal-alpine-normal-latest" class="headerlink" title="Normal: osgeo/gdal:alpine-normal-latest"></a>Normal: <code>osgeo/gdal:alpine-normal-latest</code></h2><ul><li>Image size: ~ 277 MB</li><li>Raster drivers: small + netCDF, HDF5, BAG</li><li>Vector drivers: small + Spatialite, XLS</li><li>Using internal libtiff and libgeotiff</li><li>External libraries enabled: small + libgeos, libhdf5, libhdf5, libkea, libnetcdf, libfreexl, libspatialite, libxml2, libpoppler, openexr, libheif, libdeflate, libparquet</li><li>GDAL Python</li><li>Base PROJ grid package (<a href="http://download.osgeo.org/proj/proj-datumgrid-1.8.zip">http://download.osgeo.org/proj/proj-datumgrid-1.8.zip</a>)</li><li>Overall licensing terms of the GDAL build: copy-left (GPL) + LGPL + permissive</li></ul><p>See <a href="https://github.com/OSGeo/gdal/blob/master/docker/alpine-normal/Dockerfile">alpine-normal/Dockerfile</a></p><h1 id="Ubuntu-based"><a href="#Ubuntu-based" class="headerlink" title="Ubuntu based"></a>Ubuntu based</h1><p>Ubuntu version:</p><ul><li>20.04 for GDAL 3.4 and 3.5</li><li>22.04 for GDAL 3.6dev</li></ul><h2 id="Small-osgeo-gdal-ubuntu-small-latest"><a href="#Small-osgeo-gdal-ubuntu-small-latest" class="headerlink" title="Small: osgeo/gdal:ubuntu-small-latest"></a>Small: <code>osgeo/gdal:ubuntu-small-latest</code></h2><ul><li>Image size: ~ 385 MB</li><li>Raster drivers: all built-in + JPEG + PNG + JP2OpenJPEG + WEBP +SQLite-based ones + network-based ones</li><li>Vector drivers: all built-in + XML based ones + SQLite-based ones + network-based ones + PostgreSQL</li><li>Using internal libtiff and libgeotiff</li><li>External libraries enabled: libsqlite3, libproj, libcurl, libjpeg, libpng, libwebp, libzstd, libexpat, libxerces-c, libpq, libssl, libgeos, libspatialite</li><li>GDAL Python (Python 3.8 for Ubuntu 20.04, Python 3.10 for Ubuntu 22.04)</li><li>Base PROJ grid package (<a href="http://download.osgeo.org/proj/proj-datumgrid-1.8.zip">http://download.osgeo.org/proj/proj-datumgrid-1.8.zip</a>)</li><li>Overall licensing terms of the GDAL build: LGPL + permissive (MIT, BSD style, Apache, etc..)</li></ul><p>See <a href="https://github.com/OSGeo/gdal/blob/master/docker/ubuntu-small/Dockerfile">ubuntu-small/Dockerfile</a></p><h2 id="Full-osgeo-gdal-ubuntu-full-latest-aliased-to-osgeo-gdal"><a href="#Full-osgeo-gdal-ubuntu-full-latest-aliased-to-osgeo-gdal" class="headerlink" title="Full: osgeo/gdal:ubuntu-full-latest (aliased to osgeo/gdal)"></a>Full: <code>osgeo/gdal:ubuntu-full-latest</code> (aliased to <code>osgeo/gdal</code>)</h2><ul><li>Image size: ~ 1.48 GB</li><li>Raster drivers: all based on almost all possible free and open-source dependencies</li><li>Vector drivers: all based on almost all possible free and open-source dependencies</li><li>Using internal libtiff and libgeotiff</li><li>External libraries enabled: small + libnetcdf, libhdf4, libhdf5, libtiledb, libkea, mongocxx 3.4, libspatialite, unixodbc, libxml2, libcfitsio, libmysqlclient, libkml, libpoppler, pdfium, openexr, libheif, libdeflate, libparquet</li><li>GDAL Python (Python 3.8 for Ubuntu 20.04, Python 3.10 for Ubuntu 22.04)</li><li><em>All</em> PROJ grid packages (equivalent of latest of proj-data-X.zip from <a href="http://download.osgeo.org/proj/">http://download.osgeo.org/proj/</a> at time of generation, &gt; 500 MB)</li><li>Overall licensing terms of the GDAL build: copy-left (GPL) + LGPL + permissive</li></ul></blockquote><p>点击进入后可以看到介绍，目前分别在两个linux发行版本上进行镜像文件创建，分别是Ubuntu，和alpine</p><p>alpine是精简的服务目前不包括第三方的拓展目前在linux上不支持pgeo（改数据源可以读取mdb和其他格式数据的支持）</p><p>ubuntu是完整版是提供全量的服务，支持pgeo</p><p>介绍</p><p>linux下面读取微软的软件word，Excel，PPT是有平台和驱动，但是像access这种个人数据库需要ODBC这个开源平台来读取这类数据，gdal在linux平台通过ODBC接口来读取access个人数据库，同时对数据解析，我们需要利用这个解析工具来读取数据被我们java读取，或者通过ogr2ogr命令来转换数据</p><p>ODBC</p><p>是linux平台的数据的解析</p><p>ogrinfo 能识别</p><p>odbcinst -j  表示odbc正确安装</p><h2 id="方法一osgeo-gdal-ubuntu-full基础上安装-unixODBC-mdbtools"><a href="#方法一osgeo-gdal-ubuntu-full基础上安装-unixODBC-mdbtools" class="headerlink" title="方法一osgeo/gdal:ubuntu-full基础上安装(unixODBC,mdbtools)"></a>方法一osgeo/gdal:ubuntu-full基础上安装(unixODBC,mdbtools)</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span>  osgeo/gdal:ubuntu-full-<span class="number">3.0</span>.<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cp  /etc/apt/sources.list  /etc/apt/sources.list.bak</span></span><br><span class="line"><span class="comment"># RUN echo  &#x27;deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse \ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse \ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse \ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse \ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse \ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\n&#x27; &gt; /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; cat /etc/apt/sources.list &amp;&amp; apt-get  -y --fix-missing --no-install-recommends install  gcc make g++  bison flex gawk unixodbc-dev libgdal-java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./unixODBC-2.3.11   /usr/unixODBC-2.3.11</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./mdbtools-1.0.0   /usr/mdbtools-1.0.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod -R 777 /usr/unixODBC-2.3.11/ &amp;&amp; chmod -R 777 /usr/mdbtools-1.0.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">   <span class="built_in">cd</span> /usr/unixODBC-2.3.11/ &amp;&amp; ./configure --prefix=/usr/unixODBC-2.3.11 --includedir=/usr/include --libdir=/usr/lib --bindir=/usr/bin --sysconfdir=/etc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  <span class="built_in">cd</span> /usr/unixODBC-2.3.11/ &amp;&amp; make</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  <span class="built_in">cd</span> /usr/unixODBC-2.3.11/ &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  <span class="built_in">cd</span>  /usr/mdbtools-1.0.0 &amp;&amp; ./configure --with-unixodbc=/usr/unixODBC-2.3.11</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span>  /usr/mdbtools-1.0.0 &amp;&amp; make</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span>  /usr/mdbtools-1.0.0 &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN echo &quot;export LD_LIBRARY_PATH_LIKE=/usr/local/lib&quot; &gt;&gt; /etc/profile &amp;&amp; source /etc/profile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./odbcinst.ini  /etc</span></span><br><span class="line"><span class="keyword">ENV</span> LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib</span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  cp /usr/share/java/gdal.jar  /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/</span></span><br><span class="line"><span class="comment"># 指定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 设定工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash">  config /app/config</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash">  ./shp2pg.py /app/py/shp2pg.py</span></span><br><span class="line"><span class="comment"># 声明端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">11002</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> uts-stg.jar /app/uts-stg.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-Djava.library.path=/usr/lib/jni&quot;</span>, <span class="string">&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 &quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app/uts-stg.jar&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gdal使用和环境初始化在Windows和linux下的介绍</title>
      <link href="54871149.html"/>
      <url>54871149.html</url>
      
        <content type="html"><![CDATA[<p>gdal是用c语言编写的服务能解析地理信息服务中的各种解析服务</p><p>在Windows中可以使用别人编译打包好的服务，里面以后各种依赖的DLL和jar包，可以提供个java调用，同时也支持其他语言。</p><p>我下载的版本<a href="https://www.gisinternals.com/query.html?content=filelist&file=release-1911-x64-gdal-3-0-4-mapserver-7-4-3.zip">release-1911-x64-gdal-3-0-4-mapserver-7-4-3.zip</a></p><p>1.配置gdal的环境</p><p><a href="https://gis.stackexchange.com/questions/228190/gdal-java-bindings-gdal-2-0-0-in-eclipse">GDAL Java bindings GDAL 2.0.0 in Eclipse - Geographic Information Systems Stack Exchange</a></p><p>否则会包下列错误:</p><p><strong>UnsatisfiedLinkError: E:\jdk\jdk-12.0.2\bin\gdalalljni.dll: Can’t find dependent libraries</strong></p><p>如果是默认安装的路径在C:\Program Files (x86)\GDAL\ 下需要修改</p><table><thead><tr><th>创建路径</th><th>变量的名称</th><th>路径</th><th></th></tr></thead><tbody><tr><td>CREATE</td><td>GDAL_DATA</td><td>C:\gdal\bin\gdal-data</td><td>必须</td></tr><tr><td>CREATE</td><td>GDAL_DRIVER_PATH</td><td>C:\gdal\bin\gdal\plugins</td><td>必须</td></tr><tr><td>APPEND</td><td>PATH</td><td>C:\gdal\bin</td><td>必须</td></tr><tr><td>APPEND</td><td>PATH</td><td>C:\gdal\bin\gdal\apps</td><td>可选</td></tr></tbody></table><p>同时将压缩包内</p><p>配置完成是命令行输入 gdalinfo –version看是否能正常调用</p><p>如果出现ogr_MSSQLSpatial.dl加载不了的情况不用理会,在github上貌似Windows系统的集成问题如果觉得看着难受可以 直接重命名  ogr_MSSQLSpatial.dll.bak</p><p>参考文章: <a href="https://blog.csdn.net/l2931050/article/details/124688681">Gdal环境配置（Windows系统）_gdal配置环境变量_魔希达的博客-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> gdal </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springsecurity入门介绍</title>
      <link href="329899c5.html"/>
      <url>329899c5.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6934503341380599822">Spring Security系列之一 简单介绍和实战 - 掘金</a></p><p><a href="https://www.1024sou.com/article/56472.html">20210902#_【项目实践】一文带你搞定Spring Security + JWT - 1024搜-程序员专属的搜索引擎</a></p><p><a href="https://www.springcloud.cc/spring-session.html">Spring Session 中文文档 参考手册 中文版</a></p><p>springsecurity和shiro都是权限和认证的框架，目前公司有基于springsecurity开发集成包，目前使用结合使用过程梳理一下springsecurity的特性和注意事项和集成的要点</p><p>目前引入的springsecurity的</p><p>springsecurity -outh 2.2.2.6 和需要和session打交道的session-core和session-data-redis2.4.1</p><p>利用session-redis来存储session</p><p>Web系统中登录认证（Authentication）的核心就是<strong>凭证</strong>机制，无论是<code>Session</code>还是<code>JWT</code>，都是在用户成功登录时返回给用户一个凭证，后续用户访问接口需携带凭证来标明自己的身份。后端会对需要进行认证的接口进行安全判断，若凭证没问题则代表已登录就放行接口，若凭证有问题则直接拒绝请求。这个安全判断<strong>都是放在过滤器里统一处理的</strong>：</p><p>一般需要实现 </p><h3 id="需要实现UserDetails"><a href="#需要实现UserDetails" class="headerlink" title="需要实现UserDetails"></a>需要实现UserDetails</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AuthUser extends User UserDetails, CredentialsContainer</span><br></pre></td></tr></table></figure><h3 id="实现loadUserByUsername"><a href="#实现loadUserByUsername" class="headerlink" title="实现loadUserByUsername"></a>实现loadUserByUsername</h3><p>org.springframework.security.core.userdetails.UserDetailsService.loadUserByUsername</p><h3 id="PasswordEncoder-密码的认证"><a href="#PasswordEncoder-密码的认证" class="headerlink" title="PasswordEncoder 密码的认证"></a><strong>PasswordEncoder</strong> 密码的认证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public PasswordEncoder passwordEncoder() &#123;</span><br><span class="line">    &#x2F;&#x2F; 这里我们使用bcrypt加密算法，安全性比较高</span><br><span class="line">    return new BCryptPasswordEncoder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承WebSecurityConfigurerAdapter"><a href="#继承WebSecurityConfigurerAdapter" class="headerlink" title="继承WebSecurityConfigurerAdapter"></a>继承WebSecurityConfigurerAdapter</h3><p>org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</p><blockquote><p>由 authenticationManager() 的默认实现用来尝试获取 AuthenticationManager。如果被覆盖，应该使用 AuthenticationManagerBuilder 来指定 AuthenticationManager。<br>authenticationManagerBean() 方法可用于将生成的 AuthenticationManager 公开为 Bean。 userDetailsServiceBean() 可用于公开使用 AuthenticationManagerBuilder 作为 Bean 创建的最后填充的 UserDetailsService。 UserDetailsService 也将自动填充到 HttpSecurity.getSharedObject(Class) 以与其他 SecurityContextConfigurer （即 RememberMeConfigurer ）一起使用<br>例如，以下配置可用于在内存中注册身份验证，以公开内存中的 UserDetailsService：<br>UserDetailsService:<br>       @Override<br>       protected void configure(AuthenticationManagerBuilder auth) {<br>           auth<br>           // enable in memory based authentication with a user named<br>           // “user” and “admin”<br>           .inMemoryAuthentication().withUser(“user”).password(“password”).roles(“USER”).and()<br>                   .withUser(“admin”).password(“password”).roles(“USER”, “ADMIN”);<br>       }</p><pre><code>   // Expose the UserDetailsService as a Bean   @Bean   @Override   public UserDetailsService userDetailsServiceBean() throws Exception &#123;       return super.userDetailsServiceBean();   &#125;</code></pre></blockquote><p>目前使用的方式设置认证的方式和控制那些需要被权限管理</p><h3 id="继承SecurityMetadataSource"><a href="#继承SecurityMetadataSource" class="headerlink" title="继承SecurityMetadataSource"></a>继承SecurityMetadataSource</h3><p>org.springframework.security.access.SecurityMetadataSource</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实现动态的权限验证，当然要先要获取对应的资源，然后再将他们对应哪些角色可以访问的关系表示出来</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring知识回顾</title>
      <link href="d8ed5f9d.html"/>
      <url>d8ed5f9d.html</url>
      
        <content type="html"><![CDATA[<p>spring的利用的面向切面编程（AOP），动态代理（反射）和filter，intercept，</p><p>ApplicationContent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Qualifier</span><br><span class="line">Roucese</span><br><span class="line">Autowired</span><br></pre></td></tr></table></figure><h2 id="拦截器利用了反射对请求进行自定义的操作可以访问action上下文和栈的对象，保证数据"><a href="#拦截器利用了反射对请求进行自定义的操作可以访问action上下文和栈的对象，保证数据" class="headerlink" title="拦截器利用了反射对请求进行自定义的操作可以访问action上下文和栈的对象，保证数据"></a>拦截器利用了反射对请求进行自定义的操作可以访问action上下文和栈的对象，保证数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Interceptor 前置&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Interceptor 处理中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Interceptor 后置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤器利用原始servlet来进行操作主要可用于鉴权和"><a href="#过滤器利用原始servlet来进行操作主要可用于鉴权和" class="headerlink" title="过滤器利用原始servlet来进行操作主要可用于鉴权和"></a>过滤器利用原始servlet来进行操作主要可用于鉴权和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 前置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 处理中&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 后置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Aspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.HasAuth)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object[] args = point.getArgs();</span><br><span class="line">       <span class="comment">/* if (StringUtil.IsEmpty(args[0])) &#123;</span></span><br><span class="line"><span class="comment">            args[0] = &quot;default&quot;;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">return</span> point.proceed(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//标注该方法体为后置通知，当目标方法执行成功后执行该方法体  </span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;within(com.abchina.irms..*) &amp;&amp; @annotation(rl)&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLogSuccess</span><span class="params">(JoinPoint jp, rmpfLog rl)</span></span>&#123;  </span><br><span class="line">        Object[] parames = jp.getArgs();<span class="comment">//获取目标方法体参数  </span></span><br><span class="line">        String params = parseParames(parames); <span class="comment">//解析目标方法体的参数  </span></span><br><span class="line">        String className = jp.getTarget().getClass().toString();<span class="comment">//获取目标类名  </span></span><br><span class="line">        className = className.substring(className.indexOf(<span class="string">&quot;com&quot;</span>));  </span><br><span class="line">        String signature = jp.getSignature().toString();<span class="comment">//获取目标方法签名  </span></span><br><span class="line">        String methodName = signature.substring(signature.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>, signature.indexOf(<span class="string">&quot;(&quot;</span>));  </span><br><span class="line">        String modelName = getModelName(className); <span class="comment">//根据类名获取所属的模块  </span></span><br><span class="line">          </span><br><span class="line">      ...</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//标注该方法体为异常通知，当目标方法出现异常时，执行该方法体  </span></span><br><span class="line">    <span class="meta">@AfterThrowing(pointcut=&quot;within(com.abchina.irms..*) &amp;&amp; @annotation(rl)&quot;, throwing=&quot;ex&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLog</span><span class="params">(JoinPoint jp, rmpfLog rl, BusinessException ex)</span></span>&#123;  </span><br><span class="line">       ...</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不加载特定的bean"><a href="#不加载特定的bean" class="headerlink" title="不加载特定的bean"></a>不加载特定的bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="meta">@EnableSpringConfigured</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.example&quot;&#125;, </span></span><br><span class="line"><span class="meta">               excludeFilters=&#123;@ComponentScan.Filter(type = FilterType.REGEX, pattern = &quot;org.xxx.yyy.*&quot;),</span></span><br><span class="line"><span class="meta">  @ComponentScan.Filter(type=FilterType.ASSIGNABLE_TYPE, value=Foo.class)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="stream-自定义function"><a href="#stream-自定义function" class="headerlink" title="stream  自定义function"></a>stream  自定义function</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这些科技将在2022年改变你的生活内容（华尔街日报转载）</title>
      <link href="a683129.html"/>
      <url>a683129.html</url>
      
        <content type="html"><![CDATA[<p>Facebook公司更名？全球芯片荒？数字艺术品卖出天价？没有哪个水晶球準确预测了2021年的科技业景象。这也正是这项一年一度的活动有意思和令人兴奋的地方之一——我们团队每年都会集思广益，对接下来一年科技圈会发生些什么进行预测。可就算我们对当前趋势作了最为详尽的分析，以及请来行业专家和占卜工具加持，也依然无法精确预测未来。</p><p>有一点可以确定的是，2022年将充满新技术带来的惊喜（参见：混合现实和家用机器人），人们将继续讨论科技对世界带来的影响（参见：社交媒体和可持续性），同时还会有许多意想不到的事情发生，因为最近时常会有一些令你大呼意外的时刻。</p><p>以下是我们对2022年科技行业的预测：</p><h2 id="电动车价格更亲民"><a href="#电动车价格更亲民" class="headerlink" title="电动车价格更亲民"></a>电动车价格更亲民</h2><p>人们购买电动车时选择为数不多的局面成为过去。到2022年底时，可供美国消费者挑选的电动车车型将超过100款。而且，许多即将面世的车型要比一两年前的那些价格更亲民。</p><p>电动车在美国乘用车保有量中的佔比仍不到3%，研究显示，若想让更多人选择电动车，价格是一大关键因素。（另一个关键因素是基础设施。美国目前的公共快速充电桩数量远远达不到专家估计的需求量。）</p><p>为企业提供咨询服务的Guidehouse公司首席研究分析师斯科特·谢帕德（Scott Shepard）指出，从全球范围看，2015年至2020年间，尽管电动车的平均续航里程增加了45%，但平均定价下降了30%。他预计2022年这一趋势将得以延续，届时至少还有四款价格在4万美元以下的电动车登陆美国。</p><p>福特F-150「闪电」电动皮卡（Ford F-150 Lightning，制造商建议零售价39,974美元起）的表现或许可以给我们一点启发。该公司在接到近20万辆F-150「闪电」的订单后，不得不关闭了预购服务；福特最新的业绩报告显示，有75%的买家是头一次购买福特品牌的汽车。</p><p>与此同时，日产汽车（Nissan）将早年投放市场的聆风（Leaf）电动车的起售价从32,620美元大幅下调至28,375美元。聆风降价后（以及购车时享受7,500美元的稅收抵免后）在同档次的汽车中，价格会低于2022年款本田思域（Honda Civic）燃油掀背车。除此之外，还有许多电动汽车车型的起售价都在4万美元以下，如雪佛兰（Chevrolet）、现代（Hyundai）、起亚（Kia）、马自达（Mazda）、Mini和大众（Volkswagen）的一些车型，它们有的已经上市，有的不久便会投放市场。</p><h2 id="可持续性继续受关注"><a href="#可持续性继续受关注" class="headerlink" title="可持续性继续受关注"></a>可持续性继续受关注</h2><p>微软（Microsoft）利用回收的海洋塑胶垃圾做了一款鼠标。苹果（Apple）的最新款iPhone和iPad都含有回收材料。亚马逊（Amazon）的新款Echo智能喇叭的显示屏同样用到了回收塑胶，而且在待机状态下十分节能。2021年每一场重要的科技主题演讲中，都会包含应对气候变化的环节，2022年这一现象只会有增无减。</p><p>可以说，科技业留下的碳足迹比航空业更大，眼下科技公司正在努力改变这一现状，实现可持续发展。无论是从手机、平板还是电脑的设计中，都可以看到它们这方面的努力。</p><p>可持续性还意味着，你的同一部电子设备可以用得更久。加州大学洛杉矶分校（University of California, Los Angeles）管理学教授马加利·德尔马斯（Magali Delmas）说，「真正的问题在于科技业研发的产品使用壽命太短，而且很难维修，接着就被扔进垃圾填埋场。」</p><p>电子设备制造商也在尝试解决这一问题。苹果将在2022年初推出一项自助维修计划，按照该计划，用户和独立技术人员可以利用正版苹果零部件自主维修设备，这也是倡导「维修权」的人士一直以来都在游说的一项举措。戴尔公司（Dell）近日展示了概念性笔记本电脑Luna，它使用的螺丝更少，而且没有风扇，从而最大限度地提高了可维修性。</p><h2 id="社交媒体加大力度保护未成年人"><a href="#社交媒体加大力度保护未成年人" class="headerlink" title="社交媒体加大力度保护未成年人"></a>社交媒体加大力度保护未成年人</h2><p>2021年我们意识到，社交媒体类应用程式——尤其是Instagram和TikTok——在阻止年轻用户观看不良内容以及防止他们沉迷方面做得不够。2022年我们会看到，美国国会议员和社交媒体公司将加大对儿童的保护力度。</p><p>针对目前主要由算法驱动的内容展示方式，Instagram已承诺在2022年初推出替代方案。按照现有方式，用户基本无法控制自己可以看到哪些内容。Instagram负责人亚当·莫塞里（Adam Mosseri）在12月向美国参议院一个下属委员会表示，该公司2022年将推出更多针对青少年的家长控制功能，包括从3月开始，允许家长设定时间限制。</p><p>TikTok则表示，它已开始调整算法，这样人们看到的内容中就不会充斥著大量有关紊乱饮食、抑郁症和其他涉及不良话题的影片。该公司发言人说，它将继续依据用户年龄对功能作出限制，同时也会为家长提供工具。</p><p>然而，由于不相信这些企业会自己做出必要的改变，议员们跨党派合作，著手制定新的法律。马萨诸塞州民主党参议员埃德·马基（Ed Markey）和路易斯安那州共和党参议员比尔·卡西迪（Bill Cassidy）提出了新版本的《儿童和青少年网络私隐保护法》（Children and Teens’ Online Privacy Protection Act, 简称：Coppa 2.0），提议将目前的私隐保护对象扩大到13至15岁的用户，同时禁止针对儿童的个性化广告，等等。康涅狄格州民主党参议员理查德·布卢门塔尔（Richard Blumenthal）和田纳西州共和党参议员玛莎·布莱克本（Marsha Blackburn）也在推动立法，要求提高社交媒体算法的透明度。</p><h2 id="芯片！芯片！"><a href="#芯片！芯片！" class="headerlink" title="芯片！芯片！"></a>芯片！芯片！</h2><p>从2020年初开始，全球随处可见的疫情「封锁令」使得人们对许多搭载微芯片的东西有了更大的需求——与外界联系需要的智能手机、居家办公和学习需要的笔记本电脑和台式电脑，以及代替公共交通工具的私家车。</p><p>受此影响，2020年及2021年整个上半年，人们对芯片的需求达到了前所未有的程度。有迹象显示，芯片需求已开始回落。作为全球最大的智能手机市场，中国2021年第三季度智能手机销量较上年同期下滑9%。（不过苹果表示iPhone的需求依然强劲，预计公司2021年利润将创下纪录新高。）</p><p>没有人确切知道芯片供应何时才能完全满足需求，一些分析师说，这可能要等到2023年，届时从亚利桑那州到北京，将有更多的芯片制造产能投产。但鉴於人们对电子设备的需求将终于得以满足，加之过去18个月内芯片制造商一直开足马力生产，供不应求局面结束的日子或许指日可待。</p><p>二手芯片制造设备交易公司SDI Fabsurplus的斯蒂芬·豪伊（Stephen Howe）说，回首2000年时，芯片厂经营者曾预计，芯片需求将一直旺盛，高增长态势也将持续。「可你瞧，到了2000年6月，整个市场经历了断崖式下跌，我敢肯定，这一幕还会重演。」他说。</p><h2 id="机器人在哪儿，哪儿就是家"><a href="#机器人在哪儿，哪儿就是家" class="headerlink" title="机器人在哪儿，哪儿就是家"></a>机器人在哪儿，哪儿就是家</h2><p>能照顾孩子、能洗碗，还能疏通马桶的全能型家用机器人在2022年还不会出现，但比立式智能喇叭、扫地机器人再能干一点的家用机器人会在今年走进人们的视野——而且它或许还会提供陪伴功能。</p><p>亚马逊基於智能喇叭Alexa打造的家用机器人Astro可以利用传感器在家中自由移动。它不仅具备了Alexa的基本功能（如播放音乐、回答问题等），还带有监控功能，当你不在家时，可以通过自带摄像头替你「看家」。如果一位年长亲人的家中有Astro，你还可以通过「Alexa Together」功能与亲人远程互动。</p><p>亚马逊负责设备与服务业务的副总裁大卫·林普（David Limp）说，Astro代表着向「环境智能」（AMI）的转变 ，有了这种技术，我们的电脑将退至幕后，让我们「在现实世界中互动，而不是把头埋在手机里。」</p><p>亚马逊从2021年12月开始，向一小批受邀测试者递送了这款售价1,000美元的机器人。林普说，提出测试申请的人数比他当初的预期高出了许多倍，目前公司正在努力增加2022年的库存。</p><p>此外，老年伴侣机器人ElliQ等类似设备正在65岁及以上的独居老人中接受测试。厂商计划2022年扩展ElliQ的功能，增加管家服务，让用户可以通过ElliQ订购食品杂货等。</p><h2 id="「混合现实」成为现实"><a href="#「混合现实」成为现实" class="headerlink" title="「混合现实」成为现实"></a>「混合现实」成为现实</h2><p>我们知道，过去大约五年来，有些人一直在说虚拟现实（VR）将改变我们的生活。但我们向你保证，2022年VR技术将取得重大进展，增强现实（AR）也会带来更好的体验。（记住，VR是把你带入一个虚拟世界，AR是在现实世界中加入数位化元素，二者合称混合现实，即Mixed Reality，但我们不会将其简称为MR。）</p><p>Meta（即过去的Facebook）计划发布一款头戴式设备，其功能比目前的Quest 2更先进，价格也更贵。设备中的新传感器和改进后的光学元件会让虚拟世界中的你与在现实中有更高的相似度（项目代号「坎布里亚计划」（Project Cambria））。你的一颦一笑也会体现在虚拟场景中。另外，这款头显能够显示你所处的真实空间，但会加入一些数位化功能——比如在真实的桌子上方投射出一张巨大的虚拟萤幕。这些都是Meta构建元宇宙目标中的一砖一瓦——在这个虚拟世界中，我们可以工作、购物、閒逛，还可以做很多事情。</p><p>在这场「元宇宙」竞赛中，不会只有Meta一名选手。有报导称，苹果可能会在2022年晚些时候推出一款混合现实头戴式设备。据天风国际证券（TF International Securities）研究苹果公司的分析师郭明錤说，这款头显将搭载苹果自己的芯片（就像苹果MacBook里的芯片），而且同时具有VR和AR功能。苹果发言人拒绝置评。</p><h2 id="不拘於手腕之上的健康传感器"><a href="#不拘於手腕之上的健康传感器" class="headerlink" title="不拘於手腕之上的健康传感器"></a>不拘於手腕之上的健康传感器</h2><p>近十年来，健康追踪器一直都是戴在我们的手腕上，如今它们开始挣脱这种束缚。智能戒指Oura虽然没有显示器，但它配备了迷你传感器，可以监测心率、血氧水平和皮肤温度。Whoop卖的是文胸、紧身裤等服装，但追踪器被巧妙地置于这些服饰中。Google（Google）的Nest Hub智能屏不带摄像头，它利用雷达来监测使用者的睡眠情况。除此之外，Sleep Number、Eight Sleep等公司的智能床垫也可以记录睡眠状态。</p><p>Oura首席产品官克里斯·贝赫勒（Chris Becherer）说，「这不涉及什么新技术，也不是什么新型传感器。」他还说，硬件制造商正在寻找更多方法来简化追踪方式。</p><p>下一个重要的健康设备可能是你的耳塞。据《华尔街日报》（Wall Street Journal）报导，苹果正在研究利用AirPods来读取体温和监测身体姿势的可行性。据熟悉这些计划的人告诉我们的同事，这类耳塞会从耳朵内部测量佩戴者的核心体温，并依靠运动传感器来监测用户是否驼背。《华尔街日报》报导，苹果还在研发有助於检测抑郁症的iPhone功能。</p><h2 id="更亮的显示屏"><a href="#更亮的显示屏" class="headerlink" title="更亮的显示屏"></a>更亮的显示屏</h2><p>如果你发现，你的手机或是智能手表的显示屏比笔记本电脑、电视或是汽车仪表盘的显示屏更亮，对比度也要更高，那么你就已经见证了显示屏技术近年来最大的进化式飞跃之一。</p><p>自iPhone X之后，苹果的高端iPhone一直都在使用有机发光二极管（OLED）萤幕，这种技术与液晶显示屏（LCD）的区別在于其中的每个像素可以独立发光，而无需另外的光源。使用OLED的好处是，不仅显示屏可以做得更薄（甚至可以折叠），而且对比度和能效也更高。</p><p>三星（Samsung）在手机上应用OLED的时间更早——这家韩国电子产品巨头是OLED技术的先驱之一。以往你可能见过一些OLED电视，但它们的价格异常昂贵。现在，这项技术的制造成本正变得越来越低。2021年，配备OLED显示屏的笔记本电脑开始出现，2022年将有更多类似机型面世。对平板电脑和电视来说也是如此。</p><p>微发光二极管（MicroLED）是另一种先进的显示屏技术，有朝一日或许会走进寻常百姓家，成为更多人负担得起的「OLED继任者」。三星已利用这些微小的自发光像素研制出了影片墙，但成本却是天文数字。在2022年1月举行的国际消费电子展CES上，智能眼镜生产商Vuzix计划展示带有微型MicroLED立体显示屏的智能眼镜， 可适用于工作场合的AR场景。</p><h2 id="密码登录渐行渐远"><a href="#密码登录渐行渐远" class="headerlink" title="密码登录渐行渐远"></a>密码登录渐行渐远</h2><p>密码有时会成为「雷区」。它们会被人猜中，或是被盗。於是为了防止骇客入侵，我们用上了密码管理软体，利用它们为每一种服务创造独一无二的随机密码。此时此刻，我们当中有许多人甚至都不知道自己的密码！谢天谢地，不需要以密码登录的服务正变得越来越多。</p><p>例如，你可以通过往电子邮箱里发送一个特殊链接来登录《华尔街日报》的网站（WSJ.com）。登录工作协同平台Slack和支付平台PayPal也可以采取同样的方式。支付系统Shopify和订座软体Resy会向你的手机发送验证码。微软最近允许用户跳过密码，转而通过应用程式Microsoft Authenticator生成的验证码进行身份验证，这串代码类似通过手机或电子邮箱发送的安全密钥或是验证码。</p><p>致力於保护用户身份的科技公司Transmit Security通过一项研究发现，如果一项服务可以用生物特征识別方式来验证身份，那么消费者订购的概率会增加44%；而如果有密码之外的其他登录方式，消费者订购的概率会增加35%。「2022年不会标志著密码时代的终结，但在密码走向消亡的过程中，我们会看到一些具有转折意义的事件。」行业组织FIDO Alliance执行董事安德鲁·希基亚（Andrew Shikiar）说，该组织提倡通过安全密钥、人脸识別、指纹或语音密码来验证身份。</p><h2 id="网络提速"><a href="#网络提速" class="headerlink" title="网络提速"></a>网络提速</h2><p>再见，3G。感谢你为老版本的Kindle电子阅读器以及奶奶的翻盖手机提供了联网功能。2022年，美国运营商将淘汰老旧的第三代蜂窝网络，为超高速的第五代移动通信（5G）腾出更多空间。没错，这意味着那些3G设备很快就会变成一堆废铁。（美国电话电报公司AT&amp;T的3G服务结束日期为2022年2月，T-Mobile和Verizon分別为7月和12月。）</p><p>这些电信公司计划在未来一年扩大网络。T-Mobile说，到2022年年底时，它的服务将再覆盖5,000万美国人。享受5G服务的不仅只有手机。移动运营商正在固话运营商无法提供宽带的地方，利用5G网络提供家用互联网服务。2021年9月，T-Mobile将业务扩展到佛罗里达州和北卡罗来纳州的一些城市，Verizon则将加州佛里蒙特（Fremont）和纽约州尼亚加拉瀑布城（Niagara Falls）纳入了自己的5G家用网络。</p><p>不管是家用网络还是移动端网络，我们的网速都很有可能变得更快，尽管这当中也会有一些「减速带」。美国总统拜登（Biden）的基建法案已於2021年11月获得通过，虽然其中包括了用于扩大农村地区宽带接入的650亿美元资金，但各州若想拿到这笔钱，还需经过漫长的申请过程。此外，AT&amp;T和Verizon近日在铺设5G网络的过程中也遇到了阻碍，因为美国航空管理局（Federal Aviation Administration，简称FAA）担心驾驶舱安全系统可能受到干扰。</p><h2 id="加密货币不再小众"><a href="#加密货币不再小众" class="headerlink" title="加密货币不再小众"></a>加密货币不再小众</h2><p>当人们谈论加密货币和非同质化代币（NFT）时，你表面上点头附和，其实心里在想，关于去中心化网络和区块链的种种讨论都会是过眼云烟。抱歉，你想错了。事实上在2022年，你已在使用的应用程式、服务和游戏中会出现购买、出售和转账数字货币及代币的工具，如此一来，你或许已经置身其间了。</p><p>目前，PayPal的应用程式Venmo和支付公司Block（前身为Square）旗下Cash App都提供了便捷的加密货币购买及转账方式。Cash App最近还新增了一项简易功能，可以通过借记卡向任意美国用户提供比特币。越来越多的购物场所也将开始接受你最喜爱的加密货币。眼下，特斯拉（Tesla）的某些特定商品就可以接受狗狗币支付。</p><p>你会加入像DeSo这样由区块链技术支撑的去中心化社交媒体网站吗？也许不会，但现有的社交媒体应用程式可能会开始拥抱这个世界。Instagram负责人莫塞里说，Instagram正在「积极探索NFT，以及我们如何才能让更广泛的受众更容易接触到它们。」</p><h2 id="无人机送货"><a href="#无人机送货" class="headerlink" title="无人机送货"></a>无人机送货</h2><p>今年你可能会头一次收到由无人机投送的包裹，不过这取决於你所在的区域。</p><p>以色列初创公司Flytrex在北卡罗来纳州运营有三个配送站，它刚刚获得FAA批准，可以在方圆1英里（约1.6公里）左右的范围内利用无人机送货。该公司说，获得此项授权后，它可以为包括沃尔玛（Walmart）在内的多家零售商，面向1万多户家庭提供送货服务。Google母公司Alphabet Inc.旗下Wing Aviation去年10月表示，它正在对无人机送货进行测试，预计2022年将在人口稠密的城市地区——达拉斯-沃斯堡（Dallas-Ft. Worth）——首次推出商用无人机送货服务。</p><p>与此同时，未来一年中，综合医疗服务提供商与产品生产商嘉德诺（Cardinal Health）将通过一种特殊的无人机——Zipline制造的小型固定翼飞机——向北卡罗来纳州坎纳波利斯（Kannapolis）一处配送中心方圆10英里（约16公里）内的药店提供补给。Zipline说，它还在沃尔玛总部所在地阿肯色州本顿维尔（Bentonville）为该公司提供送货上门服务。</p><p>根据FAA的规定，所有这些无人机将继续由人类操控。</p><p>随着FAA发放的许可越来越多，加之亚马逊、联合包裹速递服务公司（UPS）及其他十余家公司的无人机也都跃跃欲试，2022年可能会有更多企业竞相跟进。</p><p>英文原文：<a href="https://www.wsj.com/articles/tech-that-will-change-your-life-in-2022-11640613604?mod=flipboard">Tech That Will Change Your Life in 2022</a></p><p>原文链接：<a href="https://theinitium.com/article/20220116-wsj-tech-that-will-change-your-life-in-2022/">https://theinitium.com/article/20220116-wsj-tech-that-will-change-your-life-in-2022/</a></p><p>端传媒：<a href="https://theinitium.com/misc/about/">https://theinitium.com/misc/about/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> repost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pgsql调优转载</title>
      <link href="3990369431.html"/>
      <url>3990369431.html</url>
      
        <content type="html"><![CDATA[<p>2022-4-13 更新—————-</p><p><img src="../img/image-20220413200329988.png" alt="image-20220413200329988"></p><p>select * from pg_tables where tablename like ‘pg_temp%’;</p><p>不会有对应的表</p><p>select * from pg_namespace where nspname like ‘pg%temp%’;</p><p>但是会床创建临时的scheme</p><p>持续更新 —————————–</p><p><a href="http://postgres.cn/docs/10/monitoring-stats.html#PG-STAT-ALL-TABLES-VIEW">官方文档</a></p><p>根据进程可以查询命令执行的时间和效率</p><ul><li>查询耗时</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT procpid, START, now() - START AS lap, current_query  FROM ( SELECT backendid, pg_stat_get_backend_pid (S.backendid) AS procpid,</span><br><span class="line">pg_stat_get_backend_activity_start (S.backendid) AS START,pg_stat_get_backend_activity (S.backendid) AS current_query  FROM (SELECT</span><br><span class="line">pg_stat_get_backend_idset () AS backendid) AS S) AS S WHERE current_query &lt;&gt; &#39;&lt;IDLE&gt;&#39;  and procpid&#x3D;58762  ORDER BY lap DESC;</span><br></pre></td></tr></table></figure><ul><li>查询连接 查询进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM pg_stat_activity  where pid&#x3D;&#x3D;?? and  query &#x3D;?? and </span><br></pre></td></tr></table></figure><ul><li>pg_stat_statements</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改postgresql.conf的shared_preload_libraries增加pg_stat_statements来载入</span><br><span class="line"></span><br><span class="line">③执行SQL启动插件：create extension pg_stat_statements;</span><br></pre></td></tr></table></figure><ol><li><p>重置计数器（可选操作）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select pg_stat_reset();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select pg_stat_statements_reset();</span><br></pre></td></tr></table></figure></li><li><p>使用命令查看最耗时的SQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from pg_stat_statements order by total_time desc limit 5;</span><br></pre></td></tr></table></figure></li><li><p>查询读取Buffer次数最多的SQL，buffer次数多，可能是因为没有索引，也同时导致了cpu高。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from pg_stat_statements order by shared_blks_hit+shared_blks_read desc limit 5;</span><br></pre></td></tr></table></figure></li></ol><p>获取后面的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">select to_char(trigger_start_time,&#39;YYYY-MM-DD 00:00:00&#39;)</span><br><span class="line">        as timePoint,sum(trigger_count) as totalCount from network_attack</span><br><span class="line">        where</span><br><span class="line">        trigger_start_time &gt;&#x3D; to_timestamp($1,&#39;yyyy-MM-dd hh24:mi:ss&#39;)</span><br><span class="line">        and trigger_start_time &lt;  to_timestamp($2,&#39;yyyy-MM-dd hh24:mi:ss&#39;)</span><br><span class="line">        group by timePoint</span><br><span class="line">        order by timePoint desc</span><br><span class="line">relid    oid    一个表的 OID</span><br><span class="line">schemaname    name    这个表所在的模式的名称</span><br><span class="line">relname    name    这个表的名称</span><br><span class="line">seq_scan    bigint    在这个表上发起的顺序扫描的次数</span><br><span class="line">seq_tup_read    bigint    被顺序扫描取得的活着的行的数量</span><br><span class="line">idx_scan    bigint    在这个表上发起的索引扫描的次数</span><br><span class="line">idx_tup_fetch    bigint    被索引扫描取得的活着的行的数量</span><br><span class="line">n_tup_ins    bigint    被插入的行数</span><br><span class="line">n_tup_upd    bigint    被更新的行数（包括 HOT 更新的行）</span><br><span class="line">n_tup_del    bigint    被删除的行数</span><br><span class="line">n_tup_hot_upd    bigint    被更新的 HOT 行数（即不要求独立索引更新的行更新）</span><br><span class="line">n_live_tup    bigint    活着的行的估计数量</span><br><span class="line">n_dead_tup    bigint    死亡行的估计数量</span><br><span class="line">n_mod_since_analyze    bigint    从这个表最后一次被分析后备修改的行的估计数量</span><br><span class="line">last_vacuum    timestamp with time zone    上次这个表被手动清理的时间（不统计VACUUM FULL）</span><br><span class="line">last_autovacuum    timestamp with time zone    上次这个表被自动清理守护进程清理的时间</span><br><span class="line">last_analyze    timestamp with time zone    上次这个表被手动分析的时间</span><br><span class="line">last_autoanalyze    timestamp with time zone    上次这个表被自动清理守护进程分析的时间</span><br><span class="line">vacuum_count    bigint    这个表已被手工清理的次数（不统计VACUUM FULL）</span><br><span class="line">autovacuum_count    bigint    这个表已被自动清理守护进程清理的次数</span><br><span class="line">analyze_count    bigint    这个表已被手工分析的次数</span><br><span class="line">autoanalyze_count    bigint    这个表已被自动清理守护进程分析的次数</span><br></pre></td></tr></table></figure><p>seq_tup_read 远大于 idx_tup_fetch 说明索引建的有问题</p><p>n_tup_upd 说明有频繁更新的动作</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven 从pom.xml 下载jar包</title>
      <link href="1868978831.html"/>
      <url>1868978831.html</url>
      
        <content type="html"><![CDATA[<p>打包会有问题</p><p>root  lib-A</p><p>当前是需要直接打root的jar包，但是lib包下面有直接引用的本地jar并不在maven仓库当中使用如下</p><p>格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shentong<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyinAnalyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;pom.basedir&#125;/src/main/resources/lib/pinyinAnalyzer4.3.1.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包中如果有测试代码编译不通过的可用参考添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我后面发现打的jar包lib文件夹下面的确是有lib-A项目，但是啊就是跑的后面一旦涉及引用lib-A下面的本地第三方jar就说类找不到网上有人给出如下解决方案</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我分别在lib-A和root项目下添加了，神奇的事发生了，打包的后服务可以运行，但是lib-A下面的controller全都没有，对应的请求都是404，人都快裂开了</p><p>只能排除法先注释root下发现不行，后面注释lib-A下居然成功了，真TMD邪门</p><p>补充maven install 包含外部jar的打包情况——-</p><p>参考链接</p><ul><li><a href="https://stackoverflow.com/questions/5597099/maven-add-jars-through-systempath-system-but-not-added-to-war-or-anywhere-else/5597277">java - Maven add jars through systemPath/system but not added to war or anywhere else - Stack Overflow</a></li><li><a href="https://blog.csdn.net/lyd135364/article/details/90664373">Maven package 时出现should not point at files within the project directory_隐0士的博客-CSDN博客</a></li></ul><p>在maven的pom文件中引用本地的jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.belerweb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;system&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/resources/lib/pinyin4j-2.5.0.jar&lt;/systemPath&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;pom.basedir&#125;/src/main/resources/lib/pinyin4j-2.5.1.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是打包时会报错</p><blockquote><p>should not point at files within the project directory dependencies.dependency.systemPath</p></blockquote><p>在stackoverflow上有两种方式</p><p>第一种是pom中添加jar所在文件夹的仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>localrepository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;project.basedir&#125;/src/main/resources/lib<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是在打包的时候还是会出问题</p><p>第二种使用plugin来实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!-- &lt;goals&gt;</span></span><br><span class="line"><span class="comment">                          &lt;goal&gt;copy-dependencies&lt;/goal&gt;</span></span><br><span class="line"><span class="comment">                      &lt;/goals&gt;--&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.belerweb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;pom.basedir&#125;/src/main/resources/lib/pinyinAnalyzer4.3.1.jar<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>tips 下面的两种尝试过失败也列出来</p><ol><li><p>使用configuration复制来自于网络和正确的配置有出入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">id</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;pom.basedir&#125;/src/main/resources/lib/pinyin4j-2.5.0.jar<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">repositoryLayout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">repositoryLayout</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.belerweb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">generatePom</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generatePom</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>使用<phase>clean</phase></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">id</span>&gt;</span>pinyinAnalyzer<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">phase</span>&gt;</span>clean<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;pom.basedir&#125;/src/main/resources/lib/pinyinAnalyzer4.3.1.jar<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">repositoryLayout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">repositoryLayout</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shentong<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyinAnalyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">generatePom</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generatePom</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-file<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>使用phase&gt;init&lt;/phase</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">id</span>&gt;</span>pinyinAnalyzer<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">phase</span>&gt;</span>init<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;pom.basedir&#125;/src/main/resources/lib/pinyinAnalyzer4.3.1.jar<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">repositoryLayout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">repositoryLayout</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shentong<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyinAnalyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">generatePom</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generatePom</span>&gt;</span></span><br><span class="line">                   hconfiguration&gt;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-file<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p> 之前一直用IntelliJ IDEA 的直接下载jar包,但是这次一直下载不下来指定版本jar包,看本地的代码库localRepository本地没有,看本地部署的maven中心,所以使用了<a href="https://blog.csdn.net/u011561335/article/details/80322960">参考地址</a></p><ol><li>创建pom.xml 文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>Spider<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>使用mvn命令 下载后在本地仓库看到, 然后在IntelliJ IDEA刷新</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:copy-dependencies</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare的DNS解析和page服务以及转发到指定ip地址</title>
      <link href="a4faf5d1.html"/>
      <url>a4faf5d1.html</url>
      
        <content type="html"><![CDATA[<p><img src="../img/image-20220409221655871.png" alt="image-20220409221655871"></p><p><a href="https://developers.cloudflare.com/ssl/origin-configuration/origin-ca/#:~:text=Some%20origin%20web%20servers%20require%20upload%20of%20the%20Cloudflare%20Origin%20CA%20root%20certificate.%20Click%20a%20link%20below%20to%20download%20either%20an%20RSA%20and%20ECC%20version%20of%20the%20Cloudflare%20Origin%20CA%20root%20certificate%3A">Origin CA certificates · Cloudflare SSL docs</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓推送消息</title>
      <link href="514a98ba.html"/>
      <url>514a98ba.html</url>
      
        <content type="html"><![CDATA[<p>目前想给自己的手机客户端推送消息和提醒，之前一直用的是 <a href="https://wxpusher.zjiecode.com/docs/#/">WxPusher微信推送服务</a>,</p><p><a href="https://sct.ftqq.com/">Server酱·Turbo版</a>，通过关注指定的微信公众号来实现微信提醒，原理图如下</p><p><img src="../img/20210205122635.png" alt="img"></p><p>但是微信始终有缺陷，我一直在考虑有没有一直利用现有的安卓和苹果推送的壳APP，然后调用接口推送消息到客户端。</p><p><a href="http://pushdeer.com/">pushdeer.com</a></p><h3 id="设置设备"><a href="#设置设备" class="headerlink" title="设置设备"></a>设置设备</h3><p><img src="../img/image-20220405171122231.png" alt="image-20220405171122231"></p><h3 id="设置key"><a href="#设置key" class="headerlink" title="设置key"></a>设置key</h3><p><img src="../img/image-20220405171137973.png" alt="image-20220405171137973"></p><h3 id="开启APP的通知权限"><a href="#开启APP的通知权限" class="headerlink" title="开启APP的通知权限"></a>开启APP的通知权限</h3><p><img src="../img/9608ca3e7a10e6c41f8ee7ae86c67100.jpg" alt="9608ca3e7a10e6c41f8ee7ae86c67100"></p><h3 id="输入推送消息"><a href="#输入推送消息" class="headerlink" title="输入推送消息"></a>输入推送消息</h3><p><img src="../img/image-20220405171059460.png" alt="image-20220405171059460"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx详细的配置和用途</title>
      <link href="2474801124.html"/>
      <url>2474801124.html</url>
      
        <content type="html"><![CDATA[<p>2022-03-23补充————<br>后置代理和从定向</p><p> location /api/test.html {</p><h1 id="return-301-http-8-136-132-68-8081-404-html"><a href="#return-301-http-8-136-132-68-8081-404-html" class="headerlink" title="return 301 http://8.136.132.68:8081/404.html;"></a>return 301 <a href="http://8.136.132.68:8081/404.html">http://8.136.132.68:8081/404.html</a>;</h1><pre><code>return 301 $scheme://$host:$server_port/404.html;&#125;</code></pre><p>location /stg/swagger-ui.html {<br>            proxy_pass  http://$host:$server_port/404.html;</p><p>}</p><p>2022-1-20———————</p><p><a href="https://mincong.io/cn/nginx-subdomains/">在 Nginx 中配置二级域名 - Mincong Huang</a></p><p>目前ss证书都是<strong>Let’s Encrypt</strong> 和cloudflare</p><p>,<img src="../img/image-20220123144802723.png" alt="image-20220123144802723"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  # 配置证书地址</span><br><span class="line">  ssl_certificate      &#x2F;etc&#x2F;nginx&#x2F;imlike.cc.pem;</span><br><span class="line">  ssl_certificate_key  &#x2F;etc&#x2F;nginx&#x2F;imlike.cc.key;</span><br><span class="line">     server&#123;</span><br><span class="line">              listen       443 ssl http2;</span><br><span class="line">              listen       [::]:443 ssl http2;</span><br><span class="line">              server_name  _;</span><br><span class="line">               location &#x2F; &#123;</span><br><span class="line">               # 一些基本反向代理配置以及获取请求真是IP地址</span><br><span class="line">                      proxy_redirect off;</span><br><span class="line">                      proxy_set_header Host $host;</span><br><span class="line">                      proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">                      proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">                      proxy_pass http:&#x2F;&#x2F;8.136.132.68:5212&#x2F;;</span><br><span class="line">              &#125;</span><br><span class="line">             # access_log &#x2F;home&#x2F;wwwlogs&#x2F;git.aboutme.ink.log;</span><br><span class="line">       &#125;</span><br><span class="line">   # 监听80端口,提供本地静态服务</span><br><span class="line">  server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  localhost;</span><br><span class="line"></span><br><span class="line">      #charset koi8-r;</span><br><span class="line"></span><br><span class="line">      #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">      location &#x2F; &#123;</span><br><span class="line">          root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 监听80的配置 跳转到对应HTTPS</span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  _;</span><br><span class="line">  return       301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现下图的问题,需要看看后置代理的服务是否有问题和nginx日志</p><p><img src="../img/image-20220120172354834.png" alt="image-20220120172354834"></p><blockquote><p>curl -iL file.imlike.cc</p></blockquote><p>2021-12-31补充</p><p><img src="../img/image-20211231134646924.png" alt="image-20211231134646924"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gzip on;  #是否开启gzip模块 on表示开启 off表示关闭</span><br><span class="line">    gzip_static on;</span><br><span class="line">gzip_buffers 4 16k;  #设置压缩所需要的缓冲区大小</span><br><span class="line">gzip_comp_level 6;  #压缩级别1-9，数字越大压缩的越好，也越占用CPU时间</span><br><span class="line">gzip_min_length 1k;  #设置允许压缩的最小字节</span><br><span class="line">gzip_http_version 1.0;  #设置压缩http协议的版本,默认是1.1</span><br><span class="line">gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png application&#x2F;octet-stream application&#x2F;javascript;  #设置压缩的文件类型</span><br><span class="line">gzip_vary     on;  #加上http头信息Vary: Accept-Encoding给后端代理服务器识别是否启用 gzip 压缩</span><br></pre></td></tr></table></figure><p>2021-12-17补充使用nginx来代理并替换内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;uu&#x2F; &#123;</span><br><span class="line"># 添加gzip的支持 否则geoserver返回的内容不能被替换</span><br><span class="line"> proxy_set_header Accept-Encoding &quot;&quot;;</span><br><span class="line"> # 你想要代理的地址</span><br><span class="line">     proxy_pass http:&#x2F;&#x2F;192.168.11.20:8080&#x2F;geoserver&#x2F;;</span><br><span class="line"></span><br><span class="line">   # sub_filter_types text&#x2F;html;</span><br><span class="line">   # 参数分别为 on(一次),off(全部替换)</span><br><span class="line">      sub_filter_once off;</span><br><span class="line">      # 需要替换的内容,就是网页的内容 </span><br><span class="line">     sub_filter &#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;geoserver&#x2F;&#39; &#39;http:&#x2F;&#x2F;127.0.0.1:8088&#x2F;uu&#x2F;&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      proxy_redirect     default;</span><br><span class="line"></span><br><span class="line">       # 返回重定向的</span><br><span class="line">        # proxy_set_header   Host $host;</span><br><span class="line">        # proxy_set_header Host $host:$server_port;</span><br><span class="line">        # proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>tips</p><ul><li>nginx -V 查看是否支持 http_sub_module 否则不会替换</li><li>sub_filter 只支持替换,不支持正则表达式,复杂的需要使用第三方的库</li><li>{IP}:{PORT}/uu/ 才能被识别 但是geoserver通常访问是 xxx/geoserver/web 所以代理后是 xxx/uu/web/ 否则跳转不过去</li></ul><p>2021-08-20 补充nginx使用和配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">重定向后找不到 host&#x2F;uu&#x2F;geoserver -&gt; host&#x2F;uu&#x2F;geoserver&#x2F;web&#x2F; -&gt;  host&#x2F;uu&#x2F;geoserver&#x2F;index.html</span><br><span class="line">&#x2F; 是相对路径 没有 &#x2F; 绝对路径</span><br><span class="line"></span><br><span class="line">配置文件</span><br><span class="line">    location &#x2F;uts&#x2F; &#123;</span><br><span class="line">          proxy_pass http:&#x2F;&#x2F;192.168.11.20:90&#x2F;uu&#x2F;;</span><br><span class="line">          proxy_redirect default;</span><br><span class="line">          proxy_set_header   Host $host;</span><br><span class="line">        &#125;</span><br><span class="line">        location &#x2F;uu&#x2F; &#123;</span><br><span class="line"></span><br><span class="line">         sub_filter_once off;</span><br><span class="line">         # sub_filter_types text&#x2F;html;</span><br><span class="line">          sub_filter &quot;http:&#x2F;&#x2F;192.168.11.20:8080&#x2F;geoserver&#x2F;&quot; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;uu&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">          proxy_pass http:&#x2F;&#x2F;192.168.11.20:8080&#x2F;geoserver&#x2F;;</span><br><span class="line">          proxy_redirect     default;</span><br><span class="line"></span><br><span class="line">          # 返回重定向的</span><br><span class="line">           # proxy_set_header   Host $host;</span><br><span class="line">           # proxy_set_header Host $proxy_host;</span><br><span class="line">           # proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">           # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location &#x2F;uts &#123;</span><br><span class="line">  proxy_host 192.168.11.20:8080</span><br><span class="line">&#125; http:&#x2F;&#x2F;127.0.0.1&#x2F;uts&#x2F;  &#x2F;uts&#x2F;   http:&#x2F;&#x2F;127.0.0.1&#x2F;uts&#x2F;configDetail     &#x2F;uts&#x2F;configDetail</span><br><span class="line"></span><br><span class="line">location &#x2F;uts&#x2F; &#123;</span><br><span class="line">  proxy_host 192.168.11.20:8080&#x2F;</span><br><span class="line">&#125;  http:&#x2F;&#x2F;127.0.0.1&#x2F;uts&#x2F;  &#x2F;   http:&#x2F;&#x2F;127.0.0.1&#x2F;uts&#x2F;configDetail    configDetail</span><br><span class="line"></span><br><span class="line">location &#x2F;uts&#x2F; &#123;</span><br><span class="line">  proxy_host 192.168.11.20:8080&#x2F;ss&#x2F;</span><br><span class="line">&#125;  http:&#x2F;&#x2F;127.0.0.1&#x2F;uts&#x2F;  &#x2F;   http:&#x2F;&#x2F;127.0.0.1&#x2F;uts&#x2F;configDetail    configDetail</span><br><span class="line"></span><br><span class="line">location &#x2F;uts&#x2F; &#123;</span><br><span class="line">  proxy_host 192.168.11.20:8080</span><br><span class="line">&#125; http:&#x2F;&#x2F;127.0.0.1&#x2F;uts&#x2F;  &#x2F;uts&#x2F;   http:&#x2F;&#x2F;127.0.0.1&#x2F;uts&#x2F;configDetail    &#x2F;uts&#x2F;configDetail</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location &#x2F;uts &#123;</span><br><span class="line">  proxy_host 192.168.11.20:8080&#x2F;</span><br><span class="line">&#125; http:&#x2F;&#x2F;127.0.0.1&#x2F;uts&#x2F;  &#x2F;&#x2F;   http:&#x2F;&#x2F;127.0.0.1&#x2F;uts&#x2F;configDetail    &#x2F;&#x2F;configDetail</span><br></pre></td></tr></table></figure><p>2021-7-29补充</p><p>root alias区别</p><p>同样配置nginx目录</p><p>alias的路径只用于 url 不会根据这个去,    其配置的文件夹来找寻具体目录地址,同时如果在alias的根路径下还会显示 路径下所有文件.相当于 alias设置虚拟目录</p><p>但是root不是它会匹配,同样的如果root配置的location对应 文件夹不存在那就会包404</p><p>借鉴下面博文<a href="https://www.cnblogs.com/kevingrace/p/6187482.html">https://www.cnblogs.com/kevingrace/p/6187482.html</a></p><blockquote><p>1）alias指定的目录是准确的，即location匹配访问的path目录下的文件直接是在alias目录下查找的；<br>2）root指定的目录是location匹配访问的path目录的上一级目录,这个path目录一定要是真实存在root指定目录下的；<br>3）使用alias标签的目录块中不能使用rewrite的break（具体原因不明）；另外，alias指定的目录后面必须要加上”/“符号！！<br>4）alias虚拟目录配置中，location匹配的path目录如果后面不带”/“，那么访问的url地址中这个path目录后面加不加”/“不影响访问，访问时它会自动加上”/“；<br>  但是如果location匹配的path目录后面加上”/“，那么访问的url地址中这个path目录必须要加上”/“，访问时它不会自动加上”/“。如果不加上”/“，访问就会失败！<br>5）root目录配置中，location匹配的path目录后面带不带”/“，都不会影响访问。</p><p>举例说明（比如nginx配置的域名是<a href="http://www.wangshibo.com）：">www.wangshibo.com）：</a><br>示例一<br>location /huan/ {<br>   alias /home/www/huan/;<br>}</p><p>在上面alias虚拟目录配置下，访问<a href="http://www.wangshibo.com/huan/a.html%E5%AE%9E%E9%99%85%E6%8C%87%E5%AE%9A%E7%9A%84%E6%98%AF/home/www/huan/a.html%E3%80%82">http://www.wangshibo.com/huan/a.html实际指定的是/home/www/huan/a.html。</a><br>注意：alias指定的目录后面必须要加上”/“，即/home/www/huan/不能改成/home/www/huan</p><p>上面的配置也可以改成root目录配置，如下，这样nginx就会去/home/www/huan下寻找<a href="http://www.wangshibo.com/huan%E7%9A%84%E8%AE%BF%E9%97%AE%E8%B5%84%E6%BA%90%EF%BC%8C%E4%B8%A4%E8%80%85%E9%85%8D%E7%BD%AE%E5%90%8E%E7%9A%84%E8%AE%BF%E9%97%AE%E6%95%88%E6%9E%9C%E6%98%AF%E4%B8%80%E6%A0%B7%E7%9A%84%EF%BC%81">http://www.wangshibo.com/huan的访问资源，两者配置后的访问效果是一样的！</a><br>location /huan/ {<br>    root /home/www/;<br>}</p></blockquote><p><a href="http://blackwolfsec.cc/2018/05/23/Nginx_alias_misconfig_path_traversle/">http://blackwolfsec.cc/2018/05/23/Nginx_alias_misconfig_path_traversle/</a> 借鉴下</p><p><img src="../img/20190418163927-79fddd08-61b5-1.png" alt="img"></p><p>补充域名相关的知识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.xxx.com&#96; ,&#96;www.zzz.xxx.com&#96;,&#96;www.xxx.com&#x2F;getName</span><br></pre></td></tr></table></figure><blockquote><p>www: World Wide Web 万维网</p><p>xxx: 注册的名称</p><p>zzz: 子域名(Second-level domain；英文缩写：SLD)</p><p>com:顶级域名(Top-level domains)是org,</p><p>URL: <a href="http://www.example.net/index.html,www.xxx.com/getName">http://www.example.net/index.html,www.xxx.com/getName</a></p></blockquote><p>对于第三个需要配置 server-&gt;多个location配置</p><p>对于第二中需要配置多个server,或者server-&gt;server_name</p><p>转载地址<a href="https://zhuanlan.zhihu.com/p/36148885">nginx 常用配置记录-知乎专栏</a></p><hr><h3 id="server模块"><a href="#server模块" class="headerlink" title="server模块"></a><strong>server模块</strong></h3><p>server模块是http的子模块，它用来定义一个虚拟主机</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name localhost www.example.com;</span><br><span class="line">    root        &#x2F;Users&#x2F;yangyi&#x2F;www;# 全局定义，表示在该server下web的根目录</span><br><span class="line">    client_max_body_size 100M;</span><br><span class="line">    keepalive_timeout 20;</span><br><span class="line">    index       index.php index.html index.htm; </span><br><span class="line">    charset     utf-8;</span><br><span class="line">    access_log  logs&#x2F;host.access.log  main; #用来指定此虚拟主机的访问日志存放路径，输出格式为main。</span><br><span class="line">    error_log   logs&#x2F;host.error.log  error; #错误日志存放路径，输出格式为error。</span><br><span class="line">    error_page  404  &#x2F;404.html; #状态码为404时的时候的网页地址,还可定义500,502之类的</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上一些配置为在该server下具有全局性，例如 root，可在location中重新定义root</p><h2 id="关于server-name"><a href="#关于server-name" class="headerlink" title="关于server_name"></a>关于server_name</h2><blockquote><p>用来指定IP地址或者域名，多个域名之间用空格分开</p></blockquote><p>当我们想定义多个server监听同一个端口但访问的host不一样时，server_name就派上用场了。nginx会根据HTTP请求的header Host选择nginx配置文件里符合条件的server_name的server配置</p><p>匹配顺序如下</p><ol><li>完全匹配的server_name;</li><li>后缀匹配: *.example.com;</li><li>前缀匹配: <a href="http://www.example.*/">www.example.*</a>;</li><li>正则匹配: ~\w+.com;</li><li>listen指令里配置了default或default_server的server;如｀listen 80 default｀</li><li>第一个匹配上listen的server。</li></ol><p>所以当我们监听的的端口只有一个server配置的时候，server_name 可以不填</p><h2 id="关于root和alias的区别"><a href="#关于root和alias的区别" class="headerlink" title="关于root和alias的区别"></a>关于root和alias的区别</h2><p>两者作用差不多，区别在于最终映射的地址不同，例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;request_path&#x2F;image&#x2F; &#123;</span><br><span class="line">    # 如果现在访问 &#x2F;request_path&#x2F;image&#x2F;a&#x2F;b.jpg,root映</span><br><span class="line">    # 射的地址为&#x2F;local_path&#x2F;image&#x2F;request_path&#x2F;image&#x2F;a&#x2F;b.jpg,</span><br><span class="line">    # 而alias为&#x2F;local_path&#x2F;image&#x2F;a&#x2F;b.jpg</span><br><span class="line">    root    &#x2F;local_path&#x2F;image&#x2F;;</span><br><span class="line">    alias   &#x2F;local_path&#x2F;image&#x2F;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于error-page"><a href="#关于error-page" class="headerlink" title="关于error_page"></a>关于error_page</h2><p>语法：error_page code … [=[response]] uri<br>使用字段: http, server, location, if in location</p><p>产生的效果为内部跳转(internal redirect)，即用户页面地址不变，但内容实际上为设置的uri对应的内容<br>我们也可以自定义设置返回的状态码，如：<br>error_page 502 503 =200 /50x.html;<br>这样用户访问产生502 、503的时候给用户的返回状态是200，内容是50x.html。<br>还有一种写法是 <code>=</code> 后面不带状态码，是针对相应的内容不是一个静态的页面，最终返回的状态码取决于对应url服务返回的状态码。</p><h2 id="location模块"><a href="#location模块" class="headerlink" title="location模块"></a>location模块</h2><blockquote><p>最主要和最复杂的配置，通过定位和解析url，判断该选择什么配置，支持正则和条件判断；</p></blockquote><p>简单例子，匹配所有请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    root   &#x2F;home&#x2F;www&#x2F;html;</span><br><span class="line">    index  index.php index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个正则匹配的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配.php结尾的请求</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个反向代理的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 匹配到&#x2F;api开头的路由时候，将请求转发到http:&#x2F;&#x2F;192.168.0.1，但是通常不是直接填写地址，而是设置一个&#96;upstream&#96;配置，后面会提到</span><br><span class="line">location &#x2F;api &#123;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;192.168.0.1; #请求转向地址192.168.0.1</span><br><span class="line">    #不修改被代理服务器返回的响应头中的location头</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    #使用nginx反向代理后，如果要使服务获取真实的用户信息，用以下的设置</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue-router、react-router等路由框架要开启history模式可以选择的nginx配置的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">  alias     static&#x2F;;</span><br><span class="line">  try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>location的匹配规则和顺序</strong></p><ol><li>第一种是 <strong>=</strong> 类型，表示精确匹配，优先级最高，一旦匹配到忽略之后的正则匹配</li><li><strong>^~</strong> 类型，表示前缀匹配，是字符串开头匹配而非正则匹配，当匹配到该规则时，停止往下面的搜索，所以如果存在两个<strong>^~</strong> 匹配的时候要注意有顺序之分。优先级比正则高。</li><li><code>~</code> 和 <code>~*</code>,正则匹配，两者区别是后者不区分大小写。有顺序之分，匹配到第一个正则停止搜索。</li><li><code>/uri</code>,普通字符串匹配，无顺序之分，会选择匹配长度最长的配置。</li><li><code>/</code> 通用匹配，匹配所有请求</li></ol><p>还有一种特殊匹配类型 <code>@url</code>，只用于nginx内部跳转，例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">    error_page 404 @40x;</span><br><span class="line">&#125;</span><br><span class="line">location @40x &#123;</span><br><span class="line">  root &#x2F;var&#x2F;www&#x2F;errors&#x2F;40x.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="upstream模块"><a href="#upstream模块" class="headerlink" title="upstream模块"></a>upstream模块</h2><blockquote><p>upstream后端服务器提供简单的负载均衡（轮循调度和客户端 IP）。</p></blockquote><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream backend  &#123;</span><br><span class="line">  server backend1.example.com weight&#x3D;5;</span><br><span class="line">  server backend2.example.com:8080;</span><br><span class="line">  server unix:&#x2F;tmp&#x2F;backend3;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;backend;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有常用两种负载均衡支持调度算法，分别是 <strong>weight</strong> 和 <strong>ip_hash</strong> 。weight 模式下可以为每个 server 设置weight值，weight值越大，分配到的访问机率越高，ip_hash 为同一个ip的<br>分配同一个后端服务器，这样我们不用解决session共享问题。</p><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><blockquote><p>include指令 使nginx配置更加灵活，将部分配置直接拆分出来,分成不同的配置文件</p></blockquote><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http &#123;    include mime.types;    include vhost&#x2F;*.conf; # 虚拟主机配置&#125;</span><br></pre></td></tr></table></figure><h2 id="关于-mime-types："><a href="#关于-mime-types：" class="headerlink" title="关于 mime.types："></a>关于 mime.types：</h2><p>mime type 和 文件扩展名的对应关系一般放在 mime.types 里，然后 用 <code>include mime.types</code>;<br>mime.types作用：通过文件的扩展名设置了Content-Type，Nginx如果没找到对应文件的扩展名的话，就使用默认的Type，默认Type通用 <code>default_type</code> 定义，比如 default_type application/octet-stream ;<br>完整的 mime.types 配置：<a href="https://link.zhihu.com/?target=https://github.com/h5bp/server-configs-nginx/blob/master/mime.types">https://github.com/h5bp/server-configs-nginx/blob/master/mime.types</a></p><h2 id="关于-vhost-conf"><a href="#关于-vhost-conf" class="headerlink" title="关于 vhost/*.conf :"></a>关于 vhost/*.conf :</h2><p>一个虚拟主机对一个文件配置，放到vhost文件夹下面，然后通过include指令包含进来，这样更便于维护和管理</p><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><blockquote><p>gzip 压缩，用来对静态资源进行压缩，需要客户端同时支持才有效。</p></blockquote><p>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    #IE6的某些版本对gzip的压缩支持很不好,故关闭</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.(?!.*SV1)&quot;;</span><br><span class="line">    #HTTP1.0以上的版本都启动gzip</span><br><span class="line">    gzip_http_version 1.0；</span><br><span class="line">    #指定哪些类型的相应才启用gzip压缩，多个用空格分隔</span><br><span class="line">    gzip_types </span><br><span class="line">    application&#x2F;javascript </span><br><span class="line">    application&#x2F;json </span><br><span class="line">    text&#x2F;css </span><br><span class="line">    text&#x2F;plain;</span><br><span class="line">    # 压缩等级，可选1-9，值越大压缩时间越长压缩率越高，</span><br><span class="line">    # 通常选5，能压缩到原来的1&#x2F;4</span><br><span class="line">    gzip_comp_level 5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rewrite模块（ngx-http-rewrite-mode）"><a href="#rewrite模块（ngx-http-rewrite-mode）" class="headerlink" title="rewrite模块（ngx_http_rewrite_mode）"></a>rewrite模块（ngx_http_rewrite_mode）</h2><p>rewrite模块配合很多模块一起使用，包含几个指令：</p><ol><li>break</li><li>if</li><li>return</li><li>rewrite</li><li>rewrite_log</li><li>set</li><li>uninitialized_variable_warn</li></ol><p>这里简单介绍下break、if、return，重点介绍 rewrite</p><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>语法: break;<br>使用字段: server, location, if<br>此指令的意思是停止执行当前虚拟主机的后续rewrite指令集</p><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 如果访问的文件名不存在，反向代理到localhost 。这里的break也是停止rewrite检查</span><br><span class="line">if (!-f $request_filename) &#123;</span><br><span class="line">    break;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>语法: if (condition) { … }<br>使用字段: server, location<br>if 判断一个条件，如果条件成立，则后面的大括号内的语句将执行，相关配置从上级继承。</p><p>条件(conditon)可以是如下任何操作：</p><ol><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false；</li><li>使用“=”和“!=”比较一个变量和字符串；</li><li>使用“<del>”做正则表达式匹配，“</del>*”做不区分大小写的正则匹配，“!~”做区分大小写的正则不匹配；</li><li>使用“-f”和“!-f” 检查一个文件是否存在；</li><li>使用“-d”和“!-d”检查一个目录是否存在；</li><li>使用“-e”和“!-e”检查一个文件、目录、符号链接是否存在；</li><li>使用“-x”和“ !-x”检查一个文件是否可执行；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 如果提交方法为POST，则返回状态405（Method not allowed）</span><br><span class="line">if ($request_method &#x3D; POST) &#123;</span><br><span class="line">    return 405;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p>语法: return code [text];<br>return code URL;<br>return URL;<br>使用字段: server, location, if<br>停止处理并为客户端返回状态码，非标准的444状态码将关闭连接，不发送任何响应头。可以使用的状态码有：204，400，402-406，408，410, 411, 413, 416与500-504。如果状态码附带文字段落，该文本将被放置在响应主体。相反，如果状态码后面是一个URL，该URL将成为location头部值。没有状态码的URL将被视为一个302状态码，这种情况下URL需要以“http://”, “https://”, 或者 “$scheme”开头。</p><h2 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h2><p>语法: rewrite regex replacement [flag];<br>使用字段: server, location, if<br>使用nginx提供的全局变量或自己设置的变量，然后结合正则表达式和标志位实现url重写以及重定向。多条 rewrite 顺序靠前且匹配的优先执行。可以通过设置 flag 停止继续处理。如果replacement 以“http://”, “https://”, 或者 “$scheme”开头，那么将立即停止处理并临时重定向给客户端。</p><p>flag可以是如下参数：</p><ul><li>last，完成该rewrite规则的执行后，停止处理后续rewrite指令集；然后查找匹配改变后URI的新location；</li><li>break，完成该rewrite规则的执行后，停止处理后续rewrite指令集，并不再重新查找；但是当前location内剩余非rewrite语句和location外的的非rewrite语句可以执行；</li><li>redirect，返回302临时重定向，地址栏会显示跳转后的地址；</li><li>permanent，返回301永久重定向，地址栏会显示跳转后的地址；即表示如果客户端不清理浏览器缓存，那么返回的结果将永久保存在客户端浏览器中了。</li></ul><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。两种重定向的方式对客户端来说是一样的，就是重新加载另外一个url。我们在实际设置中推荐只使用永久重定向，因为临时重定向可能造成在url为A页面，但显示的是B页面的内容，造成网址劫持。</p><p>比较难以理解的是 last 和 break，让我们先了解 nginx 运行的11个阶段，注意到第四阶段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">typedef enum &#123;  </span><br><span class="line">    NGX_HTTP_POST_READ_PHASE &#x3D; 0,   &#x2F;&#x2F;读取请求头  </span><br><span class="line">  </span><br><span class="line">    NGX_HTTP_SERVER_REWRITE_PHASE,   &#x2F;&#x2F;执行rewrite  </span><br><span class="line">  </span><br><span class="line">    NGX_HTTP_FIND_CONFIG_PHASE,  &#x2F;&#x2F;根据uri替换location  </span><br><span class="line">    NGX_HTTP_REWRITE_PHASE,      &#x2F;&#x2F;根据替换结果继续执行rewrite  </span><br><span class="line">    NGX_HTTP_POST_REWRITE_PHASE, &#x2F;&#x2F;执行rewrite后处理  </span><br><span class="line">  </span><br><span class="line">    NGX_HTTP_PREACCESS_PHASE,    &#x2F;&#x2F;认证预处理   请求限制，连接限制  </span><br><span class="line">  </span><br><span class="line">    NGX_HTTP_ACCESS_PHASE,       &#x2F;&#x2F;认证处理  </span><br><span class="line">    NGX_HTTP_POST_ACCESS_PHASE,  &#x2F;&#x2F;认证后处理， 认证不通过， 丢包  </span><br><span class="line">  </span><br><span class="line">    NGX_HTTP_TRY_FILES_PHASE,    &#x2F;&#x2F;尝试try标签  </span><br><span class="line">    NGX_HTTP_CONTENT_PHASE,      &#x2F;&#x2F;内容处理  </span><br><span class="line">  </span><br><span class="line">    NGX_HTTP_LOG_PHASE           &#x2F;&#x2F;日志处理  </span><br><span class="line">&#125; ngx_http_phases;  </span><br></pre></td></tr></table></figure><p>所以我们再来理解last与break的区别：<br>last： 停止当前这个请求，并根据rewrite匹配的规则重新发起一个请求。新请求又从第一阶段开始执行…<br>break：相对last，break并不会重新发起一个请求，只是跳过当前的rewrite阶段，并执行本请求后续的执行阶段…</p><p>通过实例会更加清晰的理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    server_name dcshi.com;</span><br><span class="line">    root www;</span><br><span class="line"></span><br><span class="line">    location &#x2F;break&#x2F; &#123;</span><br><span class="line">        rewrite ^&#x2F;break&#x2F;(.*) &#x2F;test&#x2F;$1 break;</span><br><span class="line">        echo &quot;break page&quot;;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    location &#x2F;last&#x2F; &#123;</span><br><span class="line">         rewrite ^&#x2F;last&#x2F;(.*) &#x2F;test&#x2F;$1 last;</span><br><span class="line">         echo &quot;last page&quot;;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    location &#x2F;test&#x2F; &#123;</span><br><span class="line">       echo &quot;test page&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求:<a href="https://link.zhihu.com/?target=http://dcshi.com/break/">http://dcshi.com/break/</a>***<br>输出: break page<br>分析：正如上面讨论所说，break是跳过当前请求的rewrite阶段，并继续执行本请求的其他阶段，很明显，对于/foo 对应的content阶段的输出为 echo “break page”; (content阶段，可以简单理解为产生数据输出的阶段，如返回静态页面内容也是在content阶段；echo指令也是运行在content阶段，一般情况下content阶段只能对应一个输出指令，如同一个location配置两个echo，最终只会有一个echo指令被执行)；当然如果你把/break/里的echo 指令注释，然后再次访问/break/xx会报404，这也跟我们预期一样：虽然/break/xx被重定向到/test/xx,但是break指令不会重新开启一个新的请求继续匹配，所以nginx是不会匹配到下面的/test/这个location；在echo指令被注释的情况下，/break/ 这location里只能执行nginx默认的content指令，即尝试找/test/xx这个html页面并输出起内容，事实上，这个页面不存在，所以会报404的错误。</p><p>请求: <a href="https://link.zhihu.com/?target=http://dcshi.com/last/">http://dcshi.com/last/</a>***<br>输出: test page<br>分析: last与break最大的不同是，last会重新发起一个新请求，并重新匹配location，所以对于/last,重新匹配请求以后会匹配到/test/,所以最终对应的content阶段的输出是test page;</p><p>解释完了 last 和 break ，我们再写一个实例用来说明 rewrite 可以做什么事情。通过rewrite将不带www的请求统一转向为www：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # ........</span><br><span class="line">    server_name www.abc.com ;&#x2F;&#x2F;只留一个</span><br><span class="line">    # ......</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  server_name  abc.com;</span><br><span class="line">  rewrite ^(.*)$ http:&#x2F;&#x2F;www.abc.com$1 permanent; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name abc.com www.abc.com;</span><br><span class="line">   if ( $host !&#x3D; &#39;www.abc.com&#39;  ) &#123;</span><br><span class="line">       rewrite ^&#x2F;(.*) http:&#x2F;&#x2F;www.abc.com&#x2F;$1 permanent;</span><br><span class="line">   &#125;</span><br><span class="line">   location &#x2F; &#123;</span><br><span class="line">       root &#x2F;data&#x2F;www&#x2F;www;</span><br><span class="line">       index index.html index.htm;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://link.zhihu.com/?target=http://tool.oschina.net/apidocs/apidoc?api=nginx-zh">在线文档-nginx-zh</a></p><p><a href="https://link.zhihu.com/?target=https://www.jianshu.com/p/bed000e1830b">WEB请求处理二：Nginx请求反向代理</a></p><p><a href="https://link.zhihu.com/?target=http://blog.sina.com.cn/s/blog_4f9fc6e10102ux0w.html">http://blog.sina.com.cn/s/blog_4f9fc6e10102ux0w.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式文件服务介绍</title>
      <link href="ce67ced3.html"/>
      <url>ce67ced3.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.ibm.com/cloud/blog/object-vs-file-vs-block-storage">对象、文件和块存储：有什么区别？ | IBM</a></p><p><a href="https://www.netapp.com/data-storage/storagegrid/what-is-object-storage/">什么是对象存储？ - 对象 vs. 文件 vs. 块 | NetApp</a></p><p><a href="https://www.redhat.com/en/topics/data-storage/file-block-object-storage">文件存储、块存储还是对象存储？</a></p><p>对象存储 </p><p>没有结构的文件可以是图片，日志，视频，音频。所有的对象处于同一层级，没有文件存储那个月的文件夹或者子目录，此外，对象存储不会将所有数据一起存储在一个文件中。对象还包含元数据，这是有关有助于处理和可用性的文件的信息。用户可以使用对象存储设置固定键元数据的值，或者他们可以为与对象关联的自定义元数据创建键和值。</p><p>文件存储 role,group,user,promession</p><p>文件存储就是原始的，将数据一起保存单个文件中，文件拓展名内心有创建文件和文件类型确定，文件可以存储在NAS(网络附加存储)设备上</p><p>块存储</p><p>将数据拆分为固定的数据块，使用唯一标识符单独存储，这些块可以存储在不同的环境中，当用户检索一个块时存储系统将这些块重新组合成一个单元，块存储是硬盘驱动器 </p><p>对象存储在维基百科上的部分介绍</p><blockquote><h3 id="云存储-编辑"><a href="#云存储-编辑" class="headerlink" title="云存储[编辑]"></a>云存储[<a href="https://en.wikipedia.org/w/index.php?title=Object_storage&action=edit&section=9">编辑</a>]</h3><p>主条目：<a href="https://en.wikipedia.org/wiki/Cloud_storage">云存储</a></p><p>市场上可用的绝大多数云存储都是对象存储架构。一些值得注意的例子是2006 年 3 月首次亮相的<a href="https://en.wikipedia.org/wiki/AWS_S3">Amazon Web Services S3</a>、<a href="https://en.wikipedia.org/wiki/Microsoft_Azure">Microsoft Azure</a> Blob Storage、<a href="https://en.wikipedia.org/wiki/Rackspace">Rackspace</a> Files（其代码于 2010 年捐赠给 Openstack 项目并以<a href="https://en.wikipedia.org/wiki/OpenStack#Swift">OpenStack Swift</a>的形式发布）和2010 年 5 月发布的<a href="https://en.wikipedia.org/wiki/Google_Cloud_Storage">Google Cloud Storage</a>。</p><h3 id="基于对象的文件系统-编辑"><a href="#基于对象的文件系统-编辑" class="headerlink" title="基于对象的文件系统[编辑]"></a>基于对象的文件系统[<a href="https://en.wikipedia.org/w/index.php?title=Object_storage&action=edit&section=10">编辑</a>]</h3><p>一些分布式文件系统使用基于对象的架构，其中文件元数据存储在元数据服务器中，文件数据存储在对象存储服务器中。文件系统客户端软件与不同的服务器交互，并将它们抽象为用户和应用程序呈现完整的文件系统。</p><h3 id="对象存储系统-编辑"><a href="#对象存储系统-编辑" class="headerlink" title="对象存储系统[编辑]"></a>对象存储系统[<a href="https://en.wikipedia.org/w/index.php?title=Object_storage&action=edit&section=11">编辑</a>]</h3><p>对象存储的一些早期版本被用于归档，因为实现是针对数据服务进行优化的，比如不变性，而不是性能。<a href="https://en.wikipedia.org/wiki/Content-addressable_storage">EMC Centera</a>和 Hitachi HCP（以前称为 HCAP）是两种常用的归档对象存储产品。另一个例子是 Quantum Lattus 对象存储平台。</p><p>更多通用的对象存储系统在 2008 年左右进入市场。在雅虎邮箱等 Web 应用程序中“专属”存储系统的惊人增长以及云存储的早期成功的诱惑下，对象存储系统承诺了云的规模和功能存储，能够在企业内或有抱负的云存储服务提供商处部署系统。</p><h3 id="混合存储-编辑"><a href="#混合存储-编辑" class="headerlink" title="混合存储[编辑]"></a>混合存储[<a href="https://en.wikipedia.org/w/index.php?title=Object_storage&action=edit&section=12">编辑</a>]</h3><p>一些对象存储系统支持统一文件和对象 (UFO) 存储，允许一些客户端将对象存储在存储系统上，同时其他客户端将文件存储在同一存储系统上。虽然由于与混合旋转磁盘和闪存存储混淆，“混合存储”不是这个概念被广泛接受的术语，但在某些对象存储产品中可以使用 [<a href="https://en.wikipedia.org/wiki/Object_storage#cite_note-Crump-16">16]对同一组数据的互操作接口。</a></p><h3 id="“俘虏”对象存储-编辑"><a href="#“俘虏”对象存储-编辑" class="headerlink" title="“俘虏”对象存储[编辑]"></a>“俘虏”对象存储[<a href="https://en.wikipedia.org/w/index.php?title=Object_storage&action=edit&section=13">编辑</a>]</h3><p>当对象存储产品没有商用或用例非常具体时，一些大型互联网公司开发了自己的软件。Facebook 著名地发明了他们自己的对象存储软件，代号为 Haystack，以有效地满足他们特殊的大规模照片管理需求。[<a href="https://en.wikipedia.org/wiki/Object_storage#cite_note-haystack-17">17]</a></p><h3 id="基于对象的存储设备-编辑"><a href="#基于对象的存储设备-编辑" class="headerlink" title="基于对象的存储设备[编辑]"></a>基于对象的存储设备[<a href="https://en.wikipedia.org/w/index.php?title=Object_storage&action=edit&section=14">编辑</a>]</h3><p>协议和设备层的对象存储是 20 年前提出的[*<a href="https://en.wikipedia.org/wiki/Wikipedia:Please_clarify">模糊</a><em>] ，并在近 10 年前被批准用于<a href="https://en.wikipedia.org/wiki/SCSI">SCSI命令集</a>[*<a href="https://en.wikipedia.org/wiki/Wikipedia:Please_clarify">模糊</a></em>]，称为“基于对象的存储设备命令”（OSD），[<a href="https://en.wikipedia.org/wiki/Object_storage#cite_note-18">18]</a>然而，它有直到希捷 Kinetic 开放式存储平台开发后才投入生产。[<a href="https://en.wikipedia.org/wiki/Object_storage#cite_note-19">19] </a>[<a href="https://en.wikipedia.org/wiki/Object_storage#cite_note-20">20]</a>对象存储设备 的<a href="https://en.wikipedia.org/wiki/SCSI">SCSI</a>命令集是由 SNIA 的一个工作组为<a href="https://en.wikipedia.org/wiki/International_Committee_for_Information_Technology_Standards">国际信息技术标准委员会</a>(INCITS) 的 T10 委员会开发的。[<a href="https://en.wikipedia.org/wiki/Object_storage#cite_note-21">21]</a> T10 负责所有 SCSI 标准。</p></blockquote><p><a href="https://www.quobyte.com/storage-explained/what-is-kubernetes-storage">如何选择最佳 Kubernetes 存储？</a></p><p><a href="https://medium.com/devops-mojo/kubernetes-storage-options-overview-persistent-volumes-pv-claims-pvc-and-storageclass-sc-k8s-storage-df71ca0fccc3">Kubernetes — Storage Overview — PV, PVC and Storage Classo | Medium</a><br><a href="https://www.modb.pro/db/15181">目前流行开源分布式存储系统的优劣对比分析 - 墨天轮</a></p><p>分布式服务的简单理解</p><p><a href="https://mp.weixin.qq.com/s/YpRQa9YguOqJygJbdRZ-nA">数据库存储选型经验总结</a></p><p><a href="https://zhuanlan.zhihu.com/p/396341725">主流分布式文件系统选型，写得太好了！ - 知乎</a></p><p><a href="https://www.infoq.cn/article/Bp7uvBNb7dbGdk2gTxL9">分布式文件系统架构对比_架构_Davies_InfoQ精选文章</a></p><p><a href="http://blog.zollty.com/b/archive/relations-among-object-file-and-block-storage.html">对象存储、文件存储、块存储的区别和联系 | Zollty’s Blog</a></p><p>目前文件服务器分为原生云大数据之前和之后，原生云主要是应对当前大量非结构数据存储的需求，同时支持的对象存储（oss,amazon s3），文件存储实现((posix),块存储()</p><p>原生云之前的fastdfs,</p><p>目前排除hdfs原因如下</p><p>1 HDFS的块状存在机制，其实是不太适合小文件的，但文件服务器和网盘的场景，很大程度上会出现大量的小文件，那么HDFS在IO这块并不是优势，这样效率会很低，并且会消耗大量的主节点内存，致命伤。</p><p>2 HDFS并不支持随机写，这对于文件存储模型来说也是不适合的。 </p><p>3 HDFS的优势并不在高吞吐，所以如果是频繁读写的文件存储场景，对于他来说也是不适合的。 其实Hadoop的HDFS之所以出名，并不是单独作为文件系统而出名的，而是在于Hadoop的整套解决方案。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>minio的入门介绍</title>
      <link href="68368fb0.html"/>
      <url>68368fb0.html</url>
      
        <content type="html"><![CDATA[<p>minio中的概念</p><p>·<strong>Object</strong>：存储到Minio的基本对象，如文件、字节流，Anything…</p><p>·<strong>Bucket</strong>：用来存储Object的逻辑空间。每个Bucket之间的数据是相互隔离的。对于客户端而言，就相当于一个存放文件的顶层文件夹。</p><p>·<strong>Drive</strong>：即存储数据的磁盘，在MinlO启动时，以参数的方式传入。Minio中所有的对象数据都会存储在Drive里。</p><p>·<strong>Set</strong>：即一组Drive的集合，分布式部署根据集群规模自动划分一个或多个Set，每个Set中的Drive 分布在不同位置。一个对象存储在一个Set上。（For example：（1．．．64｝is divided into 4 sets each of size 1</p><p>​        一个对象存储在一个Set上I一个集群划分为多个Set</p><p>​        一个Set包含的Drive数量是固定的，默认由系统根据集群规模自动计算得出一个SET中的Drive尽可能分布在不同的节点上</p><h3 id="纠删码EC（Erasure-Code）"><a href="#纠删码EC（Erasure-Code）" class="headerlink" title="纠删码EC（Erasure Code）"></a>纠删码EC（Erasure Code）</h3><p>MinlO 使用纠删码机制来保证高可靠性，使用highwayhash来处理数据损坏（Bit Rot Protection）。关于纠删码，简单来说就是可以通过数学计算，把天失的数据进行还原，它可以将n份原始数据，增加m份数据，并能通过n＋m份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。</p><h4 id="分布式存储可靠性常用方法"><a href="#分布式存储可靠性常用方法" class="headerlink" title="分布式存储可靠性常用方法"></a>分布式存储可靠性常用方法</h4><p>分布式存储，很关键的点在于数据的可靠性，即保证数据的完整，不丢失，不损坏。只有在可靠性实现的前提下，才有了追求一致性、高可用、高性能的基础。而对于在存储领域，一般对于保证数据可靠性的方法主要有两类，一类是冗余法，一类是校验法。</p><h5 id="冗余"><a href="#冗余" class="headerlink" title="冗余"></a>冗余</h5><p>冗余法最简单直接，即对存储的数据进行副本备份，当数据出现丢失，损坏，即可使用备份内容进行恢复，而副本备份的多少，决定了数据可靠性的高低。这其中会有成本的考量，副本数据越多，数据越可靠，但需要的设备就越多，成本就越高。可靠性是允许丢失其中一份数据。当前已有很多分布式系统是采用此种方式实现，如Hadoop的文件系统（3个副本），Redis的集群，MySQL的主备模式等。</p><h5 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h5><p>校验法即通过校验码的数学计算的方式，对出现丢失、损坏的数据进行校验、还原。注意，这里有两个作用，一个校验，通过对数据进行校验和（checksum）进行计算，可以检查数据是否完整，有无损坏或更改，在数据传输和保存时经常用到，如TCP协议；二是恢复还原，通过对数据结合校验码，通过数学计算，还原丢失或损坏的数据，可以在保证数据可靠的前提下，降低冗余，如单机硬盘存储中的RAID技术，纠删码（Erasure Code）技术等。MinlO采用的就是纠删码技术。</p><h4 id="分布式Minio优势"><a href="#分布式Minio优势" class="headerlink" title="分布式Minio优势"></a>分布式Minio优势</h4><h5 id="数据保护"><a href="#数据保护" class="headerlink" title="数据保护"></a>数据保护</h5><p>分布式Minio采用纠删码来防范多个节点宕机和位哀减bit rot。</p><p>分布式Minio至少需要4个硬盘，使用分布式Minio自动引入了纠删码功能。高可用</p><p>单机Minio服务存在单点故障，相反，如果是一个有N块硬盘的分布式Minio，只要有N／2硬盘在线，你的数据就是安全的。不过你需要至少有N／2＋1个硬盘来创建新的对象。</p><p>例如，一个16节点的Minio集群，每个节点16块硬盘，就算8台服務器宕机，这个集群仍然是可读的，不过你需要9台服務器才能写数据。一致性</p><p>Minio在分布式和单机模式下，所有读写操作都严格遵守read—after—write一致性模型。</p><p><a href="https://www.sohu.com/a/455702322_115128">漫谈 MinIO 集群扩容方法_节点</a></p><p>MinIO集群采用去中心化无共享架构，各节点间为对等关系，连接至任一节点均可实现对集群的访问，并通过DNS轮询等方式实现节点间的负载均衡。这种节点间保持对等关系的设计并非最常见的分布式集群架构。当前大多数的分布式存储集群，其节点往往可划分为多类角色，例如负责连接并处理外部应用请求的访问节点、负责存储元数据的管理节点、实际的数据存储节点等。MinIO则与之不同，MinIO集群中的所有节点都同时承担了多种角色，集元数据存储、数据存储、应用访问等功能于一体，真正实现了去中心化和所有节点的完全对等。其优势在于有效地减少了集群内的复杂调度过程以及因中心节点带来的故障风险和性能瓶颈。</p><p>这种设计拓展节点的时候容易出现问题</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>aliyun的服务警告</title>
      <link href="7d4de1d4.html"/>
      <url>7d4de1d4.html</url>
      
        <content type="html"><![CDATA[<p><img src="../img/image-20220308101648269.png" alt="image-20220308101648269"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用curl命令来下载页面中连接</title>
      <link href="d40194d4.html"/>
      <url>d40194d4.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/23446635/how-to-download-http-directory-with-all-files-and-sub-directories-as-they-appear">html - How to download HTTP directory with all files and sub-directories as they appear on the online files/folders list? - Stack Overflow</a></p><p>wget -r -np -nH –cut-dirs=3 -R index.html <a href="http://hostname/aaa/bbb/ccc/ddd/">http://hostname/aaa/bbb/ccc/ddd/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java线程</title>
      <link href="8d977941.html"/>
      <url>8d977941.html</url>
      
        <content type="html"><![CDATA[<p>需要先梳理java线程和系统的线程</p><p>通常系统是 线程 下面还有进程 thread-process</p><p>在java中有自己定义线程需要和系统的线程区别</p><p>阻塞/非阻塞：是指一个业务需要a,b，c三个结果，阻塞是等待结果，非阻塞是去完成别的</p><p>串行/并行：这个通常是指业务逻辑的是逐个完成，还是一起完成</p><p>多线程：100件事的并行完成，通常还包含这线程池</p><p>对于多线程执行就存在资源挤占和数据处理问题通常是有两种方式</p><ol><li>锁在特定操作通常是修改数据时加锁，让其他线程逐个执行，具有排他性</li><li>通过刷新内存，保证多线程中某个线程修改，其他线程能拿到最新的数据</li></ol><p>要是我定义的话 线程可能会是  <strong>start  run  waiting waiting_timeout   end</strong></p><p>加锁的话需要参照物，java实现的就是在object 同时object对象实例有 wait 这是为啥？？</p><p>为什么方法和属性不放在thread类里面，后者已经有很多本地的方法，包括<br>Thread.sleep<br>Thread.yield</p><p>interrupt</p><p>join</p><p>sleep</p><hr><p>wait</p><p>notify</p><p>notyfyall</p><table><thead><tr><th>方法</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>static Thread currentThread()</td><td>返回当前线程，即当前代码的执行线程（对象）</td><td>同一段代码对Thread.currentThread()的调用，其返回值可能对应着不同的线程（对象）</td></tr><tr><td>void run()</td><td>用于实现线程的任务处理逻辑</td><td>该方法是由Java虚拟机直接调用的，一般情况下应用程序不应该调用该方法</td></tr><tr><td>void start()</td><td>启动相应线程</td><td>该方法的返回并不代表相应的线程已经被启动。一个Thread实例的start方法只能够被调用一次，多次调用会导致异常的抛出</td></tr><tr><td>void join()</td><td>等待相应线程运行结束</td><td>若线程A调用线程B的join方法，那么线程A的运行会被暂停，直到线程B运行结束</td></tr><tr><td>static void yield()</td><td>使当前线程主动放弃其对处理器的占用，这可能导致当前线程被暂停</td><td>这个方法是不可靠的。该方法被调用时当前线程可能仍然继续运行（视系统当前的运行状况而定）</td></tr><tr><td>static void sleep(long millis)</td><td>使当前线程休眠（暂停运行）指定的时间</td><td></td></tr></tbody></table><p><img src="../img/937965dcce0c4a6589593d4793912fb2~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p><a href="https://juejin.cn/post/7071664792540282893">JAVA中的线程世界 - 掘金</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spotify_windows_no_ad</title>
      <link href="f7af877b.html"/>
      <url>f7af877b.html</url>
      
        <content type="html"><![CDATA[<p>下载最新的屏蔽广告的dll，项目地址<a href="https://github.com/mrpond/BlockTheSpot%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85spotify">https://github.com/mrpond/BlockTheSpot重新安装spotify</a></p><ol><li>浏览到您的 Spotify 安装文件夹<code>%APPDATA%\Spotify</code></li><li>重命名<code>chrome_elf.dll</code>为<code>chrome_elf_bak.dll</code></li><li><code>chrome_elf.zip</code>从<a href="https://github.com/mrpond/BlockTheSpot/releases">发行版</a>下载</li><li>解压<code>chrome_elf.dll</code>并<code>config.ini</code></li></ol><p>注意对应的版本</p><p><img src="../img/image-20220226165157531.png" alt="image-20220226165157531"></p><p>这边提供下载地址：<a href="https://www.aliyundrive.com/s/qCvBVumnsJt">https://www.aliyundrive.com/s/qCvBVumnsJt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">如果重新安装主要需要同时删除 C:\Users\&#123;USER)_NAME&#125;\AppData\Roaming\Spotify</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/mrpond/BlockTheSpot/issues/244#:~:text=%E8%BF%99%E5%AF%B9%E6%88%91,%E5%BA%94%E8%AF%A5%E5%8F%AF%E4%BB%A5%E5%B7%A5%E4%BD%9C">参考链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> spotify </tag>
            
            <tag> no_ad </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下使用docker搭建ue流的环境</title>
      <link href="ae4f29ca.html"/>
      <url>ae4f29ca.html</url>
      
        <content type="html"><![CDATA[<p>Linux 下使用docker搭建ue流的环境</p><p>本项目依赖的软件均依赖与</p><p><a href="https://hub.fastgit.org/adamrehn">https://hub.fastgit.org/adamrehn</a></p><p>这个开发者的官方地址:<a href="https://docs.adamrehn.com/">https://docs.adamrehn.com/</a></p><p>以及官方docker仓库地址: <a href="https://hub.docker.com/u/adamrehn">https://hub.docker.com/u/adamrehn</a></p><p>虚幻容器:<a href="https://unrealcontainers.com/">https://unrealcontainers.com</a> </p><p>目前就是需要前置环境包括 docker ,python3 ,cuda</p><p>需要用 pip3 来安装开发者写的 ue4-docker 命令来实现 构建Linux,Windows的容器给 docker来使用</p><p>同时还需要 其他工具提供给Linux环境</p><ul><li><p>Docker版本之一的64位版本（CentOS7+、Debian7.7+、Fedora26+、Ubuntu14.04+）</p></li><li><p>最低8GB的RAM</p></li><li><p>用于构建容器映像的至少300GB可用磁盘空间</p></li></ul><table><thead><tr><th>Host OS</th><th>Linux containers</th><th>Windows containers</th><th>NVIDIA Container Toolkit</th><th>Optimality</th></tr></thead><tbody><tr><td><a href="https://docs.adamrehn.com/ue4-docker/configuration/configuring-linux"><strong>Linux</strong></a></td><td>Yes</td><td>No</td><td>Yes</td><td>Optimal for Linux containers</td></tr><tr><td><a href="https://docs.adamrehn.com/ue4-docker/configuration/configuring-windows-server"><strong>Windows Server</strong></a></td><td>Yes</td><td>Yes</td><td>No</td><td>Optimal for Windows containers when using process isolation mode</td></tr><tr><td><a href="https://docs.adamrehn.com/ue4-docker/configuration/configuring-windows-10"><strong>Windows 10</strong></a></td><td>Yes</td><td>Yes</td><td>No</td><td>Sub-optimal for both Linux and Windows containers</td></tr><tr><td><a href="https://docs.adamrehn.com/ue4-docker/configuration/configuring-macos"><strong>macOS</strong></a></td><td>Yes</td><td>No</td><td>No</td><td>Sub-optimal for Linux containers</td></tr></tbody></table><p>直接调用gpu界面不使用图形界面来实现</p><h2 id="先在ubuntu上安装docker环境"><a href="#先在ubuntu上安装docker环境" class="headerlink" title="先在ubuntu上安装docker环境"></a>先在ubuntu上安装docker环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line">//更新apt软件包索引并安装软件包以允许apt通过HTTPS使用存储库：</span><br><span class="line">sudo apt-get update</span><br><span class="line">//添加Docker的官方GPG密钥:</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">//验证您现在是否拥有带有指纹的密钥:</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">//设置镜像仓库：（使用阿里云镜像地址）</span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line"></span><br><span class="line">安装最新版的docker</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;get.docker.com | sh \</span><br><span class="line">  &amp;&amp; sudo systemctl --now enable docker</span><br></pre></td></tr></table></figure><h2 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//安装前看一下是否有软件</span><br><span class="line">install python3 python3-devel python3-pip</span><br><span class="line"></span><br><span class="line">配置Linux的防火墙</span><br><span class="line">ue4-docker setup</span><br></pre></td></tr></table></figure><h2 id="安装NVIDIA-toolkit"><a href="#安装NVIDIA-toolkit" class="headerlink" title="安装NVIDIA-toolkit"></a>安装NVIDIA-toolkit</h2><p><a href="https://nvidia.github.io/">https://nvidia.github.io</a> 访问会有问题需要加速</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">distribution&#x3D;$(. &#x2F;etc&#x2F;os-release;echo $ID$VERSION_ID) \</span><br><span class="line">   &amp;&amp; curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;gpgkey | sudo apt-key add - \</span><br><span class="line">   &amp;&amp; curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;$distribution&#x2F;nvidia-docker.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.list</span><br><span class="line">   </span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;安装依赖软件</span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line">&#x2F;&#x2F;重启docker 服务</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">&#x2F;&#x2F;根据 cuda 版本来选择执行下面命令即可</span><br><span class="line">docker run --rm --gpus all nvidia&#x2F;cuda:11.0-base nvidia-smi</span><br><span class="line"></span><br><span class="line">docker run --rm --gpus all nvidia&#x2F;cuda:10.0-base nvidia-smi</span><br></pre></td></tr></table></figure><hr><p>docker pull adamrehn/ue4-build-prerequisites:cudagl10.0</p><p>docker-ue4 来构建 adamrehn/ue4-full:4.23.1-pixelstreaming 来提供给使用</p><p>该过程很慢,可能会失败,需要注意</p><p>ue4-docker build  custom:4.23.1-pixelstreaming  -repo=<a href="https://github.com/adamrehn/UnrealEngine.git">https://github.com/adamrehn/UnrealEngine.git</a>  -branch=4.23.1-pixelstreaming  –cuda=10.1</p><p>ue4-docker build custom:4.25-pixelstreaming -repo=<a href="https://github.com/ImmortalEmperor/UnrealEngine.git">https://github.com/ImmortalEmperor/UnrealEngine.git</a> -branch=4.25-pixelstreaming      –cuda=10.1  –no-engine  </p><h2 id="使用ue4-example-dockerfiles来搭建-ue4视频流的demo"><a href="#使用ue4-example-dockerfiles来搭建-ue4视频流的demo" class="headerlink" title="使用ue4-example-dockerfiles来搭建 ue4视频流的demo"></a>使用ue4-example-dockerfiles来搭建 ue4视频流的demo</h2><p>克隆 <a href="https://hub.fastgit.org/adamrehn/ue4-example-dockerfiles.git%E5%9C%B0%E5%9D%80%E6%9D%A5">https://hub.fastgit.org/adamrehn/ue4-example-dockerfiles.git地址来</a></p><p>构建adamrehn/ue4-full:4.23.1-pixelstreaming</p><p><a href="https://github.com/EpicGames/UnrealEngine.git">https://github.com/EpicGames/UnrealEngine.git</a></p><p>server 是需要的</p><p>webrtc 也是需要的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ue4-docker build</span><br></pre></td></tr></table></figure><p>docker  run  –gpus=all  -e DISPLAY  –rm adamrehn/ue4-runtime:18.04-cudagl10.1-hostaudio</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> 视频流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes部署ceph</title>
      <link href="b592fe66.html"/>
      <url>b592fe66.html</url>
      
        <content type="html"><![CDATA[<h2 id="k8s集成ceph"><a href="#k8s集成ceph" class="headerlink" title="k8s集成ceph"></a>k8s集成ceph</h2><p>当前推荐的集群安装方式有 <a href="https://docs.ceph.com/en/latest/cephadm/install/">Deploying a new Ceph Cluster with cephadm (opens new window)</a>和 <a href="https://rook.io/docs/rook/v1.4/ceph-quickstart.html">Rook</a></p><h3 id="一、使用cephadm来管理ceph集群"><a href="#一、使用cephadm来管理ceph集群" class="headerlink" title="一、使用cephadm来管理ceph集群"></a>一、使用cephadm来管理ceph集群</h3><p>首先 这种方式依赖的环境太多</p><ul><li>Python 3</li><li>Systemd</li><li>Podman or Docker for running containers</li><li>Time synchronization (such as chrony or NTP)</li><li>LVM2 for provisioning storage devices</li></ul><p>并且我是用sealons来初始化kubernetes环境中已经有python2.6，安装python上后维护会很复杂，安装步骤繁琐（节点支持用dnf   apt 和下载二进制文件来实现安装）但是还是繁琐</p><h3 id="二、使用rook来管理集群"><a href="#二、使用rook来管理集群" class="headerlink" title="二、使用rook来管理集群"></a>二、使用rook来管理集群</h3><p>目前使用后者rook来实现部署，这个项目也是原生云基金会来推动的，加快kubernetes-storage的安装部署工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rook 将分布式存储系统转变为自我管理、自我扩展、自我修复的存储服务。它可以自动执行存储管理员的任务：部署、引导、配置、供应、扩展、升级、迁移、灾难恢复、监控和资源管理。</span><br><span class="line"></span><br><span class="line">Rook 使用 Kubernetes 平台的强大功能通过 Kubernetes Operator 为每个存储提供商提供服务。</span><br></pre></td></tr></table></figure><p><a href="https://rook.io/docs/rook/v1.8/quickstart.html">1.8/quickstart</a> 初始化rook后</p><p><a href="https://developer.aliyun.com/article/679767">Kubernetes存储系统-云原生存储Rook部署-阿里云开发者社区</a></p><p>在</p><h4 id="2-1、部署中的问题"><a href="#2-1、部署中的问题" class="headerlink" title="2.1、部署中的问题"></a>2.1、部署中的问题</h4><p>直接创建会由于k8s角色和权限问题导致报错，报错的内容如下</p><blockquote><p> system:serviceaccount:rook-ceph:rook-ceph-system” cannot get resource “pods” </p></blockquote><p>t同时在网上看到的在rook的要求也看到 <a href="https://rook.io/docs/rook/v1.4/k8s-pre-reqs.html#pod-security-policies">Pod Security Policies</a>需要 </p><p><img src="https://s2.loli.net/2022/02/16/tXMghbT3zj81aAS.png" alt="image.png"></p><p>需要配置<a href="https://jimmysong.io/kubernetes-handbook/concepts/rbac.html#:~:text=%E7%9B%AE%E5%89%8D%EF%BC%8C%E8%AE%B8%E5%A4%9A%20%E5%8A%A0,serviceaccount%3Dkube%2Dsystem%3Adefault">cluster-admin</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding add-on-cluster-admin \</span><br><span class="line">  --clusterrole&#x3D;cluster-admin \</span><br><span class="line">  --serviceaccount&#x3D;kube-system:master</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">kubectl create rolebinding default-view \</span><br><span class="line">  --clusterrole&#x3D;view \</span><br><span class="line">  --serviceaccount&#x3D;rook-ceph:rook-ceph-system \</span><br><span class="line">  --namespace&#x3D;rook-ceph</span><br></pre></td></tr></table></figure><p>是在界面配置对应的角色才可以正常访问rook-ceph下的服务。</p><p><img src="../img/image-20220217093101275.png" alt="image-20220217093101275"></p><h3 id="三、kubectl来初始化"><a href="#三、kubectl来初始化" class="headerlink" title="三、kubectl来初始化"></a>三、kubectl来初始化</h3><p>参考链接<a href="https://kuboard.cn/learning/k8s-intermediate/persistent/ceph/rook-config.html#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6">使用 CephFS 作为存储类 - Rook | Kuboard</a> </p><p>核心部分就是 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https:&#x2F;&#x2F;kuboard.cn&#x2F;statics&#x2F;learning&#x2F;ceph&#x2F;rook-1.5.4&#x2F;crds.yaml</span><br><span class="line">kubectl create -f https:&#x2F;&#x2F;kuboard.cn&#x2F;statics&#x2F;learning&#x2F;ceph&#x2F;rook-1.5.4&#x2F;common.yaml</span><br><span class="line">kubectl create -f https:&#x2F;&#x2F;kuboard.cn&#x2F;statics&#x2F;learning&#x2F;ceph&#x2F;rook-1.5.4&#x2F;operator.yaml</span><br><span class="line">kubectl create -f https:&#x2F;&#x2F;kuboard.cn&#x2F;statics&#x2F;learning&#x2F;ceph&#x2F;rook-1.5.4&#x2F;cluster.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>部署服务同时新建rook-ceph的 namespace</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; myfs.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: ceph.rook.io/v1</span></span><br><span class="line"><span class="string">kind: CephFilesystem</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: myfs</span></span><br><span class="line"><span class="string">  namespace: rook-ceph</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  metadataPool:</span></span><br><span class="line"><span class="string">    replicated:</span></span><br><span class="line"><span class="string">      size: 3</span></span><br><span class="line"><span class="string">  dataPools:</span></span><br><span class="line"><span class="string">    - replicated:</span></span><br><span class="line"><span class="string">        size: 3</span></span><br><span class="line"><span class="string">  preservePoolsOnDelete: true</span></span><br><span class="line"><span class="string">  metadataServer:</span></span><br><span class="line"><span class="string">    activeCount: 1</span></span><br><span class="line"><span class="string">    activeStandby: true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">kubectl create -f myfs.yaml</span><br></pre></td></tr></table></figure><p>创建对应的 File System Name ，提供给选择</p><p>使用kubectl的yml文件初始化后的服务列表</p><p><img src="../img/image-20220310150347306.png" alt="image-20220310150347306"></p><p>创建对应的存储类</p><p><img src="../img/image-20220310150259603.png" alt="image-20220310150259603"></p>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> ceph </tag>
            
            <tag> kuboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvidia-jetson-nano-use</title>
      <link href="dce64a3e.html"/>
      <url>dce64a3e.html</url>
      
        <content type="html"><![CDATA[<p>参考地址<a href="https://sharadchhetri.com/system-settings-not-opening-on-ubuntu-16-04-lts/">System settings not opening on Ubuntu 16.04 LTS</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove unity-control-center</span><br><span class="line">sudo apt autoremove</span><br><span class="line">sudo apt-get install unity-control-center</span><br></pre></td></tr></table></figure><p><a href="https://cleverbobo.github.io/2020/10/09/nano1/">Jetson nano平台深度学习环境配置 | 米奇妙妙屋</a></p><p><a href="https://www.jb51.net/article/198759.htm">Jetson nano配置VNC实现过程图解_其它相关_脚本之家</a></p><p><img src="../img/image-20220207171554625.png" alt="image-20220207171554625"></p><p><img src="../img/image-20220207171748648.png" alt="image-20220207171748648"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s_init_and_deploy_sample_service</title>
      <link href="16f52beb.html"/>
      <url>16f52beb.html</url>
      
        <content type="html"><![CDATA[<h1 id="初始化k8s"><a href="#初始化k8s" class="headerlink" title="初始化k8s"></a>初始化k8s</h1><p>我了解有下列一键部署k8s,第一个是网友推荐，第二个是kuboard上面推荐</p><ul><li><a href="https://github.com/fanux/sealos">fanux/sealos: 一条命令离线安装高可用 Kubernetes🔥 ⎈ 🐳</a>不依赖haproxy keepalived</li><li><a href="https://github.com/eip-work/kuboard-spray">eip-work/kuboard-spray: 使用图形化的界面离线安装、维护高可用的 K8S 集群</a>基于kubespray</li></ul><p>目前使用 sealos来一键初始化kubernetes环境</p><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><ul><li>hostname不能重名</li><li>服务过程中会自动关闭防火墙</li><li>需要保证节点服务的可访问</li><li>默认使用containerd而不是docker为容器平台</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 下载并安装sealos, sealos是个golang的二进制工具，直接下载拷贝到bin目录即可, release页面也可下载</span><br><span class="line">wget -c https:&#x2F;&#x2F;sealyun.oss-cn-beijing.aliyuncs.com&#x2F;latest&#x2F;sealos &amp;&amp; \</span><br><span class="line">    chmod +x sealos &amp;&amp; mv sealos &#x2F;usr&#x2F;bin</span><br><span class="line"></span><br><span class="line"># 下载离线资源包</span><br><span class="line">wget -c https:&#x2F;&#x2F;sealyun.oss-cn-beijing.aliyuncs.com&#x2F;05a3db657821277f5f3b92d834bbaf98-v1.22.0&#x2F;kube1.22.0.tar.gz</span><br><span class="line"></span><br><span class="line"># 安装一个三master的kubernetes集群</span><br><span class="line">sealos init --passwd &#39;123456&#39; \</span><br><span class="line">--master 192.168.0.2  --master 192.168.0.3  --master 192.168.0.4  \</span><br><span class="line">--node 192.168.0.5 \</span><br><span class="line">--pkg-url &#x2F;root&#x2F;kube1.22.0.tar.gz \</span><br><span class="line">--version v1.22.0</span><br></pre></td></tr></table></figure><h3 id="1-1-常见问题"><a href="#1-1-常见问题" class="headerlink" title="1.1 常见问题"></a>1.1 常见问题</h3><h4 id="1-1-1初始化失败"><a href="#1-1-1初始化失败" class="headerlink" title="1.1.1初始化失败"></a>1.1.1初始化失败</h4><p>现象如下：</p><blockquote><p>generator kubeconfig failed couldn’t create a kubeconfig</p><p>container runtime is not running: output</p></blockquote><p>解决方法： 不用安装docker和其他服务，服务器只需要wget 服务</p><h4 id="1-1-2kubectl-get-pod"><a href="#1-1-2kubectl-get-pod" class="headerlink" title="1.1.2kubectl get pod"></a>1.1.2kubectl get pod</h4><blockquote><p>The connection to the server localhost:8080 was refused - did you specify the right host or port?</p></blockquote><p>解决方法： 将主节点的 admin.conf 拷到对应节点后配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scp  /etc/kubernetes/admin.conf  192.168.31.133:/etc/kubernetes</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/article/1499871">k8s集群部分常见问题处理 - 云+社区 - 腾讯云</a></p><h2 id="二、kuboard安装"><a href="#二、kuboard安装" class="headerlink" title="二、kuboard安装"></a>二、kuboard安装</h2><p><a href="https://kuboard.cn/install/v3/install-in-k8s.html#%E6%96%B9%E6%B3%95%E4%B8%80-%E4%BD%BF%E7%94%A8-hostpath-%E6%8F%90%E4%BE%9B%E6%8C%81%E4%B9%85%E5%8C%96">在 K8S 中安装 Kuboard v3 | Kuboard</a> </p><p>我选择使用 hostPath 提供持久化而不是 StorageClass 提供持久化（还没有创建）</p><p>界面如下</p><p><img src="../img/image-20220127150651513.png" alt="image-20220127150651513"></p><h3 id="三、使用kubectl来创建pod并部署"><a href="#三、使用kubectl来创建pod并部署" class="headerlink" title="三、使用kubectl来创建pod并部署"></a>三、使用kubectl来创建pod并部署</h3><p>命令来创建，部署</p><p>注意kubectl 需要指定namespace的值，否则默认是default</p><blockquote><p> kubectl get pod        No resources found in default namespace.</p></blockquote><h4 id="3-1-创建nginx镜像"><a href="#3-1-创建nginx镜像" class="headerlink" title="3.1. 创建nginx镜像"></a>3.1. 创建nginx镜像</h4><p>kubectl run nginx –image=nginx –port=80</p><blockquote><p>NAME    READY   STATUS    RESTARTS   AGE</p><p>nginx   1/1     Running   0          83s</p></blockquote><h4 id="3-2-部署nginx"><a href="#3-2-部署nginx" class="headerlink" title="3.2. 部署nginx"></a>3.2. 部署nginx</h4><p>kubectl create deployment nginx –image=nginx</p><blockquote><p>deployment.apps/nginx created</p></blockquote><p> 否则 运行下面命令会出现没有部署服务</p><p> kubectl get deployment</p><blockquote><p>  No resources found in default namespace.</p></blockquote><h4 id="3-3-nginx端口暴露能被外部访问"><a href="#3-3-nginx端口暴露能被外部访问" class="headerlink" title="3.3. nginx端口暴露能被外部访问"></a>3.3. nginx端口暴露能被外部访问</h4><blockquote><p> kubectl expose deployment nginx –port=80 –type=LoadBalancer</p></blockquote><h4 id="3-4-查看pod的信息"><a href="#3-4-查看pod的信息" class="headerlink" title="3.4. 查看pod的信息"></a>3.4. 查看pod的信息</h4><p>kubectl describe service nginx</p><blockquote><p>Name:                     nginx<br>Namespace:                default<br>Labels:                   app=nginx<br>Annotations:              <none><br>Selector:                 app=nginx<br>Type:                     LoadBalancer<br>IP Family Policy:         SingleStack<br>IP Families:              IPv4<br>IP:                       10.109.244.210<br>IPs:                      10.109.244.210<br>Port:                     <unset>  80/TCP<br>TargetPort:               80/TCP<br>NodePort:                 <unset>  30682/TCP<br>Endpoints:                100.118.167.130:80<br>Session Affinity:         None<br>External Traffic Policy:  Cluster<br>Events:                   <none></p></blockquote><p>kubectl get pods –all-namespaces</p><h4 id="配置文件来部署"><a href="#配置文件来部署" class="headerlink" title="配置文件来部署"></a>配置文件来部署</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-node</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hello-node</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello-node</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello-node</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-node-container</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">gcr.io/$DEVSHELL_PROJECT_ID/hello-node:1.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>kubectl apply -f nginx-deployment.yaml</p><h4 id="3-5常见问题"><a href="#3-5常见问题" class="headerlink" title="3.5常见问题"></a>3.5常见问题</h4><h5 id="3-5-1-k8s某个节点挂掉"><a href="#3-5-1-k8s某个节点挂掉" class="headerlink" title="3.5.1 k8s某个节点挂掉"></a>3.5.1 k8s某个节点挂掉</h5><p>如果遇到k8s某个节点挂掉，但是服务器还是可以连接的情况，说明是服务器节点通信问题，首先参考下面的连接查看日志和对应端口是否是正常的</p><p><a href="http://www.knockatdatabase.com/2021/11/27/kubernetes-cant-work-after-reboot-os/">服务器重启后kubernetes无法启动的原因 - 数据库敲门人</a></p><p><a href="https://discuss.kubernetes.io/t/the-connection-to-the-server-host-6443-was-refused-did-you-specify-the-right-host-or-port/552/4">The connection to the server <host>:6443 was refused - did you specify the right host or port? - General Discussions - Discuss Kubernetes</a></p><h6 id="查看日志的命令如下"><a href="#查看日志的命令如下" class="headerlink" title="查看日志的命令如下"></a>查看日志的命令如下</h6><blockquote><p> journalctl -u kubelet.service</p><p>journalctl -xefu kubelet</p></blockquote><h6 id="查看节点命令如下"><a href="#查看节点命令如下" class="headerlink" title="查看节点命令如下"></a>查看节点命令如下</h6><p>kubectl get node –watch</p><h6 id="重启kubelet的服务"><a href="#重启kubelet的服务" class="headerlink" title="重启kubelet的服务"></a>重启kubelet的服务</h6><p>systemctl restart kubelet</p><h6 id="查看端口的连接情况"><a href="#查看端口的连接情况" class="headerlink" title="查看端口的连接情况"></a>查看端口的连接情况</h6><p>netstat -nap|grep 6443<br>The connection to the server apiserver.cluster.local:6443 was refused - did you specify the right host or port?</p><h6 id="使用的是sealons重新添加该集群"><a href="#使用的是sealons重新添加该集群" class="headerlink" title="使用的是sealons重新添加该集群"></a>使用的是sealons重新添加该集群</h6><p>建议可以使用 sealos  delete 删除掉线的节点</p><p>然后再使用 sealos  join 命令能把节点重新加入到集群中</p><h5 id="3-5-2-容器运行时报错Network-plugin-returns-error"><a href="#3-5-2-容器运行时报错Network-plugin-returns-error" class="headerlink" title="3.5.2 容器运行时报错Network plugin returns error"></a>3.5.2 容器运行时报错Network plugin returns error</h5><p>日志如下</p><p>cat  /var/log/pods/kube-system_kube-apiserver-master2_d653fc9e62a54eaa54def1ae5c0dde56/kube-apiserver</p><blockquote><p>container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:Network plugin returns error: cni plugin not initialized</p></blockquote><p>首先查看kube-system中NetworkPlugin是否存在</p><blockquote><p> kubectl get pod -n kube-system</p></blockquote><p>k8s中存在网络插件一般包括**<em>Choose network plugin (cilium, calico, contiv, weave or flannel)**</em>，我看着初始化的是calico</p><p>同时查看对应calico的日志</p><blockquote><p> kubectl logs  calico-node-rkqkq –namespace=kube-system</p></blockquote><p>kubectl get pods -o wide -A</p><p>查看对应的配置信息</p><blockquote><p>kubectl describe pod calico-node-rkqkq –namespace=kube-system</p></blockquote><p>配置文件存放地址 /root/kube/conf/calico.yaml</p><p>下面推荐的解决方案：</p><p><a href="https://www.cnblogs.com/cuicj/articles/14512540.html">k8s join集群时报错Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: - 丛丛丛丛 - 博客园</a></p><p><a href="https://stackoverflow.com/questions/57504063/calico-kubernetes-pods-cant-ping-each-other-use-cluster-ip">kubeadm - Calico: Kubernetes pods can’t ping each other use Cluster IP - Stack Overflow</a><br>kubectl delete-f /etc/kubernetes/addons/calico.yaml</p><p><a href="https://blog.csdn.net/tankruning/article/details/107102725">kubenates启动calico-node时，有节点总是报错CrashLoopBackOff_dkgee-CSDN博客</a></p><h2 id="四、部署minio和创建volumeclass"><a href="#四、部署minio和创建volumeclass" class="headerlink" title="四、部署minio和创建volumeclass"></a>四、部署minio和创建volumeclass</h2><p>根据官方文档可以找到</p><p><a href="https://docs.min.io/minio/k8s/deployment/deploy-minio-operator.html#procedure">Deploy MinIO Operator on Kubernetes — MinIO Hybrid Cloud Documentation</a></p><p><a href="https://github.com/minio/operator/blob/master/README.md">operator/README.md at master · minio/operator</a></p><p>需要 <a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/">Installing · Krew</a>或者<a href="https://helm.sh/">minio/helm/minio at master )</a>包管理软件</p><h3 id="4-1使用krew初始化minio"><a href="#4-1使用krew初始化minio" class="headerlink" title="4.1使用krew初始化minio"></a>4.1使用krew初始化minio</h3><p>我选择krew包管理，需要使用到git命令</p><p>然后运行下面这段内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">  <span class="built_in">set</span> -x; <span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(mktemp -d)</span>&quot;</span> &amp;&amp;</span><br><span class="line">  OS=<span class="string">&quot;<span class="subst">$(uname | tr &#x27;[:upper:]&#x27; &#x27;[:lower:]&#x27;)</span>&quot;</span> &amp;&amp;</span><br><span class="line">  ARCH=<span class="string">&quot;<span class="subst">$(uname -m | sed -e &#x27;s/x86_64/amd64/&#x27; -e &#x27;s/\(arm\)\(64\)\?.*/\1\2/&#x27; -e &#x27;s/aarch64$/arm64/&#x27;)</span>&quot;</span> &amp;&amp;</span><br><span class="line">  KREW=<span class="string">&quot;krew-<span class="variable">$&#123;OS&#125;</span>_<span class="variable">$&#123;ARCH&#125;</span>&quot;</span> &amp;&amp;</span><br><span class="line">  curl -fsSLO <span class="string">&quot;https://github.com/kubernetes-sigs/krew/releases/latest/download/<span class="variable">$&#123;KREW&#125;</span>.tar.gz&quot;</span> &amp;&amp;</span><br><span class="line">  tar zxvf <span class="string">&quot;<span class="variable">$&#123;KREW&#125;</span>.tar.gz&quot;</span> &amp;&amp;</span><br><span class="line">  ./<span class="string">&quot;<span class="variable">$&#123;KREW&#125;</span>&quot;</span> install krew</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>运行过程中出了问题 变量${KREW}=krew-linux_amd64</p><p>我是下载 <a href="https://github.com/kubernetes-sigs/krew/releases/latest/download/krew-linux_amd64.tar.gz%E3%80%81">https://github.com/kubernetes-sigs/krew/releases/latest/download/krew-linux_amd64.tar.gz、</a></p><p>export PATH=”$HOME/.krew}/bin:$PATH”</p><p>目前使用kuboard web界面管理k8s集群</p><p><a href="https://www.kuboard.cn/learning/k8s-intermediate/persistent/storage-class.html">存储类StorageClass | Kuboard</a>但是目前只支持界面配置 cephfs，nfs</p><p><a href="https://kubernetes.io/docs/concepts/storage/storage-classes/">Storage Classes | Kubernetes</a> 官方支持的volumeclass也没有minio需要手写 yml的配置文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> container </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式文件存储</title>
      <link href="1128ed08.html"/>
      <url>1128ed08.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件存储选型"><a href="#文件存储选型" class="headerlink" title="文件存储选型"></a>文件存储选型</h1><h2 id="专业名称"><a href="#专业名称" class="headerlink" title="专业名称"></a>专业名称</h2><p><a href="http://blog.zollty.com/b/archive/relations-among-object-file-and-block-storage.html">对象存储、文件存储、块存储的区别和联系 | Zollty’s Blog</a></p><p><a href="https://note.dolyw.com/fs/00-FS-Select.html">文件系统了解及对比选型 | 笔记</a></p><p>目前主要存储的种类对象存储，文件存储，块存储。需要使用</p><p><strong>对象存储</strong>：是目前流行的存储服务也是云服务厂商提供的类似于Amazon 的 s3(<em>Simple Storage Service</em> ) 和阿里云对象存储OSS（Object Storage Service）</p><p><strong>文件存储</strong>：狭义理解 Linux 实现POSIX接口，能挂载在Linux上，FTP、NFS服务器SAMBA </p><p><strong>块存储</strong>： 磁盘阵列，硬盘 ，可能会使用RAID NAS这种来实现数据的冗余备份</p><table><thead><tr><th>存储类型</th><th>介绍</th></tr></thead><tbody><tr><td>对象存储</td><td>类似于s3,主要是存储静态的数据,不受扩展不受元数据约束限制的块设备</td></tr><tr><td>文件存储</td><td>通常是实现了POSIX接口,能挂载librados，libcephfs</td></tr><tr><td>块存储</td><td>磁盘阵列，硬盘</td></tr></tbody></table><p>通常情况下云服务厂商会有数据容灾（ 同城人员存储，跨区域复制，合规保留策略，版本控制功能），数据加密，权限和访问（用户级别资源隔离，防盗链，访问控制ACL）</p><p>分布式 –&gt;容错冗余备份 –&gt;方便拓展 –&gt;稳定性-&gt;速度（磁盘io，网络io，软件优化，服务器CPU等硬件）</p><ol><li><p>是否要兼容目前k8s环境</p></li><li><p> 提供restful接口</p></li><li><p>目前文件主要为零散文件和打包后的大文件</p></li><li><p>稳定性和调试是否方便</p></li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><table><thead><tr><th>系统</th><th>文件元数据</th><th>文件内容读取</th><th>POSIX</th><th>REST API</th><th>针对大量小文件进行了优化</th></tr></thead><tbody><tr><td>SeaweedFS</td><td>查找卷 ID，可缓存</td><td>O(1) 磁盘寻道</td><td></td><td>是的</td><td>是的</td></tr><tr><td>SeaweedFS Filer</td><td>线性可扩展，可定制</td><td>O(1) 磁盘寻道</td><td>FUSE</td><td>是的</td><td>是的</td></tr><tr><td>GlusterFS</td><td>散列</td><td></td><td>FUSE，NFS</td><td></td><td></td></tr><tr><td>Ceph</td><td>哈希+规则</td><td></td><td>FUSE</td><td>是的</td><td></td></tr><tr><td>MooseFS</td><td>在记忆中</td><td></td><td>FUSE</td><td></td><td>不</td></tr><tr><td>MinIO</td><td>每个文件的单独元文件</td><td></td><td></td><td>是的</td><td>不</td></tr></tbody></table><p>minio: <a href="https://pureage.info/post/scalability-of-minio/">掀桌子的 MinIO - 纯真年代</a></p><p><img src="../img/architecture_diagram.svg" alt="architecture_diagram"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker容器简化运行jdk镜像</title>
      <link href="dda6ae1a.html"/>
      <url>dda6ae1a.html</url>
      
        <content type="html"><![CDATA[<h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><p>公司线上运行的容器是jre,没有调试和debug的工具,同时使用起来很不方便</p><h3 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h3><p>运行 <strong>cat /etc/issue</strong> 看到是debian 7的系统后</p><p>在/usr/lib/jvm 目录先看到的openjdk11</p><p>参考该链接的内容<a href="https://techoral.com/blog/java/install-openjdk-11-debian.html">How To Install OpenJDK Java 11 On Debian Real Quick</a> </p><blockquote><p>The openjdk-11-jre package contains just the Java Runtime Environment. If you want to develop Java programs then please install the openjdk-11-jdk package.<br>To Install OpenJDK 11 Debian Java Development Kit (JDK) - Enter the below command on Debian command line.</p></blockquote><p>需要还安装jdk</p><h3 id="在线安装openjdk11"><a href="#在线安装openjdk11" class="headerlink" title="在线安装openjdk11"></a>在线安装openjdk11</h3><p>将 /etc/apt/source.list 备份后修改为debian 7 阿里的源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib</span><br><span class="line"><span class="comment">#deb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</span></span><br><span class="line"><span class="comment">#deb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</span></span><br></pre></td></tr></table></figure><p>运行 <strong>apt install openjdk-11-jdk</strong> 一直卡在安装  openjdk-11-jre-headless_11.0.13+8-1 起初因为是源的问题,切换后还是很慢,后面考虑应该连接的是官方的地址,于是尝试从网站下载对应的openjdk-11-jre-headless_11.0.13+8-1_amd64.deb 包使用 <strong>dpkg -i</strong>安装 .</p><p>后面才知道</p><h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><p>使用dpkg -i  *.deb 的时候出现依赖没有安装</p><p>使用apt-get -f -y install 解决依赖问题后再执行dpkg安装deb包</p><p>jdk-11.0.2_linux-x64_bin.deb 大概150mb左右</p><h2 id="封装为脚本"><a href="#封装为脚本" class="headerlink" title="封装为脚本"></a>封装为脚本</h2><p><a href="https://code.aliyun.com/whotolike/deploycode/raw/master/init_debian_container.sh">https://code.aliyun.com/whotolike/deploycode/raw/master/init_debian_container.sh</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> docker </tag>
            
            <tag> container </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包linux的bin二进制包</title>
      <link href="2aff3a72.html"/>
      <url>2aff3a72.html</url>
      
        <content type="html"><![CDATA[<p>二进制的文件需要将压缩包的数据和shell脚本打包的为一个整体</p><p>为避免多个sh文件使用 <strong>cat &lt;&lt; EOF</strong>  来生成上面的sh文件,这样只需要下面这个sh文件就可以将指定的文件夹压缩,同时添加 执行命令那部分内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;压缩文件。。。&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSTALL_DIR=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line">tar -zcvf  <span class="variable">$INSTALL_DIR</span>/XXXX.tar.gz  <span class="variable">$INSTALL_DIR</span>/install/*</span><br><span class="line">cat &lt;&lt; <span class="string">EOF &gt;&gt;$INSTALL_DIR/install.sh</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">#Test shell self-extracting</span></span><br><span class="line"><span class="string">TmpDir=/tmp/XXX</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">TARGET_DIR=./XXX</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ ! -d \$&#123;TmpDir&#125; ]; then</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mkdir \$TmpDir</span></span><br><span class="line"><span class="string">    echo \$TmpDir  路径下不存在,正在创建</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo \$TmpDir 文件将会被覆盖</span></span><br><span class="line"><span class="string">    rm -rf  \$TmpDir/*</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ARCHIVE=\$(awk &#x27;/^__ARCHIVE_BELOW__/ &#123;print NR + 1; exit 0; &#125;&#x27; &quot;\$0&quot;)</span></span><br><span class="line"><span class="string">tail -n+\$ARCHIVE &quot;\$0&quot; | tar -xzvm -C \$TmpDir &gt; /dev/null 2&gt;&amp;1 3&gt;&amp;1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ ! -d \$&#123;TARGET_DIR&#125; ]; then</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       echo \$TARGET_DIR 路径下不存在现在创建</span></span><br><span class="line"><span class="string">       mkdir \$&#123;TARGET_DIR&#125;</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">       echo \$TARGET_DIR 路径下的文件将会被覆盖</span></span><br><span class="line"><span class="string">       rm -rf  \$&#123;TARGET_DIR&#125;/*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">cp -R \$TmpDir/*  \$&#123;TARGET_DIR&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &#x27;-------------------------------------------------------------------------------------------------&#x27;</span></span><br><span class="line"><span class="string">echo &#x27;********************************准备初始化 服务****************************************&#x27;</span></span><br><span class="line"><span class="string">echo &#x27;-------------------------------------------------------------------------------------------------&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/bin/sh  \$TARGET_DIR/install.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exit 0</span></span><br><span class="line"><span class="string">#This line must be the last line of the file</span></span><br><span class="line"><span class="string">__ARCHIVE_BELOW__</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat <span class="variable">$INSTALL_DIR</span>/install.sh <span class="variable">$INSTALL_DIR</span>/XXX.tar.gz &gt;  <span class="variable">$INSTALL_DIR</span>/XXX_install.run</span><br><span class="line">rm -f XXX.tar.gz</span><br><span class="line">rm -f install.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> binary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx的深度调优</title>
      <link href="132c3fd6.html"/>
      <url>132c3fd6.html</url>
      
        <content type="html"><![CDATA[<p> 参考文章</p><p><a href="https://juejin.cn/post/6895660634466156558#heading-30">Nginx全能解析及性能调优 - 掘金</a></p><p><a href="https://zhuanlan.zhihu.com/p/91454882">Nginx调优 - 知乎</a></p><p><img src="../img/bd998aa92614417f8b1b9db6302bc738~tplv-k3u1fbpfcp-watermark.awebp" alt="Aleyson爱逼逼"></p><h2 id="设置静态资源的过期时间"><a href="#设置静态资源的过期时间" class="headerlink" title="设置静态资源的过期时间"></a>设置静态资源的过期时间</h2><p><img src="../img/image-20220106161111684.png" alt="image-20220106161111684"></p><h2 id="反向代理设置缓存"><a href="#反向代理设置缓存" class="headerlink" title="反向代理设置缓存"></a>反向代理设置缓存</h2><blockquote><p>proxy_cache_path /data/nginx/cache  levels=1:2 keys_zone=one:200m inactive=60m loader_threshold=300 loader_files=300 max_size=2000m;</p></blockquote><h2 id="关闭access-log"><a href="#关闭access-log" class="headerlink" title="关闭access_log"></a>关闭access_log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># svg, fonts</span><br><span class="line">location ~ &#x2F;last&#x2F;\.(?:jpg|png|gif|cmpt|b3dm)$  &#123;</span><br><span class="line">    add_header Access-Control-Allow-Origin &quot;*&quot;;</span><br><span class="line">    expires    7d;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置worker-processes"><a href="#设置worker-processes" class="headerlink" title="设置worker_processes"></a>设置worker_processes</h2><blockquote><p>grep processor /proc/cpuinfo | wc –l 获取CPU核心数为8</p></blockquote><p>可以获取CPU相关的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">#pid logs&#x2F;nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">   worker_connections 65535;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常需要的设置的worker_processes 为核心数除以2的n次方.推荐设置为auto</p><p>设置gzip压缩</p><p>这个需要确认这个请求是支持gzip压缩的可以参考</p><p><img src="../img/image-20220107162340670.png" alt="image-20220107162340670"></p><p><strong>tips</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gzip on;  #是否开启gzip模块 on表示开启 off表示关闭</span><br><span class="line">gzip_static on;</span><br><span class="line">gzip_buffers 4 16k;  #设置压缩所需要的缓冲区大小</span><br><span class="line">gzip_comp_level 6;  #压缩级别1-9，数字越大压缩的越好，也越占用CPU时间</span><br><span class="line">gzip_min_length 1k;  #设置允许压缩的最小字节</span><br><span class="line">gzip_http_version 1.0;  #设置压缩http协议的版本,默认是1.1 如果nginx前面还有反向代理 这要设置为1.0</span><br><span class="line">gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png application&#x2F;octet-stream application&#x2F;javascript;  #设置压缩的文件类型</span><br><span class="line">gzip_vary     on;  #加上http头信息Vary: Accept-Encoding给后端代理服务器识别是否启用 gzip 压缩</span><br></pre></td></tr></table></figure><p><img src="../img/image-20220106161202850.png" alt="image-20220106161202850"></p><h2 id="Linux环境下设置io多路复用-epoll-模型"><a href="#Linux环境下设置io多路复用-epoll-模型" class="headerlink" title="Linux环境下设置io多路复用(epoll)模型"></a>Linux环境下设置io多路复用(epoll)模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">worker_processes     auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll; # 这个设置是针对2.6内核  cat &#x2F;proc&#x2F;version可读取</span><br><span class="line">    multi_accept       on;</span><br><span class="line">    worker_connections 65535;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派使用cloudreve搭建nas和离线下载</title>
      <link href="1661309199.html"/>
      <url>1661309199.html</url>
      
        <content type="html"><![CDATA[<p>2022-1-20 docker 部署cloudreve</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 下载</span><br><span class="line">docker pull xavierniu&#x2F;cloudreve</span><br><span class="line"></span><br><span class="line"># 创建</span><br><span class="line">mkdir -p ~&#x2F;cloudreve&#x2F;uploads \</span><br><span class="line">    &amp;&amp; mkdir -p ~&#x2F;cloudreve&#x2F;avatar \</span><br><span class="line">    &amp;&amp; touch ~&#x2F;cloudreve&#x2F;conf.ini \</span><br><span class="line">    &amp;&amp; touch ~&#x2F;cloudreve&#x2F;cloudreve.db</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">docker run -d \</span><br><span class="line">  --name cloudreve \</span><br><span class="line">  -e PUID&#x3D;$UID \</span><br><span class="line">  -e PGID&#x3D;$GID \</span><br><span class="line">  -e TZ&#x3D;&quot;Asia&#x2F;Shanghai&quot; \</span><br><span class="line">  -p 5212:5212 \</span><br><span class="line">  --restart&#x3D;unless-stopped \</span><br><span class="line">  -v &#x2F;cloudreve&#x2F;uploads:&#x2F;cloudreve&#x2F;uploads \</span><br><span class="line">  -v ~&#x2F;cloudreve&#x2F;conf.ini:&#x2F;cloudreve&#x2F;conf.ini \</span><br><span class="line">  -v ~&#x2F;cloudreve&#x2F;cloudreve.db:&#x2F;cloudreve&#x2F;cloudreve.db \</span><br><span class="line">  -v ~&#x2F;cloudreve&#x2F;avatar:&#x2F;cloudreve&#x2F;avatar \</span><br><span class="line">  xavierniu&#x2F;cloudreve</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> docker logs -f cloudreve</span><br></pre></td></tr></table></figure><p><a href="https://www.coolapk.com/feed/17682984?shareKey=MzYxMmY3MTc4YzNjNWU4N2RkYmU~&shareUid=902662&shareFrom=com.coolapk.market_9.0.2"><strong>树莓派搭建满速家庭云网盘（Lv.1）</strong></a></p><p><a href="https://www.coolapk.com/feed/17772116?shareKey=OTA2MTE2NGIxNDhiNWU4N2U2ZjQ~&shareUid=902662&shareFrom=com.coolapk.market_9.0.2">干货Get!]Android搭建Cloudreve私人云盘</a></p><p><a href="../img/1586074575520.png"><img src="../img/1586074575520.png" alt="1586074575520"></a></p><h3 id="允许SHH使用root登陆"><a href="#允许SHH使用root登陆" class="headerlink" title="允许SHH使用root登陆"></a>允许SHH使用root登陆</h3><p>sudo passwd 来重置root用户的密码</p><p> <strong>vim /etc/ssh/sshd_config</strong></p><p>注释掉 PermitRootLogin without-password</p><p>使用 PermitRootLogin yes</p><h3 id="连接树莓派将文件传过去"><a href="#连接树莓派将文件传过去" class="headerlink" title="连接树莓派将文件传过去"></a>连接树莓派将文件传过去</h3><p>现在下载 <a href="https://github.com/cloudreve/Cloudreve/releases">https://github.com/cloudreve/Cloudreve/releases</a> 选择<a href="https://github.com/cloudreve/Cloudreve/releases/download/3.0.0-rc1/cloudreve_3.0.0-rc1_linux_arm.tar.gz">cloudreve_3.0.0-rc1_linux_arm.tar.gz</a></p><p><a href="../img/1586075347405.png"><img src="../img/1586075347405.png" alt="1586075347405"></a></p><p>sudo mkdir /home/cloud</p><p>使用ftp的客户端连接注意使用 root</p><p>将下载cloudreve_3.0.0-rc1_linux_arm.tar.gz 放到 /home/cloud下</p><p>sudo tar -xzvf cloudreve_3.0.0-rc1_linux_arm.tar.gz 解压后也是个单文件cloudreve</p><p>sudo ./cloudreve</p><p>后面终端会打印出来用户<a href="mailto:admin@cloudreve.org">admin@cloudreve.org</a> 和密码</p><h3 id="初始化cloudreve-3-0-0-rc1-linux-arm和设置"><a href="#初始化cloudreve-3-0-0-rc1-linux-arm和设置" class="headerlink" title="初始化cloudreve_3.0.0-rc1_linux_arm和设置"></a>初始化cloudreve_3.0.0-rc1_linux_arm和设置</h3><p>登陆后下面是初始化的页面</p><p><a href="../img/1586074929312.png"><img src="../img/1586074929312.png" alt="1586074929312"></a></p><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><p><a href="../img/1586075685498.png"><img src="../img/1586075685498.png" alt="1586075685498"></a></p><p>只有这个入口可以设置用户(包括管理员)使用的存储的地址,可以本地-&gt;这个本地可以选择硬盘挂载路径,也可以用onedrive</p><h3 id="设置cloudreve后台启动"><a href="#设置cloudreve后台启动" class="headerlink" title="设置cloudreve后台启动"></a>设置cloudreve后台启动</h3><p>vim /usr/lib/systemd/system/cloudreve.service</p><p>粘贴以下内容然后文内的 PATH_TO_CLOUDREVE 更换为程序所在目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">        Description&#x3D;Cloudreve</span><br><span class="line">        Documentation&#x3D; &#x3D;[查看链接](https:&#x2F;&#x2F;docs.cloudreve.org&#x2F;)</span><br><span class="line">        After&#x3D;network.target</span><br><span class="line">        Wants&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">    WorkingDirectory&#x3D;&#x2F;PATH_TO_CLOUDREVE</span><br><span class="line">    ExecStart&#x3D;&#x2F;PATH_TO_CLOUDREVE&#x2F;cloudreve</span><br><span class="line">    Restart&#x3D;on-abnormal</span><br><span class="line">    RestartSec&#x3D;5s</span><br><span class="line">    KillMode&#x3D;mixed</span><br><span class="line">    StandardOutput&#x3D;null</span><br><span class="line">    StandardError&#x3D;syslog</span><br><span class="line">[Install]</span><br><span class="line">    WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>然后Ctrl+o保存Ctrl+x退出</p><p>然后配置进程<br>更新配置<br>systemctl daemon-reload<br>启动服务<br>systemctl start cloudreve<br>设置开机启动<br>systemctl enable cloudreve</p><p>然后我们就可以通过以下指令来管理服务了<br># 启动服务<br>systemctl start cloudreve</p><p># 停止服务<br>systemctl stop cloudreve</p><p># 重启服务<br>systemctl restart cloudreve</p><p># 查看状态<br>systemctl status cloudreve</p><h2 id="软连接到挂载的硬盘"><a href="#软连接到挂载的硬盘" class="headerlink" title="软连接到挂载的硬盘"></a>软连接到挂载的硬盘</h2><p>ln -s /home/device /home/cloud/uploads/1/disk</p><p>fdisk -l 查看分区和挂载状况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo su 建一个目录作为U盘的挂接点。比如说要把U盘挂载到 &#x2F;mnt&#x2F;usb，那么需要采用下列命令新建 &#x2F;mnt&#x2F;usb。       mkdir &#x2F;mnt&#x2F;usb      </span><br><span class="line">然后就可以采用mount命令把U盘挂载在&#x2F;mnt&#x2F;usb。    </span><br><span class="line">mount &#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;usb     </span><br><span class="line">输入命令 cd &#x2F;mnt&#x2F;usb进入目录&#x2F;mnt&#x2F;usb，</span><br><span class="line">然后输入 ls命令就可以查看U盘里的内容了。</span><br><span class="line">mount  &#x2F;dev&#x2F;sda1  &#x2F;home&#x2F;cloud&#x2F;uploads&#x2F;1&#x2F;diskmount  &#x2F;dev&#x2F;sda1 &#x2F;home&#x2F;device</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> cloud </tag>
            
            <tag> nas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware虚拟机添加磁盘格式化ext后挂载</title>
      <link href="284f509c.html"/>
      <url>284f509c.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_39787057/article/details/110810477">https://blog.csdn.net/weixin_39787057/article/details/110810477</a></p><p>vmware扩容虚拟机后怎么扩容到根目录,而不是去新建一个挂载点 </p><p><img src="../img/06f1254fc68105cc132248dbed9e4767.png" alt="06f1254fc68105cc132248dbed9e4767.png"></p><ul><li>背景：学习oracle时，安装的centos系统硬盘只有20G，容量不够用，所以通过VMWare给系统扩容。但是查询后，硬盘容量并未增加。</li><li>$ 输入lsblk 查看当前系统的分区情况</li></ul><p><img src="../img/8aad999af6e3f71bb9f641451be14ac7.png" alt="8aad999af6e3f71bb9f641451be14ac7.png"></p><ul><li>解决办法：增加磁盘操作后，Linux并不认为你已经把磁盘空间扩大，所以需要对新增加的容量进行分区以及合并。</li><li> fdisk -l #先看一下Disk /dev/sda: 42.9 GB</li><li>开始新增分区，先输入fdisk /dev/sda，再输入p</li><li>新增分区输入：</li><li>n</li><li>回车（默认为主分区primary）</li><li>分区号，起始扇区，结束扇区都默认（回车）</li><li>设置分区格式输入：</li><li>t</li><li>分区号默认（回车）</li><li>Hex code 为 8e （8e代表Linux LVM分区类型）</li><li>w （写入分区表）</li></ul><p><img src="../img/0df065c956eba29977bcd968487a60d9.png" alt="0df065c956eba29977bcd968487a60d9.png"></p><ul><li>确认一下，发现dev/sda3分区创建好了，分区格式为linux LVM类型</li></ul><p><img src="../img/de553bbb7fa78e528ab18a74defba8f8.png" alt="de553bbb7fa78e528ab18a74defba8f8.png"></p><ul><li>重启一下，以便重读分区表</li><li>开始格式化分区</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext3 &#x2F;dev&#x2F;sda3</span><br></pre></td></tr></table></figure><ul><li>开始合并</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> pvcreate /dev/sda3   </span><br><span class="line"></span><br><span class="line">vgextend centos /dev/sda3   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入y确认   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看一下当前的Volume卷详情   </span></span><br><span class="line"></span><br><span class="line"> vgdisplay -v</span><br></pre></td></tr></table></figure><ul><li>查看新分区sda3详情，容量为5119</li><li>将系统盘/dev/mapper/centos-root与sda3的5119空余容量合并</li><li> lvextend -l+5119 /dev/mapper/centos-root</li><li>quit</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/1d34c6a4c2f0ecdde57a2f36452182d4.png" alt="1d34c6a4c2f0ecdde57a2f36452182d4.png"></p><ul><li>最后将文件系统进行扩容，让系统识别，输入命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfs_growfs &#x2F;dev&#x2F;mapper&#x2F;centos-root</span><br></pre></td></tr></table></figure><ul><li>lsblk</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/eceb4011ee01a3379b27bdb0df5ec10e.png" alt="eceb4011ee01a3379b27bdb0df5ec10e.png"></p><p><strong>成功扩容！！</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker运行hbase</title>
      <link href="412589e1.html"/>
      <url>412589e1.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker部署hbase"><a href="#docker部署hbase" class="headerlink" title="docker部署hbase"></a>docker部署hbase</h1><p>系统为 centos7</p><p>docker 安装的版本为 20.10.9</p><h2 id="一-docker安装"><a href="#一-docker安装" class="headerlink" title="一,docker安装"></a>一,docker安装</h2><p>卸载系统仓库自带的docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>有三种方式来安装docker</p><ol><li>更新官方仓库后yum安装</li><li>手动下载文件安装</li><li>脚本文件安装</li></ol><p>目前准备使用第三种方式来安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;get.docker.com -o get-docker.sh &amp;&amp; sh get-docker.sh</span><br></pre></td></tr></table></figure><h2 id="二-docker-compose来实现单节点容器的编排"><a href="#二-docker-compose来实现单节点容器的编排" class="headerlink" title="二,docker-compose来实现单节点容器的编排"></a>二,docker-compose来实现单节点容器的编排</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.1&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line"></span><br><span class="line">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>/usr/local/bin/docker-compose -f docker-compose-distributed-local.yml up -d</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">resourcemanager  8088 </span><br><span class="line"></span><br><span class="line">hbase-master 16000</span><br><span class="line"></span><br><span class="line">hbase-regionserver 16020</span><br><span class="line"></span><br><span class="line">zookeeper 2888 2181 3888</span><br><span class="line"></span><br><span class="line">historyserver 8188</span><br><span class="line"></span><br><span class="line">namenode 50070</span><br><span class="line"></span><br><span class="line">datanode 50075</span><br><span class="line"></span><br><span class="line">nodemanager 8042</span><br></pre></td></tr></table></figure><h2 id="三-使用docker-stack来实现"><a href="#三-使用docker-stack来实现" class="headerlink" title="三,使用docker stack来实现"></a>三,使用docker stack来实现</h2><h3 id="1-创建swarm的网络保证各个节点都能平等的被编排"><a href="#1-创建swarm的网络保证各个节点都能平等的被编排" class="headerlink" title="1.创建swarm的网络保证各个节点都能平等的被编排"></a>1.创建swarm的网络保证各个节点都能平等的被编排</h3><p>docker swarm  init  初始化一个swarm 的网络</p><p>docker swarm join-token worker 显示 加入的token</p><p> docker swarm join-token manager 显示加入的token</p><p>目前使用下面加入manager,因为worker节点不能显示集群的细节</p><p>在其他服务器上输入 下面类似的内容加入节点</p><blockquote><p>docker swarm join –token SWMTKN-1-0w6kjxx0j4epupf6r844dxpzoyxikrxqqgrqg319vqfg0y1gw7-31q237m76pyii2g0pw1c8nmtu 192.168.31.136:2377</p></blockquote><h3 id="2-docker-node-ls-查看目前的网络"><a href="#2-docker-node-ls-查看目前的网络" class="headerlink" title="2.docker node ls 查看目前的网络"></a>2.docker node ls 查看目前的网络</h3><p><img src="../img/image-20211214152312286.png" alt="image-20211214152312286"></p><p>docker network create –driver overlay –scope swarm  hbase</p><p>docker stack deploy –compose-file docker-compose-v3.yml  hdp</p><p>docker stack ls   </p><p>docker stack down hadoop</p><p>docker network create –driver overlay –attachable –subnet 10.11.0.0/24 sg-hadoop</p><p>Creating service hdp_nodemanager<br>Creating service hdp_hbase-master</p><p>/opt/hbase-1.2.6/bin/hbase-daemon.sh restart  regionserver</p><p>echo -e “hbase-region2\nhbase-region”  &gt;  /etc/hbase/regionservers</p><p>docker service update –with-registry-auth  </p><p>需要追加 –with-registry-auth</p><p>docker exec -t 70f261259630  netstat -an | grep LISTEN | grep 50070</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namenode:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hbase</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namenode:/hadoop/dfs/name</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CLUSTER_NAME=test</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">      <span class="comment">#   replicas: 1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="comment"># placement:</span></span><br><span class="line">      <span class="comment">#   constraints:</span></span><br><span class="line">      <span class="comment">#     - node.hostname == akswnc4.aksw.uni-leipzig.de</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">traefik.docker.network:</span> <span class="string">hbase</span></span><br><span class="line">        <span class="attr">traefik.port:</span> <span class="number">9000</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br><span class="line">      <span class="comment"># - 50070:50070</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datanode:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hbase</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">datanode:/hadoop/dfs/data</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">traefik.docker.network:</span> <span class="string">hbase</span></span><br><span class="line">        <span class="attr">traefik.port:</span> <span class="number">9867</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9867</span><span class="string">:9867</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resourcemanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hbase</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000 datanode:9867&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">    <span class="comment">#     replicas: 1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="comment"># placement:</span></span><br><span class="line">      <span class="comment">#   constraints:</span></span><br><span class="line">      <span class="comment">#     - node.hostname == akswnc4.aksw.uni-leipzig.de</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">traefik.docker.network:</span> <span class="string">hbase</span></span><br><span class="line">        <span class="attr">traefik.port:</span> <span class="number">8088</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">disable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8088</span><span class="string">:8088</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">nodemanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hbase</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000 datanode:9867 resourcemanager:8088&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">traefik.docker.network:</span> <span class="string">hbase</span></span><br><span class="line">        <span class="attr">traefik.port:</span> <span class="number">8042</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8042</span><span class="string">:8042</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">historyserver:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hbase</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hadoop_historyserver:/hadoop/yarn/timeline</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000 datanode:9867 resourcemanager:8088&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hadoop.env</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">    <span class="comment">#  replicas: 1</span></span><br><span class="line">      <span class="comment"># placement:</span></span><br><span class="line">      <span class="comment">#   constraints:</span></span><br><span class="line">      <span class="comment">#     - node.hostname == akswnc4.aksw.uni-leipzig.de</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">traefik.docker.network:</span> <span class="string">hbase</span></span><br><span class="line">        <span class="attr">traefik.port:</span> <span class="number">8188</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8188</span><span class="string">:8188</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zookeeper:3.4.10</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hbase</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=0.0.0.0:2888:3888</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hbase-master:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hbase-master:1.0.0-hbase1.2.6</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">hbase-master</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hbase</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hbase-distributed-local.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000 datanode:9867 zookeeper:2181&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16000</span><span class="string">:16000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16010</span><span class="string">:16010</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hbase-region:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bde2020/hbase-regionserver:1.0.0-hbase1.2.6</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">hbase-regionserver</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hbase</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hbase-distributed-local.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">HBASE_CONF_hbase_regionserver_hostname:</span> <span class="string">hbase-region</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000 datanode:9867 zookeepe:2181 hbase-master:16010&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16020</span><span class="string">:16020</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16030</span><span class="string">:16030</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">visualizer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">stop_grace_period:</span> <span class="string">1m30s</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">datanode:</span></span><br><span class="line">  <span class="attr">namenode:</span></span><br><span class="line">  <span class="attr">hadoop_historyserver:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hbase:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">hbase</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将自动创建service</p><h3 id="3-使用docker-stack-ls来查看创建stack"><a href="#3-使用docker-stack-ls来查看创建stack" class="headerlink" title="3.使用docker stack ls来查看创建stack"></a>3.使用docker stack ls来查看创建stack</h3><p><img src="../img/image-20211214152334572.png" alt="image-20211214152334572"></p><h3 id="4-使用docker-service-ls来查看service列表"><a href="#4-使用docker-service-ls来查看service列表" class="headerlink" title="4.使用docker service ls来查看service列表"></a>4.使用docker service ls来查看service列表</h3><p><img src="../img/image-20211214152347155.png" alt="image-20211214152347155"></p><h3 id="5-使用yml中visualizer组件来显示部署的情况"><a href="#5-使用yml中visualizer组件来显示部署的情况" class="headerlink" title="5.使用yml中visualizer组件来显示部署的情况"></a>5.使用yml中visualizer组件来显示部署的情况</h3><p><img src="../img/image-20211214152401033.png" alt="image-20211214152401033"></p><table><thead><tr><th>组件</th><th>节点</th><th>默认端口</th><th>配置</th><th>用途说明</th></tr></thead><tbody><tr><td>HDFS</td><td>DateNode</td><td>50010</td><td>dfs.datanode.address</td><td>datanode服务端口，用于数据传输</td></tr><tr><td>HDFS</td><td>DateNode</td><td>50075</td><td>dfs.datanode.http.address</td><td>http服务的端口</td></tr><tr><td>HDFS</td><td>DateNode</td><td>50475</td><td>dfs.datanode.https.address</td><td>http服务的端口</td></tr><tr><td>HDFS</td><td>DateNode</td><td>50020</td><td>dfs.datanode.ipc.address</td><td>ipc服务的端口</td></tr><tr><td>HDFS</td><td>NameNode</td><td>50070</td><td>dfs.namenode.http-address</td><td>http服务的端口</td></tr><tr><td>HDFS</td><td>NameNode</td><td>50470</td><td>dfs.namenode.https-address</td><td>https服务的端口</td></tr><tr><td>HDFS</td><td>NameNode</td><td>8020</td><td>fs.defaultFS</td><td>接收Client连接的RPC端口，用于获取文件系统metadata信息。</td></tr><tr><td>HDFS</td><td>journalnode</td><td>8485</td><td>dfs.journalnode.rpc-address</td><td>RPC服务</td></tr><tr><td>HDFS</td><td>journalnode</td><td>8480</td><td>dfs.journalnode.http-address</td><td>HTTP服务</td></tr><tr><td>HDFS</td><td>ZKFC</td><td>8019</td><td>dfs.ha.zkfc.port</td><td>ZooKeeper FailoverController，用于NN HA</td></tr><tr><td>YARN</td><td>ResourceManage</td><td>8032</td><td>yarn.resourcemanager.address</td><td>RM的applications manager(ASM)端口</td></tr><tr><td>YARN</td><td>ResourceManage</td><td>8030</td><td>yarn.resourcemanager.scheduler.address</td><td>scheduler组件的IPC端口</td></tr><tr><td>YARN</td><td>ResourceManage</td><td>8031</td><td>yarn.resourcemanager.resource-tracker.address</td><td>IPC</td></tr><tr><td>YARN</td><td>ResourceManage</td><td>8033</td><td>yarn.resourcemanager.admin.address</td><td>IPC</td></tr><tr><td>YARN</td><td>ResourceManage</td><td>8088</td><td>yarn.resourcemanager.webapp.address</td><td>http服务端口</td></tr><tr><td>YARN</td><td>NodeManager</td><td>8040</td><td>yarn.nodemanager.localizer.address</td><td>localizer IPC</td></tr><tr><td>YARN</td><td>NodeManager</td><td>8042</td><td>yarn.nodemanager.webapp.address</td><td>http服务端口</td></tr><tr><td>YARN</td><td>NodeManager</td><td>8041</td><td>yarn.nodemanager.address</td><td>NM中container manager的端口</td></tr><tr><td>YARN</td><td>JobHistory Server</td><td>10020</td><td>mapreduce.jobhistory.address</td><td>IPC</td></tr><tr><td>YARN</td><td>JobHistory Server</td><td>19888</td><td>mapreduce.jobhistory.webapp.address</td><td>http服务端口</td></tr><tr><td>HBase</td><td>Master</td><td>60000</td><td>hbase.master.port</td><td>IPC (主节点（HBase 主节点和任何备份的 HBase 主节点）</td></tr><tr><td>HBase</td><td>Master</td><td>60010</td><td>hbase.master.info.port</td><td>http服务端口 (主节点（HBase 主节点和备份 HBase 主节点如果有))</td></tr><tr><td>HBase</td><td>RegionServer</td><td>60020</td><td>hbase.regionserver.port</td><td>IPC( 所有从节点)</td></tr><tr><td>HBase</td><td>RegionServer</td><td>60030</td><td>hbase.regionserver.info.port</td><td>http服务端口</td></tr><tr><td>HBase</td><td>HQuorumPeer</td><td>2181</td><td>hbase.zookeeper.property.clientPort</td><td>HBase-managed ZK mode，使用独立的ZooKeeper集群则不会启用该端口。</td></tr><tr><td>HBase</td><td>HQuorumPeer</td><td>2888</td><td>hbase.zookeeper.peerport</td><td>HBase-managed ZK mode，使用独立的ZooKeeper集群则不会启用该端口。</td></tr><tr><td>HBase</td><td>HQuorumPeer</td><td>3888</td><td>hbase.zookeeper.leaderport</td><td>HBase-managed ZK mode，使用独立的ZooKeeper集群则不会启用该端口。</td></tr><tr><td>Hive</td><td>Metastore</td><td>9085</td><td>/etc/default/hive-metastore中export PORT=<port>来更新默认端口</td><td></td></tr><tr><td>Hive</td><td>HiveServer</td><td>10000</td><td>/etc/hive/conf/hive-env.sh中export HIVE_SERVER2_THRIFT_PORT=<port>来更新默认端口</td><td></td></tr><tr><td>ZooKeeper</td><td>Server</td><td>2181</td><td>/etc/zookeeper/conf/zoo.cfg中clientPort=<port></td><td>来自 ZooKeeper 的 config 的属性<code>zoo.cfg</code>。客户端将连接的端口。</td></tr><tr><td>ZooKeeper</td><td>Server</td><td>2888</td><td>/etc/zookeeper/conf/zoo.cfg中server.x=[hostname]:nnnnn[:nnnnn]，标蓝部分</td><td>follower用来连接到leader，只在leader上监听该端口</td></tr><tr><td>ZooKeeper</td><td>Server</td><td>3888</td><td>/etc/zookeeper/conf/zoo.cfg中server.x=[hostname]:nnnnn[:nnnnn]，标蓝部分</td><td>ZooKeeper 对等点用于相互通信的端口。有关更多信息，请参见<a href="http://zookeeper.apache.org/doc/r3.4.3/zookeeperStarted.html#sc_RunningReplicatedZooKeeper">此处</a></td></tr></tbody></table><h2 id="十-遇到的坑"><a href="#十-遇到的坑" class="headerlink" title="十,遇到的坑"></a>十,遇到的坑</h2><h3 id="1-在hadoop配置的需要主要"><a href="#1-在hadoop配置的需要主要" class="headerlink" title="1.在hadoop配置的需要主要"></a>1.在hadoop配置的需要主要</h3><p>配置url类似于 host:port 这种时 host 不能报考_ 等字符,否则会报 contain a valid host:port authority 包含 _</p><h3 id="2-使用docker-stack-初始化的环境"><a href="#2-使用docker-stack-初始化的环境" class="headerlink" title="2.使用docker stack 初始化的环境"></a>2.使用docker stack 初始化的环境</h3><p>所有的服务会有个stack名称的前缀,且不能修改</p><p>在集群中加入容器中后可以通过 服务名称就是 STACK_NAME 来调用也可以通过在yml中定义的services下面的节点名称来调用这个需要注意</p><p>初始化后出现所有的service会加前缀导致域名不能和访问</p><p>3.哈哈哈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File &#x2F;hbase&#x2F;.tmp&#x2F;hbase.version could only be written to 0 of the 1 minReplication nodes. There are 1 datanode(s) running and 1 node(s) are excluded in this operation</span><br></pre></td></tr></table></figure><p>4.配置出错导致服务绑定对应的ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.IOException: Problem binding to hbase-region&#x2F;10.0.4.107:16040 : Cannot assign requested address. To switch ports use the &#39;hbase.regionserver.port&#39; configuration property.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>clickhouse的简单教程</title>
      <link href="3b2506a.html"/>
      <url>3b2506a.html</url>
      
        <content type="html"><![CDATA[<h2 id="clickhouse部署和查询小结"><a href="#clickhouse部署和查询小结" class="headerlink" title="clickhouse部署和查询小结"></a>clickhouse部署和查询小结</h2><p>/etc/clickhouse-server/users.xml</p><p>docker version ：1.13.1</p><ul><li><p>简单修改 config.xml 中<listen_host>0.0.0.0</listen_host>  保证外部能访问</p></li><li><p>同时修改users.xml 的为 <password>123456</password>  如果使用md5 加密 着需要修改标签为</p></li></ul><p>目前保存配置文件的地方有两个 <strong>/var/lib/clickhouse/preprocessed_configs</strong> ， <strong>/etc/clickhouse-server/</strong> </p><p>后面的目录下的文件会复制到 前者，如果如果直接修改前面目录内的文件是不会成功的。</p><h2 id="起初是直接修改-不行"><a href="#起初是直接修改-不行" class="headerlink" title="起初是直接修改 不行"></a>起初是直接修改 不行</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d --name some-clickhouse-server --privileged=<span class="literal">true</span> --<span class="built_in">ulimit</span> nofile=262144:262144 --volume=/root/clickhouse_data:/var/lib/clickhouse -p 8123:8123  yandex/clickhouse-server</span></span><br></pre></td></tr></table></figure><p>修改 /root/clickhouse_data/preprocessed_configs/users.xml 后无论使用 docker restart 还是进容器里面重启后都是都没有修改。</p><h2 id="然后是挂载目录还不行"><a href="#然后是挂载目录还不行" class="headerlink" title="然后是挂载目录还不行"></a>然后是挂载目录还不行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm  --name clickhouse-server  --privileged&#x3D;true  --net&#x3D;host --ulimit nofile&#x3D;262144:262144 --volume&#x3D;&#x2F;root&#x2F;clickhouse_data:&#x2F;var&#x2F;lib&#x2F;clickhouse  --volume&#x3D;&#x2F;root&#x2F;clickhouse_config:&#x2F;etc&#x2F;clickhouse-server  yandex&#x2F;clickhouse-server</span><br></pre></td></tr></table></figure><p>报错没有修改的权限，这部分由于涉及到具体的操作就放弃了</p><blockquote><p>Configuration file ‘/etc/clickhouse-server/config.xml’ isn’t readable by user with id ‘101’</p></blockquote><h2 id="最后在本地rpm包部署成功"><a href="#最后在本地rpm包部署成功" class="headerlink" title="最后在本地rpm包部署成功"></a>最后在本地rpm包部署成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install yum-utils</span><br><span class="line">sudo rpm --import https:&#x2F;&#x2F;repo.clickhouse.com&#x2F;CLICKHOUSE-KEY.GPG</span><br><span class="line">sudo yum-config-manager --add-repo https:&#x2F;&#x2F;repo.clickhouse.com&#x2F;rpm&#x2F;stable&#x2F;x86_64</span><br><span class="line"></span><br><span class="line">sudo yum install clickhouse-server clickhouse-client</span><br><span class="line"></span><br><span class="line">如果没有 yum-config-manager 需要安装 yum-utils</span><br></pre></td></tr></table></figure><h2 id="final-使用dockerfile实现"><a href="#final-使用dockerfile实现" class="headerlink" title="final 使用dockerfile实现"></a>final 使用dockerfile实现</h2><blockquote><p>Processing configuration file ‘/etc/clickhouse-server/config.xml’.<br>Merging configuration file ‘/etc/clickhouse-server/config.d/docker_related_config.xml’.<br>Logging trace to /var/log/clickhouse-server/clickhouse-server.log<br>Logging errors to /var/log/clickhouse-server/clickhouse-server.err.log<br>Processing configuration file ‘/etc/clickhouse-server/config.xml’.<br>Merging configuration file ‘/etc/clickhouse-server/config.d/docker_related_config.xml’.<br>Saved preprocessed configuration to ‘/var/lib/clickhouse/preprocessed_configs/config.xml’.<br>Processing configuration file ‘/etc/clickhouse-server/users.xml’.<br>Saved preprocessed configuration to ‘/var/lib/clickhouse/preprocessed_configs/users.xml’.</p></blockquote><p>由于不能直接挂载</p><p>所有使用Dockerfile 来打包 内容为</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> yandex/clickhouse-server</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> users.xml  /etc/clickhouse-server/users.xml</span></span><br></pre></td></tr></table></figure><p>然后 **docker  build -t  clickhouse:lastet  . ** ，打包完成后运行</p><h2 id="使用clickhouse入门"><a href="#使用clickhouse入门" class="headerlink" title="使用clickhouse入门"></a>使用clickhouse入门</h2><p>我们使用的是最简单的clickhouse ，引擎使用 MergeTree</p><p>使用</p><p>官方提供的数据来实现 <a href="https://clickhouse.com/docs/en/getting-started/example-datasets/cell-towers/">https://clickhouse.com/docs/en/getting-started/example-datasets/cell-towers/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- auto-generated definition</span><br><span class="line">create table kafka_iot_dev_data_state_queue</span><br><span class="line">(</span><br><span class="line">    json String</span><br><span class="line">)</span><br><span class="line">    engine &#x3D; Kafka SETTINGS kafka_broker_list &#x3D; &#39;&#123;IP&#125;&#39;, kafka_topic_list &#x3D; &#39;&#123;TOPIC&#125;&#39;, kafka_group_name &#x3D; &#39;&#123;GROUP_NAME&#125;&#39;, kafka_format &#x3D; &#39;JSONAsString&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE MATERIALIZED VIEW zhyl.TABLE_NAME1 TO zhyl.TABLE_NAME2</span><br><span class="line">(</span><br><span class="line">    &#96;rdid&#96; String,</span><br><span class="line">    &#96;prdid&#96; String,</span><br><span class="line">    &#96;kdcode&#96; String,</span><br><span class="line">    &#96;devid&#96; String,</span><br><span class="line">    &#96;rdstate&#96; String,</span><br><span class="line">    &#96;rdtime&#96; DateTime,</span><br><span class="line">    &#96;content&#96; Nullable (String),</span><br><span class="line">    &#96;dev&#96; Nullable (String)</span><br><span class="line">)</span><br><span class="line">AS</span><br><span class="line">SELECT JSONExtractString(json, &#39;rdid&#39;)    AS rdid,</span><br><span class="line">       JSONExtractString(json, &#39;prdid&#39;)   AS prdid,</span><br><span class="line">       JSONExtractString(json, &#39;kdcode&#39;)  AS kdcode,</span><br><span class="line">       JSONExtractString(json, &#39;devid&#39;)   AS devid,</span><br><span class="line">       JSONExtractString(json, &#39;rdstate&#39;) AS rdstate,</span><br><span class="line">       JSONExtractString(json, &#39;rdtime&#39;)  AS rdtime,</span><br><span class="line">       JSONExtractString(json, &#39;content&#39;) AS content,</span><br><span class="line">       JSONExtractString(json, &#39;dev&#39;)     AS dev</span><br><span class="line">FROM zhyl.kafka_iot_dev_data_rd_queue;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">create table TABLE_NAME1</span><br><span class="line">(</span><br><span class="line">    rdid    String,</span><br><span class="line">    prdid   String,</span><br><span class="line">    kdcode  String,</span><br><span class="line">    devid   String,</span><br><span class="line">    rdstate String,</span><br><span class="line">    rdtime  DateTime(&#39;Asia&#x2F;Shanghai&#39;),</span><br><span class="line">    content String,</span><br><span class="line">    dev     String</span><br><span class="line">)</span><br><span class="line">    engine &#x3D; MergeTree PARTITION BY (toYYYYMM(rdtime))</span><br><span class="line">        ORDER BY rdid</span><br><span class="line">        SETTINGS index_granularity &#x3D; 8192;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select rdtime  from kafka_data_11 WHERE  rdtime &lt; &#39;2021-11-30 02:53:49&#39; and rdtime &gt; &#39;2021-11-27 02:53:49&#39; AND kdcode &#x3D; &#39;hmb&#39;</span><br></pre></td></tr></table></figure><p>目前接触的函数包括</p><ul><li><p>visitParamExtractString 解析json数据后获取key对应的value</p></li><li><p>visitParamExtractRaw 解析json数据后防护原始值</p></li><li></li></ul><p>补充</p><p>使用tabix来查询和管理clickhouse </p><p><img src="../img/image-20211210112201203.png" alt="image-20211210112201203"></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> clickhouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop-hbase的概览</title>
      <link href="4d0383ea.html"/>
      <url>4d0383ea.html</url>
      
        <content type="html"><![CDATA[<p>每个服务的组成包括:</p><p>hdfs: namenode   datanode</p><p>yarn  history   nodemanager</p><p>hbase (实际写入读取都走的hdfs)</p><p> hmaster : Master主要负责管理RegionServer集群，如负载均衡及资源分配等，它本身也可以以集群方式运行，但同一时刻只有一个master处于激活状态。当工作中的master宕掉后，zookeeper会切换到其它备选的master上。</p><p>  hregionserver:负责具体数据块的读写操作。</p><p><a href="http://c.biancheng.net/view/6500.html">http://c.biancheng.net/view/6500.html</a>  hbase服务</p><p><img src="../img/678393-20151130140114312-982789222.jpg" alt="这里写图片描述"></p><p>常见端口hadoop 3</p><ul><li><a href="https://hadoop.apache.org/docs/r3.1.1/hadoop-project-dist/hadoop-common/core-default.xml">core-default.xml</a></li><li><a href="https://hadoop.apache.org/docs/r3.1.1/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml">hdfs-default.xml</a></li><li><a href="https://hadoop.apache.org/docs/r3.1.1/hadoop-project-dist/hadoop-hdfs-rbf/hdfs-rbf-default.xml">hdfs-rbf-default.xml</a></li><li><a href="https://hadoop.apache.org/docs/r3.1.1/hadoop-yarn/hadoop-yarn-common/yarn-default.xml">yarn-default.xml</a></li><li><a href="https://hadoop.apache.org/docs/r3.1.1/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml">mapred-default.xml</a></li></ul><table><thead><tr><th align="left">PORT</th><th align="left">CONFIG NAME</th><th align="left">CONFIG VALUE</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">dfs.balancer.address</td><td align="left"><code>0.0.0.0:0</code></td></tr><tr><td align="left">9866</td><td align="left">dfs.datanode.address</td><td align="left"><code>0.0.0.0:9866</code></td></tr><tr><td align="left">9864</td><td align="left">dfs.datanode.http.address</td><td align="left"><code>0.0.0.0:9864</code></td></tr><tr><td align="left">9865</td><td align="left">dfs.datanode.https.address</td><td align="left"><code>0.0.0.0:9865</code></td></tr><tr><td align="left">9867</td><td align="left">dfs.datanode.ipc.address</td><td align="left"><code>0.0.0.0:9867</code></td></tr><tr><td align="left">8111</td><td align="left">dfs.federation.router.admin-address</td><td align="left"><code>0.0.0.0:8111</code></td></tr><tr><td align="left">50071</td><td align="left">dfs.federation.router.http-address</td><td align="left"><code>0.0.0.0:50071</code></td></tr><tr><td align="left">50072</td><td align="left">dfs.federation.router.https-address</td><td align="left"><code>0.0.0.0:50072</code></td></tr><tr><td align="left">8888</td><td align="left">dfs.federation.router.rpc-address</td><td align="left"><code>0.0.0.0:8888</code></td></tr><tr><td align="left">8480</td><td align="left">dfs.journalnode.http-address</td><td align="left"><code>0.0.0.0:8480</code></td></tr><tr><td align="left">8481</td><td align="left">dfs.journalnode.https-address</td><td align="left"><code>0.0.0.0:8481</code></td></tr><tr><td align="left">8485</td><td align="left">dfs.journalnode.rpc-address</td><td align="left"><code>0.0.0.0:8485</code></td></tr><tr><td align="left">0</td><td align="left">dfs.mover.address</td><td align="left"><code>0.0.0.0:0</code></td></tr><tr><td align="left">50100</td><td align="left">dfs.namenode.backup.address</td><td align="left"><code>0.0.0.0:50100</code></td></tr><tr><td align="left">50105</td><td align="left">dfs.namenode.backup.http-address</td><td align="left"><code>0.0.0.0:50105</code></td></tr><tr><td align="left">9870</td><td align="left">dfs.namenode.http-address</td><td align="left"><code>0.0.0.0:9870</code></td></tr><tr><td align="left">9871</td><td align="left">dfs.namenode.https-address</td><td align="left"><code>0.0.0.0:9871</code></td></tr><tr><td align="left">9868</td><td align="left">dfs.namenode.secondary.http-address</td><td align="left"><code>0.0.0.0:9868</code></td></tr><tr><td align="left">9869</td><td align="left">dfs.namenode.secondary.https-address</td><td align="left"><code>0.0.0.0:9869</code></td></tr><tr><td align="left">50200</td><td align="left">dfs.provided.aliasmap.inmemory.dnrpc-address</td><td align="left"><code>0.0.0.0:50200</code></td></tr><tr><td align="left">2181</td><td align="left">hadoop.registry.zk.quorum</td><td align="left"><code>localhost:2181</code></td></tr><tr><td align="left">10020</td><td align="left">mapreduce.jobhistory.address</td><td align="left"><code>0.0.0.0:10020</code></td></tr><tr><td align="left">10033</td><td align="left">mapreduce.jobhistory.admin.address</td><td align="left"><code>0.0.0.0:10033</code></td></tr><tr><td align="left">19888</td><td align="left">mapreduce.jobhistory.webapp.address</td><td align="left"><code>0.0.0.0:19888</code></td></tr><tr><td align="left">19890</td><td align="left">mapreduce.jobhistory.webapp.https.address</td><td align="left"><code>0.0.0.0:19890</code></td></tr><tr><td align="left">0</td><td align="left">yarn.nodemanager.address</td><td align="left"><code>$&#123;yarn.nodemanager.hostname&#125;:0</code></td></tr><tr><td align="left">8049</td><td align="left">yarn.nodemanager.amrmproxy.address</td><td align="left"><code>0.0.0.0:8049</code></td></tr><tr><td align="left">8048</td><td align="left">yarn.nodemanager.collector-service.address</td><td align="left"><code>$&#123;yarn.nodemanager.hostname&#125;:8048</code></td></tr><tr><td align="left">8040</td><td align="left">yarn.nodemanager.localizer.address</td><td align="left"><code>$&#123;yarn.nodemanager.hostname&#125;:8040</code></td></tr><tr><td align="left">8042</td><td align="left">yarn.nodemanager.webapp.address</td><td align="left"><code>$&#123;yarn.nodemanager.hostname&#125;:8042</code></td></tr><tr><td align="left">8044</td><td align="left">yarn.nodemanager.webapp.https.address</td><td align="left"><code>0.0.0.0:8044</code></td></tr><tr><td align="left">8032</td><td align="left">yarn.resourcemanager.address</td><td align="left"><code>$&#123;yarn.resourcemanager.hostname&#125;:8032</code></td></tr><tr><td align="left">8033</td><td align="left">yarn.resourcemanager.admin.address</td><td align="left"><code>$&#123;yarn.resourcemanager.hostname&#125;:8033</code></td></tr><tr><td align="left">8031</td><td align="left">yarn.resourcemanager.resource-tracker.address</td><td align="left"><code>$&#123;yarn.resourcemanager.hostname&#125;:8031</code></td></tr><tr><td align="left">8030</td><td align="left">yarn.resourcemanager.scheduler.address</td><td align="left"><code>$&#123;yarn.resourcemanager.hostname&#125;:8030</code></td></tr><tr><td align="left">8088</td><td align="left">yarn.resourcemanager.webapp.address</td><td align="left"><code>$&#123;yarn.resourcemanager.hostname&#125;:8088</code></td></tr><tr><td align="left">8090</td><td align="left">yarn.resourcemanager.webapp.https.address</td><td align="left"><code>$&#123;yarn.resourcemanager.hostname&#125;:8090</code></td></tr><tr><td align="left">8089</td><td align="left">yarn.router.webapp.address</td><td align="left"><code>0.0.0.0:8089</code></td></tr><tr><td align="left">8091</td><td align="left">yarn.router.webapp.https.address</td><td align="left"><code>0.0.0.0:8091</code></td></tr><tr><td align="left">8047</td><td align="left">yarn.sharedcache.admin.address</td><td align="left"><code>0.0.0.0:8047</code></td></tr><tr><td align="left">8045</td><td align="left">yarn.sharedcache.client-server.address</td><td align="left"><code>0.0.0.0:8045</code></td></tr><tr><td align="left">8046</td><td align="left">yarn.sharedcache.uploader.server.address</td><td align="left"><code>0.0.0.0:8046</code></td></tr><tr><td align="left">8788</td><td align="left">yarn.sharedcache.webapp.address</td><td align="left"><code>0.0.0.0:8788</code></td></tr><tr><td align="left">10200</td><td align="left">yarn.timeline-service.address</td><td align="left"><code>$&#123;yarn.timeline-service.hostname&#125;:10200</code></td></tr><tr><td align="left">8188</td><td align="left">yarn.timeline-service.webapp.address</td><td align="left"><code>$&#123;yarn.timeline-service.hostname&#125;:8188</code></td></tr><tr><td align="left">8190</td><td align="left">yarn.timeline-service.webapp.https.address</td><td align="left"><code>$&#123;yarn.timeline-service.hostname&#125;:8190</code></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RESTful 资源命名最佳实践</title>
      <link href="26c9c081.html"/>
      <url>26c9c081.html</url>
      
        <content type="html"><![CDATA[<p>本文转载自 <a href="https://generalthink.github.io/2019/09/20/restful-resource-naming-practise/">RESTful 资源命名最佳实践</a></p><h1 id="RESTful-资源命名最佳实践"><a href="#RESTful-资源命名最佳实践" class="headerlink" title="RESTful 资源命名最佳实践"></a>RESTful 资源命名最佳实践</h1><p> 2019-09-20  2021-05-07  7<br> 6k  5 分钟</p><p>在 Rest 中，数据的呈现方式叫做资源 (Resource)。拥有强大而一致的 REST 资源命名策略，是最好的设计决策。</p><p>一个资源可以是单个的也可以是一个集合。比如 customers 是一个集合，而 customer 是单个资源。我们可以定义 customers 这个集合的资源的 URI 是 <code>/customers</code>, 而单个 customer 资源的 URI 是 <code>/customers/&#123;customerId&#125;</code>。</p><p>资源也可以包含子集合的资源。比如，使用 <code>/customers/&#123;customerId&#125;/accounts</code> 来表示某个 customer 下的 account 集合资源。同样的，对于 account 集合资源下的单个 account 我们可以定义成这样:<code>/customers/&#123;customerId&#125;/accounts/&#123;accountId&#125;</code></p><p>REST API 使用统一资源标识符（URI）来寻址资源。REST API 设计者应该创建 URI，将 REST API 的资源模型传达给潜在的客户端开发人员。当资源命名良好时，API 直观且易于使用。如果做得不好，那么相同的 API 会感觉难以使用和理解。</p><h3 id="使用名词来表示资源"><a href="#使用名词来表示资源" class="headerlink" title="使用名词来表示资源"></a>使用名词来表示资源</h3><p>RESTful URI 应该引用作为事物（名词）的资源而不是引用动作（动词），因为名词具有动词不具有的属性 - 类似于具有属性的资源。资源的一些示例是：</p><ol><li>系统的用户</li><li>用户账户 (银行的场景):</li><li>网络设备</li></ol><p>它们的资源 URI 可以被设计成下面这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices </span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices&#x2F;&#123;device-id&#125; </span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;user-management&#x2F;users&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;user-management&#x2F;users&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure><p>为了更好的说明我们把资源原型分为四个种类 (document,collection,store 以及 controller), 你应该总是把资源放到其中一个原型中，并且遵守它的统一命名。</p><h4 id="document"><a href="#document" class="headerlink" title="document"></a>document</h4><p>文档资源是一种类似于对象实例或数据库记录的单一概念 (比如 mysql 中的一行记录，Mongodb 中的 document), 在 REST 中，你可以将其视为资源集合中的单个资源。文档的状态表示通常包括具有值的字段和指向其他相关资源的链接。</p><p>使用单数名称表示文档资源原型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices&#x2F;&#123;device-id&#125;</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;user-management&#x2F;users&#x2F;&#123;id&#125;</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;user-management&#x2F;users&#x2F;admin</span><br></pre></td></tr></table></figure><h4 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h4><p>集合资源是服务端管理的资源目录。客户可以建议将新资源添加到集合中。但是，要由集合选择是否创建新资源。集合资源选择它想要包含的内容，并决定每个包含的资源的 URI。</p><p>使用复数名称表示集合资源原型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;user-management&#x2F;users</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;user-management&#x2F;users&#x2F;&#123;id&#125;&#x2F;accounts</span><br></pre></td></tr></table></figure><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><p>store 是<strong>客户端管理的资源库</strong> ,store 资源允许 API 客户端放入资源，取出资源，并决定何时删除它们。store 永远不会生成新的 URI。相反，每个存储的资源都有一个客户端在最初放入存储时选择的 URI。</p><p>使用复数名称表示 store 资源原型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;cart-management&#x2F;users&#x2F;&#123;id&#125;&#x2F;carts</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;song-management&#x2F;users&#x2F;&#123;id&#125;&#x2F;playlists</span><br></pre></td></tr></table></figure><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><p>controller 资源有点像程序的概念，controller 资源就像可执行函数，带有参数和返回值；输入和输出。</p><p>使用动词表示 controller 原型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看用户的信用卡</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;cart-management&#x2F;users&#x2F;&#123;id&#125;&#x2F;cart&#x2F;checkout</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 播放整个播放列表</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;song-management&#x2F;users&#x2F;&#123;id&#125;&#x2F;playlist&#x2F;play</span><br></pre></td></tr></table></figure><p>这里的 controller 为什么要用动词呢？其实大家可以想象下 Spring 中 Controller 做了什么事情，它调用了 service 组合成各个业务逻辑，将数据组合起来之后进行返回.</p><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>使用一致的资源命名约定和 URI 格式，以最小化和最大可读性和可维护性。你可以实现以下设计提示以实现一致性：</p><h4 id="使用正斜杠（-）表示层次关系"><a href="#使用正斜杠（-）表示层次关系" class="headerlink" title="使用正斜杠（/）表示层次关系"></a>使用正斜杠（/）表示层次关系</h4><p>正斜杠（/）字符用于 URI 的路径部分，以指示资源之间的层次关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices&#x2F;&#123;id&#125;</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices&#x2F;&#123;id&#125;&#x2F;scripts</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices&#x2F;&#123;id&#125;&#x2F;scripts&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure><h4 id="不要在-URI-中使用尾部正斜杠（-）"><a href="#不要在-URI-中使用尾部正斜杠（-）" class="headerlink" title="不要在 URI 中使用尾部正斜杠（/）"></a>不要在 URI 中使用尾部正斜杠（/）</h4><p>作为 URI 路径中的最后一个字符，正斜杠（/）不会添加语义值，并可能导致混淆。最好完全放弃它们</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*这个版本更好*&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices</span><br></pre></td></tr></table></figure><h4 id="使用连字符（-）来提高-URI-的可读性"><a href="#使用连字符（-）来提高-URI-的可读性" class="headerlink" title="使用连字符（ - ）来提高 URI 的可读性"></a>使用连字符（ - ）来提高 URI 的可读性</h4><p>要使你的 URI 易于扫描和解释，请使用连字符（ - ）字符来提高长路径段中名称的可读性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 更好可读性</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;inventory-management&#x2F;managed-entities&#x2F;&#123;id&#125;&#x2F;install-script-location</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可读性不够高</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;inventory-management&#x2F;managedEntities&#x2F;&#123;id&#125;&#x2F;installScriptLocation</span><br></pre></td></tr></table></figure><h4 id="不用使用下滑线"><a href="#不用使用下滑线" class="headerlink" title="不用使用下滑线 _"></a>不用使用下滑线 _</h4><p>可以使用下划线代替连字符作为分隔符 - 但是根据应用程序的字体，下划线 _ 字符可能会在某些浏览器或屏幕中被部分遮挡或完全隐藏。为避免这种混淆，请使用连字符 - 而不是下划线 _。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 更具可读性</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;inventory-management&#x2F;managed-entities&#x2F;&#123;id&#125;&#x2F;install-script-location</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 更容易出错</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;inventory_management&#x2F;managed_entities&#x2F;&#123;id&#125;&#x2F;install_script_location</span><br></pre></td></tr></table></figure><h4 id="在-URI-中使用小写字母"><a href="#在-URI-中使用小写字母" class="headerlink" title="在 URI 中使用小写字母"></a>在 URI 中使用小写字母</h4><p>方便时，URI 路径中应始终首选小写字母。</p><p><a href="http://www.rfc-base.org/txt/rfc-3986.txt">RFC 3986</a> 将 URI 定义为区分大小写，但协议和 host 除外</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1</span><br><span class="line">http:&#x2F;&#x2F;api.example.org&#x2F;my-folder&#x2F;my-doc</span><br><span class="line">&#x2F;&#x2F; 2</span><br><span class="line">HTTP:&#x2F;&#x2F;API.EXAMPLE.ORG&#x2F;my-folder&#x2F;my-doc</span><br><span class="line">&#x2F;&#x2F; 3</span><br><span class="line">http:&#x2F;&#x2F;api.example.org&#x2F;My-Folder&#x2F;my-doc</span><br></pre></td></tr></table></figure><p>在上面的例子中，1 和 2 是相同的，但 3 不是，因为它使用大写字母的 My-Folder。</p><h4 id="不要使用文件扩展名"><a href="#不要使用文件扩展名" class="headerlink" title="不要使用文件扩展名"></a>不要使用文件扩展名</h4><p>文件扩展名看起来很糟糕，不会增加任何优势。删除它们也会减少 URI 的长度。没理由保留它们。除了上述原因，如果你想使用文件扩展突出显示 API 的媒体类型，那么你应该依赖于通过 Content-Type 标头传达的媒体类型来确定如何处理正文的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 不要这样用</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices.xml</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 正确的URI</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices</span><br></pre></td></tr></table></figure><h3 id="切勿在-URI-中使用-CRUD-函数名称"><a href="#切勿在-URI-中使用-CRUD-函数名称" class="headerlink" title="切勿在 URI 中使用 CRUD 函数名称"></a>切勿在 URI 中使用 CRUD 函数名称</h3><p>URI 不应用于指示执行 CRUD 功能。URI 应该用于唯一标识资源，而不是对它们的任何操作。应使用 HTTP 请求方法来指示执行哪个 CRUD 功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取所有设备</span><br><span class="line">HTTP GET http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices</span><br><span class="line">&#x2F;&#x2F; 创建新设备</span><br><span class="line">HTTP POST http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据给定id获取设备</span><br><span class="line">HTTP GET http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices&#x2F;&#123;id&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据给定id更新设备</span><br><span class="line">HTTP PUT http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices&#x2F;&#123;id&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据给定id删除设备</span><br><span class="line">HTTP DELETE http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure><h3 id="使用查询组件过滤-URI-集合"><a href="#使用查询组件过滤-URI-集合" class="headerlink" title="使用查询组件过滤 URI 集合"></a>使用查询组件过滤 URI 集合</h3><p>很多时候，你会遇到需要根据某些特定资源属性对需要排序，过滤或限制的资源集合的要求。为此，不要创建新的 API - 而是在资源集合 API 中启用排序，过滤和分页功能，并将输入参数作为查询参数传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices?region&#x3D;USA</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices?region&#x3D;USA&amp;brand&#x3D;XYZ</span><br><span class="line">http:&#x2F;&#x2F;api.example.com&#x2F;device-management&#x2F;managed-devices?region&#x3D;USA&amp;brand&#x3D;XYZ&amp;sort&#x3D;installation-date</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>why-mongodb-use-b-tree</title>
      <link href="bf7d2fd3.html"/>
      <url>bf7d2fd3.html</url>
      
        <content type="html"><![CDATA[<p>本文转载自 <a href="https://generalthink.github.io/2020/04/16/why-mongodb-use-b-tree/">why-mongodb-use-b-tree</a></p><p>除了 B+ 树，你可能还听说过 B 树、 B- 树，实际上， B- 树就是 B 树，英文翻译都是 B-Tree ，这里的 “-” 并不是相对 B+ 树中的 “+” ，而只是一个连接符。而 B 树实际上是低级版的 B+ 树，或者说 B+ 树是 B 树的改进版。</p><h3 id="B-tree"><a href="#B-tree" class="headerlink" title="B+ tree"></a>B+ tree</h3><p>B+ tree 实际上是一颗 m 叉平衡查找树 (不是二叉树)</p><blockquote><p>平衡查找树定义：树中任意一个节点的左右子树的高度相差不能大于 1</p></blockquote><p><a href="https://generalthink.github.io/images/java/BPlusTree.png"><img src="../img/BPlusTree.png" alt="B+ tree"></a></p><p><a href="https://generalthink.github.io/images/java/BPlusTree.png">B+ tree</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 这是B+树非叶子节点的定义。</span><br><span class="line">*</span><br><span class="line">* 假设keywords&#x3D;[3, 5, 8, 10]</span><br><span class="line">* 4个键值将数据分为5个区间：(-INF,3), [3,5), [5,8), [8,10), [10,INF)</span><br><span class="line">* 5个区间分别对应：children[0]...children[4]</span><br><span class="line">*</span><br><span class="line">* m值是事先计算得到的，计算的依据是让所有信息的大小正好等于页的大小：</span><br><span class="line">* PAGE_SIZE &#x3D; (m-1)*4[keywordss大小]+m*8[children大小]</span><br><span class="line">*&#x2F;</span><br><span class="line">public class BPlusTreeNode &#123;</span><br><span class="line">  &#x2F;&#x2F; 5叉树</span><br><span class="line">  public static int m &#x3D; 5;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 键值，用来划分数据区间</span><br><span class="line">  public int[] keywords &#x3D; new int[m-1];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 保存子节点指针</span><br><span class="line">  public BPlusTreeNode[] children &#x3D; new BPlusTreeNode[m];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">* 这是B+树中叶子节点的定义。</span><br><span class="line">*</span><br><span class="line">* B+树中的叶子节点跟内部结点是不一样的,</span><br><span class="line">* 叶子节点存储的是值，而非区间。</span><br><span class="line">* 这个定义里，每个叶子节点存储3个数据行的键值及地址信息。</span><br><span class="line">*</span><br><span class="line">* k值是事先计算得到的，计算的依据是让所有信息的大小正好等于页的大小：</span><br><span class="line">* PAGE_SIZE &#x3D; k*4[keyw..大小]+k*8[dataAd..大小]+8[prev大小]+8[next大小]</span><br><span class="line">*&#x2F;</span><br><span class="line">public class BPlusTreeLeafNode &#123;</span><br><span class="line">  public static int k &#x3D; 3;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 数据的键值</span><br><span class="line">  public int[] keywords &#x3D; new int[k];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 数据地址</span><br><span class="line">  public long[] dataAddress &#x3D; new long[k];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 这个结点在链表中的前驱结点</span><br><span class="line">  public BPlusTreeLeafNode prev;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 这个结点在链表中的后继结点 </span><br><span class="line">  public BPlusTreeLeafNode next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 B+ 树中，树中的节点并不存储数据本身，而是只是作为索引。除此之外，所有记录的节点按大小顺序存储在同一层的叶节点中，并且每个叶节点通过指针连接。</p><p>总结下，B + 树有以下特点</p><ol><li>B + 树的每个节点可以包含更多节点，其原因有两个，其一是降低树的高度 (索引不会全部存储在内存中，内存中可能撑不住，所以一般都是将索引树存储在磁盘中，只是将根节点放到内存中，这样对每个节点的访问，实际上就是访问磁盘，树的高度就等于每次查询数据时磁盘 IO 操作的次数), 另一种是将数据范围更改为多个间隔。间隔越大，数据检索越快 (可以想象跳表)</li><li>每个节点不在是存储一个 key, 而是存储多个 key</li><li>叶节点来存储数据，而其他节点用于索引</li><li>叶子节点通过两个指针相互链接，顺序查询性能更高。</li></ol><p>这样设计还有以下优点：</p><ol><li>B + 树的非叶子节点仅存储键，占用很小的空间，因此节点的每一层可以索引的数据范围要宽得多。换句话说，可以为每个 IO 操作搜索更多数据</li><li>叶子节点成对连接，符合磁盘的预读特性。例如，叶节点存储 50 和 55，它们具有指向叶节点 60 和 62 的指针。当我们从磁盘读取对应于 50 和 55 的数据时，由于磁盘的预读特性，我们将顺便提一下 60 和 62。读出相应的数据。这次是顺序读取，而不是磁盘搜索，加快了速度。</li><li>支持范围查询，局部范围查询非常高效，每个节点都可以索引更大，更准确的范围，这意味着 B + 树单磁盘 IO 信息大于 B 树，并且 I / O 效率更高</li><li>由于数据存储在叶节点层中，并且有指向其他叶节点的指针，因此范围查询仅需要遍历叶节点层，而无需遍历整个树。</li></ol><p>由于磁盘访问速度和内存之间存在差距，为了提高效率，应将磁盘 I / O 最小化。磁盘通常不是严格按需读取的，而是每次都被预读。磁盘读取所需的数据后，它将向后读取内存中的一定长度的数据。这样做的理论基础是计算机科学中众所周知的本地原理：</p><blockquote><p>关于 MySQL 数据索引是如何实现的，可以参考这篇文章：<a href="https://time.geekbang.org/column/article/77830">https://time.geekbang.org/column/article/77830</a></p></blockquote><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><p>B-Tree 实际上也是一颗 m 叉平衡查找树</p><p><a href="https://generalthink.github.io/images/java/B-Tree.png"><img src="../img/B-Tree.png" alt="B-Tree"></a></p><p><a href="https://generalthink.github.io/images/java/B-Tree.png">B-Tree</a></p><ol><li>所有的 key 值分布在整个树中</li><li>所有的 key 值出现在一个节点中</li><li>搜索可以在非叶子节点处结束</li><li>在完整的关键字搜索过程中，性能接近二分搜索。</li></ol><h3 id="B-树和-B-树之间的区别"><a href="#B-树和-B-树之间的区别" class="headerlink" title="B 树和 B + 树之间的区别"></a>B 树和 B + 树之间的区别</h3><ol><li>B + 树中的非叶子节点不存储数据，并且存储在叶节点中的所有数据使得查询时间复杂度固定为 log n。</li><li>B 树查询时间的复杂度不是固定的，它与键在树中的位置有关，最好是 O（1）。</li><li>由于 B + 树的叶子节点是通过双向链表链接的，所以支持范围查询，且效率比 B 树高</li><li>B 树每个节点的键和数据是一起的</li></ol><h3 id="为什么-MongoDB-使用-B-Tree-Mysql-使用-B-Tree"><a href="#为什么-MongoDB-使用-B-Tree-Mysql-使用-B-Tree" class="headerlink" title="为什么 MongoDB 使用 B-Tree,Mysql 使用 B+Tree ?"></a>为什么 MongoDB 使用 B-Tree,Mysql 使用 B+Tree ?</h3><p>B + 树中的非叶子节点不存储数据，并且存储在叶节点中的所有数据使得查询时间复杂度固定为 log n。B 树查询时间复杂度不是固定的，它与键在树中的位置有关，最好是 O (1)。</p><p><strong>我们已经说过，尽可能少的磁盘 IO 是提高性能的有效方法。MongoDB 是一个聚合数据库，而 B 树恰好是键域和数据域的集群。</strong></p><p>至于为什么 MongoDB 使用 B 树而不是 B + 树，可以从其设计的角度考虑它。<br>MongoDB 不是传统的关系数据库，而是以 BSON 格式 (可以认为是 JSON) 存储的 nosql。目的是高性能，高可用性和易于扩展。</p><p>Mysql 是关系型数据库，最常用的是数据遍历操作 (join)，而 MongoDB 它的数据更多的是聚合过的数据，不像 Mysql 那样表之间的关系那么强烈，因此 MongoDB 更多的是单个查询。</p><p>由于 Mysql 使用 B + 树，数据在叶节点上，叶子节点之间又通过双向链表连接，更加有利于数据遍历，而 MongoDB 使用 B 树，所有节点都有一个数据字段。只要找到指定的索引，就可以对其进行访问。毫无疑问，单个查询 MongoDB 平均查询速度比 Mysql 快。</p><h3 id="Hash-索引"><a href="#Hash-索引" class="headerlink" title="Hash 索引"></a>Hash 索引</h3><p>简而言之，哈希索引使用某种哈希算法将键值转换为新的哈希值。不需要像 B + 树那样从根节点到叶节点逐步搜索。只需要一种哈希算法，就可以立即找到对应的位置，速度非常快。(此处可以想想 Java 中的 HashMap)。</p><h4 id="B-树索引和-Hash-索引的区别"><a href="#B-树索引和-Hash-索引的区别" class="headerlink" title="B + 树索引和 Hash 索引的区别"></a>B + 树索引和 Hash 索引的区别</h4><ol><li><p>如果是等价查询，则哈希索引显然具有绝对优势，因为只需一种算法即可找到相应的键值；当然，前提是键值是唯一的，如果存在 hash 冲突就必须链表遍历了。</p></li><li><p>哈希索引不支持范围查询 (不过改造之后可以，Java 中的 LinkedHashMap 通过链表保存了节点的插入顺序，那么也可以使用链表将数据的大小顺序保存起来)</p><blockquote><p>这样做虽然支持了范围查询但是时间复杂度是 O (n), 效率比跳表和 B+Tree 差</p></blockquote></li><li><p>哈希索引无法使用索引排序以及模糊匹配</p></li><li><p>哈希索引也不支持多列联合索引的最左边匹配规则。</p></li><li><p>键值大量冲突的情况下，Hash 索引效率极低</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>think-about-cluster</title>
      <link href="2525ce5c.html"/>
      <url>2525ce5c.html</url>
      
        <content type="html"><![CDATA[<p>分布式集群</p><p>分布式: 即拆分原有的功能,避免冗余和服务的耦合</p><p>集群: 提供多台服务避免单点故障</p><p>使用分布式集群好处很多 避免某个服务出问题服务不受影响,同时提供多台性能没那么强的数据也成本更低,数据的分块和副本也能最大程度减少数据的丢失,<strong>单机io瓶颈</strong></p><p>坏处就是: 开发成本 超时等待,不同节点数据的同步,分布式事务,grpc接口的各种可能情况</p><p>通常会有3个以上的节点,数据过来会被分块和创建副本,同时会有选取机制或者是专门的服务负责协调数据的同步和客户端访问具体的数据节点</p><p>下面举出比较有特点的分布式服务</p><table><thead><tr><th><strong>elasticsearch</strong></th><th><strong>kafka</strong></th><th><strong>hbase</strong></th><th><strong>zookeeper</strong></th></tr></thead><tbody><tr><td>节点 datandoe coordinate数据 doc数据集 index数据分块 shard</td><td>节点 broke数据 message数据集 topic数据集分块 partition replica例外消费者comsumer生产者 producter消费者组 comsumer-group元数据保存在zookeeper上</td><td>节点 datanode数据</td><td>节点 node选举半数以上有个master,存储元数据leaderfollower</td></tr><tr><td>index：对外暴露的搜索单元，由一系列的shard组成。shard：es实际执行的单元，开始针对索引的写入和查询，都会拆分为segment：es里面完整的索引集合，由document和索引文件document：对应一天天数据translog: 事务日志</td><td></td><td>table：由多行数据组成region：由很多store组成，有多少个列族就有多少个storeStore: 由Memstore和StoreFile组成，一个列簇对应一个Store，包含在内存中的Memstore以及持久化到hdfs里的多个HFile，StoreFile的底层就是HFile，它是HFile的一个轻量级封装row, column, cell: 一个row由rowKey和多个column及其对应值组成，一张表的所有row都按rowkey的字典序由小到大排序，column由columnFamily和Qualifier组成，cell是row, column, timestamp, type, value等组成。HLog: 类似于ES的Translog，主要也是用于数据的恢复。</td><td></td></tr><tr><td>merge 索引 merge 分块</td><td>rebalance 消费者rebalance topic 的推送</td><td>为什么hbase会有列族 可以没有严格限定列的格式就是因为 hbase的</td><td></td></tr></tbody></table><p>下面是补充</p><h2 id="分布式系统常见异常问题"><a href="#分布式系统常见异常问题" class="headerlink" title="分布式系统常见异常问题"></a>分布式系统常见异常问题</h2><ul><li><p>通信异常：网络不可用（消息延迟或者丢失），会导致分布式系统内部无法顺利进行一次网络通信进行沟通协调，所以可能造成多节点数据丢失和 状态不一致，还有可能造成数据乱序。解决方案：重试机制</p></li><li><p>网络分区：网络不连通，但各个子网络的内部网络是正常的，从而导致整个系统的网络环境被切分成了若干个孤立的区域，分布式系统就会出现局 部小集群造成数据不一致。解决方案：把数据状态不是最新的给下线掉</p></li><li><p>节点故障/机器宕机：服务器节点出现的宕机或”僵死”现象，这是常态，而不是异常。解决方案：数据副本协议，异步复制</p></li><li><p>分布式三态：即成功、失败和超时，分布式环境中的网络通信请求发送和结果响应都有可能丢失，所以请求发起方无法确定消息是否处理成功。分 布式系统的可用性：在用户能忍受的时间范围内，一定给出响应！解决方案：超时处理</p></li><li><p>存储数据丢失：对于有状态节点来说，数据丢失意味着状态丢失，通常只能从其他节点读取、恢复存储的状态。解决方案：副本协议</p></li></ul><h2 id="2-3-分布式系统性能指标"><a href="#2-3-分布式系统性能指标" class="headerlink" title="2.3 分布式系统性能指标"></a>2.3 分布式系统性能指标</h2><ul><li><p><strong>性能</strong>：下面三个性能指标（吞吐，延迟，并发）往往会相互制约，追求高吞吐的系统，往往很难做到低延迟；系统平均响应时间较长时，也很难提高 QPS。<em>系统的吞吐能力，指系统在某一时间可以处理的数据/请求总量，通常可以用系统每秒处理的总数据/总请求量来衡量； 系统的响应延迟，指系统完成某一功能需要使用的时间； 系统的并发能力，指系统可以同时完成某一功能的能力，通常也用QPS(query per second)来衡量。</em></p></li><li><p><strong>可用性</strong>：系统的可用性（availability）指系统在面对各种异常时可以正确提供服务的能力。系统的可用性可以用系统停服务的时间与正常服务的时间 的比例来衡量，也可以用某功能的失败次数与成功次数的比例来衡量。可用性是分布式的重要指标，衡量了系统的鲁棒性，是系统容错能力的体现。（5 个 9 的可靠性：一年只有 5 分钟的宕机时间！6 个 9 的可靠性，也就是 31 秒，99.9999%）</p></li><li><p><strong>可扩展性</strong>：系统的可扩展性（scalability）指分布式系统通过扩展集群机器规模提高系统性能（吞吐、延迟、并发）、存储容量、计算能力的特性。好 的分布式系统总在追求 “线性扩展性”，也就是使得系统的某一指标可以随着集群中的机器数量线性增长。最期望的情况：动态热部署</p></li><li><p><strong>一致性</strong>：分布式系统为了提高可用性，总是不可避免的使用副本的机制，从而引发副本一致性的问题。越是强的一致性的模型，对于用户使用来说使 用起来越简单。</p></li></ul><p><a href="http://luochong.online/2021/06/11/ZooKeeper%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90/">ZooKeeper架构设计分析/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>think-about-data-structure</title>
      <link href="b760fb1a.html"/>
      <url>b760fb1a.html</url>
      
        <content type="html"><![CDATA[<p>为什么有数据结构的问题就是数据本来是无序和杂乱的<br>怎么在保存的时候方便后续更加方便查询和分析<br>如果是像记事本和word这种的确是可以使用单考虑到大量的数据就要考虑效率和成本</p><p>最后就发现了很多方法</p><ul><li>内存保存</li><li>基于机械硬盘保存附以数据结构</li><li>混合内存和硬盘保存包括数据的生命周期来实现</li></ul><h2 id="内存保存"><a href="#内存保存" class="headerlink" title="内存保存"></a>内存保存</h2><p><strong>redis</strong>,<strong>Cassandra</strong>,<strong>Neo4j</strong> 等将数据保存在内存中实现快速存储,同时还提供数据的持久化,和过期时间,同时包括其他的有效特性</p><h2 id="磁盘保存"><a href="#磁盘保存" class="headerlink" title="磁盘保存"></a>磁盘保存</h2><ol><li>二分查找: 将文件数据有序保存，使用二分查找来完成特定key的查找。</li><li>哈希：用哈希将数据分割为不同的bucket</li><li>B+树：使用B+树 或者 ISAM 等方法，可以减少外部文件的读取</li><li>外部文件： 将数据保存为日志，并创建一个hash或者查找树映射相应的文件。</li></ol><p><img src="../img/352f30322f4a6f75726e616c362d31303234783530332e706e67.png" alt="basic lsm"></p><p>基于硬盘的保存就要优先考虑磁盘原理,磁盘的探测器读取磁道的数据,所以数据是顺序读写的,且会预读取数据到内存,目前很多开发的分布式服务都基于此设计为(LSM Log Structured-Merge Tree) 包括kafka, hbase 等尽量避免顺序读写</p><p>b+数这类设计目标提高数据的查询的效率,在数据保存的时候将数据建议归类以树状的结构排列,同时在包括叶子节点和根节点来实现快速找对数据节点</p><p>通常数据库还有一个方式 WAL(writte ahaead log) 即写数据之前会先累积数据后在保存在</p><p>现在常见的数据保存结构有哪些</p><p>树状结构 b数,b+树,b-树</p><p>线性 lsm结构 数据保存读写会累积不是覆盖这种</p><p>数据库索引常见,b-tree,hash,gist,gin,sp-gist,brin</p><p>方便查询</p><p>方便读写</p><blockquote><p>   B-Tree 索引是 MySQL 数据库中使用最为频繁的索引类型，除了 Archive 存储引擎之外的其他所有的存储引擎都支持 B-Tree 索引。不仅仅在 MySQL 中是如此，实际上在其他的很多数据库管理系统中B-Tree 索引也同样是作为最主要的索引类型，这主要是因为B-Tree 索引的存储结构在数据库的数据检索中有非常优异的表现。<br>    一般来说， MySQL 中的 B-Tree 索引的物理文件大多都是以 Balance Tree 的结构来存储的，也就是所有实际需要的数据都存放于 Tree 的 Leaf Node ，而且到任何一个 Leaf Node 的最短路径的长度都是完全相同的，所以我们大家都称之为 B-Tree 索引当然，可能各种数据库（或 MySQL 的各种存储引擎）在存放自己的 B-Tree 索引的时候会对存储结构稍作改造。如 Innodb 存储引擎的 B-Tree 索引实际使用的存储结构实际上是 B+Tree ，也就是在 B-Tree 数据结构的基础上做了很小的改造，在每一个<strong>Leaf Node</strong> (叶子节点)上面出了存放索引键的相关信息之外，还存储了指向与该 Leaf Node 相邻的后一个 LeafNode 的指针信息，这主要是为了加快检索多个相邻 Leaf Node 的效率考虑。<br>    B+树是一个平衡的多叉树，从根节点到每个叶子节点的高度差值不超过1，而且同层级的节点间有指针相互链接。<br>    在B+树上的常规检索，从根节点到叶子节点的搜索效率基本相当，不会出现大幅波动，而且基于索引的顺序扫描时，也可以利用双向指针快速左右移动，效率非常高。<br>    因此，B+树索引被广泛应用于数据库、文件系统等场景。顺便说一下，xfs文件系统比ext3/ext4效率高很多的原因之一就是，它的文件及目录索引结构全部采用B+树索引，而ext3/ext4的文件目录结构则采用Linked list, hashed B-tree、Extents/Bitmap等索引数据结构，因此在高I/O压力下，其IOPS能力不如xfs。</p></blockquote><p>所以使用</p><h2 id="混合内存和硬盘保存包括数据的生命周期来实现"><a href="#混合内存和硬盘保存包括数据的生命周期来实现" class="headerlink" title="混合内存和硬盘保存包括数据的生命周期来实现"></a>混合内存和硬盘保存包括数据的生命周期来实现</h2><p>代表程序为 elasticsearch</p><p><strong>数据过来会被建立索引保存在内存中后面会被保存在磁盘,数据的生命周期为hot  warm cold</strong> <strong>delete</strong></p><table><thead><tr><th>阶段 / action</th><th>优先级设置</th><th>取消跟随</th><th>滚动索引</th><th>分片分配</th><th>只读</th><th>强制段合并</th><th>收缩索引</th><th>冻结索引</th><th>删除</th></tr></thead><tbody><tr><td>hot</td><td>√</td><td>√</td><td>√</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td></tr><tr><td>warm</td><td>√</td><td>√</td><td>×</td><td>√</td><td>√</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>cold</td><td>√</td><td>√</td><td>×</td><td>√</td><td>×</td><td>×</td><td>×</td><td>√</td><td>×</td></tr><tr><td>delete</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>√</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s-deploy-geoserver-activemq</title>
      <link href="c1c66eff.html"/>
      <url>c1c66eff.html</url>
      
        <content type="html"><![CDATA[<p>目前公司需要搭建geoserver集群集成jms和jdbcstore的插件,实现数据保存在数据库,同时通过jms来同步集群的缓存数据</p><h2 id="部署activeMQ"><a href="#部署activeMQ" class="headerlink" title="部署activeMQ"></a>部署activeMQ</h2><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p><img src="../img/1634094696968-466f7ccf-f903-442d-b53c-d5a361ecba88.png" alt="image-20211013110849180.png"></p><p>####</p><p>包括注解包括你需要备注的信息<br>标签: 用于部署pod 服务,用于设置部署在指定标签节点 在高级设置里面可以设置<br>副本数即类似于克隆了多个镜像服务,他们的配置都是一样的<br>分层级类似于归类的作业,突出显示和归纳</p><h3 id="配置容器"><a href="#配置容器" class="headerlink" title="配置容器"></a>配置容器</h3><p><img src="../img/1634094933299-65354b7f-48f9-4293-9739-6000138dc82b.png" alt="image.png"></p><p>这部分主要是要注意要注意如果服务是需要暴露端口的必须要配置,否则服务启动会有问题,暴露的端口不是直接给外部访问,是节点的容器组IP的暴露出来的可以用于容器内部的通信<br>容器的镜像通常就是 dockerhub官方提供的,亦或者是内网的镜像仓库harbor部署的,<br>命令参数目前使用的少,看介绍可以替代dockerfile中 cmd部分执行的命令<br>环境变量即添加容器内部的环境变量,包括很多敏感的secret和key ,需要运行时使用便可以放在上面<br>资源请求/限制: 即对容器调用host的资源进行限制,不挤占其他服务的资源<br>​</p><h3 id="挂载存储"><a href="#挂载存储" class="headerlink" title="挂载存储"></a>挂载存储</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="../img/1634094947506-dc314125-33e7-4bff-a302-652d53bc50e7.png" alt="image.png"></h2><p>这里主要是注意一点 挂载数据卷到容器中,倘若容器中的配置文件在挂载卷不存在,但是配置挂载会替换容器中的文件导致pod启动失败<br>​</p><p><strong>还有配置路径也是需要注意</strong><br>上面的路径的容器内的绝对路径<br>下面的子路径是相对路径但是相对的是 挂载的卷的的根节点 类似于 /var/lib/kubelet/pods/8c7ba28d-59bd-4ad3-a592-4212ad540939/volumes/kubernetes.io~glusterfs/pvc-02a2b3a6-bd84-4687-8c37-67eb0b4a1ed1<br>如果配置的是文件<br>那么下面挂载卷内的文件会替换上面容器绝对路径的文件</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h3 id="服务-应用路由"><a href="#服务-应用路由" class="headerlink" title="服务/应用路由"></a>服务/应用路由</h3><p><img src="../img/1634094993788-5b18b1ae-d1ac-4907-b084-26ad23abb8fc.png" alt="image.png"></p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><p>需要主要的要主要在服务定义 如果是暴露在集群内部那么选择clusterip只会容器上可以使用 <strong>通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是默认的 ServiceType。</strong><br>如果选择nodePort那么则是需要在集群对外暴露端口通常都是五位数的端口,通过集群每个节点的端口监听和dns解析,<br>headless是没有任何配置 ** Service 并不会分配 Cluster IP，kube-proxy 不会处理它们， 而且平台也不会为它们进行负载均衡和路由。 DNS 如何实现自动配置，依赖于 Service 是否定义了选择算符**</p><p><img src="../img/1634096515885-5cc05172-5e3d-4e1d-a807-158279a04c82.svg" alt="services-userspace-overview.svg"></p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>如果保存后pod启动有问题报<br> 不挂载卷,可以直接启动,但是挂载就一直报<br>Back-off restarting failed container   这种一般都是容器启动的时有问题导致的运行失败,需要看日志,体现出来就是容器启动后没有一种运行的进程导致 被回收<br><img src="../img/1634097165049-b2d82280-d4c5-4054-846a-ba9d3c925fe0.png" alt="image.png"></p><h2 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h2><ul><li>使用jdbcstore插件后大比例不 不显示空白</li><li>结果jdbcstore和jms插件的冲突</li><li>高版本(19)geoserver集群的部署</li></ul><h2 id="使用jdbcstore插件后大比例不-不显示空白"><a href="#使用jdbcstore插件后大比例不-不显示空白" class="headerlink" title="使用jdbcstore插件后大比例不 不显示空白"></a>使用jdbcstore插件后大比例不 不显示空白</h2><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><p>在使用jdbcstore插件来实现数据的数据库保存,但是在预览图层时会出现放大到一定程度层级后空白 的情况</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在查询源码后知道新版的geoserver优化的SQL查询逻辑调用了</p><p>老版的geoserver实际执行的SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对比可以知道 在勾选Support on the fly geometry simplification 后 没有使用ST_Simplify 这个函数在</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&quot;fid&quot;</span>,<span class="keyword">encode</span>(ST_AsBinary(ST_Simplify(ST_Force2D(<span class="string">&quot;geom&quot;</span>), <span class="number">3.8116173982620243</span>, <span class="literal">true</span>)),<span class="string">&#x27;base64&#x27;</span>) <span class="keyword">as</span> <span class="string">&quot;geom&quot;</span> <span class="keyword">FROM</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;qj_temp_gzw&quot;</span> <span class="keyword">WHERE</span> <span class="string">&quot;geom&quot;</span> &amp;&amp; ST_GeomFromText(<span class="string">&#x27;POLYGON ((38371404.953002505 3413497.2549508526, 38371404.953002505 3417181.212940211, 38374478.06952626 3417181.212940211, 38374478.06952626 3413497.2549508526, 38371404.953002505 3413497.2549508526))&#x27;</span>, <span class="number">4526</span>) 勾选</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&quot;fid&quot;</span>,<span class="keyword">encode</span>(ST_AsBinary(ST_Force2D(<span class="string">&quot;geom&quot;</span>)),<span class="string">&#x27;base64&#x27;</span>) <span class="keyword">as</span> <span class="string">&quot;geom&quot;</span> <span class="keyword">FROM</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;qj_temp_gzw&quot;</span> <span class="keyword">WHERE</span> <span class="string">&quot;geom&quot;</span> &amp;&amp; ST_GeomFromText(<span class="string">&#x27;POLYGON ((38371404.953002505 3413497.2549508526, 38371404.953002505 3417181.212940211, 38374478.06952626 3417181.212940211, 38374478.06952626 3413497.2549508526, 38371404.953002505 3413497.2549508526))&#x27;</span>, <span class="number">4526</span>) 不勾选</span><br></pre></td></tr></table></figure><p>新版的geoserver实际执行的SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对比可以确定 新版本勾选 Support on the fly geometry simplification后 区别在于选用ST_AsTWKB作为简化内容导致的数据缺失</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&quot;fid&quot;</span>,<span class="keyword">encode</span>(ST_AsTWKB(ST_Simplify(ST_Force2D(<span class="string">&quot;geom&quot;</span>), <span class="number">3.8116173923015597</span>, <span class="literal">true</span>),<span class="number">0</span>), <span class="string">&#x27;base64&#x27;</span>) <span class="keyword">as</span> <span class="string">&quot;geom&quot;</span> <span class="keyword">FROM</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;qj_temp_gzw&quot;</span> <span class="keyword">WHERE</span> <span class="string">&quot;geom&quot;</span> &amp;&amp; ST_GeomFromText(<span class="string">&#x27;POLYGON ((38371404.953002505 3413497.2549508526, 38371404.953002505 3417181.212940211, 38374478.06952626 3417181.212940211, 38374478.06952626 3413497.2549508526, 38371404.953002505 3413497.2549508526))&#x27;</span>, <span class="number">4526</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&quot;fid&quot;</span>,<span class="keyword">encode</span>(ST_AsBinary(ST_Force2D(<span class="string">&quot;geom&quot;</span>)), <span class="string">&#x27;base64&#x27;</span>) <span class="keyword">as</span> <span class="string">&quot;geom&quot;</span> <span class="keyword">FROM</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;qj_temp_gzw&quot;</span> <span class="keyword">WHERE</span> <span class="string">&quot;geom&quot;</span> &amp;&amp; ST_GeomFromText(<span class="string">&#x27;POLYGON ((38371404.953002505 3413497.2549508526, 38371404.953002505 3417181.212940211, 38374478.06952626 3417181.212940211, 38374478.06952626 3413497.2549508526, 38371404.953002505 3413497.2549508526))&#x27;</span>, <span class="number">4526</span>)</span><br></pre></td></tr></table></figure><p>debug方法调用</p><p>org.geoserver.wms.GetMap#executeInternal</p><p>org.geotools.renderer.lite.StreamingRenderer#drawPlain</p><p>org.geotools.data.store.ContentFeatureSource#getReader(org.geotools.data.Query)</p><p>org.geoserver.wms.GetMapOutputFormat#produceMap</p><p>org.geoserver.wms.map.RenderedImageMapOutputFormat#produceMap(org.geoserver.wms.WMSMapContent, boolean)</p><p>renderer.paint(</p><p>org.geotools.data.postgis.PostGISDialect#encodeGeometryColumnSimplified</p><p>最后修改gt-jdbc-postgis jar下面的 org.geotools.data.postgis.PostGISDialect#isAggregatedSortSupported 然后重新打包替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">static final Version V_1_5_0 &#x3D; new Version(&quot;1.5.0&quot;);</span><br><span class="line"></span><br><span class="line">static final Version V_2_0_0 &#x3D; new Version(&quot;2.0.0&quot;);</span><br><span class="line"></span><br><span class="line">static final Version V_2_1_0 &#x3D; new Version(&quot;2.1.0&quot;);</span><br><span class="line"></span><br><span class="line">static final Version V_2_2_0 &#x3D; new Version(&quot;2.30.0&quot;); &#x2F;&#x2F;修改这个字段</span><br><span class="line"></span><br><span class="line">static final Version PGSQL_V_9_0 &#x3D; new Version(&quot;9.0&quot;);</span><br><span class="line"></span><br><span class="line">static final Version PGSQL_V_9_1 &#x3D; new Version(&quot;9.1&quot;);</span><br></pre></td></tr></table></figure><p>保证无论碰到什么版本的geoserver使用老的方法</p><h2 id="解决jdbcstore和jms插件的冲突"><a href="#解决jdbcstore和jms插件的冲突" class="headerlink" title="解决jdbcstore和jms插件的冲突"></a>解决jdbcstore和jms插件的冲突</h2><h4 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h4><p>启动失败会报MultipleBeansException  org.geoserver.config.GeoServerLoader</p><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>查询知道在 jms-cluster 下面有个 org.geoserver.config.ReadOnlyGeoServerLoader 继承了org.geoserver.config.DefaultGeoServerLoader</p><p>同时gs-jdbcconfig 下面 org.geoserver.jdbcconfig.JDBCGeoServerLoader也继承DefaultGeoServerLoader</p><p>导致冲突在org.geoserver.config.GeoServerLoaderProxy#lookupGeoServerLoader 会判断GeoServerLoader的类,如果是两个就报错</p><p>目前是默认使用JDBCGeoServerLoader 代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> GeoServerLoader <span class="title">lookupGeoServerLoader</span><span class="params">(ApplicationContext appContext)</span> </span>&#123;</span><br><span class="line">        GeoServerLoader loader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loader =</span><br><span class="line">                    (GeoServerLoader)</span><br><span class="line">                            GeoServerExtensions.bean(</span><br><span class="line">                                    Class.forName(<span class="string">&quot;org.geoserver.jdbcconfig.JDBCGeoServerLoader&quot;</span>),</span><br><span class="line">                                    appContext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            loader = <span class="keyword">new</span> DefaultGeoServerLoader(resourceLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loader;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="高版本-19-geoserver集群的部署"><a href="#高版本-19-geoserver集群的部署" class="headerlink" title="高版本(19)geoserver集群的部署"></a>高版本(19)geoserver集群的部署</h2><h4 id="现象-2"><a href="#现象-2" class="headerlink" title="现象"></a>现象</h4><p>集群挂载在同一个盘上面,修改一个jmx的配置,其他节点也跟着修改</p><h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><p>针对不同节点创建各自的配置文件,在挂载的时候配置映射文件</p><p><img src="../img/1634094768227-8941ca86-61d5-43b5-a0ea-f75b20258ded.png" alt="image-20211012144321551.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>geoserver-high-version-some-scale-lose-layer</title>
      <link href="8070f974.html"/>
      <url>8070f974.html</url>
      
        <content type="html"><![CDATA[<h2 id="启动geoserver报错文件找不到"><a href="#启动geoserver报错文件找不到" class="headerlink" title="启动geoserver报错文件找不到"></a>启动geoserver报错文件找不到</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.io.FileNotFoundException: src&#x2F;main&#x2F;webapp</span><br><span class="line">at org.eclipse.jetty.webapp.WebInfConfiguration.unpack(WebInfConfiguration.java:671)</span><br><span class="line">at org.eclipse.jetty.webapp.WebInfConfiguration.preConfigure(WebInfConfiguration.java:152)</span><br><span class="line">at org.eclipse.jetty.webapp.WebAppContext.preConfigure(WebAppContext.java:506)</span><br><span class="line">at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:544)</span><br><span class="line">at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)</span><br><span class="line">at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138)</span><br><span class="line">at org.eclipse.jetty.server.Server.start(Server.java:416)</span><br><span class="line">at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108)</span><br><span class="line">at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113)</span><br><span class="line">at org.eclipse.jetty.server.Server.doStart(Server.java:383)</span><br><span class="line">at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)</span><br><span class="line">at org.geoserver.web.Start.main(Start.java:125)</span><br><span class="line">九月 15, 2021 11:21:37 上午 org.geoserver.web.Start main</span><br><span class="line">严重: GeoServer startup complete in 0.186s</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>org.geoserver.web.Start#main</p><p>​            wah.setWar(“src/web/app/src/main/webapp”);</p><p>geoserver 调用wms服务时访问的数据</p><p>org.geoserver.wms.GetMap#executeInternal</p><p>org.geotools.renderer.lite.StreamingRenderer#drawPlain</p><p>org.geotools.data.store.ContentFeatureSource#getReader(org.geotools.data.Query)</p><p>org.geoserver.wms.GetMapOutputFormat#produceMap</p><p>org.geoserver.wms.map.RenderedImageMapOutputFormat#produceMap(org.geoserver.wms.WMSMapContent, boolean)</p><p> renderer.paint(</p><p>org.geotools.data.postgis.PostGISDialect#encodeGeometryColumnSimplified</p><p>geoserver 在一定版本下出现数据缺失,本地发布的文件没有这种情况,目前只出现在用postgis发布的数据shp图层数据</p><p>参考了这个github-issues<br><a href="https://github.com/AtlasOfLivingAustralia/spatial-hub/issues/66">https://github.com/AtlasOfLivingAustralia/spatial-hub/issues/66</a></p><p>之前版本查询SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&quot;ogc_fid&quot;</span>,<span class="keyword">encode</span>(ST_AsBinary(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ST_HasArc(<span class="string">&quot;geom&quot;</span>) <span class="keyword">THEN</span> <span class="string">&quot;geom&quot;</span> <span class="keyword">ELSE</span> ST_Simplify(ST_Force2D(<span class="string">&quot;geom&quot;</span>), <span class="number">1.71661376953125E-5</span>, <span class="literal">true</span>) <span class="keyword">END</span>),<span class="string">&#x27;base64&#x27;</span>) <span class="keyword">as</span> <span class="string">&quot;geom&quot;</span> <span class="keyword">FROM</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;cg4201061__hhbjx&quot;</span> <span class="keyword">WHERE</span> <span class="string">&quot;geom&quot;</span> &amp;&amp; ST_GeomFromText(<span class="string">&#x27;POLYGON ((111.91068649291992 32.39775896072388, 111.91068649291992 32.41295099258423, 111.92733764648438 32.41295099258423, 111.92733764648438 32.39775896072388, 111.91068649291992 32.39775896072388))&#x27;</span>, <span class="number">4490</span>)</span><br></pre></td></tr></table></figure><p>现在geoserver 25.2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">&quot;fid&quot;</span>,</span><br><span class="line"><span class="keyword">encode</span>( ST_AsTWKB ( ST_Simplify ( ST_Force2D ( <span class="string">&quot;geom&quot;</span> ), <span class="number">3.8116173923015597</span>, <span class="literal">TRUE</span> ), <span class="number">0</span> ), <span class="string">&#x27;base64&#x27;</span> ) <span class="keyword">AS</span> <span class="string">&quot;geom&quot;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">&quot;public&quot;</span>.<span class="string">&quot;qj_temp_gzw&quot;</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="string">&quot;geom&quot;</span> &amp;&amp; ST_GeomFromText ( <span class="string">&#x27;POLYGON ((38371118.635024056 3413740.625232533, 38371118.635024056 3417424.5832218914, 38374191.75154781 3417424.5832218914, 38374191.75154781 3413740.625232533, 38371118.635024056 3413740.625232533))&#x27;</span>, <span class="number">4526</span> )</span><br></pre></td></tr></table></figure><p>在老的版本中 加入了判断是否</p><blockquote><p>encode(ST_AsBinary(CASE WHEN ST_HasArc(“geom”) THEN “geom” ELSE ST_Simplify(ST_Force2D(“geom”), 1.71661376953125E-5, true) END),’base64’) as “geom” </p></blockquote><p>是否是如果一个geometry对象或geometry collection包含一个CircularString对象，则返回TRUE这样如果包含圆的geometry会被简化</p><p>而 <strong>ST_Simplify()</strong> 函数则是通过数据简化 简化太多的圆变成三角形，中间变成八边形</p><p>老版本geoserver(2.15)执行SQL的区别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 对比可以知道 在勾选Support on the fly geometry simplification 后 没有使用ST_Simplify 这个函数在</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&quot;fid&quot;</span>,<span class="keyword">encode</span>(ST_AsBinary(ST_Simplify(ST_Force2D(<span class="string">&quot;geom&quot;</span>), <span class="number">3.8116173982620243</span>, <span class="literal">true</span>)),<span class="string">&#x27;base64&#x27;</span>) <span class="keyword">as</span> <span class="string">&quot;geom&quot;</span> <span class="keyword">FROM</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;qj_temp_gzw&quot;</span> <span class="keyword">WHERE</span> <span class="string">&quot;geom&quot;</span> &amp;&amp; ST_GeomFromText(<span class="string">&#x27;POLYGON ((38371404.953002505 3413497.2549508526, 38371404.953002505 3417181.212940211, 38374478.06952626 3417181.212940211, 38374478.06952626 3413497.2549508526, 38371404.953002505 3413497.2549508526))&#x27;</span>, <span class="number">4526</span>) 勾选</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&quot;fid&quot;</span>,<span class="keyword">encode</span>(ST_AsBinary(ST_Force2D(<span class="string">&quot;geom&quot;</span>)),<span class="string">&#x27;base64&#x27;</span>) <span class="keyword">as</span> <span class="string">&quot;geom&quot;</span> <span class="keyword">FROM</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;qj_temp_gzw&quot;</span> <span class="keyword">WHERE</span> <span class="string">&quot;geom&quot;</span> &amp;&amp; ST_GeomFromText(<span class="string">&#x27;POLYGON ((38371404.953002505 3413497.2549508526, 38371404.953002505 3417181.212940211, 38374478.06952626 3417181.212940211, 38374478.06952626 3413497.2549508526, 38371404.953002505 3413497.2549508526))&#x27;</span>, <span class="number">4526</span>) 不勾选</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新版本geoserver(2.19) 执行SQL的区别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 对比可以确定 新版本勾选 Support on the fly geometry simplification后 区别在于选用ST_AsTWKB作为简化内容导致的数据缺失</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&quot;fid&quot;</span>,<span class="keyword">encode</span>(ST_AsTWKB(ST_Simplify(ST_Force2D(<span class="string">&quot;geom&quot;</span>), <span class="number">3.8116173923015597</span>, <span class="literal">true</span>),<span class="number">0</span>), <span class="string">&#x27;base64&#x27;</span>) <span class="keyword">as</span> <span class="string">&quot;geom&quot;</span> <span class="keyword">FROM</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;qj_temp_gzw&quot;</span> <span class="keyword">WHERE</span> <span class="string">&quot;geom&quot;</span> &amp;&amp; ST_GeomFromText(<span class="string">&#x27;POLYGON ((38371404.953002505 3413497.2549508526, 38371404.953002505 3417181.212940211, 38374478.06952626 3417181.212940211, 38374478.06952626 3413497.2549508526, 38371404.953002505 3413497.2549508526))&#x27;</span>, <span class="number">4526</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&quot;fid&quot;</span>,<span class="keyword">encode</span>(ST_AsBinary(ST_Force2D(<span class="string">&quot;geom&quot;</span>)), <span class="string">&#x27;base64&#x27;</span>) <span class="keyword">as</span> <span class="string">&quot;geom&quot;</span> <span class="keyword">FROM</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;qj_temp_gzw&quot;</span> <span class="keyword">WHERE</span> <span class="string">&quot;geom&quot;</span> &amp;&amp; ST_GeomFromText(<span class="string">&#x27;POLYGON ((38371404.953002505 3413497.2549508526, 38371404.953002505 3417181.212940211, 38374478.06952626 3417181.212940211, 38374478.06952626 3413497.2549508526, 38371404.953002505 3413497.2549508526))&#x27;</span>, <span class="number">4526</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ue4-linux-running-webrtc</title>
      <link href="71a7527e.html"/>
      <url>71a7527e.html</url>
      
        <content type="html"><![CDATA[<p>— 2021-8-10 补充—–<br>chrome://webrtc-internals/<br>可以查看当前浏览器的webrtc连接情况,方便查看debug</p><h2 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h2><p><a href="https://adamrehn.com/articles/pixel-streaming-in-linux-containers/">Pixel Streaming in Linux containers</a></p><p><a href="https://blog.csdn.net/qqcocobao/article/details/111467187?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162268344716780366554143%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=162268344716780366554143&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-15-111467187.first_rank_v2_pc_rank_v29&utm_term=PixelStreaming+&spm=1018.2226.3001.4187">Linux上运行UE4像素流PixelStreaming</a></p><p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html">nvidia-container-toolkit</a></p><ul><li>docker(docker)</li><li>nvidia驱动</li><li>nvidia-smi</li></ul><p>adamrehn这个作者主要讲 ue4适配在linux中,其实源码的ue4 在编译后是可以在linux上跑的</p><p>主要通过 ue4-docker(python) 来打包 ue4的编译环境</p><p>docker  build 来打包环境 和编译好的二进制文件 合并为一个镜像 就是pixel-stream-linux</p><p>以下面为dockerfile为例子</p><p>adamrehn/ue4-full:4.25-pixelstreaming  是 ue4-docker 生成的打包的环境</p><p>adamrehn/ue4-runtime:18.04-cudagl10.2 是在docker hub中存在的 运行环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#在包含引擎工具和像素流的虚幻引擎容器映像中执行构建</span><br><span class="line">FROM adamrehn&#x2F;ue4-full:4.25-pixelstreaming AS builder</span><br><span class="line"></span><br><span class="line">#克隆或复制你的虚幻项目的源代码在这里，例如:</span><br><span class="line">RUN git clone --progress --depth 1 https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;project.git &#x2F;tmp&#x2F;project</span><br><span class="line"># or:</span><br><span class="line">COPY --chown&#x3D;ue4:ue4 . &#x2F;tmp&#x2F;project</span><br><span class="line"></span><br><span class="line">#创建并打包我们的虚幻项目</span><br><span class="line"></span><br><span class="line">#(为了简洁起见，我们使用ue4cli，但我们也可以直接调用RunUAT)</span><br><span class="line">WORKDIR &#x2F;tmp&#x2F;project</span><br><span class="line">RUN ue4 package</span><br><span class="line"></span><br><span class="line">复制打包文件到容器图像，其中包括CUDA，但不包括任何虚幻引擎组件</span><br><span class="line">FROM adamrehn&#x2F;ue4-runtime:18.04-cudagl10.2</span><br><span class="line">COPY --from&#x3D;builder --chown&#x3D;ue4:ue4 &#x2F;tmp&#x2F;project&#x2F;dist&#x2F;LinuxNoEditor &#x2F;home&#x2F;ue4&#x2F;project</span><br><span class="line"></span><br><span class="line">#启用NVIDIA驱动程序所需的NVENC视频编码API</span><br><span class="line">ENV NVIDIA_DRIVER_CAPABILITIES $&#123;NVIDIA_DRIVER_CAPABILITIES&#125;,video</span><br><span class="line"></span><br><span class="line">#创建一个指向libvideo -encode.so路径的符号链接。1将被挂载，因为UE4似乎忽略了LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">#(将“ProjectName”替换为你实际的虚幻项目的名称)</span><br><span class="line">RUN ln -s &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libnvidia-encode.so &#x2F;home&#x2F;ue4&#x2F;project&#x2F;ProjectName&#x2F;Binaries&#x2F;Linux&#x2F;libnvidia-encode.so</span><br></pre></td></tr></table></figure><p>安装成功的标准</p><p>运行 <strong>docker run –rm –gpus all nvidia/cuda:11.0-base nvidia-smi</strong> 有结果就可以</p><p>目前有两种方式来运行实例程序</p><ol><li>打包dockerfile来运行</li></ol><p>在上面的docker引用</p><ol start="2"><li><p>使用命令</p><blockquote><p>docker run –rm -ti –network=host  –gpus=all adamrehn/pixel-streaming-example-project:4.25 -PixelStreamingIP=192.168.11.20   -PixelStreamingPort=8888 -RenderOffScreen -ForceRes -ResX=1920 -ResY=1080</p></blockquote></li></ol><p>以上是 ue4后台</p><p>如果不需要外放访问,不需要考虑上面 STUN,SDUN这些都是 nat外网穿透的服务</p><p>后面只要启动SignallingWebServer 也是就是ue安装目录 </p><blockquote><p> \Epic Games\UE_4.26\Engine\Source\Programs\PixelStreaming\WebServers\SignallingWebServer</p></blockquote><p>启动中效果有问题详细解释我在github 上提了issue <a href="https://github.com/adamrehn/pixel-streaming-linux/issues/53">https://github.com/adamrehn/pixel-streaming-linux/issues/53</a></p><p>在修改cirrus.js后就可以解决</p><pre><code>// let playerId = msg.playerId; 解析为数字    let playerId = parseInt(msg.playerId);    delete msg.playerId; // no need to send it to the player    let player = players.get(playerId);</code></pre><h3 id="webrtc关联的内容补充如下"><a href="#webrtc关联的内容补充如下" class="headerlink" title="webrtc关联的内容补充如下"></a>webrtc关联的内容补充如下</h3><p>参考这篇博文<a href="https://www.cnblogs.com/chyingp/p/sdp-in-webrtc.html">https://www.cnblogs.com/chyingp/p/sdp-in-webrtc.html</a></p><p>对于 webrtc spd内容的解读后对照着看了 SignallingWebServer/run.bat 服务的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">v&#x3D;0</span><br><span class="line">o&#x3D;- 4274722770078417046 2 IN IP4 127.0.0.1</span><br><span class="line">s&#x3D;-</span><br><span class="line">t&#x3D;0 0</span><br><span class="line">a&#x3D;group:BUNDLE 0 1 2</span><br><span class="line">a&#x3D;msid-semantic: WMS</span><br><span class="line">m&#x3D;audio 9 UDP&#x2F;TLS&#x2F;RTP&#x2F;SAVPF 111 103 104 9 0 8 106 105 13 110 112 113 126</span><br><span class="line">c&#x3D;IN IP4 0.0.0.0</span><br><span class="line">a&#x3D;rtcp:9 IN IP4 0.0.0.0</span><br><span class="line">a&#x3D;ice-ufrag:R2GR</span><br><span class="line">a&#x3D;ice-pwd:jo3amy6z8ly9guu6xeyC0rwf</span><br><span class="line">a&#x3D;ice-options:trickle</span><br><span class="line">a&#x3D;fingerprint:sha-256 C0:7D:CF:1E:FC:D1:DD:CD:83:38:C7:5D:8F:0D:0E:0F:2A:F6:B0:97:49:FF:98:4A:10:07:5C:94:80:81:B1:2A</span><br><span class="line">a&#x3D;setup:actpass</span><br><span class="line">a&#x3D;mid:0</span><br><span class="line">a&#x3D;extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level</span><br><span class="line">a&#x3D;extmap:2 http:&#x2F;&#x2F;www.webrtc.org&#x2F;experiments&#x2F;rtp-hdrext&#x2F;abs-send-time</span><br><span class="line">a&#x3D;extmap:3 http:&#x2F;&#x2F;www.ietf.org&#x2F;id&#x2F;draft-holmer-rmcat-transport-wide-cc-extensions-01</span><br><span class="line">a&#x3D;extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid</span><br><span class="line">a&#x3D;extmap:5 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id</span><br><span class="line">a&#x3D;extmap:6 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id</span><br><span class="line">a&#x3D;recvonly</span><br><span class="line">a&#x3D;rtcp-mux</span><br><span class="line">a&#x3D;rtpmap:111 opus&#x2F;48000&#x2F;2</span><br><span class="line">a&#x3D;rtcp-fb:111 transport-cc</span><br><span class="line">a&#x3D;fmtp:111 minptime&#x3D;10;useinbandfec&#x3D;1</span><br><span class="line">a&#x3D;rtpmap:103 ISAC&#x2F;16000</span><br><span class="line">a&#x3D;rtpmap:104 ISAC&#x2F;32000</span><br><span class="line">a&#x3D;rtpmap:9 G722&#x2F;8000</span><br><span class="line">a&#x3D;rtpmap:0 PCMU&#x2F;8000</span><br><span class="line">a&#x3D;rtpmap:8 PCMA&#x2F;8000</span><br><span class="line">a&#x3D;rtpmap:106 CN&#x2F;32000</span><br><span class="line">a&#x3D;rtpmap:105 CN&#x2F;16000</span><br><span class="line">a&#x3D;rtpmap:13 CN&#x2F;8000</span><br><span class="line">a&#x3D;rtpmap:110 telephone-event&#x2F;48000</span><br><span class="line">a&#x3D;rtpmap:112 telephone-event&#x2F;32000</span><br><span class="line">a&#x3D;rtpmap:113 telephone-event&#x2F;16000</span><br><span class="line">a&#x3D;rtpmap:126 telephone-event&#x2F;8000</span><br><span class="line">m&#x3D;video 9 UDP&#x2F;TLS&#x2F;RTP&#x2F;SAVPF 96 97 98 99 100 101 122 102 121 127 120 125 107 108 109 35 36 124 119 123 118 114 115 116 37</span><br><span class="line">c&#x3D;IN IP4 0.0.0.0</span><br><span class="line">a&#x3D;rtcp:9 IN IP4 0.0.0.0</span><br><span class="line">a&#x3D;ice-ufrag:R2GR</span><br><span class="line">a&#x3D;ice-pwd:jo3amy6z8ly9guu6xeyC0rwf</span><br><span class="line">a&#x3D;ice-options:trickle</span><br><span class="line">a&#x3D;fingerprint:sha-256 C0:7D:CF:1E:FC:D1:DD:CD:83:38:C7:5D:8F:0D:0E:0F:2A:F6:B0:97:49:FF:98:4A:10:07:5C:94:80:81:B1:2A</span><br><span class="line">a&#x3D;setup:actpass</span><br><span class="line">a&#x3D;mid:1</span><br><span class="line">a&#x3D;extmap:14 urn:ietf:params:rtp-hdrext:toffset</span><br><span class="line">a&#x3D;extmap:2 http:&#x2F;&#x2F;www.webrtc.org&#x2F;experiments&#x2F;rtp-hdrext&#x2F;abs-send-time</span><br><span class="line">a&#x3D;extmap:13 urn:3gpp:video-orientation</span><br><span class="line">a&#x3D;extmap:3 http:&#x2F;&#x2F;www.ietf.org&#x2F;id&#x2F;draft-holmer-rmcat-transport-wide-cc-extensions-01</span><br><span class="line">a&#x3D;extmap:12 http:&#x2F;&#x2F;www.webrtc.org&#x2F;experiments&#x2F;rtp-hdrext&#x2F;playout-delay</span><br><span class="line">a&#x3D;extmap:11 http:&#x2F;&#x2F;www.webrtc.org&#x2F;experiments&#x2F;rtp-hdrext&#x2F;video-content-type</span><br><span class="line">a&#x3D;extmap:7 http:&#x2F;&#x2F;www.webrtc.org&#x2F;experiments&#x2F;rtp-hdrext&#x2F;video-timing</span><br><span class="line">a&#x3D;extmap:8 http:&#x2F;&#x2F;www.webrtc.org&#x2F;experiments&#x2F;rtp-hdrext&#x2F;color-space</span><br><span class="line">a&#x3D;extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid</span><br><span class="line">a&#x3D;extmap:5 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id</span><br><span class="line">a&#x3D;extmap:6 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id</span><br><span class="line">a&#x3D;recvonly</span><br><span class="line">a&#x3D;rtcp-mux</span><br><span class="line">a&#x3D;rtcp-rsize</span><br><span class="line">a&#x3D;rtpmap:96 VP8&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:96 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:96 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:96 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:96 nack</span><br><span class="line">a&#x3D;rtcp-fb:96 nack pli</span><br><span class="line">a&#x3D;rtpmap:97 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:97 apt&#x3D;96</span><br><span class="line">a&#x3D;rtpmap:98 VP9&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:98 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:98 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:98 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:98 nack</span><br><span class="line">a&#x3D;rtcp-fb:98 nack pli</span><br><span class="line">a&#x3D;fmtp:98 profile-id&#x3D;0</span><br><span class="line">a&#x3D;rtpmap:99 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:99 apt&#x3D;98</span><br><span class="line">a&#x3D;rtpmap:100 VP9&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:100 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:100 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:100 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:100 nack</span><br><span class="line">a&#x3D;rtcp-fb:100 nack pli</span><br><span class="line">a&#x3D;fmtp:100 profile-id&#x3D;2</span><br><span class="line">a&#x3D;rtpmap:101 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:101 apt&#x3D;100</span><br><span class="line">a&#x3D;rtpmap:122 VP9&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:122 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:122 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:122 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:122 nack</span><br><span class="line">a&#x3D;rtcp-fb:122 nack pli</span><br><span class="line">a&#x3D;fmtp:122 profile-id&#x3D;1</span><br><span class="line">a&#x3D;rtpmap:102 H264&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:102 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:102 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:102 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:102 nack</span><br><span class="line">a&#x3D;rtcp-fb:102 nack pli</span><br><span class="line">a&#x3D;fmtp:102 level-asymmetry-allowed&#x3D;1;packetization-mode&#x3D;1;profile-level-id&#x3D;42001f;x-google-start-bitrate&#x3D;10000;x-google-max-bitrate&#x3D;20000</span><br><span class="line">a&#x3D;rtpmap:121 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:121 apt&#x3D;102</span><br><span class="line">a&#x3D;rtpmap:127 H264&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:127 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:127 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:127 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:127 nack</span><br><span class="line">a&#x3D;rtcp-fb:127 nack pli</span><br><span class="line">a&#x3D;fmtp:127 level-asymmetry-allowed&#x3D;1;packetization-mode&#x3D;0;profile-level-id&#x3D;42001f;x-google-start-bitrate&#x3D;10000;x-google-max-bitrate&#x3D;20000</span><br><span class="line">a&#x3D;rtpmap:120 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:120 apt&#x3D;127</span><br><span class="line">a&#x3D;rtpmap:125 H264&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:125 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:125 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:125 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:125 nack</span><br><span class="line">a&#x3D;rtcp-fb:125 nack pli</span><br><span class="line">a&#x3D;fmtp:125 level-asymmetry-allowed&#x3D;1;packetization-mode&#x3D;1;profile-level-id&#x3D;42e01f;x-google-start-bitrate&#x3D;10000;x-google-max-bitrate&#x3D;20000</span><br><span class="line">a&#x3D;rtpmap:107 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:107 apt&#x3D;125</span><br><span class="line">a&#x3D;rtpmap:108 H264&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:108 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:108 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:108 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:108 nack</span><br><span class="line">a&#x3D;rtcp-fb:108 nack pli</span><br><span class="line">a&#x3D;fmtp:108 level-asymmetry-allowed&#x3D;1;packetization-mode&#x3D;0;profile-level-id&#x3D;42e01f;x-google-start-bitrate&#x3D;10000;x-google-max-bitrate&#x3D;20000</span><br><span class="line">a&#x3D;rtpmap:109 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:109 apt&#x3D;108</span><br><span class="line">a&#x3D;rtpmap:35 AV1X&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:35 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:35 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:35 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:35 nack</span><br><span class="line">a&#x3D;rtcp-fb:35 nack pli</span><br><span class="line">a&#x3D;rtpmap:36 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:36 apt&#x3D;35</span><br><span class="line">a&#x3D;rtpmap:124 H264&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:124 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:124 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:124 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:124 nack</span><br><span class="line">a&#x3D;rtcp-fb:124 nack pli</span><br><span class="line">a&#x3D;fmtp:124 level-asymmetry-allowed&#x3D;1;packetization-mode&#x3D;1;profile-level-id&#x3D;4d001f;x-google-start-bitrate&#x3D;10000;x-google-max-bitrate&#x3D;20000</span><br><span class="line">a&#x3D;rtpmap:119 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:119 apt&#x3D;124</span><br><span class="line">a&#x3D;rtpmap:123 H264&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:123 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:123 transport-cc</span><br><span class="line">a&#x3D;rtcp-fb:123 ccm fir</span><br><span class="line">a&#x3D;rtcp-fb:123 nack</span><br><span class="line">a&#x3D;rtcp-fb:123 nack pli</span><br><span class="line">a&#x3D;fmtp:123 level-asymmetry-allowed&#x3D;1;packetization-mode&#x3D;1;profile-level-id&#x3D;64001f;x-google-start-bitrate&#x3D;10000;x-google-max-bitrate&#x3D;20000</span><br><span class="line">a&#x3D;rtpmap:118 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:118 apt&#x3D;123</span><br><span class="line">a&#x3D;rtpmap:114 red&#x2F;90000</span><br><span class="line">a&#x3D;rtpmap:115 rtx&#x2F;90000</span><br><span class="line">a&#x3D;fmtp:115 apt&#x3D;114</span><br><span class="line">a&#x3D;rtpmap:116 ulpfec&#x2F;90000</span><br><span class="line">a&#x3D;rtpmap:37 flexfec-03&#x2F;90000</span><br><span class="line">a&#x3D;rtcp-fb:37 goog-remb</span><br><span class="line">a&#x3D;rtcp-fb:37 transport-cc</span><br><span class="line">a&#x3D;fmtp:37 repair-window&#x3D;10000000</span><br><span class="line">m&#x3D;application 9 UDP&#x2F;DTLS&#x2F;SCTP webrtc-datachannel</span><br><span class="line">c&#x3D;IN IP4 0.0.0.0</span><br><span class="line">a&#x3D;ice-ufrag:R2GR</span><br><span class="line">a&#x3D;ice-pwd:jo3amy6z8ly9guu6xeyC0rwf</span><br><span class="line">a&#x3D;ice-options:trickle</span><br><span class="line">a&#x3D;fingerprint:sha-256 C0:7D:CF:1E:FC:D1:DD:CD:83:38:C7:5D:8F:0D:0E:0F:2A:F6:B0:97:49:FF:98:4A:10:07:5C:94:80:81:B1:2A</span><br><span class="line">a&#x3D;setup:actpass</span><br><span class="line">a&#x3D;mid:2</span><br><span class="line">a&#x3D;sctp-port:5000</span><br><span class="line">a&#x3D;max-message-size:262144</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是其他日志 目前前端只需要简单的js来实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;type&quot;: &quot;iceCandidate&quot;,</span><br><span class="line">    &quot;candidate&quot;: &#123;</span><br><span class="line">    &quot;candidate&quot;: &quot;candidate:2859681617 1 udp 2113937151 4ffffdaa-0101-4122-a4fb-b6c4c308d3e5.local 54016 typ host generation 0 ufrag R2GR network-cost 999&quot;,</span><br><span class="line">    &quot;sdpMid&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;sdpMLineIndex&quot;: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gis-coordinate</title>
      <link href="8707cf2d.html"/>
      <url>8707cf2d.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.geohey.com/-ge-xiao-you-xi-rang-ni-che-di-nong-dong-mo-qia-tuo-tou-ying/">https://blog.geohey.com/-ge-xiao-you-xi-rang-ni-che-di-nong-dong-mo-qia-tuo-tou-ying/</a><br>常见的坐标系和格式</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>启动的时候复制jar包里面的文件出来，给jvm调用</title>
      <link href="12016e7b.html"/>
      <url>12016e7b.html</url>
      
        <content type="html"><![CDATA[<h3 id="成功方式"><a href="#成功方式" class="headerlink" title="成功方式"></a>成功方式</h3><p>利用jarFile来实现 文件读取</p><p>参考链接 <a href="https://www.codenong.com/1463192/">https://www.codenong.com/1463192/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String destDirPath &#x3D; getCurrentDirPath();</span><br><span class="line">       &#x2F;&#x2F; 读取jar文件</span><br><span class="line">        URL resource &#x3D; this.getClass().getResource(&quot;&#x2F;PSTools&quot;);</span><br><span class="line">       JarURLConnection conn &#x3D; (JarURLConnection) resource.openConnection();</span><br><span class="line">       JarFile jarFile &#x3D; conn.getJarFile();</span><br><span class="line">       final Enumeration&lt;JarEntry&gt; entries &#x3D; jarFile.entries();</span><br><span class="line">       while (entries.hasMoreElements()) &#123;</span><br><span class="line">           final JarEntry entry &#x3D; entries.nextElement();</span><br><span class="line">           if (entry.getName().contains(&quot;.exe&quot;)) &#123;</span><br><span class="line">               System.out.println(&quot;File :&quot; + entry.getName());</span><br><span class="line">               JarEntry fileEntry &#x3D; jarFile.getJarEntry(entry.getName());</span><br><span class="line">               InputStream input &#x3D; jarFile.getInputStream(fileEntry);</span><br><span class="line">               FileUtils.copyInputStreamToFile(input,new File(destDirPath,entry.getName()));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h3><p>主要是 希望列出jar内的文件路径来实现读取 jar包内指定路径下的所有文件并复制出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File[] files = <span class="keyword">new</span> File(currentDirPath).listFiles();</span><br><span class="line">       String path = <span class="keyword">this</span>.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();</span><br><span class="line">       <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">           FileUtils.copyDirectory(file,<span class="keyword">new</span> File(path));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h3><p>这个是这参考这位博主的文章 <a href="https://yebukong.com/article/1102629952022507521.html">https://yebukong.com/article/1102629952022507521.html</a></p><p>没有生效 读取读取不到 jar包内 classpath 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*  ResourcePatternResolver resolver &#x3D; new PathMatchingResourcePatternResolver();</span><br><span class="line">       Resource[] resources &#x3D; resolver.getResources(&quot;static&#x2F;blog&#x2F;**&quot;);</span><br><span class="line">       for (Resource resource : resources) &#123;</span><br><span class="line">           FreeMarkerUtil.copyResourceToFile(resource, aPath,&quot;&#x2F;static&#x2F;blog&#x2F;&quot;);</span><br><span class="line">       &#125;*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="错误3"><a href="#错误3" class="headerlink" title="错误3"></a>错误3</h3><p>目前只能读到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String path &#x3D; new File(getClass().getResource(&quot;&quot;).getPath()).getParentFile().getParent());</span><br></pre></td></tr></table></figure><h3 id="错误4"><a href="#错误4" class="headerlink" title="错误4"></a>错误4</h3><p>目前读取不到jar 下面的文件夹和具体文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL[] urls &#x3D; &#123;this.getClass().getResource(&quot;&#x2F;PSTools&quot;) &#125;;</span><br><span class="line">       URLClassLoader cl &#x3D; URLClassLoader.newInstance(urls);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sso-auth2-jwt</title>
      <link href="8ad614a9.html"/>
      <url>8ad614a9.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.zoucz.com/blog/2020/01/06/83f05da0-307b-11ea-90b5-eb40e9720ed0/">https://www.zoucz.com/blog/2020/01/06/83f05da0-307b-11ea-90b5-eb40e9720ed0/</a></p><p><a href="https://www.cnblogs.com/cjsblog/p/10548022.html">https://www.cnblogs.com/cjsblog/p/10548022.html</a> 项目的实例地址<br>参考地址 </p><h2 id="关于单点登录-sso-的介绍"><a href="#关于单点登录-sso-的介绍" class="headerlink" title="关于单点登录(sso)的介绍"></a>关于单点登录(sso)的介绍</h2><p>单点登录是一处登录,处处皆可以访问,但是要注意登录只是一部分还应该考虑权限,通常是4A (account , audio, authtation,) 账号,审计,权限,授权</p><p>目前通常的协议是</p><table><thead><tr><th>实现逻辑</th><th></th><th></th></tr></thead><tbody><tr><td>LDPA(协议),windowOA</td><td></td><td></td></tr><tr><td>CAS</td><td></td><td></td></tr><tr><td>JWT</td><td></td><td></td></tr><tr><td>OAuth2</td><td></td><td></td></tr></tbody></table><p>上述方法不是互斥是 </p><h2 id="介绍实现单点登录的技术"><a href="#介绍实现单点登录的技术" class="headerlink" title="介绍实现单点登录的技术"></a>介绍实现单点登录的技术</h2><p>类似的认证的协议或者实现包括 ldpa,windowsoa ,jwt(使用它来生成口令)</p><ul><li><p>中心认证服务cas是利用认证服务器来专门做认证然后403来实现跳转</p></li><li><p>OAuth2 是利用应用注册+登录应用跳转+认证成功 通常大型互联网公司会提供自己的oauth的服务</p><p>类似于QQ,微博,GitHub,google 授权给第三方去登录</p></li><li><p>引入jar包来实现 每个服务中的接口来统一但是这有一个问题就是只限于java的服务</p></li></ul><h2 id="基于上述技术显示的方案和例子"><a href="#基于上述技术显示的方案和例子" class="headerlink" title="基于上述技术显示的方案和例子"></a>基于上述技术显示的方案和例子</h2><ul><li>cas实现的方案技术  <a href="https://www.apereo.org/projects/cas">https://www.apereo.org/projects/cas</a></li></ul><ul><li><p>oauth的实现</p><p><img src="../img/grants.min.svg" alt="img"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ue4_linux_runing</title>
      <link href="bec1def7.html"/>
      <url>bec1def7.html</url>
      
        <content type="html"><![CDATA[<h1 id="linux环境运行虚幻运行和二进制包"><a href="#linux环境运行虚幻运行和二进制包" class="headerlink" title="linux环境运行虚幻运行和二进制包"></a>linux环境运行虚幻运行和二进制包</h1><p>后续补充 2021-12-15</p><p><img src="../img/image-20211215101508814.png" alt="image-20211215101508814"></p><p><img src="../img/image-20211215101555150.png" alt="image-20211215101555150"></p><p><img src="../img/image-20211215101627944.png" alt="image-20211215101627944"></p><p>不知道服务器谁重新安装了驱动,导致在nvidia-smi 显示的驱动和版本对不上</p><h2 id="编译虚幻引擎"><a href="#编译虚幻引擎" class="headerlink" title="编译虚幻引擎"></a>编译虚幻引擎</h2><p>参考链接 <a href="https://docs.unrealengine.com/4.26/zh-CN/SharingAndReleasing/Linux/BeginnerLinuxDeveloper/SettingUpAnUnrealWorkflow/">https://docs.unrealengine.com/4.26/zh-CN/SharingAndReleasing/Linux/BeginnerLinuxDeveloper/SettingUpAnUnrealWorkflow/</a></p><ol><li><p>拉取虚幻引擎的代码这里需要在epic账号上关联github账号就可以看到prive权限</p><p><a href="https://github.com/EpicGames/UnrealEngine.git">https://github.com/EpicGames/UnrealEngine.git</a></p></li><li><p>然后拉取代码 这个过程需要持续40分钟</p></li><li><p>进入到目录中安装，编译，打包环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//设置生成项目文件所需的文件。</span><br><span class="line">./Setup.sh</span><br><span class="line">//从终端运行 GenerateProjectFiles.sh 以生成项目文件</span><br><span class="line">./GenerateProjectFiles.sh</span><br><span class="line">要构建项目，从终端运行 make。</span><br><span class="line">make </span><br><span class="line"></span><br><span class="line">//运行打包好的程序</span><br><span class="line">./Engine/Binaries/Linux/UE4Editor</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>运行后环境一直报错</p><p><img src="../img/image-20210719172623642.png" alt="image-20210719172623642"></p><p>这个时候需要的步骤的</p><p>网上很多都是用下面这个命令</p><p>sudo add-apt-repository ppa:graphics-drivers/ppa &amp;&amp; sudo apt update</p><blockquote><p>sudo apt install nvidia-graphics-drivers-396 nvidia-settings vulkan vulkan-utils</p></blockquote><p>hwinfo –gfxcard 查看显卡的信息</p><p>lspci | grep VGA 查询vga显示</p><p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html">参考链接1</a></p><p><a href="https://blog.csdn.net/qqcocobao/article/details/111467187?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162268344716780366554143%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=162268344716780366554143&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-15-111467187.first_rank_v2_pc_rank_v29&utm_term=PixelStreaming+&spm=1018.2226.3001.4187">参考链接2 </a></p><p>ubuntu-drivers  devices</p><p><img src="../img/image-20210719173533066.png" alt="image-20210719173533066"></p><p>apt-get install nvidia-driver-460</p><p>但会有问题 第一个就是 <strong>nvidia-graphics-drivers-396</strong>这个驱动找不到</p><p>实际上是需要执行 </p><p>需要等待nvidia-settings</p><p><img src="../img/image-20210719115454584.png" alt="image-20210719115454584"></p><p>不可点击</p><p>驱动安装成功后</p><p><img src="../img/image-20210719173846142.png" alt="image-20210719173846142"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>googlevoice保号，订阅广告短信和公共电话</title>
      <link href="18d2c52b.html"/>
      <url>18d2c52b.html</url>
      
        <content type="html"><![CDATA[<p>转载 <a href="https://www.80tm.com/2020/04/05/google-voice%E4%BF%9D%E5%8F%B7%E6%96%B9%E6%B3%95/">https://www.80tm.com/2020/04/05/google-voice%E4%BF%9D%E5%8F%B7%E6%96%B9%E6%B3%95/</a></p><p>1、订阅促销短信。</p><p>发送join 到 527365 ，然后要回复CC<br>先发 code 到 25666  然后回复 PROMO</p><p>也可以查询美国沃尔玛和好市多的促销短信订阅方式。</p><p>2.、打公共电话</p><p>有点儿公共资源。。。建议打个机器人试试就好了。</p><p>美国亚马逊免费客服热线：+1（888）280-4331</p><p>美国微软激活Windows免费电话：+1（888）571-2048</p><p>同时可查询其它美国大型公司的客服电话，注意IPhone是人工客服。</p><p>3、自定义电话</p><p>用IFTTT的定时服务定期拨打电话给你即可，这里推荐两个service</p><p>Keep Google Voice Active 一个月拨打一次，可自定义时间和日期（搜索Keep Gooogle Voice Active）</p><p>Alarm Clock Phone Call 强迫症福利，可自定义拨打频率、时间</p><p>4、30美金转成永久<br>这里看<br><a href="https://www.googlevoice.cn/buy-permanent-use/">https://www.googlevoice.cn/buy-permanent-use/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见的postgresql的函数</title>
      <link href="fd4a70cc.html"/>
      <url>fd4a70cc.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.postgres.cn/docs/10/functions-json.html">http://www.postgres.cn/docs/10/functions-json.html</a>   命令</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 通过 数据函数来操作 字符串属性</span><br><span class="line"><span class="keyword">SELECT</span> jsonb_set(<span class="string">&#x27;&#123;&quot;rtime&quot;:&quot;2021-6-15 08:59:44&quot;,&quot;objid&quot;:&quot;001&quot;,&quot;addition&quot;:&#123;&quot;x&quot;:114.5379008,&quot;y&quot;:30.4835323,&quot;z&quot;:0&#125;&#125;&#x27;</span>,<span class="string">&#x27;&#123;addition,z&#125;&#x27;</span>,<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">UPDATE</span> snspdw_position <span class="keyword">SET</span> <span class="keyword">content</span>= (jsonb_set(<span class="keyword">content</span>::jsonb,<span class="string">&#x27;&#123;directorytypecode&#125;&#x27;</span>,<span class="string">&#x27;&quot;947998009457774691&quot;&#x27;</span>::jsonb))</span><br><span class="line"></span><br><span class="line">//updata 字符串数据</span><br><span class="line"><span class="keyword">UPDATE</span> biz_object <span class="keyword">set</span> confjson = (jsonb_set(confjson::jsonb,<span class="string">&#x27;&#123;directorytypecode&#125;&#x27;</span>,<span class="string">&#x27;&quot;947998009457774691&quot;&#x27;</span>::jsonb)),directorytypecode = <span class="string">&#x27;947998009457774691&#x27;</span></span><br><span class="line"><span class="keyword">where</span> modelcode = <span class="string">&#x27;829609839767532682&#x27;</span> <span class="keyword">and</span> objectcode = <span class="string">&#x27;948118654552248419&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 根据 官网提供的实例测试</span><br><span class="line"><span class="keyword">SELECT</span> jsonb_set(<span class="string">&#x27;&#123;&quot;a&quot;:[null,&#123;&quot;b&quot;:[1,2]&#125;]&#125;&#x27;</span>, <span class="string">&#x27;&#123;a,1,b,1000&#125;&#x27;</span>, jsonb <span class="string">&#x27;3&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> jsonb_set(<span class="string">&#x27;&#123;&quot;rtime&quot;:&quot;2021-6-15 08:59:44&quot;,&quot;objid&quot;:&quot;001&quot;,&quot;addition&quot;:&#123;&quot;x&quot;:114.5379008,&quot;y&quot;:30.4835323,&quot;z&quot;:0&#125;&#125;&#x27;</span>, <span class="string">&#x27;$.payFundAcc.addition.z&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#123;<span class="string">&quot;tel&quot;</span>: <span class="number">13249872314</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;address&quot;</span>: <span class="string">&quot;Guangzhou&quot;</span>&#125;  json_set(<span class="keyword">data</span>,<span class="string">&quot;&#123;address&#125;&quot;</span>,<span class="string">&quot;Guangzhou&quot;</span>) </span><br><span class="line"> <span class="keyword">SELECT</span> jsonb_set(<span class="string">&#x27;&#123;&quot;tel&quot;: 13249872314, &quot;name&quot;: &quot;Mike&quot;, &quot;address&quot;: &quot;Guangzhou&quot;&#125;&#x27;</span>,<span class="string">&#x27;&#123;address&#125;&#x27;</span>,<span class="string">&#x27;&quot;hahah&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">SELECT</span> jsonb_set(<span class="string">&#x27;&#123;&quot;rtime&quot;:&quot;2021-6-15 08:59:44&quot;,&quot;objid&quot;:&quot;001&quot;,&quot;addition&quot;:&#123;&quot;x&quot;:114.5379008,&quot;y&quot;:30.4835323,&quot;z&quot;:0&#125;&#125;&#x27;</span>,<span class="string">&#x27;&#123;addition,z&#125;&#x27;</span>,<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="string">&#x27;&#123;&quot;tel&quot;: 13249872314, &quot;name&quot;: &quot;Mike&quot;, &quot;address&quot;: &quot;Guangzhou&quot;&#125;&#x27;</span>::jsonb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ue4安卓打包</title>
      <link href="54f728db.html"/>
      <url>54f728db.html</url>
      
        <content type="html"><![CDATA[<h2 id="ue4安卓预制环境"><a href="#ue4安卓预制环境" class="headerlink" title="ue4安卓预制环境"></a>ue4安卓预制环境</h2><p>硬件要求</p><h3 id="支持的最低GPU"><a href="#支持的最低GPU" class="headerlink" title="支持的最低GPU"></a>支持的最低GPU</h3><p>自4.25版起，以下GPU满足ES3.1的上述要求：</p><ul><li>Adreno 4xx</li><li>Mali T6xx和更高版本</li><li>Mali G71和更高版本</li><li>PowerVR Rogue G6100</li></ul><p>下载安装安装开发SDK</p><p><a href="https://developer.nvidia.com/codeworks-android-archive">https://developer.nvidia.com/codeworks-android-archive</a></p><p>选择 CodeWorks-1R7-windows_b166.exe 版本来实现</p><p><img src="../img/image-20210707111300230.png" alt="image-20210707111300230"></p><p>创建好的服务</p><p><img src="../img/image-20210707103723169.png" alt="image-20210707103723169"></p><p>配置安卓服务</p><p><img src="../img/image-20210707103812966.png" alt="image-20210707103812966"></p><p>设置层级为安卓</p><p><img src="../img/image-20210707103855145.png" alt="image-20210707103855145"></p><p>安装安卓sdk</p><p><img src="../img/image-20210707124854167.png" alt="image-20210707124854167"></p><p>ERROR: Android toolchain NDK r15c not supported; please use NDK r21 to NDK r23 (NDK r21b recommended)</p><p>UATHelper: Packaging (Android (ETC2)): &gt; Task :app:compileDebugJavaWithJavac FAILED<br>UATHelper: Packaging (Android (ETC2)): The following annotation processors are not incremental: compiler-1.1.1.jar (android.arch.lifecycle:compiler:1.1.1).<br>UATHelper: Packaging (Android (ETC2)): Make sure all annotation processors are incremental to improve your build speed.<br>UATHelper: Packaging (Android (ETC2)): Z:\app\src\main\java\com\epicgames\ue4\GameActivity.java:3531: ����: �Ҳ�������<br>UATHelper: Packaging (Android (ETC2)):             powerManager.addThermalStatusListener(getMainExecutor(), new PowerManager.OnThermalStatusChangedListener() {<br>UATHelper: Packaging (Android (ETC2)): 32 actionable tasks: 3 executed, 29 up-to-date<br>UATHelper: Packaging (Android (ETC2)):                                                                                      ^<br>UATHelper: Packaging (Android (ETC2)):   ����:   �� OnThermalStatusChangedListener<br>UATHelper: Packaging (Android (ETC2)):   λ��: �� PowerManager<br>UATHelper: Packaging (Android (ETC2)): ע: ĳЩ�����ļ�ʹ�û򸲸����ѹ�ʱ�� API��<br>UATHelper: Packaging (Android (ETC2)): ע: �й���ϸ��Ϣ, ��ʹ�� -Xlint:deprecation ���±��롣<br>UATHelper: Packaging (Android (ETC2)): 1 ������<br>UATHelper: Packaging (Android (ETC2)): FAILURE: Build failed with an exception.<br>UATHelper: Packaging (Android (ETC2)): * What went wrong:<br>UATHelper: Packaging (Android (ETC2)): Execution failed for task ‘:app:compileDebugJavaWithJavac’.<br>UATHelper: Packaging (Android (ETC2)): &gt; Compilation failed; see the compiler error output for details.<br>UATHelper: Packaging (Android (ETC2)): * Try:<br>UATHelper: Packaging (Android (ETC2)): Run with –stacktrace option to get the stack trace. Run with –info or –debug option to get more log output. Run with –scan to get full insights.<br>UATHelper: Packaging (Android (ETC2)): * Get more help at <a href="https://help.gradle.org/">https://help.gradle.org</a><br>UATHelper: Packaging (Android (ETC2)): BUILD FAILED in 8s</p><p>需要安装Android_studio同时安装sdk</p><p><img src="../img/image-20210707161238758.png" alt="image-20210707161238758"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sublime_shortcut</title>
      <link href="29702c78.html"/>
      <url>29702c78.html</url>
      
        <content type="html"><![CDATA[<p>link: <a href="https://blog.csdn.net/lol_IP/article/details/82416020">https://blog.csdn.net/lol_IP/article/details/82416020</a><br>第一步：选中全部内容</p><p>ctrl+A<br>第二步：进入待操作状态</p><p>ctrl+shift+L<br>第三步：通过←和→控制光标的位置</p><p>第四步：在光标处添加内容</p><p>注：也可以只对多行进行操作，对多行进行操作只需在第一步选择相应的行就可以了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python下载离线的网页以 gitbook上的某个页面</title>
      <link href="1a58ae58.html"/>
      <url>1a58ae58.html</url>
      
        <content type="html"><![CDATA[<p>先上代码 本代码有参考</p><p><a href="https://blog.csdn.net/gorquanwu/article/details/81739589">https://blog.csdn.net/gorquanwu/article/details/81739589</a> 这篇文章去实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: leek</span></span><br><span class="line"><span class="comment"># date：2021-6-23</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    用来爬取网站网页  gitbook 页面 离线下载到本地</span></span><br><span class="line"><span class="string">    实现功能：url深度抓取，保存每个页面的css、html、js等文件</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深度爬取当前页面子网站子网站</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_urls</span>(<span class="params">url, baseurl, urls</span>):</span></span><br><span class="line">    <span class="keyword">with</span> request.urlopen(url) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># link = bs(data).find_all(&#x27;a&#x27;)</span></span><br><span class="line">        link = bs(data).find(<span class="string">&quot;nav&quot;</span>).find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> link:</span><br><span class="line">            suffix = i.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            <span class="comment"># 设置排除写入的子连接</span></span><br><span class="line">            <span class="keyword">if</span> suffix == <span class="string">&#x27;#&#x27;</span> <span class="keyword">or</span> suffix == <span class="string">&#x27;#carousel-example-generic&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;javascript:void(0)&#x27;</span> <span class="keyword">in</span> suffix:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 构建urls</span></span><br><span class="line">                childurl = baseurl +<span class="string">&quot;/&quot;</span>+ suffix</span><br><span class="line">                <span class="keyword">if</span> childurl <span class="keyword">not</span> <span class="keyword">in</span> urls:</span><br><span class="line">                    urls.append(childurl)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个页面代码以及获取页面上的css，js，img路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_source</span>(<span class="params">url, path</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> request.urlopen(url) <span class="keyword">as</span> f:</span><br><span class="line">            html_source = f.read().decode()</span><br><span class="line">            <span class="comment"># 添加时间截以区分文件夹名字</span></span><br><span class="line">            timeStr = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))</span><br><span class="line">            pattertitile = <span class="string">&#x27;&lt;title&gt;(.*?)&lt;/title&gt;&#x27;</span></span><br><span class="line">            patternimg = <span class="string">&#x27;&lt;img src=&quot;(.*?)&quot;&#x27;</span></span><br><span class="line">            titleStr = re.<span class="built_in">compile</span>(pattertitile, re.S).findall(html_source)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;|&#x27;</span> <span class="keyword">in</span> titleStr:</span><br><span class="line">                title = (titleStr.split(<span class="string">&quot;|&quot;</span>)[<span class="number">1</span>]).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>] + timeStr</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                title = titleStr + timeStr</span><br><span class="line"></span><br><span class="line">            path11 = path + <span class="string">&#x27;/&#x27;</span> + title</span><br><span class="line">            arrayurl= url.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            htmlFile = path</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="built_in">len</span>(arrayurl)):</span><br><span class="line">                htmlFile  +=(<span class="string">&quot;/&quot;</span>+arrayurl[x])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取css，js，img地址</span></span><br><span class="line">            imgHref = re.<span class="built_in">compile</span>(patternimg, re.S).findall(html_source)</span><br><span class="line">            <span class="comment"># 创建文件路径下的父节点</span></span><br><span class="line">            os.makedirs(os.path.abspath(htmlFile + os.path.sep + <span class="string">&quot;..&quot;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 读取并保存html</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(htmlFile, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(html_source)</span><br><span class="line">            print(htmlFile+ <span class="string">&quot;文件保存成功&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(url + <span class="string">&quot;保存html文件时报错&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存js文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_css_js</span>(<span class="params">path</span>):</span></span><br><span class="line">        url = <span class="string">&quot;http://sdk.g-bim.cn&quot;</span></span><br><span class="line">        filename = path</span><br><span class="line">        <span class="keyword">with</span> request.urlopen(url) <span class="keyword">as</span> total_html:</span><br><span class="line">            html_source = total_html.read().decode()</span><br><span class="line">            jsHref = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;script src=&quot;(.*?)&quot;&#x27;</span>, re.S).findall(html_source)</span><br><span class="line">            cssHref = re.<span class="built_in">compile</span>( <span class="string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;(.*?)&quot;&#x27;</span>, re.S).findall(html_source)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> jsHref :</span><br><span class="line">               <span class="keyword">try</span>:</span><br><span class="line">                   <span class="keyword">with</span> request.urlopen(url+<span class="string">&quot;/&quot;</span>+j) <span class="keyword">as</span> ww:</span><br><span class="line">                       js_source = ww.read().decode()</span><br><span class="line">                       <span class="comment"># filename =(path+&#x27;\\&#x27;+ j).replace(&#x27;/&#x27;,&#x27;\\&#x27;) os.getcwd()</span></span><br><span class="line">                       filename =path+j</span><br><span class="line">                       os.makedirs(os.path.abspath(filename+os.path.sep+<span class="string">&quot;..&quot;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">                       <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                           f.write(js_source)</span><br><span class="line">                       print(j.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>] + <span class="string">&quot; js文件保存成功&quot;</span>)</span><br><span class="line">                       time.sleep(<span class="number">1</span>)</span><br><span class="line">               <span class="keyword">except</span>:</span><br><span class="line">                   print(<span class="string">&quot;该&quot;</span> + j.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>] + <span class="string">&quot; js文件无法下载&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> cssHref:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">with</span> request.urlopen(url+<span class="string">&quot;/&quot;</span>+k) <span class="keyword">as</span> vv:</span><br><span class="line">                        filename = path+ k</span><br><span class="line">                        js_source = vv.read().decode()</span><br><span class="line">                        os.makedirs(os.path.abspath(filename + os.path.sep + <span class="string">&quot;..&quot;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">                        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                            f.write(js_source)</span><br><span class="line">                        print(k.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>] + <span class="string">&quot; js文件保存成功&quot;</span>)</span><br><span class="line">                        time.sleep(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="string">&quot;该&quot;</span> + k.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>] + <span class="string">&quot; js文件无法下载&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存img文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_img</span>(<span class="params">href, path</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(href)):</span><br><span class="line">        url = <span class="string">&quot;http://sdk.g-bim.cn&quot;</span> + href[i]</span><br><span class="line">        filename = path + <span class="string">&#x27;\\&#x27;</span> + href[i].split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> request.urlopen(url) <span class="keyword">as</span> w:</span><br><span class="line">                img_source = w.read()</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(img_source)</span><br><span class="line">                print(href[i].split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>] + <span class="string">&quot; 图像文件保存成功&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">&quot;该&quot;</span> + href[i].split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">-1</span>] + <span class="string">&quot; 图像无法下载&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 抓取网址</span></span><br><span class="line">    url = <span class="string">&#x27;http://sdk.g-bim.cn&#x27;</span></span><br><span class="line">    <span class="comment"># 相对路径地址</span></span><br><span class="line">    baseurl = <span class="string">&#x27;http://sdk.g-bim.cn&#x27;</span></span><br><span class="line">    <span class="comment"># 文件保存位置</span></span><br><span class="line">    basedir = <span class="string">r&#x27;C:\Users\Administrator\Desktop\HTML_bak&#x27;</span></span><br><span class="line">    urls = []</span><br><span class="line">    <span class="comment"># 获取所有地址</span></span><br><span class="line">    get_urls(url, baseurl, urls)</span><br><span class="line">    <span class="comment"># save_css_js(r&#x27;../html_bak/&#x27;)</span></span><br><span class="line">    <span class="comment"># 获取代码</span></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> urls:</span><br><span class="line">        get_source(u,<span class="string">r&#x27;../html_bak&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>期间有些问题</p><h3 id="读取文件是出现UnicodeDecodeError"><a href="#读取文件是出现UnicodeDecodeError" class="headerlink" title="读取文件是出现UnicodeDecodeError"></a>读取文件是出现UnicodeDecodeError</h3><p>UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0x89 in position 14: illegal</p><p>open(‘order.log’,’r’, encoding=’UTF-8’) 尽量指定u8目前HTML的编码一般都是它避免乱码</p><h3 id="在python环境下window和Linux分隔符的区别"><a href="#在python环境下window和Linux分隔符的区别" class="headerlink" title="在python环境下window和Linux分隔符的区别"></a>在python环境下window和Linux分隔符的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path&#x3D;r&#39;..&#x2F;html_bak&#x2F;&#39;</span><br><span class="line"> with open(path, &#39;w&#39;, encoding&#x3D;&#39;UTF-8&#39;) as f:</span><br><span class="line"> </span><br><span class="line"> \\windows平台但是 加上r后 自动加 不用管全部用&#x2F;即可 在打开文件时会自动管理</span><br><span class="line"> https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_29831163&#x2F;article&#x2F;details&#x2F;106263729</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="读取指定文件路径下父文件夹如果不存在着直接新建"><a href="#读取指定文件路径下父文件夹如果不存在着直接新建" class="headerlink" title="读取指定文件路径下父文件夹如果不存在着直接新建"></a>读取指定文件路径下父文件夹如果不存在着直接新建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.makedirs(os.path.abspath(filename+os.path.sep+&quot;..&quot;), exist_ok&#x3D;True)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>geomesa-input-error</title>
      <link href="null.html"/>
      <url>null.html</url>
      
        <content type="html"><![CDATA[<p>导入失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">ERROR java.lang.NoSuchMethodError: org.locationtech.jts.geom.Polygon.getExteriorRing()Lorg&#x2F;locationtech&#x2F;jts&#x2F;geom&#x2F;LineString;</span><br><span class="line">java.util.concurrent.ExecutionException: java.lang.NoSuchMethodError: org.locationtech.jts.geom.Polygon.getExteriorRing()Lorg&#x2F;locationtech&#x2F;jts&#x2F;geom&#x2F;LineString;</span><br><span class="line">at java.util.concurrent.FutureTask.report(FutureTask.java:122)</span><br><span class="line">at java.util.concurrent.FutureTask.get(FutureTask.java:192)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$$anonfun$runIngest$1.apply(LocalConverterIngest.scala:183)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$$anonfun$runIngest$1.apply(LocalConverterIngest.scala:183)</span><br><span class="line">at scala.collection.immutable.List.foreach(List.scala:381)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest.runIngest(LocalConverterIngest.scala:183)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.AbstractConverterIngest.run(AbstractConverterIngest.scala:41)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.IngestCommand$$anonfun$execute$2.apply(IngestCommand.scala:106)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.IngestCommand$$anonfun$execute$2.apply(IngestCommand.scala:105)</span><br><span class="line">at scala.Option.foreach(Option.scala:257)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.IngestCommand$class.execute(IngestCommand.scala:105)</span><br><span class="line">at org.locationtech.geomesa.hbase.tools.HBaseRunner$$anon$2.execute(HBaseRunner.scala:32)</span><br><span class="line">at org.locationtech.geomesa.tools.Runner$class.main(Runner.scala:30)</span><br><span class="line">at org.locationtech.geomesa.hbase.tools.HBaseRunner$.main(HBaseRunner.scala:17)</span><br><span class="line">at org.locationtech.geomesa.hbase.tools.HBaseRunner.main(HBaseRunner.scala)</span><br><span class="line">Caused by: java.lang.NoSuchMethodError: org.locationtech.jts.geom.Polygon.getExteriorRing()Lorg&#x2F;locationtech&#x2F;jts&#x2F;geom&#x2F;LineString;</span><br><span class="line">at org.locationtech.geomesa.features.serialization.WkbSerialization$class.writePolygon(WkbSerialization.scala:121)</span><br><span class="line">at org.locationtech.geomesa.features.serialization.WkbSerialization$class.serializeWkb(WkbSerialization.scala:45)</span><br><span class="line">at org.locationtech.geomesa.features.kryo.serialization.KryoGeometrySerialization$.serializeWkb(KryoGeometrySerialization.scala:14)</span><br><span class="line">at org.locationtech.geomesa.features.serialization.WkbSerialization$class.writeGeometryCollection(WkbSerialization.scala:176)</span><br><span class="line">at org.locationtech.geomesa.features.serialization.WkbSerialization$class.serializeWkb(WkbSerialization.scala:48)</span><br><span class="line">at org.locationtech.geomesa.features.kryo.serialization.KryoGeometrySerialization$.serializeWkb(KryoGeometrySerialization.scala:14)</span><br><span class="line">at org.locationtech.geomesa.features.kryo.impl.KryoFeatureSerialization$KryoGeometryWkbWriter$.apply(KryoFeatureSerialization.scala:228)</span><br><span class="line">at org.locationtech.geomesa.features.kryo.impl.KryoFeatureSerialization$class.writeFeature(KryoFeatureSerialization.scala:70)</span><br><span class="line">at org.locationtech.geomesa.features.kryo.impl.KryoFeatureSerialization$class.serialize(KryoFeatureSerialization.scala:42)</span><br><span class="line">at org.locationtech.geomesa.features.kryo.KryoFeatureSerializer$MutableActiveSerializer.serialize(KryoFeatureSerializer.scala:75)</span><br><span class="line">at org.locationtech.geomesa.index.api.WritableFeature$FeatureLevelWritableFeature$$anonfun$values$1$$anonfun$apply$1.apply(WritableFeature.scala:154)</span><br><span class="line">at org.locationtech.geomesa.index.api.WritableFeature$FeatureLevelWritableFeature$$anonfun$values$1$$anonfun$apply$1.apply(WritableFeature.scala:154)</span><br><span class="line">at org.locationtech.geomesa.index.api.package$KeyValue.value$lzycompute(package.scala:184)</span><br><span class="line">at org.locationtech.geomesa.index.api.package$KeyValue.value(package.scala:184)</span><br><span class="line">at org.locationtech.geomesa.hbase.data.HBaseIndexAdapter$HBaseIndexWriter$$anonfun$write$1.apply(HBaseIndexAdapter.scala:614)</span><br><span class="line">at org.locationtech.geomesa.hbase.data.HBaseIndexAdapter$HBaseIndexWriter$$anonfun$write$1.apply(HBaseIndexAdapter.scala:612)</span><br><span class="line">at scala.collection.Iterator$class.foreach(Iterator.scala:742)</span><br><span class="line">at scala.collection.AbstractIterator.foreach(Iterator.scala:1194)</span><br><span class="line">at scala.collection.IterableLike$class.foreach(IterableLike.scala:72)</span><br><span class="line">at scala.collection.AbstractIterable.foreach(Iterable.scala:54)</span><br><span class="line">at org.locationtech.geomesa.hbase.data.HBaseIndexAdapter$HBaseIndexWriter.write(HBaseIndexAdapter.scala:612)</span><br><span class="line">at org.locationtech.geomesa.index.api.IndexAdapter$BaseIndexWriter.write(IndexAdapter.scala:149)</span><br><span class="line">at org.locationtech.geomesa.index.geotools.GeoMesaFeatureWriter$class.writeFeature(GeoMesaFeatureWriter.scala:52)</span><br><span class="line">at org.locationtech.geomesa.index.geotools.GeoMesaFeatureWriter$TableFeatureWriter.writeFeature(GeoMesaFeatureWriter.scala:141)</span><br><span class="line">at org.locationtech.geomesa.index.geotools.GeoMesaFeatureWriter$GeoMesaAppendFeatureWriter$class.write(GeoMesaFeatureWriter.scala:227)</span><br><span class="line">at org.locationtech.geomesa.index.geotools.GeoMesaFeatureWriter$$anon$3.write(GeoMesaFeatureWriter.scala:108)</span><br><span class="line">at org.locationtech.geomesa.utils.geotools.FeatureUtils$.write(FeatureUtils.scala:141)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$4$$anonfun$apply$5$$anonfun$apply$6.apply(LocalConverterIngest.scala:117)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$4$$anonfun$apply$5$$anonfun$apply$6.apply(LocalConverterIngest.scala:115)</span><br><span class="line">at scala.collection.Iterator$class.foreach(Iterator.scala:742)</span><br><span class="line">at org.locationtech.geomesa.utils.collection.CloseableIterator$FlatMapCloseableIterator.foreach(CloseableIterator.scala:133)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$4$$anonfun$apply$5.apply(LocalConverterIngest.scala:115)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$4$$anonfun$apply$5.apply(LocalConverterIngest.scala:109)</span><br><span class="line">at org.locationtech.geomesa.utils.io.CloseablePool$CommonsPoolPool.borrow(CloseablePool.scala:68)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$4.apply(LocalConverterIngest.scala:109)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$4.apply(LocalConverterIngest.scala:108)</span><br><span class="line">at org.locationtech.geomesa.utils.io.package$WithClose$.apply(package.scala:64)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2.apply(LocalConverterIngest.scala:108)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1$$anonfun$apply$1$$anonfun$apply$2.apply(LocalConverterIngest.scala:106)</span><br><span class="line">at scala.collection.Iterator$class.foreach(Iterator.scala:742)</span><br><span class="line">at org.locationtech.geomesa.utils.collection.CloseableIterator$CloseableSingleIterator.foreach(CloseableIterator.scala:86)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1$$anonfun$apply$1.apply(LocalConverterIngest.scala:106)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1$$anonfun$apply$1.apply(LocalConverterIngest.scala:105)</span><br><span class="line">at org.locationtech.geomesa.utils.io.package$WithClose$.apply(package.scala:64)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1.apply(LocalConverterIngest.scala:105)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1$$anonfun$run$1.apply(LocalConverterIngest.scala:102)</span><br><span class="line">at org.locationtech.geomesa.utils.io.CloseablePool$CommonsPoolPool.borrow(CloseablePool.scala:68)</span><br><span class="line">at org.locationtech.geomesa.tools.ingest.LocalConverterIngest$LocalIngestWorker$1.run(LocalConverterIngest.scala:102)</span><br><span class="line">at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个是由于 lib下面的几个包出现问题包括 jts ,geotool的包有问题 这边操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@node-kubeadm-250 geomesa-hbase_2.11-3.1.0]# bin&#x2F;geomesa-hbase ingest --catalog china --feature-name china_1 --input-format shp &quot;&#x2F;usr&#x2F;local&#x2F;geomesa&#x2F;china.shp&quot;</span><br><span class="line">INFO  No converter defined - will attempt to detect schema from input files</span><br><span class="line">INFO  Inferred converter:</span><br><span class="line">&#123;</span><br><span class="line">    &quot;fields&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot; : &quot;the_geom&quot;,</span><br><span class="line">            &quot;transform&quot; : &quot;$1&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot; : &quot;adcode&quot;,</span><br><span class="line">            &quot;transform&quot; : &quot;$2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot; : &quot;name&quot;,</span><br><span class="line">            &quot;transform&quot; : &quot;$3&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot; : &quot;childrenNu&quot;,</span><br><span class="line">            &quot;transform&quot; : &quot;$4&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot; : &quot;level&quot;,</span><br><span class="line">            &quot;transform&quot; : &quot;$5&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot; : &quot;subFeature&quot;,</span><br><span class="line">            &quot;transform&quot; : &quot;$6&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot; : &quot;adchar&quot;,</span><br><span class="line">            &quot;transform&quot; : &quot;$7&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;id-field&quot; : &quot;$0&quot;,</span><br><span class="line">    &quot;options&quot; : &#123;</span><br><span class="line">        &quot;encoding&quot; : &quot;UTF-8&quot;,</span><br><span class="line">        &quot;error-mode&quot; : &quot;skip-bad-records&quot;,</span><br><span class="line">        &quot;parse-mode&quot; : &quot;incremental&quot;,</span><br><span class="line">        &quot;validators&quot; : [</span><br><span class="line">            &quot;index&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;type&quot; : &quot;shp&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Use inferred converter (y&#x2F;n)? y</span><br><span class="line">Persist this converter for future use (y&#x2F;n)? y</span><br><span class="line">INFO  Added import in reference.conf and saved inferred converter to &#x2F;usr&#x2F;local&#x2F;geomesa&#x2F;geomesa-hbase_2.11-3.1.0&#x2F;conf&#x2F;china_1_4.conf</span><br><span class="line">INFO  In future commands, the converter may be invoked with &#39;--converter china_1&#39;</span><br><span class="line">INFO  Schema &#39;china_1&#39; exists</span><br><span class="line">INFO  Running ingestion in local mode</span><br><span class="line">INFO  Ingesting 1 file with 1 thread</span><br><span class="line">[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 100% complete 35 ingested 0 failed in 00:00:01</span><br><span class="line">INFO  Local ingestion complete in 00:00:02</span><br><span class="line">INFO  Ingested 35 features with no failures for file: &#x2F;usr&#x2F;local&#x2F;geomesa&#x2F;china.shp</span><br></pre></td></tr></table></figure><p>解决方法</p><p>在geotool中依赖jts这个类但是 </p><p>gt-main-23.3.jar 里面使用的是jts-17.jar</p><p>gt-main-23.0.jar 里面使用的是jts-16.jar</p><p>所以需要降级 使用gt-main-23.0.jar 否则会报错</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>netty的简单上手使用</title>
      <link href="6e6bd3bb.html"/>
      <url>6e6bd3bb.html</url>
      
        <content type="html"><![CDATA[<p>使用netty来简单写个demo，熟悉语法和常见的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.netty&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;netty-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.1.49.Final&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITDragonAIOClient</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer PORT = <span class="number">8888</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String IP_ADDRESS = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> AsynchronousSocketChannel asynSocketChannel ;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ITDragonAIOClient</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        asynSocketChannel = AsynchronousSocketChannel.open();  <span class="comment">// 打开通道  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        asynSocketChannel.connect(<span class="keyword">new</span> InetSocketAddress(IP_ADDRESS, PORT));  <span class="comment">// 创建连接 和NIO一样  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String request)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            asynSocketChannel.write(ByteBuffer.wrap(request.getBytes())).get();  </span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);  </span><br><span class="line">            asynSocketChannel.read(byteBuffer).get();  </span><br><span class="line">            byteBuffer.flip();  </span><br><span class="line">            <span class="keyword">byte</span>[] respByte = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuffer.remaining()];  </span><br><span class="line">            byteBuffer.get(respByte); <span class="comment">// 将缓冲区的数据放入到 byte数组中  </span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(respByte,<span class="string">&quot;utf-8&quot;</span>).trim());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            ITDragonAIOClient myClient = <span class="keyword">new</span> ITDragonAIOClient();  </span><br><span class="line">            myClient.connect();  </span><br><span class="line">            <span class="keyword">new</span> Thread(myClient, <span class="string">&quot;myClient&quot;</span>).start(); </span><br><span class="line">            String []operators = &#123;<span class="string">&quot;+&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">            Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());  </span><br><span class="line">            String expression = random.nextInt(<span class="number">10</span>)+operators[random.nextInt(<span class="number">4</span>)]+(random.nextInt(<span class="number">10</span>)+<span class="number">1</span>);</span><br><span class="line">            myClient.write(expression);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AIO, 也叫 NIO2.0 是一种异步非阻塞的通信方式</span></span><br><span class="line"><span class="comment"> * AIO 引入了异步通道的概念 AsynchronousServerSocketChannel和AsynchronousSocketChannel 其read和write方法返回值类型是Future对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITDragonAIOServer</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> ExecutorService executorService;          <span class="comment">// 线程池</span></span><br><span class="line">    <span class="keyword">private</span> AsynchronousChannelGroup threadGroup;      <span class="comment">// 通道组</span></span><br><span class="line">    <span class="keyword">public</span> AsynchronousServerSocketChannel asynServerSocketChannel;  <span class="comment">// 服务器通道 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Integer port)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 1.创建一个缓存池  </span></span><br><span class="line">            executorService = Executors.newCachedThreadPool();  </span><br><span class="line">            <span class="comment">// 2.创建通道组  </span></span><br><span class="line">            threadGroup = AsynchronousChannelGroup.withCachedThreadPool(executorService, <span class="number">1</span>);  </span><br><span class="line">            <span class="comment">// 3.创建服务器通道  </span></span><br><span class="line">            asynServerSocketChannel = AsynchronousServerSocketChannel.open(threadGroup);  </span><br><span class="line">            <span class="comment">// 4.进行绑定  </span></span><br><span class="line">            asynServerSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(port));  </span><br><span class="line">            System.out.println(<span class="string">&quot;server start , port : &quot;</span> + port);  </span><br><span class="line">            <span class="comment">// 5.等待客户端请求  </span></span><br><span class="line">            asynServerSocketChannel.accept(<span class="keyword">this</span>, <span class="keyword">new</span> ITDragonAIOServerHandler());  </span><br><span class="line">            <span class="comment">// 一直阻塞 不让服务器停止，真实环境是在tomcat下运行，所以不需要这行代码  </span></span><br><span class="line">            Thread.sleep(Integer.MAX_VALUE);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        ITDragonAIOServer server = <span class="keyword">new</span> ITDragonAIOServer();  </span><br><span class="line">        server.start(<span class="number">8888</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>serverhandler:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITDragonAIOServerHandler</span> <span class="keyword">implements</span> <span class="title">CompletionHandler</span>&lt;<span class="title">AsynchronousSocketChannel</span>, <span class="title">ITDragonAIOServer</span>&gt; </span>&#123;  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Integer BUFFER_SIZE = <span class="number">1024</span>;  </span><br><span class="line">  <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(AsynchronousSocketChannel asynSocketChannel, ITDragonAIOServer attachment)</span> </span>&#123;  </span><br><span class="line">      <span class="comment">// 保证多个客户端都可以阻塞  </span></span><br><span class="line">      attachment.asynServerSocketChannel.accept(attachment, <span class="keyword">this</span>);  </span><br><span class="line">      read(asynSocketChannel);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment">//读取数据  </span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">final</span> AsynchronousSocketChannel asynSocketChannel)</span> </span>&#123;  </span><br><span class="line">      ByteBuffer byteBuffer = ByteBuffer.allocate(BUFFER_SIZE);  </span><br><span class="line">      asynSocketChannel.read(byteBuffer, byteBuffer, <span class="keyword">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;  </span><br><span class="line">          <span class="meta">@Override</span>  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer resultSize, ByteBuffer attachment)</span> </span>&#123;  </span><br><span class="line">              <span class="comment">//进行读取之后,重置标识位  </span></span><br><span class="line">              attachment.flip();  </span><br><span class="line">              <span class="comment">//获取读取的数据  </span></span><br><span class="line">              String resultData = <span class="keyword">new</span> String(attachment.array()).trim();  </span><br><span class="line">              System.out.println(<span class="string">&quot;Server -&gt; &quot;</span> + <span class="string">&quot;收到客户端的数据信息为:&quot;</span> + resultData);  </span><br><span class="line"><span class="comment">//              String response = resultData + &quot; = &quot; + CalculatorUtil.cal(resultData);</span></span><br><span class="line">              String response = resultData + <span class="string">&quot; = &quot;</span> ;</span><br><span class="line">              write(asynSocketChannel, response);</span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="meta">@Override</span>  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;  </span><br><span class="line">              exc.printStackTrace();  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment">// 写入数据</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(AsynchronousSocketChannel asynSocketChannel, String response)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">try</span> &#123;  </span><br><span class="line">          <span class="comment">// 把数据写入到缓冲区中  </span></span><br><span class="line">          ByteBuffer buf = ByteBuffer.allocate(BUFFER_SIZE);  </span><br><span class="line">          buf.put(response.getBytes());  </span><br><span class="line">          buf.flip();  </span><br><span class="line">          <span class="comment">// 在从缓冲区写入到通道中  </span></span><br><span class="line">          asynSocketChannel.write(buf).get();  </span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">          e.printStackTrace();  </span><br><span class="line">      &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;  </span><br><span class="line">          e.printStackTrace();  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="meta">@Override</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ITDragonAIOServer attachment)</span> </span>&#123;  </span><br><span class="line">      exc.printStackTrace();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用青龙并添加jd的脚本</title>
      <link href="8cefd92d.html"/>
      <url>8cefd92d.html</url>
      
        <content type="html"><![CDATA[<p>找到一个jd_script 主要是京东的脚本可以操作，在加入 </p><p>fetchMetadata: sill mapToRegistry uri <a href="https://registry.npm.taobao.org/got">https://registry.npm.taobao.org/got</a></p><p>JS_TOOL执行 jd panelon后执行如果报错 缺 /root/jd/config</p><p>那就新建 /root/jd/config 文件夹 然后将 /root/JS_TOOL/sample中的文件复制到/root/jd/config </p><p>最后来就可以新建</p><p>tips:</p><p>期间 npm  install 会出现</p><p>fetchMetadata: verb afterAdd /root/.npm/ee-first/1.1.1/package/package.json</p><p>这个是下载的过程比较耗时可能10分钟。</p><p>预先要求的条件</p><p>docker的环境</p><ol><li><code>npm config set registry http://registry.npmjs.org/ --global</code></li><li><code>npm cache clear --force</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash jd.sh panelon</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hadoop_windows</title>
      <link href="77e0f92d.html"/>
      <url>77e0f92d.html</url>
      
        <content type="html"><![CDATA[<p>Unable to find native drivers in HADOOP_HOME. Please, refer to Hadoop Wiki for more details.</p><p><a href="https://cwiki.apache.org/confluence/display/HADOOP2/WindowsProblems">link</a></p><p>配置环境变量 包括java和hadoop的注意一点尽量不要有空格否则在<br>java -version<br>hadoop version 的时候回报错 java_home  incorrect </p><p><img src="../img/image-20210526145438386.png" alt="image-20210526145438386"></p><p>我这边没看到10 的版本就先使用了最近的</p><p><img src="../img/image-20210526145752361.png" alt="image-20210526145752361"></p><p><img src="../img/image-20210526145319973.png" alt="image-20210526145319973"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>idea2020.1.3</title>
      <link href="47eff7d.html"/>
      <url>47eff7d.html</url>
      
        <content type="html"><![CDATA[<p>最新版的idea激活已经变了该为到期后接着试用,这个方法对于我这种激活到底的人非常不友好还是提供下载的链接</p><h2 id="介绍适用于idea2020-2-1-3及以下"><a href="#介绍适用于idea2020-2-1-3及以下" class="headerlink" title="介绍适用于idea2020.2.1.3及以下"></a>介绍适用于idea2020.2.1.3及以下</h2><p>本部分参考这篇文章</p><p><a href="https://www.jiweichengzhu.com/article/7f4f3c9d095743908db6ec2648a59b3e">https://www.jiweichengzhu.com/article/7f4f3c9d095743908db6ec2648a59b3e</a></p><p>链接: <a href="https://pan.baidu.com/s/1nC060_Rv-_7tzRc1Be-dmg">https://pan.baidu.com/s/1nC060_Rv-_7tzRc1Be-dmg</a> 提取码: htpi </p><h3 id="jetbrains-agent这个要注意版本"><a href="#jetbrains-agent这个要注意版本" class="headerlink" title="jetbrains-agent这个要注意版本"></a>jetbrains-agent这个要注意版本</h3><p>我用的最近的 ChangeLogs.txt是</p><blockquote><p>v3.2.1 build date: 2020-04-11<br>    * 什么都没做。</p><p>v3.2.0 build date: 2020-04-10</p><ul><li>修复激活弹Activation code界面问题。<ul><li>现在离线模式已经不需要了。</li></ul></li></ul></blockquote><ul><li>lcoalidea初始化后保存的文件,如果要重置的话直接删除这个文件即可</li></ul><p><img src="../img/image-20210415215941559.png" alt="image-20210415215941559"></p><ul><li>roaming 下面有配置文件可以注意以下</li></ul><p><img src="../img/image-20210415220333316.png" alt="image-20210415220333316"></p><p>还有就是要注意jetbrains-agent.jar 版本一定要对应上 否则会出现 <strong>key is invalid</strong>,是同样的key </p><p><img src="../img/image-20210415220517692.png" alt="image-20210415220517692"></p><p>大概就是这样</p><h2 id="ide-eval-resetter-2-1-6来激活"><a href="#ide-eval-resetter-2-1-6来激活" class="headerlink" title="ide-eval-resetter-2.1.6来激活"></a>ide-eval-resetter-2.1.6来激活</h2><p>下面只提供下载链接不提供具体步骤</p><p>链接: <a href="https://pan.baidu.com/s/1VWogd64sbzyagSx_vvKYyg">https://pan.baidu.com/s/1VWogd64sbzyagSx_vvKYyg</a> 提取码: zjga 复制这段内容后打开百度网盘手机App，操作更方便哦</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令参考手册</title>
      <link href="c66a3331.html"/>
      <url>c66a3331.html</url>
      
        <content type="html"><![CDATA[<p>转载地址 : <a href="https://github.com/xjh22222228/linux-manual/stargazers">https://github.com/xjh22222228/linux-manual/stargazers</a></p><p><strong>Linux 常用命令参考手册</strong></p><p>日常运维的最佳拍档 x 99</p><p><a href="https://github.com/xjh22222228/linux-manual/stargazers"><img src="https://img.shields.io/github/stars/xjh22222228/linux-manual" alt="Stars Badge"></a> <img src="https://img.shields.io/github/license/xjh22222228/linux-manual" alt="img"></p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>文件操作<ul><li><a href="#head">head</a></li><li><a href="#tail">tail</a></li><li><a href="#ls">ls</a></li><li><a href="#pwd">pwd</a></li><li><a href="#wc">wc</a></li><li><a href="#find">find</a></li><li><a href="#mkdir">mkdir</a></li><li><a href="#mktemp">mktemp</a></li><li><a href="#chattr">chattr</a></li><li><a href="#more">more</a></li><li><a href="#paste">paste</a></li><li><a href="#stat">stat</a></li><li><a href="#grep">grep</a></li><li><a href="#touch">touch</a></li><li><a href="#cd">cd</a></li><li><a href="#rm">rm</a></li><li><a href="#rmdir">rmdir</a></li><li><a href="#cp">cp</a></li><li><a href="#cat">cat</a></li><li><a href="#mv">mv</a></li><li><a href="#locate">locate</a></li><li><a href="#open">open</a></li><li><a href="#source">source</a></li><li><a href="#tree">tree</a></li><li><a href="#ln">ln</a></li><li><a href="#file">file</a></li></ul></li><li>系统管理<ul><li><a href="#top">top</a></li><li><a href="#nohup">nohup</a></li><li><a href="#watch">watch</a></li><li><a href="#ping">ping</a></li><li><a href="#which">which</a></li><li><a href="#shutdown">shutdown</a></li><li><a href="#reboot">reboot</a></li><li><a href="#ps">ps</a></li><li><a href="#uptime">uptime</a></li><li><a href="#crontab">crontab</a></li><li><a href="#uname">uname</a></li><li><a href="#ifconfig">ifconfig</a></li><li><a href="#whereis">whereis</a></li><li><a href="#kill">kill</a></li><li><a href="#killall">killall</a></li><li><a href="#chmod">chmod</a></li><li><a href="#lsof">lsof</a></li><li><a href="#netstat">netstat</a></li><li><a href="#chown">chown</a></li><li><a href="#systemctl">systemctl</a></li><li><a href="#service">service</a></li><li><a href="#free">free</a></li><li><a href="#jobs">jobs</a></li><li><a href="#type">type</a></li><li><a href="#printenv">printenv</a></li><li><a href="#set">set</a></li><li><a href="#export">export</a></li><li><a href="#unset">unset</a></li><li><a href="#alias">alias</a></li><li><a href="#time">time</a></li><li><a href="#clear">clear</a></li></ul></li><li>用户管理<ul><li><a href="#useradd">useradd</a></li><li><a href="#userdel">userdel</a></li><li><a href="#passwd">passwd</a></li><li><a href="#chpasswd">chpasswd</a></li><li><a href="#chsh">chsh</a></li><li><a href="#users">users</a></li><li><a href="#who">who</a></li><li><a href="#w">w</a></li><li><a href="#last">last</a></li><li><a href="#su">su</a></li><li><a href="#whoami">whoami</a></li></ul></li><li>压缩、解压<ul><li><a href="#zip">zip</a></li><li><a href="#unzip">unzip</a></li><li><a href="#gzip">gzip</a></li><li><a href="#bzip2">bzip2</a></li><li><a href="#tar">tar</a></li></ul></li><li>加解密<ul><li><a href="#md5sum">md5sum</a></li><li><a href="#base64">base64</a></li></ul></li><li>网络<ul><li><a href="#wget">wget</a></li><li><a href="#curl">curl</a></li><li><a href="#scp">scp</a></li></ul></li><li>磁盘<ul><li><a href="#df">df</a></li><li><a href="#du">du</a></li></ul></li><li>包管理<ul><li><a href="#yum">yum</a></li><li><a href="#apt-get">apt-get</a></li></ul></li><li>其他<ul><li><a href="#%E7%9B%AE%E5%BD%95%E5%90%8D%E7%A7%B0%E5%90%AB%E4%B9%89">目录名称含义</a></li><li><a href="#%E9%87%8D%E5%AE%9A%E5%90%91%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA">重定向输入和输出</a></li><li><a href="#%E7%AE%A1%E9%81%93">管道</a></li><li><a href="#echo">echo</a></li><li><a href="#date">date</a></li><li><a href="#man">man</a></li><li><a href="#sleep">sleep</a></li><li><a href="#history">history</a></li><li><a href="#xargs">xargs</a></li><li><a href="#cal">cal</a></li><li><a href="#expr">expr</a></li><li><a href="#bc">bc</a></li><li><a href="#timeout">timeout</a></li><li><a href="#exit">exit</a></li><li><a href="#vim">vim</a></li><li><a href="#basename">basename</a></li><li><a href="#read">read</a></li><li><a href="#tee">tee</a></li></ul></li></ul><h2 id="目录名称含义"><a href="#目录名称含义" class="headerlink" title="目录名称含义"></a>目录名称含义</h2><table><thead><tr><th>目录名</th><th>描述</th></tr></thead><tbody><tr><td>/</td><td>虚拟目录的根目录，通常不会在这里存储文件</td></tr><tr><td>/bin</td><td>二进制目录，存放许多用户级的GNU工具</td></tr><tr><td>/boot</td><td>启动目录，存放启动文件</td></tr><tr><td>/dev</td><td>设备目录，Linux在这里创建设备节点</td></tr><tr><td>/etc</td><td>系统配置文件目录</td></tr><tr><td>/home</td><td>主目录，Linux在这里创建用户目录</td></tr><tr><td>/lib</td><td>库目录，存放系统和应用程序的库文件</td></tr><tr><td>/media</td><td>媒体目录，可移动媒体设备的常用挂载点</td></tr><tr><td>/mnt</td><td>挂载目录，另一个可移动媒体设备的常用挂载点</td></tr><tr><td>/opt</td><td>可选目录，常用于存放第三方软件包和数据文件</td></tr><tr><td>/proc</td><td>进程目录，存放现有硬件及当期进程的相关信息</td></tr><tr><td>/root</td><td>ROOT用户的主目录</td></tr><tr><td>/sbin</td><td>系统二进制目录，存放许多GNU管理员级工具</td></tr><tr><td>/run</td><td>运行目录，存放系统运作时的运行时数据</td></tr><tr><td>/srv</td><td>服务目录，存放本地服务的相关文件</td></tr><tr><td>/sys</td><td>系统目录，存放系统硬件信息的相关文件</td></tr><tr><td>/tmp</td><td>临时目录，可以在该目录中创建和删除临时工作文件</td></tr><tr><td>/usr</td><td>用户二进制目录，大量用户级的GNU工具和数据文件都存储在这里</td></tr><tr><td>/var</td><td>可变目录，用以存放经常变化的文件，比如日志文件</td></tr></tbody></table><h2 id="重定向输入和输出"><a href="#重定向输入和输出" class="headerlink" title="重定向输入和输出"></a>重定向输入和输出</h2><h4 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h4><p>将命令输出的内容发送到一个文件中叫做 <code>输出重定向</code>。 使用 <code>&gt;</code> 大于号。</p><p>下面展示了几个例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; log.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、</span></span><br><span class="line">ps -ef &gt; ps.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、</span></span><br><span class="line"><span class="built_in">history</span> &gt; a.txt</span><br></pre></td></tr></table></figure><p>有时不想覆盖文件而是追加内容，比如日志，可以使用 <code>&gt;&gt;</code> 2个大于号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;H&quot;</span> &gt;&gt; log.txt</span><br></pre></td></tr></table></figure><h4 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h4><p>和输出重定向正好相反，将文件的内容定向到命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计input.txt文本行数</span></span><br><span class="line">wc -l &lt; input.txt <span class="comment"># 等价于 wc -l input.txt</span></span><br></pre></td></tr></table></figure><p>还有一种叫内联重定向，比较少见，但也挺有用。 使用2个 <code>&lt;&lt;</code> 小于号。然后跟着一个开头标记和结尾标记。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计行数，输出2</span></span><br><span class="line">wc -l &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">第一行</span></span><br><span class="line"><span class="string">第二行</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>开头标记必须和结尾标记一致，标记名称可以是任何字符串。</p><p>下面这个也是可以的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出2</span></span><br><span class="line">wc -l &lt;&lt; <span class="string">Hello</span></span><br><span class="line"><span class="string">第一行</span></span><br><span class="line"><span class="string">第二行</span></span><br><span class="line"><span class="string">Hello</span></span><br></pre></td></tr></table></figure><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>将一个命令的输出作为另一个命令的输入称为管道。 管道用 <code>|</code> 符号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 ls 输出内容作为 wc 输入</span></span><br><span class="line">ls | wc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行一个脚本，这没有什么意义，只是一个例子</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;./bash.sh&quot;</span> | bash</span><br></pre></td></tr></table></figure><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>显示文件的头部内容，如果不指定参数默认显示10行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示前10行内容</span></span><br><span class="line">head README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者显示多个文件</span></span><br><span class="line">head README.md package.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 指定显示行数</span></span><br><span class="line">head -n 100 README.md</span><br></pre></td></tr></table></figure><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>显示文件的末尾部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认显示末尾10行</span></span><br><span class="line">tail README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 指定显示末尾20行</span></span><br><span class="line">tail -n 20 README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时监听README.md文件变化</span></span><br><span class="line">tail -f README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据文件名进行追踪, 如果删除后创建相同的文件名会继续追踪</span></span><br><span class="line">tail -F README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件的最后10个字符</span></span><br><span class="line">tail -c README.md</span><br></pre></td></tr></table></figure><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>实时查看系统执行中的程序, top 命令跟 <code>ps</code> 命令相似，但它是实时的。</p><p>默认情况下 <code>top</code> 命令启动时会按照 <code>%CPU</code> 值对进程排序。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>PID</td><td>进程的ID</td></tr><tr><td>USER</td><td>进程的优先级</td></tr><tr><td>PR</td><td>进程的优先级</td></tr><tr><td>NI</td><td>进程的谦让度值</td></tr><tr><td>VIRT</td><td>进程占用的虚拟内存总量</td></tr><tr><td>RES</td><td>进程占用的物理内存总量</td></tr><tr><td>SHR</td><td>进程和其他进程共享的内存总量</td></tr><tr><td>S</td><td>进程的状态（D=可中断的休眠状态，R在运行状态，S休眠状态，T跟踪状态或停止状态，Z=僵化状态）</td></tr><tr><td>%CPU</td><td>进程使用的CPU时间比例</td></tr><tr><td>%MEM</td><td>进程使用的内存占可用内存的比例</td></tr><tr><td>TIME+</td><td>自进程启动到目前为止的CPU时间总量</td></tr><tr><td>COMMAND</td><td>进程所对应的命令行名称，也就是启动的程序名</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实时监听进程变化</span></span><br><span class="line"><span class="comment">#  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                               </span></span><br><span class="line"><span class="comment">#    1 root      20   0  125124   3612   2428 S  0.0  0.2   0:04.88 systemd</span></span><br><span class="line">top</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示2条</span></span><br><span class="line">top -n 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定的进程信息</span></span><br><span class="line">top -pid &lt;pid&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程所有的线程</span></span><br><span class="line">top -H -p &lt;pid&gt;</span><br></pre></td></tr></table></figure><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p>显示当前目录下的文件和目录，输出的列表是按字母排序 (某些发行版可能不一样)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前目录列表</span></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示目录列表的详细信息</span></span><br><span class="line">ls -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定目录</span></span><br><span class="line">ls ./src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示目录列表详细信息和大小</span></span><br><span class="line">ls -lh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有文件包括隐藏文件</span></span><br><span class="line">ls -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># -F 可以显示类型，用以区分是文件还是目录</span></span><br><span class="line">ls -F <span class="comment"># 后缀为 ”/“ 代表是目录，”*“ 为可执行文件，没有则为文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤文件列表, * 代表0个或多个字符， ? 代表一个字符</span></span><br><span class="line">ls javasc*</span><br><span class="line"></span><br><span class="line"><span class="comment"># -i 查看inode编号, 每一个文件或目录都有一个唯一的编号，这个数字由内核分配给文件系统中的每一个对象</span></span><br><span class="line">ls -i</span><br></pre></td></tr></table></figure><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>显示当前工作目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>统计文件的行数、字数、字节数, 常见用于统计代码行数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计字节数</span></span><br><span class="line">wc -c README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计行数</span></span><br><span class="line">wc -l README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计字数</span></span><br><span class="line">wc -w README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计字符数</span></span><br><span class="line">wc -m README.md</span><br></pre></td></tr></table></figure><h2 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h2><p>显示自身的用户名称, 此命令等价于 <code>id -un</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% whoami <span class="comment"># xiejiahe</span></span><br></pre></td></tr></table></figure><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>设置命令别名，用于简化较长的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有已设置的别名</span></span><br><span class="line"><span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有别名</span></span><br><span class="line"><span class="built_in">unalias</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置别名</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>用于从网络下载文件到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载某个文件</span></span><br><span class="line">wget https://www.xiejiahe.com/robots.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定下载后文件名</span></span><br><span class="line">wget -O ro.txt https://www.xiejiahe.com/robots.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 断开续传，一般用于大文件，防止重新下载</span></span><br><span class="line">wget -c https://www.xiejiahe.com/robots.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用后台下载, 对于大文件非常有用</span></span><br><span class="line">wget -b https://www.xiejiahe.com/robots.txt</span><br><span class="line">tail -f wget-log   <span class="comment"># 查看后台下载进度</span></span><br></pre></td></tr></table></figure><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>查看已挂载的磁盘使用情况。</p><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Filesystem</td><td>设备的设备位置文件</td></tr><tr><td>Size</td><td>能容纳多少个1024字节大小的块</td></tr><tr><td>Used</td><td>已用了多少个1024字节大小的块</td></tr><tr><td>Avail</td><td>还有多少个1024字节大小的块可用</td></tr><tr><td>Use%</td><td>已用空间所占的比例</td></tr><tr><td>Mounted on</td><td>设备挂载到了哪个挂载点上</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示每个有数据的已挂载文件系统</span></span><br><span class="line"><span class="comment"># Filesystem     1K-blocks    Used Available Use% Mounted on</span></span><br><span class="line"><span class="comment"># /dev/vda1       41151808 1853208  37185168   5% /</span></span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化大小，以kb以上进行显示</span></span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看全部文件系统信息</span></span><br><span class="line">df -a</span><br></pre></td></tr></table></figure><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p>显示文件或目录所占用的磁盘空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认显示当前目录的所有文件、目录、和子目录的磁盘使用情况</span></span><br><span class="line">du</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定文件所占用磁盘空间</span></span><br><span class="line">du README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定目录所占用磁盘空间, 输出的最后一行是累计总大小</span></span><br><span class="line">du src</span><br><span class="line"></span><br><span class="line"><span class="comment"># -h 以K，M，G为单位，提高信息的可读性。</span></span><br><span class="line">du -h src  <span class="comment"># 20K    src</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 只显示总大小，列出最后累计的值</span></span><br><span class="line">du -s src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前所有已列出文件总大小</span></span><br><span class="line">du -c</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>指定某个目录下查找文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录递归搜索文件名为 README.md 文件</span></span><br><span class="line">find . -name README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过通配符进行查找, 必须用引号括着, 这里查找所有后缀为 .md 文件</span></span><br><span class="line">find . -name <span class="string">&quot;*.md&quot;</span></span><br><span class="line">find . -iname <span class="string">&quot;*.md&quot;</span>  <span class="comment"># 忽略文件大小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除文件，只要加 ! , 排除掉所有 .md 后缀的文件</span></span><br><span class="line">find . ! -name <span class="string">&quot;*.md&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据类型进行过滤搜索</span></span><br><span class="line"><span class="comment"># f 普通文件, l 符号连接</span></span><br><span class="line"><span class="comment"># d 目录, c 字符设备</span></span><br><span class="line"><span class="comment"># b 块设备, s 套接字, p Fifo</span></span><br><span class="line">find . -<span class="built_in">type</span> f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限定目录递归深度</span></span><br><span class="line">find . -maxdepth 3  <span class="comment"># 最大为3个目录</span></span><br><span class="line">find . -mindepth 3  <span class="comment"># 最小为3个目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找文件大小大于 25k 文件 </span></span><br><span class="line">find /root -size +25k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找10天前文件 -mtime 修改时间、 -ctime 创建时间、 -atime 访问时间</span></span><br><span class="line">find /root -mtime +10</span><br></pre></td></tr></table></figure><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录下创建 temp 目录</span></span><br><span class="line">mkdir temp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多层目录</span></span><br><span class="line">mkdir -p temp/temp2/temp3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于权限创建</span></span><br><span class="line">mkdir -m 777 temp</span><br></pre></td></tr></table></figure><h2 id="mktemp"><a href="#mktemp" class="headerlink" title="mktemp"></a>mktemp</h2><p>创建临时目录或文件，Linux使用 <code>/tmp</code> 目录来存放不需要永久保留的文件，大多数Linux发行版配置了系统在启动时自动删除 <code>/tmp</code> 目录的所有文件。</p><p>默认情况下， <code>mktemp</code> 会在本地目录中创建一个文件，只要指定一个文件名模板就行，模板可以包含任意文本文件名，在文件名末尾加上<strong>6</strong>个X就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建本地临时文件, 会在当前目录下创建一个叫 log.XXXXXX, XXXXXX是一个随机字符码，保证文件名在目录中是唯一的。</span></span><br><span class="line">mktemp log.XXXXXX  <span class="comment"># log.J3awfb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -t, 在 /tmp 目录创建临时文件, 返回绝对路径地址</span></span><br><span class="line">mktemp -t log.XXXXXX <span class="comment"># /tmp/log.G5g9dX</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -d 创建临时目录, 这样就能用该目录进行任何需要的操作了，比如创建其他的临时文件</span></span><br><span class="line">mktemp -d dir.XXXXXX</span><br></pre></td></tr></table></figure><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><p>创建一个空文件, 如果文件存在只会修改文件的创建时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch README.md</span><br></pre></td></tr></table></figure><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>远程连接服务器工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单的连接, 省略了端口号,默认为22</span></span><br><span class="line">ssh root@192.168.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定端口号连接</span></span><br><span class="line">ssh -p 23 root@192.168.0.0</span><br></pre></td></tr></table></figure><h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><p>程序以挂起方式运行, 不会影响终端交互。</p><p>因为程序会以后台的方式运行，所以标准输出不会显示在屏幕上, 默认情况下会在当前目录生成一个叫 <code>nohup.out</code> 文件，里面包含了标准输出内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如运行一个 node.js 程序</span></span><br><span class="line">nohup node main.js</span><br><span class="line">nohup node main.js &amp; <span class="comment"># 可以在最后加 &amp; ，表示后台模式，让出CLI以供其他使用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录会出现 nohup.out 文件，里面包含了 Hello World</span></span><br><span class="line">nohuo <span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>进入指定目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入当前 src 目录</span></span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到上一次目录</span></span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> ../../..   <span class="comment"># 返回多级</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入家目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span>  <span class="comment"># 或者不带任何参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上一个命令的参数作为cd参数使用</span></span><br><span class="line"><span class="built_in">cd</span> !$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模糊匹配目录，有时目录名很长一个一个敲效率就很低</span></span><br><span class="line"><span class="comment"># * 代表0个或多个字符， ? 代表一个字符</span></span><br><span class="line"><span class="built_in">cd</span> javasc*</span><br></pre></td></tr></table></figure><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>输出字符串或者变量</p><p>注: 一般情况下字符串不必加双引号, 如果包含转义字符就必须要加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在终端输出 Hello World</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">echo</span> Hello World    <span class="comment"># 也可以不加双引号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello\nWorld&quot;</span> <span class="comment"># 必须加双引号, 否则无法转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印系统环境变量，如果变量不存在输出为空</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt; 输出重定向，将内容输出到文件中</span></span><br><span class="line"><span class="built_in">echo</span> Hello World &gt; 1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 不换行, 默认情况下echo 是占一整行</span></span><br><span class="line"><span class="built_in">echo</span> -n Hello; <span class="built_in">echo</span> World</span><br></pre></td></tr></table></figure><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>测试某条命令执行所需花费时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time 后面跟着要测试的命令</span></span><br><span class="line"><span class="comment"># 输出:  0.02s user 0.01s system 0% cpu 6.233 total</span></span><br><span class="line">time curl https://github.com/xjh22222228/linux-manual</span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><p>用于清除当前终端所有信息，本质上只是向后翻了一页，往上滚动还能看到之前的操作信息</p><p>注：笔者用得比较多的是 <code>command + K</code> 可以完全清除终端所有操作信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure><h1 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h1><p>删除指定目录或文件</p><p>注: 使用此命令需要非常小心, 一但删除无法恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除当前 1.txt 文件</span></span><br><span class="line">rm 1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># -i 删除前询问是否真的要删除，因为一旦删除无法恢复</span></span><br><span class="line">rm -i README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这条命令比较常用, 强制删除目录或文件</span></span><br><span class="line"><span class="comment"># -r 如果是目录递归删除, -f 强制删除 不发出任何警告</span></span><br><span class="line">rm -rf ./src</span><br></pre></td></tr></table></figure><h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>删除指定空目录</p><p>注：<code>rmdir</code> 实际上用得并不多，因为不是很灵活，基本上使用 <code>rm</code> 代替</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除当前 temp 空目录, 如果不是空目录会发出警告</span></span><br><span class="line">rmdir temp</span><br><span class="line"></span><br><span class="line"><span class="comment"># -p 参数可以删除多层空目录, 发现temp3是空目录删除掉，然后接着往父级找如果还是空目录继续删除...</span></span><br><span class="line">rmdir -p temp1/temp2/temp3</span><br><span class="line"></span><br><span class="line"><span class="comment"># -i 删除前询问确认删除</span></span><br><span class="line">rmdir -i temp</span><br></pre></td></tr></table></figure><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>通常用于监听1个命令的运行结果、定时执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每5秒执行一次 tail 命令, 如果不指定-n 默认为2秒</span></span><br><span class="line">watch -n 5 <span class="string">&quot;tail README.md&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -d 高亮显示变化内容</span></span><br><span class="line">watch -n 5 -d <span class="string">&quot;tail README.md&quot;</span></span><br></pre></td></tr></table></figure><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>测试目标地址是否可连接、延迟度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 github.com 连通性, 按 ctrl + C 停止 </span></span><br><span class="line">ping github.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># ping 5次后断开</span></span><br><span class="line">ping -c 5 xiejiahe.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每5秒ping 一次</span></span><br><span class="line">ping -i 5 xiejiahe.com</span><br></pre></td></tr></table></figure><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>拷贝文件或目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将当前 README.md 文件拷贝到上一层</span></span><br><span class="line">cp ./README.md ../README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 将原文件属性一同拷贝</span></span><br><span class="line">cp -a ./README.md ../README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># -r 拷贝目录</span></span><br><span class="line">cp -r home ../home</span><br><span class="line"></span><br><span class="line"><span class="comment"># -i 如果目标文件存在会询问用户是否需要覆盖</span></span><br><span class="line">cp -i README.md README.md</span><br></pre></td></tr></table></figure><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><p>查找某个命令存储在哪个位置, 输出绝对路径, <code>which</code>会在环境变量 <code>$PATH</code> 设置的目录里去查找。</p><p>注: 可以通过 <code>echo $PATH</code> 查看设置的目录.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> top  <span class="comment"># /usr/bin/top</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找pwd发现会找不到，因为 pwd 是bash的内置命令</span></span><br><span class="line"><span class="built_in">which</span> <span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印多个命令</span></span><br><span class="line"><span class="built_in">which</span> ls vi</span><br></pre></td></tr></table></figure><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>查看指定整个文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 README.md 文件所有内容</span></span><br><span class="line">cat README.md</span><br><span class="line">cat README.md README2.md  <span class="comment"># 或者一次性显示多个文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 每一行显示行号</span></span><br><span class="line">cat -n README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># -b 只给有内容的行显示行号</span></span><br><span class="line">cat -b README.md</span><br></pre></td></tr></table></figure><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p><code>mv</code> 有2个用途：</p><ul><li>将文件或目录移动到另一个位置</li><li>将文件或目录重命名</li></ul><p>注：实际上 <code>mv</code> 是用来移动文件或目录，只不过有类似重命名的功能而已。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 README.md 重命名为 README-2.md, 如果 README-2.md 存在会直接覆盖。</span></span><br><span class="line">mv README.md README-2.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 README.md 移动到上一层目录</span></span><br><span class="line">mv README.md ../README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># -i 交互式操作，如果目标文件存在则进行询问是否覆盖</span></span><br><span class="line">mv -i README.md ../README.md</span><br></pre></td></tr></table></figure><h2 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h2><p>显示当前日历</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cal</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">     June 2020        </span><br><span class="line">Su Mo Tu We Th Fr Sa  </span><br><span class="line">    1  2  3  4  5  6  </span><br><span class="line"> 7  8  9 10 11 12 13  </span><br><span class="line">14 15 16 17 18 19 20  </span><br><span class="line">21 22 23 24 25 26 27  </span><br><span class="line">28 29 30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示临近3个月, 只能是3个月</span></span><br><span class="line">cal -3</span><br></pre></td></tr></table></figure><h2 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h2><p>执行数学运算，expr 命令比较鸡助，通常在 shell 脚本当中看到。但在shell脚本也不建议用。</p><p>expr 后面每个表达式都要有一个空格，否则是不合法。</p><p>注：expr 只支持整数运算，这是一个限制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3</span></span><br><span class="line">expr 1 + 2</span><br><span class="line">expr 1+2 <span class="comment"># 这样是不行的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在浮点数计算时会丢失小数， 这里等于 2</span></span><br><span class="line">expr 5 / 2</span><br></pre></td></tr></table></figure><h2 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h2><p>bash计算器，用来执行数学运算， 与 <code>expr</code> 不同，因为 <code>expr</code> 命令不支持浮点数运算，所以可以用 <code>bc</code>命令替代。</p><p>bash计算器实际上是一种编程语言，它允许在命令行中输入浮点表达式，然后解释并计算该表达式。最后返回结果。</p><p><code>bc</code> 大多数情况下是在 shell 脚本中使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 敲 bc 然后回车进入交互式， 输入 quit 退出</span></span><br><span class="line">bc</span><br><span class="line"></span><br><span class="line">scale=2  <span class="comment"># 保留几位小数，默认是0</span></span><br><span class="line">5 / 2</span><br><span class="line"><span class="comment"># 输出 2.50</span></span><br></pre></td></tr></table></figure><p><strong>在 shell 脚本使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配合管道</span></span><br><span class="line">n=$(<span class="built_in">echo</span> <span class="string">&quot;scale=2; 5 / 2&quot;</span> | bc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$n</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种, 内联重定向，解决第一种表达式过长问题</span></span><br><span class="line">n1=$(</span><br><span class="line">bc &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">scale=2</span></span><br><span class="line"><span class="string">5 / 2</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$n1</span></span><br></pre></td></tr></table></figure><h2 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h2><p>在指定时长范围内执行命令，并在规定时间结束后停止进程。</p><p>意思是在规定时间内必须完成，否则停止进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟超过3秒, 因为sleep阻塞5秒所以在3秒内无法完成，则停止进程</span></span><br><span class="line">time 3 sleep 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如打包, 1分钟内要打包完成，否则停止进程</span></span><br><span class="line">time 60 npm run build</span><br></pre></td></tr></table></figure><h2 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h2><p>退出当前登录Shell, 可以使用快捷键退出 <code>Ctrl + D</code>。</p><p>等价命令 <code>logout</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>vi 编辑器是Unix系统最初的编辑器，在GNU项目将vi编辑器移植到开源世界时，他们决定对其做一些改进，开发人员也就将它重命名为 <code>vi improved</code>。</p><p><code>vim</code>(vi improved) 是 <code>vi</code> 的升级版，所以只需要知道 <code>vim</code> 即可， 是一个非强大的文本编辑器，学习成本不低，需要长期使用才能记牢每一个指令操作。</p><p>这是一份速查表，使用的时候注意区分大小写。</p><p>vim 的快捷键指令非常多，只列出一些实用性便于记忆。</p><p><strong>打开文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最简单的打开文件方式, 如果文件不存在会开辟一段新的缓冲区域来编辑。</span></span><br><span class="line">vim README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件并定位到最后一行</span></span><br><span class="line">vim + README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件并定位到某一行, +号后面指定行数</span></span><br><span class="line">vim +100 README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开多个文件</span></span><br><span class="line"><span class="comment"># :bn 切换下一个文件</span></span><br><span class="line"><span class="comment"># :bp 切换上一个文件</span></span><br><span class="line">vim 1.txt 2.txt</span><br></pre></td></tr></table></figure><p><strong>光标定位插入</strong></p><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>在当前光标位置插入</td></tr><tr><td>I</td><td>在当前光标行第一个字符插入</td></tr><tr><td>a</td><td>在当前光标后一个字符插入</td></tr><tr><td>A</td><td>光标到当前行最后一个字符插入</td></tr><tr><td>H</td><td>光标到第一行第一个字符 (是以终端大小来计算，不是原文本的第一行)</td></tr><tr><td>M</td><td>光标到中间第一行 (是以终端大小来计算)</td></tr><tr><td>L</td><td>光标到最后行第一个字符 (是以终端大小来计算)</td></tr><tr><td>E</td><td>将光标定位到右边的空格</td></tr><tr><td>o</td><td>在当前光标下一行插入</td></tr><tr><td>O</td><td>在当前光标上一行插入</td></tr></tbody></table><p><strong>撤销</strong> | 快捷键 | 描述 | | ———- |—————– | | u | 撤销上一次编辑内容 | | U | 撤销当前光标整行内容 | | Ctrl + r | 还原初始文件状态 |</p><p><strong>删除</strong> | 快捷键 | 描述 | | ———- |—————– | | dd | 删除当前行 | | dj | 删除上一行 | | dk | 删除下一行 | | :1,$d | 删除所有行 |</p><p><strong>拷贝/粘贴</strong> | 快捷键 | 描述 | | ———- |—————– | | yy | 拷贝当前行 | | p | 在当前光标粘贴上一次拷贝的内容 |</p><p><strong>搜索</strong></p><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>:/text</td><td>从上往下查找 text，按 <code>n</code> 向下搜索, 按 <code>N</code> 想前搜索</td></tr><tr><td>:?text</td><td>从下往上查找 text，按 <code>n</code> 向下搜索, 按 <code>N</code> 想前搜索</td></tr></tbody></table><p><strong>替换</strong></p><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>:s/old/new</td><td>找到old第一次出现的地方并用new来替换</td></tr><tr><td>:s/old/new/g</td><td>找到所有old出现的地方并用new来替换(当前屏幕)</td></tr><tr><td>:%s/old/new/g</td><td>替换整个文件中的所有old</td></tr><tr><td>:%s/old/new/gc</td><td>替换整个文件中的所有old，但在每次出现时提示</td></tr><tr><td>:n,ms/old/new/g</td><td>替换行号n和m之间的所有old</td></tr></tbody></table><p><strong>退出</strong></p><p>先按 <code>ESC</code> 键然后再操作后面的快捷键。</p><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>:w</td><td>写入但不退出</td></tr><tr><td>:q!</td><td>退出但不保存</td></tr><tr><td>:wq</td><td>保存写入内容并退出</td></tr></tbody></table><p><strong>设置</strong></p><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>:set ignorecase</td><td>忽略大小写查找</td></tr><tr><td>:set noignorecase</td><td>不忽略大小写查找</td></tr><tr><td>:set hlsearch</td><td>高亮搜索结果</td></tr><tr><td>:set nohlsearch</td><td>关闭高亮搜索显示</td></tr><tr><td>:set hlsearch</td><td>高亮搜索结果</td></tr><tr><td>:set number</td><td>显示行号</td></tr><tr><td>:set nonumber</td><td>不显示行号</td></tr></tbody></table><h2 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h2><p>打印目录或者文件的基本名称。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出：index.html</span></span><br><span class="line">basename /www/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 www</span></span><br><span class="line">basename /www/</span><br></pre></td></tr></table></figure><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><p><code>read</code> 命令从标准输入（键盘）或另一个文件描述符中接收输入。 通常用在Shell脚本, 在收到输入后，read命令会将数据存放进一个变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最简单用法, data 是自定义变量名，用户输入内容并回车后结束</span></span><br><span class="line"><span class="built_in">read</span> data <span class="comment"># echo $data  会打印用户输入的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -p 指定提示符</span></span><br><span class="line"><span class="built_in">read</span> -p 确认要删除吗？ data</span><br><span class="line"></span><br><span class="line"><span class="comment"># -t 指定超时（秒）</span></span><br><span class="line"><span class="built_in">read</span> -t 5 -p 确认要删除吗？ data</span><br><span class="line"></span><br><span class="line"><span class="comment"># —s 隐藏用户输入，比如密码，实际上是将文本颜色设置成背景颜色一样</span></span><br><span class="line"><span class="built_in">read</span> -s -p <span class="string">&quot;请输入您的密码：&quot;</span> data</span><br></pre></td></tr></table></figure><h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h2><p>tee命令相当于管道的一个T型接头，它将从<code>STDIN标准输入</code>过来的数据同时发往两处，一处是<code>STDOUT</code>，另一处是tee命令指定的文件名。</p><p>tee 命令通常用于 shell 脚本当中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># date内容打印到屏幕上并且重定向输出到 date.txt 文件中</span></span><br><span class="line">date | tee date.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 以追加方式，默认情况下会覆盖输出文件内容</span></span><br><span class="line">date | tee -a date.txt</span><br></pre></td></tr></table></figure><p><code>tee</code> 命令只是一个语法糖，如果不用 <code>tee</code> 可以这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、将date结果保存到 var 变量中</span></span><br><span class="line">var=$(date)</span><br><span class="line"><span class="comment"># 2、将结果打印到屏幕上 STDOUT</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="comment"># 3、将结果重定向到文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span> &gt; date.txt</span><br></pre></td></tr></table></figure><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>显示用户最近登录信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">last <span class="comment"># root     pts/0        183.58.247.64    Sun Jan  5 13:57 - 14:28  (00:30)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定显示条目数</span></span><br><span class="line">last -n 1</span><br></pre></td></tr></table></figure><h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p>将系统关机或重启操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 立即重启系统</span></span><br><span class="line">shutdown -r now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统并切断电源</span></span><br><span class="line">shutdown -h now <span class="comment"># 立即关机, 实际上调用 init 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把前一个关机或重启取消掉</span></span><br><span class="line">shutdown -c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定一个时间关机,  &quot;&amp;&quot; 符号表示后台模式，让出CLI</span></span><br><span class="line">shutdown -h 05:33 &amp;</span><br><span class="line">shutdown +5 <span class="string">&quot;5分钟后关机&quot;</span> <span class="comment"># 5分钟后关机，同时送出警告信息给登入用户：</span></span><br></pre></td></tr></table></figure><h2 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h2><p>有点类似 <code>shutdown</code> 命令， 用于重新启动系统。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># -f 强制重启</span></span><br><span class="line">reboot -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于模拟重新启动系统，不会真实重启，数据会写入 /var/log/wtmp </span></span><br><span class="line">reboot -w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在重新启动之前关闭所有网络界面</span></span><br><span class="line">reboot -i</span><br></pre></td></tr></table></figure><h2 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h2><p>打印系统信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不带任何参数打印当前操作系统内核名称</span></span><br><span class="line">uname <span class="comment"># Linux , 等价于 uname -s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印系统所有信息</span></span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># -r 打印系统版本 , 如果次版本号都是偶数，说明是一个稳定版</span></span><br><span class="line">uname -r <span class="comment"># 3.10.0-514.26.2.el7.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印网络节点主机名称</span></span><br><span class="line">uname -n <span class="comment"># Yin.local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印处理器名称</span></span><br><span class="line">uname -p <span class="comment"># i386</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印主机的硬件架构名称</span></span><br><span class="line">uname -m <span class="comment"># x86_64</span></span><br></pre></td></tr></table></figure><h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h2><p>配置或显示系统网卡的网络参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有网络参数信息</span></span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置网卡IP地址</span></span><br><span class="line">ifconfig eth0 192.168.1.111</span><br></pre></td></tr></table></figure><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><p>显示当前所有用户登录信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前登录系统的用户</span></span><br><span class="line">who</span><br><span class="line">xiejiahe console  Jun 15 21:38</span><br><span class="line">xiejiahe ttys001  Jun 15 21:44</span><br><span class="line">xiejiahe ttys002  Jun 15 21:44</span><br><span class="line">xiejiahe ttys003  Jun 15 21:44</span><br><span class="line">xiejiahe ttys004  Jun 15 21:44</span><br><span class="line">xiejiahe ttys005  Jun 15 21:44</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示登录账号名和总人数</span></span><br><span class="line">who -q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示上次系统启动时间</span></span><br><span class="line">who -b  <span class="comment"># reboot   ~        Jun 15 21:38</span></span><br></pre></td></tr></table></figure><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><p>用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径。</p><p>注意：<code>whereis</code> 是从数据库里查找的，因此特别快，默认情况下一星期更新一次数据，所以有时会查找删除的数据或者刚建立的数据无法找到问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找 nginx</span></span><br><span class="line">whereis nginx <span class="comment"># nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz /usr/share/man/man3/nginx.3pm.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -b 指定只查找二进制</span></span><br><span class="line"><span class="built_in">where</span> -b nginx <span class="comment"># nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -m 指定查找说明文件 man</span></span><br><span class="line">whereis -m nginx <span class="comment"># nginx: /usr/share/man/man8/nginx.8.gz /usr/share/man/man3/nginx.3pm.gz</span></span><br></pre></td></tr></table></figure><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>归档数据，将目录或文件归档为 <code>.zip</code> 格式， zip 不是Linux中的标准归档工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 归档文件</span></span><br><span class="line">zip README.zip README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归档目录需要 -r 递归处理</span></span><br><span class="line">zip -r temp.zip temp</span><br><span class="line"></span><br><span class="line"><span class="comment"># -S 包含系统隐藏文件</span></span><br><span class="line">zip -r -S temp.zip temp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定归档效率 1-9</span></span><br><span class="line">zip -r -9 temp.zip temp </span><br></pre></td></tr></table></figure><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><p>提取 <code>zip</code> 归档的文件或目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 demo.zip 提取到当前目录下</span></span><br><span class="line">unzip demo.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表 demo.zip 文件内容，但不提取</span></span><br><span class="line">unzip -v demo.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># -d 指定将文件提取到 src 目录下</span></span><br><span class="line">unzip demo.zip -d src</span><br></pre></td></tr></table></figure><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>搜索文件，与 <code>find</code> 命令很像，但更快，因为是从数据库里查找, 通常每天会进行数据更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索 README.md 相关文件</span></span><br><span class="line">locate README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略大小写</span></span><br><span class="line">locate -i README.md</span><br></pre></td></tr></table></figure><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p>结束程序，kill 命令只支持进程id杀死，不支持进程名称。</p><h4 id="进程信号"><a href="#进程信号" class="headerlink" title="进程信号"></a>进程信号</h4><table><thead><tr><th>信号</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>HUP</td><td>挂起</td></tr><tr><td>2</td><td>INT</td><td>中断</td></tr><tr><td>3</td><td>QUIT</td><td>结束运行</td></tr><tr><td>9</td><td>KILL</td><td>无条件终止</td></tr><tr><td>11</td><td>SEGV</td><td>段错误</td></tr><tr><td>15</td><td>TERM</td><td>尽可能终止</td></tr><tr><td>17</td><td>STOP</td><td>无条件停止运行，但不终止</td></tr><tr><td>18</td><td>TSTP</td><td>停止或暂停，但继续在后台运行</td></tr><tr><td>19</td><td>CONT</td><td>在STOP或TSTP之后恢复执行</td></tr></tbody></table><p>注：程序进程 id 可通过 <code>top</code> 等命令查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 杀死 pid 为88 进程，不带参数默认等价 kill -15</span></span><br><span class="line"><span class="built_in">kill</span> 88</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无条件终止进程，以下是等价，可以用进程名称信号</span></span><br><span class="line"><span class="built_in">kill</span> -KILL 88</span><br><span class="line"><span class="built_in">kill</span> -9 88</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示信号</span></span><br><span class="line"><span class="built_in">kill</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死指定用户的所有进程</span></span><br><span class="line"><span class="built_in">kill</span> -u nginx</span><br></pre></td></tr></table></figure><h2 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h2><p>杀死进程，可以杀死多个进程，比 <code>kill</code> 要强大, 支持通过进程名称杀死, 还支持通配符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 杀死以tcp进程名称开头的所有进程</span></span><br><span class="line">killall tcp*</span><br></pre></td></tr></table></figure><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>修改文件或目录权限</p><p>chmod [参数选项] [mode, 八进制或符号表示] files…</p><ul><li><code>u</code> 符号代表当前用户。</li><li><code>g</code> 符号代表和当前用户在同一个组的用户，以下简称组用户。</li><li><code>o</code> 符号代表其他用户。</li><li><code>a</code> 符号代表所有用户。</li><li><code>r</code> 符号代表读权限以及八进制数4。</li><li><code>w</code> 符号代表写权限以及八进制数2。</li><li><code>x</code> 符号代表执行权限以及八进制数1。</li><li><code>X</code> 符号代表如果目标文件是可执行文件或目录，可给其设置可执行权限。</li><li><code>s</code> 符号代表设置权限suid和sgid，使用权限组合u+s设定文件的用户的ID位，g+s设置组用户ID位。</li><li><code>t</code> 符号代表只有目录或文件的所有者才可以删除目录下的文件。</li><li><code>+</code> 符号代表添加目标用户相应的权限。</li><li><code>-</code> 符号代表删除目标用户相应的权限。</li><li><code>=</code> 符号代表添加目标用户相应的权限，删除未提到的权限。</li></ul><h4 id="文件权限码"><a href="#文件权限码" class="headerlink" title="文件权限码"></a>文件权限码</h4><table><thead><tr><th>权限</th><th>二进制值</th><th>八进制值</th><th>描述</th></tr></thead><tbody><tr><td>—</td><td>000</td><td>0</td><td>没有任何权限</td></tr><tr><td>–x</td><td>001</td><td>1</td><td>只有执行权限</td></tr><tr><td>-w-</td><td>010</td><td>2</td><td>只有写入权限</td></tr><tr><td>-wx</td><td>011</td><td>3</td><td>有写入和执行权限</td></tr><tr><td>r–</td><td>100</td><td>4</td><td>只有读取权限</td></tr><tr><td>r-x</td><td>101</td><td>5</td><td>有读取和执行权限</td></tr><tr><td>rw-</td><td>110</td><td>6</td><td>有读取和写入权限</td></tr><tr><td>rwx</td><td>111</td><td>7</td><td>有全部权限</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># README.md 文件设为所有用户可读取</span></span><br><span class="line">chmod a+r README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># -R 递归目录下所有文件</span></span><br><span class="line">chmod a+r src/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用八进制符号表示</span></span><br><span class="line"><span class="comment"># 3个数字分别为 x,y,z 表示User、Group、及Other的权限。</span></span><br><span class="line"><span class="comment"># r=4, w=2, x=1</span></span><br><span class="line">chmod 777 README.md <span class="comment"># 等价于 chmod a=rwx README.md</span></span><br></pre></td></tr></table></figure><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p>列出当前系统打开文件的工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 打印所有打开文件的的列表</span></span><br><span class="line">lsof</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定端口被占用情况</span></span><br><span class="line">lsof -i:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># -p 列出指定进程号所打开的文件</span></span><br><span class="line">lsof -p 6112</span><br></pre></td></tr></table></figure><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>查看当前系统进程状态。</p><p><code>ps</code> 命令非常复杂，且参数极多，由于 <code>ps</code> 历史问题，参数风格支持了三种 <code>UNIX</code>/<code>BSD</code>/``GNU` 这里不详细的介绍，感兴趣可以自行了解。</p><ul><li>Unix 风格参数 - 前面加单破折线</li><li>BSD 风格的参数 - 前面不加破折线</li><li>GNU 风格长参数 - 前面加双破折线</li></ul><h4 id="Unix-风格参数"><a href="#Unix-风格参数" class="headerlink" title="Unix 风格参数"></a>Unix 风格参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-A</td><td>显示所有进程</td></tr><tr><td>-N</td><td>显示与指定参数不符的所有进程</td></tr><tr><td>-a</td><td>显示除控制进程和无终端进程外的所有进程</td></tr><tr><td>-d</td><td>显示除控制进程外的所有进程</td></tr><tr><td>-e</td><td>显示所有进程</td></tr><tr><td>-C cmdlist</td><td>显示包含在cmdlist列表中的进程</td></tr><tr><td>-G grplist</td><td>显示组ID在grplist列表中的进程</td></tr><tr><td>-U userlist</td><td>显示属主的用户ID在userlist列表中的进程</td></tr><tr><td>-g grplist</td><td>显示会话或组ID在grplist列表中的进程</td></tr><tr><td>-p pidlist</td><td>显示PID在pidlist列表中的进程</td></tr><tr><td>-s sesslist</td><td>显示会话ID在sesslist列表中的进程</td></tr><tr><td>-t ttylist</td><td>显示终端ID在ttylist列表中的进程</td></tr><tr><td>-u userlist</td><td>显示有效用户ID在userlist列表中的进程</td></tr><tr><td>-F</td><td>显示更多额外输出（相对-f参数而言）</td></tr><tr><td>-O format</td><td>显示默认的输出列以及format列表指定的特定列</td></tr><tr><td>-M</td><td>显示进程的安全信息</td></tr><tr><td>-c</td><td>显示进程的额外条调度器信息</td></tr><tr><td>-l</td><td>显示长列表</td></tr><tr><td>-o format</td><td>仅显示由format指定的列表</td></tr><tr><td>-y</td><td>不要显示进程标记（process tag, 表明进程状态的标记）</td></tr><tr><td>-Z</td><td>显示安全标签（security context）信息</td></tr><tr><td>-H</td><td>用层级格式来显示进程（树状，用来显示父进程）</td></tr><tr><td>-n namelist</td><td>定义了WCHAN列显示的值</td></tr><tr><td>-w</td><td>采用宽输出模式，不限宽显示</td></tr><tr><td>-L</td><td>显示进程中的线程</td></tr><tr><td>-V</td><td>显示PS命令的版本号</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有进程信息</span></span><br><span class="line">ps -A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定用户进程信息</span></span><br><span class="line">ps -u root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有进程信息包括命令行</span></span><br><span class="line">ps -ef  <span class="comment"># -e 等价于 -A  , 即等价于 ps -Af</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是 BSD 风格参数，列出所有正在内存中的进程</span></span><br><span class="line">ps aux</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配合 grep 查询指定进程</span></span><br><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><h2 id="open"><a href="#open" class="headerlink" title="open"></a>open</h2><p><code>open</code> 命令可在 <code>linux</code> / <code>mac</code> 具有可视化界面下进行文本编辑、打开应用程序等功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在mac下用Finder打开当前目录</span></span><br><span class="line">open .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用默认应用程序打开文件</span></span><br><span class="line">open README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用默认编辑器打开文件</span></span><br><span class="line">open -e README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是一个URL用默认浏览器打开页面</span></span><br><span class="line">open https://github.com/xjh22222228/linux-manual.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定某个应用程序打开某个文件, 如果不指定文件默认直接打开程序</span></span><br><span class="line">open -a /Applications/Google\ Chrome.app README.md</span><br></pre></td></tr></table></figure><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p><code>curl</code> 是一个非常强大的网络传输工具, 利用URL规则在命令行下工作的文件传输工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看HTTP响应</span></span><br><span class="line">curl https://github.com/xjh22222228/linux-manual</span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 不输出错误和进度信息, 只显示正常结果</span></span><br><span class="line">curl -s https://github.com/xjh22222228/linux-manual</span><br><span class="line"></span><br><span class="line"><span class="comment"># -o 指定文件名下载到本地，等价于 wget</span></span><br><span class="line">curl https://github.com/xjh22222228/linux-manual -o 1.txt <span class="comment"># 1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -O 下载文件到本地, 并将URL最后部分当做文件名</span></span><br><span class="line">curl https://github.com/xjh22222228/linux-manual -O <span class="comment"># linux-manual</span></span><br><span class="line">curl https://github.com/xjh22222228/linux-manual -O --progress <span class="comment"># 显示下载进度条</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -L HTTP请求跟随服务器重定向</span></span><br><span class="line">curl -L https://github.com/xjh22222228/linux-manual</span><br><span class="line"></span><br><span class="line"><span class="comment"># -I 或 -head 显示HTTP响应报文</span></span><br><span class="line">curl https://github.com/xjh22222228/linux-manual -I</span><br><span class="line"></span><br><span class="line"><span class="comment"># -H 设置请求头</span></span><br><span class="line">curl -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> https://github.com/xjh22222228/linux-manual</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过POST请求发送JSON数据, -X 指明HTTP请求方法, -d 实体内容</span></span><br><span class="line">curl -H <span class="string">&quot;Content-type: application/json&quot;</span> -X POST -d <span class="string">&#x27;&#123;&quot;age&quot;:&quot;18&quot;&#125;&#x27;</span> https://github.com/xjh22222228/linux-manual</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送时携带 cookie</span></span><br><span class="line">curl https://github.com/xjh22222228/linux-manual --cookie <span class="string">&quot;age=18;name=xjh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -v 查看整个传输过程</span></span><br><span class="line">curl https://github.com/xjh22222228/linux-manual -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># -F(--form) 利用POST上传文件, file 是字段名, =@ 必须存在</span></span><br><span class="line">curl https://example.com/upload -F <span class="string">&quot;file=@/home/demo.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -u 指定提供用户名密码进行授权，通常Ftp等服务</span></span><br><span class="line">curl -u admin:123123 ftp://demo/README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并执行脚本</span></span><br><span class="line">curl -fsSL https://deno.land/x/install/install.sh | sh</span><br></pre></td></tr></table></figure><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>显示或设置系统时间日期</p><p>格式化符号</p><ul><li><code>%%</code> 百分号</li><li><code>%a</code> 当地缩写的工作日名称（例如，Sun）</li><li><code>%A</code> 当地完整的工作日名称（例如，Sunday）</li><li><code>%b</code> 当地缩写的月份名称（例如，Jan）</li><li><code>%B</code> 当地完整的月份名称（例如，January）</li><li><code>%c</code> 当地的日期和时间（例如，Thu Mar 3 23:05:25 2005）</li><li><code>%C</code> 世纪，和%Y类似，但是省略后两位（例如，20）</li><li><code>%d</code> 一月中的一天（例如，01）</li><li><code>%D</code> 日期，等价于%m/%d/%y</li><li><code>%e</code> 一月中的一天，格式使用空格填充，等价于%_d</li><li><code>%F</code> 完整的日期；等价于%+4Y-%m-%d</li><li><code>%g</code> ISO标准计数周的年份的最后两位数字</li><li><code>%G</code> ISO标准计数周的年份，通常只对%V有用</li><li><code>%h</code> 等价于%b</li><li><code>%H</code> 小时，范围（00..23）</li><li><code>%I</code> 小时，范围（00..23）</li><li><code>%j</code> 一年中的一天，范围（001..366）</li><li><code>%k</code> 小时，使用空格填充，范围（0..23），等价于%_H</li><li><code>%l</code> 小时，使用空格填充，范围（1..12），等价于%_I</li><li><code>%m</code> 月，范围（01..12）</li><li><code>%M</code> 分钟，范围（00..59）</li><li><code>%n</code> 换行符</li><li><code>%N</code> 纳秒，范围（000000000..000000000）</li><li><code>%p</code> 用于表示当地的AM或PM，如果未知则为空白</li><li><code>%P</code> 类似于%p，但用小写表示</li><li><code>%q</code> 季度，范围（1..4）</li><li><code>%r</code> 当地以12小时表示的时钟时间（例如，11:11:04 PM）</li><li><code>%R</code> 24小时每分钟；等价于%H:%M</li><li><code>%s</code> 自协调世界时1970年01月01日00时00分以来的秒数</li><li><code>%S</code> 秒数，范围（00..60）</li><li><code>%t</code> 水平制表符</li><li><code>%T</code> 时间；等价于%H:%M:%S</li><li><code>%u</code> 一周中的一天（1..7），1代表星期一</li><li><code>%U</code> 一年中的第几周，周日作为一周的起始（00..53）</li><li><code>%V</code> ISO标准计数周，该方法将周一作为一周的起始（01..53）</li><li><code>%w</code> 一周中的一天（0..6），0代表星期天</li><li><code>%W</code> 一年中的第几周，周一作为一周的起始（00..53）</li><li><code>%x</code> 当地的日期表示（例如，12/31/99）</li><li><code>%X</code> 当地的时间表示（例如，23:13:48）</li><li><code>%y</code> 年份后两位数字，范围（00..99）</li><li><code>%Y</code> 年份</li><li><code>%z</code> +hhmm格式的数值化时区格式（例如，-0400）</li><li><code>%:z</code> +hh:mm格式的数值化时区格式（例如，-04:00）</li><li><code>%::z</code> +hh:mm:ss格式的数值化时区格式（例如，-04:00:00）</li><li><code>%:::z</code> 数值化时区格式，相比上一个格式增加’:’以显示必要的精度（例如，-04，+05:30）</li><li><code>%Z</code> 时区缩写（如EDT）</li><li><code>-</code> (连字符) 不要填充相应的字段。</li><li><code>_</code> (下划线) 使用空格填充相应的字段。</li><li><code>0</code> (数字0) 使用数字0填充相应的字段。</li><li><code>+</code> 用数字0填充，未来年份大于4位数字则在前面加上’+’号。</li><li><code>^</code> 允许的情况下使用大写。</li><li><code>#</code> 允许的情况下将默认的大写转换为小写，默认的小写转换为大写。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前时间</span></span><br><span class="line">date</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化当前时间</span></span><br><span class="line">date +<span class="string">&quot;%Y-%m-%d %H:%M.%S&quot;</span> <span class="comment"># 2020-07-01 00:00.00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置系统时间</span></span><br><span class="line">date -s  <span class="comment"># 设置当前时间, 须root</span></span><br><span class="line">date -s <span class="string">&quot;2020-07-01 00:00:00&quot;</span> <span class="comment"># 设置全部时间</span></span><br></pre></td></tr></table></figure><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>查看网络系统状态信息</p><p><strong>参数说明：</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a或–all</td><td>显示所有连线中的Socket</td></tr><tr><td>A&lt;网络类型&gt;或–&lt;网络类型&gt;</td><td>列出该网络类型连线中的相关地址</td></tr><tr><td>c或–continuous</td><td>持续列出网络状态</td></tr><tr><td>C或–cache</td><td>显示路由器配置的快取信息</td></tr><tr><td>e或–extend</td><td>显示网络其他相关信息</td></tr><tr><td>F或–fib</td><td>显示FIB</td></tr><tr><td>g或–groups</td><td>显示多重广播功能群组组员名单</td></tr><tr><td>h或–help</td><td>在线帮助</td></tr><tr><td>i或–interfaces</td><td>显示网络界面信息表单</td></tr><tr><td>l或–listening</td><td>显示监控中的服务器的Socket</td></tr><tr><td>M或–masquerade</td><td>显示伪装的网络连线</td></tr><tr><td>n或–numeric</td><td>直接使用IP地址，而不通过域名服务器</td></tr><tr><td>N或–netlink或–symbolic</td><td>显示网络硬件外围设备的符号连接名称</td></tr><tr><td>o或–timers</td><td>显示计时器</td></tr><tr><td>p或–programs</td><td>显示正在使用Socket的程序识别码和程序名称</td></tr><tr><td>r或–route</td><td>显示Routing Table</td></tr><tr><td>s或–statistics</td><td>显示网络工作信息统计表</td></tr><tr><td>t或–tcp</td><td>显示TCP传输协议的连线状况</td></tr><tr><td>u或–udp</td><td>显示UDP传输协议的连线状况</td></tr><tr><td>v或–verbose</td><td>显示指令执行过程</td></tr><tr><td>V或–version</td><td>显示版本信息</td></tr><tr><td>w或–raw</td><td>显示RAW传输协议的连线状况</td></tr><tr><td>x或–unix</td><td>此参数的效果和指定”-A unix”参数相同</td></tr><tr><td>-ip或–inet</td><td>此参数的效果和指定”-A inet”参数相同</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有占用端口</span></span><br><span class="line">netstat -ntlp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有网络状况</span></span><br><span class="line">netstat -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有tcp网络状况</span></span><br><span class="line">netstat -at</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有udp网络状况</span></span><br><span class="line">netstat -au</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配合grep命令查看某个端口被占用情况</span></span><br><span class="line">netstat -ap | grep 8080</span><br></pre></td></tr></table></figure><h2 id="w"><a href="#w" class="headerlink" title="w"></a>w</h2><p>查看当前登入系统的用户信息, 有哪些用户正在登陆, 以及他们正在执行的程序。</p><p>此命令与 <code>who</code> 相似，默认情况下比 <code>who</code> 命令输出内容更详细。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">w</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"> 22:44:33 up 748 days, 14:16,  1 user,  load average: 0.04, 0.03, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    183.11.111.11    22:40    1.00s  0.03s  0.00s w</span><br></pre></td></tr></table></figure><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p>用来变更文件或目录的拥有者或所属群组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 README.md 文件拥有者设为 byroot</span></span><br><span class="line">chown byroot README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用-R递归处理文件</span></span><br><span class="line">chown -R byroot src/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变所属群组, 拥有者设为 byroot 群组设为 byrootgroup</span></span><br><span class="line">chown byroot:byrootgroup README.md</span><br></pre></td></tr></table></figure><h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><p>查看系统负载信息， 此命令非常简单，没有太多的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 21:51:53 当前时间</span></span><br><span class="line"><span class="comment"># up 750 days, 13:24  当前系统运行的天数，小时，分钟 （从上次开机起计算）</span></span><br><span class="line"><span class="comment"># 1 user 当前系统登录用户数</span></span><br><span class="line"><span class="comment"># load average: 0.08, 0.07, 0.06    一分钟、5分钟、15分钟平均负载, 这3个值不能大于CPU个数，如果大于了说明系统负载高，性能低。</span></span><br><span class="line">uptime <span class="comment"># 21:51:53 up 750 days, 13:24,  1 user,  load average: 0.08, 0.07, 0.06</span></span><br></pre></td></tr></table></figure><h2 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h2><p>用于修改文件属性</p><p>参数:</p><ul><li>a：让文件或目录仅供附加用途</li><li>b：不更新文件或目录的最后存取时间</li><li>c：将文件或目录压缩后存放</li><li>d：将文件或目录排除在倾倒操作之外</li><li>i：不得任意更动文件或目录</li><li>s：保密性删除文件或目录</li><li>S：即时更新文件或目录</li><li>u：预防意外删除</li><li>-R：递归处理，将指令目录下的所有文件及子目录一并处理</li><li>-v&lt;版本编号&gt;：设置文件或目录版本</li><li>-V：显示指令执行过程</li><li>+&lt;属性&gt;：开启文件或目录的该项属性</li><li>-&lt;属性&gt;：关闭文件或目录的该项属性</li><li>=&lt;属性&gt;：指定文件或目录的该项属性</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 锁定该文件, 防止文件被修改或删除</span></span><br><span class="line">chattr +i README.md  <span class="comment"># chattr -i README.md  解锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 lsattr 查看赋予的属性</span></span><br><span class="line">lsattr README.md</span><br></pre></td></tr></table></figure><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>GNU 压缩/解压工具，用 Lempel-Ziv编码，格式为 <code>.gz</code>, 压缩后原文件将被删除</p><p>注意：gzip 不能用于压缩整个目录, 只能用于压缩文件, 如果需要压缩整个目录可以考虑使用 <a href="#zip">zip</a> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩 README.md 文件, 压缩完成后 README.md 文件会被删除</span></span><br><span class="line">gzip README.md <span class="comment"># README.md.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归压缩目录下的所有文件</span></span><br><span class="line">gzip -r ./logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加 -v 显示压缩执行过程</span></span><br><span class="line">gzip -rv ./logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩 .tar 后缀文件</span></span><br><span class="line">gzip -r src.tar  <span class="comment"># 压缩后为 src.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -d 解压之前gzip压缩后的文件</span></span><br><span class="line">gzip -d README.md</span><br><span class="line">gzip -dr ./logs <span class="comment"># 或者递归解压目录下的所有文件</span></span><br></pre></td></tr></table></figure><h2 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h2><p>采用 Burrows-Wheeler块排序文本压缩算法和霍夫曼编码，将文件压缩成 <code>.bz2</code> 格式，也可用于解压 <code>.bz2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩 README.md 文件</span></span><br><span class="line">bzip2 README.md     <span class="comment"># 不保留源文件 README.md.bz2</span></span><br><span class="line">bzip2 -k README.md  <span class="comment"># -k 保留源文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">bzip2 -d README.md.bz2  <span class="comment"># 源文件将被删除</span></span><br><span class="line">bzip2 -dk README.md.bz2  <span class="comment"># -k 保留源文件</span></span><br><span class="line">bzip -dt README.md.bz2 <span class="comment"># -t --test 测试解压, 实际不解压，模拟整个解压过程</span></span><br></pre></td></tr></table></figure><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>归档数据，是Linux中标准归档工具。</p><p>参数：</p><ul><li>-A - 将一个已有tar归档文件追加到另一个已有tar归档文件</li><li>-c 创建一个新的tar归档文件</li><li>-d 检查归档文件和文件系统的不同之处</li><li>-r 追加文件到已有tar归档文件结尾</li><li>-t 列出已有tar归档文件的内容</li><li>-u 将比tar归档文件中已有的同名文件新的文件追加到该tar归档文件中</li><li>-x 从已有的tar归档文件中提取文件</li><li>-f 输出结果到文件或设备file</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -c 创建一个归档文件</span></span><br><span class="line">tar -cvf demo.tar src/</span><br><span class="line"></span><br><span class="line"><span class="comment"># -x 提取归档文件内容</span></span><br><span class="line">tar -xvf demo.tar</span><br></pre></td></tr></table></figure><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>分页查看文件内容, 每次查看一屏, 每屏能显示多少内容取决于终端大小。</p><p>与 <code>cat</code> 命令不同，<code>cat</code> 只能一次显示全部内容，如果内容太多部分会被截取掉。</p><p>快捷键：</p><ul><li><code>空格</code>或<code>PageUp</code> - 查看下一屏内容</li><li><code>B</code>或<code>PageDown</code> - 查看上一屏内容</li><li><code>回车</code> - 查看下一行内容</li><li><code>Q</code> - 退出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">more README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从第10行开始显示</span></span><br><span class="line">more +10 README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示查看进度</span></span><br><span class="line">more -d README.md <span class="comment"># --More--(17%)[Press space to continue, &#x27;q&#x27; to quit.]</span></span><br></pre></td></tr></table></figure><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p>周期性执行任务, 通常用于定时备份。</p><p><code>* * * * *</code> 分别含义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">┬    ┬    ┬    ┬    ┬</span><br><span class="line">│    │    │    │    │</span><br><span class="line">│    │    │    │    │</span><br><span class="line">│    │    │    │    └───── 一周中的某一天 (0 - 7)  0或7代表是星期日</span><br><span class="line">│    │    │    └────────── 月份 (1 - 12)</span><br><span class="line">│    │    └─────────────── 一个月的某一天 (1 - 31)</span><br><span class="line">│    └──────────────────── 小时 (0 - 23)</span><br><span class="line">└───────────────────────── 分钟 (0 - 59)</span><br><span class="line"><span class="comment"># 列出该用户设置</span></span><br><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑该用户设置</span></span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除该用户设置</span></span><br><span class="line">crontab -r</span><br><span class="line">* * * * * 命令</span><br><span class="line"><span class="comment"># 每天18点18分执行 echo `date` &gt; README.md</span></span><br><span class="line">18 18 * * * <span class="built_in">echo</span> `date` &gt; README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一分钟执行</span></span><br><span class="line">* * * * */1 <span class="built_in">echo</span> `date` &gt; README.md</span><br></pre></td></tr></table></figure><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p>查看指令帮助手册</p><p><strong>man 信息说明</strong></p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>NAME</td><td>显示命令名和一段简短的描述</td></tr><tr><td>SYNOPSIS</td><td>命令的语法</td></tr><tr><td>CONFI GURATION</td><td>命令配置信息</td></tr><tr><td>DESCRIPTION</td><td>命令的一般性描述</td></tr><tr><td>OPTIONS</td><td>命令选项描述</td></tr><tr><td>EXIT STATUS</td><td>命令的退出状态指示</td></tr><tr><td>RETURN VALUE</td><td>命令的返回值</td></tr><tr><td>ERRORS</td><td>命令的错误消息</td></tr><tr><td>ENVIRONMENT</td><td>描述所使用的环境变量</td></tr><tr><td>FILES</td><td>命令用到的文件</td></tr><tr><td>VERSIONS</td><td>命令的版本信息</td></tr><tr><td>CONFORMING TO</td><td>命令所遵从的标准</td></tr><tr><td>NOTES</td><td>其他有帮助的资料</td></tr><tr><td>BUGS</td><td>提供提交BUG的途径</td></tr><tr><td>EXAMPLE</td><td>展示命令的用法</td></tr><tr><td>AUTHORS</td><td>命令开发人员的信息</td></tr><tr><td>COPYRIGHT</td><td>命令源代码的版权状况</td></tr><tr><td>SEE ALSO</td><td>与该命令类型的其他命令</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 ls 指令帮助手册</span></span><br><span class="line">man ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过数字来阅读某一部分内容, 比如阅读第一部分</span></span><br><span class="line">man 1 ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 在所有手册中查找</span></span><br><span class="line">man -a ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># -k, 搜索关键字, 如果忘记了完整的命令可以通过关键字搜索出来，比如 nginx</span></span><br><span class="line">man -k ngi</span><br></pre></td></tr></table></figure><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>将目前动作延迟一段时间, 通常用于脚本当中</p><p>时间参数, 这是可选的，默认s：</p><ul><li>s 秒</li><li>m 分钟</li><li>h 小时</li><li>d 天</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5秒后输出 Hello</span></span><br><span class="line">sleep 5s; <span class="built_in">echo</span> Hello</span><br></pre></td></tr></table></figure><p>下面是一段 Shell 脚本， 延迟10秒后再去请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">sleep 10s</span><br><span class="line"></span><br><span class="line">curl https://www.xiejiahe.com/</span><br></pre></td></tr></table></figure><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>在当前Shell环境中从指定文件读取和执行命令， 通常用于重新执行环境。</p><p>别名 <code>.</code> 点符号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile  <span class="comment"># 等价 . ~/.bash_profile</span></span><br></pre></td></tr></table></figure><h2 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h2><p>合并N个文件的列，相当于追加文件内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.txt 和 2.txt 合并输出</span></span><br><span class="line">paste 1.txt 2.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.txt 2.txt 合并后保存为 3.txt</span></span><br><span class="line">paste 1.txt 2.txt &gt; 3.txt</span><br></pre></td></tr></table></figure><h2 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h2><p>用于显示文件或目录的状态信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stat</span> logs</span><br><span class="line"><span class="comment"># File: ‘logs/’</span></span><br><span class="line"><span class="comment"># Size: 16384           Blocks: 32         IO Block: 4096   directory</span></span><br><span class="line"><span class="comment"># Device: fd01h/64769d    Inode: 669067      Links: 5</span></span><br><span class="line"><span class="comment"># Access: (0755/drwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)</span></span><br><span class="line"><span class="comment"># Access: 2020-07-07 17:24:23.941816812 +0800</span></span><br><span class="line"><span class="comment"># Modify: 2020-07-12 11:46:55.567707577 +0800</span></span><br><span class="line"><span class="comment"># Change: 2020-07-12 11:46:55.567707577 +0800</span></span><br><span class="line"><span class="comment"># Birth: -</span></span><br></pre></td></tr></table></figure><h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><p>生成目录树结构, 通常用于描述项目结构。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归当前目录下所有文件并生成目录树</span></span><br><span class="line">tree</span><br><span class="line"><span class="comment"># .</span></span><br><span class="line"><span class="comment"># ├── LICENSE</span></span><br><span class="line"><span class="comment"># ├── README.md</span></span><br><span class="line"><span class="comment"># ├── b.md</span></span><br><span class="line"><span class="comment"># └── media</span></span><br><span class="line"><span class="comment">#     └── poster.jpg</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -I 忽略某些目录</span></span><br><span class="line">tree -I <span class="string">&quot;node_modules|.git|.svn&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示目录</span></span><br><span class="line">tree -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定要递归的目录层级</span></span><br><span class="line">tree -L 3</span><br></pre></td></tr></table></figure><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><p>基于RPM的软件包管理器, 特点安装快捷，命令简洁好记。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">yum install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 -y 安装时自动全部 yes</span></span><br><span class="line">yum -y install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找包</span></span><br><span class="line">yum search nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有已安装的包</span></span><br><span class="line">yum list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级包</span></span><br><span class="line">yum -y update nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除包</span></span><br><span class="line">yum -y remove nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示安装包信息</span></span><br><span class="line">yum info nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查可更新的包程序</span></span><br><span class="line">yum check-update</span><br></pre></td></tr></table></figure><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>列出当前系统使用过的命令，默认保存1000条, 通常保存在 <code>~/.bash_history</code> 文件中，注意的是只有在Shell退出时才写入到文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出当前使用过的命令</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定要显示的条数</span></span><br><span class="line"><span class="built_in">history</span> 50</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空历史命令</span></span><br><span class="line"><span class="built_in">history</span> -c</span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 强制写入到 ~/.bash_history 文件中而不用等shell退出才写入</span></span><br><span class="line"><span class="built_in">history</span> -a</span><br></pre></td></tr></table></figure><h2 id="md5sum"><a href="#md5sum" class="headerlink" title="md5sum"></a>md5sum</h2><p>计算和校验文件报文摘要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算文件md5</span></span><br><span class="line">mmd5sum README.md <span class="comment"># d41d8cd98f00b204e9800998ecf8427e  README.md</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验文件, 查看文件是否被篡改过</span></span><br><span class="line">md5sum README.md &gt; README.md5 <span class="comment"># 计算文件md5并保存在 README.md5 , 保存的文件名和后缀可以随意命名</span></span><br><span class="line">md5sum -c README.md5 <span class="comment"># -c 从指定的文件读取md5并校验, 会从当前目录寻找 README.md</span></span><br></pre></td></tr></table></figure><h2 id="su"><a href="#su" class="headerlink" title="su"></a>su</h2><p>切换到其他用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到 admin 身份</span></span><br><span class="line">su admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># -c 执行完指令后切换回原身份</span></span><br><span class="line">su -c ls admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过以下查找当前系统用户列表</span></span><br><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><h2 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h2><p>给命令传递参数的一个过滤器，也是组合多个命令的一个工具, <code>将左侧的标准输出放进右侧标准输入</code>。</p><p>此命令可以将多次操作简便为一次操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计代码</span></span><br><span class="line">find -name <span class="string">&quot;*.js&quot;</span> | xargs wc -l <span class="comment"># 等价于 wc -l a.js b.js c.js ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量下载文件</span></span><br><span class="line">cat download.txt | xargs wget</span><br></pre></td></tr></table></figure><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><p>加密的方式在本地主机和远程主机之间复制文件</p><p>注：需要有读写权限，否则会无法操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从远程主机下载文件到本地</span></span><br><span class="line">scp root@192.168.0.100:/root/file.zip /home/file.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程主机下载目录到本地，需要 -r 递归</span></span><br><span class="line">scp -r root@192.168.0.100:/root/dir  /home/dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从本地主机上传文件到远程主机</span></span><br><span class="line">scp /home/file.zip root@192.168.0.100:/root/file.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 从本地主机上传目录到远程主机，需要 -r 递归</span></span><br><span class="line">scp -r /home/dir root@192.168.0.100:/root/dir</span><br></pre></td></tr></table></figure><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>强大的文本搜索工具，被称为Linux命令三剑客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 README.md 文件中搜索 linux 关键字</span></span><br><span class="line">grep <span class="string">&quot;linux&quot;</span> README.md</span><br><span class="line">grep <span class="string">&quot;linux&quot;</span> README.md README2.md <span class="comment"># 多个文件搜索</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出时高亮显示</span></span><br><span class="line">grep <span class="string">&quot;linux&quot;</span> README.md --color</span><br><span class="line"></span><br><span class="line"><span class="comment"># -o 只输出匹配部分</span></span><br><span class="line">grep -o <span class="string">&quot;linux&quot;</span> README.md --color</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 输出到匹配的行数</span></span><br><span class="line">grep -n <span class="string">&quot;linux&quot;</span> README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># -c 输出到匹配次数</span></span><br><span class="line">grep -c <span class="string">&quot;linux&quot;</span> README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># -r 递归目录文件搜索</span></span><br><span class="line">grep -r <span class="string">&quot;linux&quot;</span> ./src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 glob 风格表达式搜索</span></span><br><span class="line">egrep <span class="string">&quot;[0-9]&quot;</span> <span class="comment"># 等价于 grep -E &quot;[0-9]&quot; README.md</span></span><br></pre></td></tr></table></figure><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>系统服务管理器指令, 通常用来设置某个服务器默认开机启动或关闭。</p><p>命令：<code>systemctl [command] [unit]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 立即启动服务</span></span><br><span class="line">systemctl start nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即停止服务</span></span><br><span class="line">systemctl stop nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务，stop 后 start</span></span><br><span class="line">systemctl restart nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入服务, 一般情况下重新载入新的配置</span></span><br><span class="line">systemctl reload nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下次开机时默认启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下次开机时不会启动服务</span></span><br><span class="line">systemctl <span class="built_in">disable</span> nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个服务状态信息</span></span><br><span class="line">systemctl status nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前服务是否正在运行中</span></span><br><span class="line">systemctl is-active nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务开机有没有默认启动</span></span><br><span class="line">systemctl is-enable nginx.service</span><br></pre></td></tr></table></figure><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>base64 编码/解码文件或标准输入输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编码字符串</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;hello world&quot;</span>|base64 <span class="comment"># aGVsbG8gd29ybGQ=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码字符串</span></span><br><span class="line"><span class="built_in">printf</span> aGVsbG8gd29ybGQ=|base64 -d <span class="comment"># hello world</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编码文件, 将结果保存在 decode.txt</span></span><br><span class="line">base64 README.md &gt; decode.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从标准输入中读取已经进行base64编码的内容进行解码</span></span><br><span class="line">base64 -d decode.txt</span><br></pre></td></tr></table></figure><h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><p>将某一个文件在另外一个位置建立并产生同步的链接。 当不同的2个目录需要同时引用某一个文件时此命令就派上用场了。</p><p>软链接也可以叫符号链接：</p><ul><li>软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>软链接可以 跨文件系统 ，硬链接不可以</li><li>软链接可以对一个不存在的文件名进行链接</li><li>软链接可以对目录进行链接</li></ul><p>硬链接：</p><ul><li>硬链接，以文件副本的形式存在。但不占用实际空间, 从根本上而言就是同一个文件。</li><li>不允许给目录创建硬链接</li><li>硬链接只有在同一个文件系统中才能创建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认创建硬链接，修改 README.md 内容， a.md 也会同步修改, 修改a.md  README.md 也会同步修改</span></span><br><span class="line">ln README.md a.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 创建软链接</span></span><br><span class="line">ln -s README.md a.md <span class="comment"># 如果删除了 README.md  a.md 将失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -f 强制执行</span></span><br><span class="line">ln -f README.md ./src/a.md</span><br></pre></td></tr></table></figure><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>管理操作系统服务的命令, 是Redhat Linux兼容的发行版中用来控制系统服务的实用工具，它以启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 docker 服务</span></span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 docker 状态</span></span><br><span class="line">service docker status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 docker 服务</span></span><br><span class="line">service docker stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动 docker 服务</span></span><br><span class="line">service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有服务状态</span></span><br><span class="line">service --status-all</span><br></pre></td></tr></table></figure><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>显示内存使用情况</p><p>选项</p><ul><li>b 字节单位显示</li><li>k KB单位显示</li><li>m MB单位显示</li><li>g GB单位显示</li><li>s&lt;秒&gt; 每S秒监控内存使用情况</li></ul><p>解释：</p><ul><li>total 内存总数</li><li>used 已使用内存</li><li>free 空闲内存</li><li>shared 当前已废弃内存</li><li>buff/cache 缓存内存数</li><li>1204660 可用内存数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">free</span><br><span class="line"><span class="comment"># 输出以下, 默认以字节为单位</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        1882192      485312      448424         704      948456     1204660</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br><span class="line"><span class="comment"># MB单位显示</span></span><br><span class="line">free - m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10秒执行一次查询</span></span><br><span class="line">free -s 10</span><br></pre></td></tr></table></figure><h2 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h2><p><strong>apt-get命令</strong> 是Debian Linux发行版中的APT软件包管理工具。所有基于Debian的发行都使用这个包管理系统。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装一个docker软件</span></span><br><span class="line">apt-get install docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载软件，保留配置文件</span></span><br><span class="line">apt-get remove docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载软件并删除配置文件</span></span><br><span class="line">apt-get –purge remove docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新所有已安装的软件包</span></span><br><span class="line">apt-get upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除软件备份，主要用来释放空间</span></span><br><span class="line">apt-get clean</span><br></pre></td></tr></table></figure><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>查看文件类型, 比如文件、目录、二进制、符号链接等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出 README.md: ASCII text</span></span><br><span class="line">file README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># index.html: HTML document, UTF-8 Unicode text, with very long lines, with no line terminators</span></span><br><span class="line">file index.html</span><br></pre></td></tr></table></figure><h2 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h2><p>显示当前运行在后台模式中的所有用户的进程（作业）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先来启一个后台进程, 比如启一个sleep命令进程， &amp; 符号表示后台运行</span></span><br><span class="line">sleep 3 &amp;</span><br><span class="line"><span class="comment"># 查看后台进程</span></span><br><span class="line"><span class="built_in">jobs</span> <span class="comment"># 输出：[1]+  Running       sleep 3 &amp;</span></span><br></pre></td></tr></table></figure><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p><code>type</code> 命令有2个作用：</p><ul><li>用来查找命令的位置，类似 which 命令</li><li>检测某个命令是内建命令还是外部命令</li></ul><p>普及：内建命令和外部命令的区别：内建命令不会衍生出子进程，而外部命令会衍生出一个子进程然后执行命令, 所以内建命令执行效率要高。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd is a shell builtin  表示这是shell内建命令</span></span><br><span class="line"><span class="built_in">type</span> <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps is hashed (/usr/bin/ps)  表示这是一个外部命令</span></span><br><span class="line"><span class="built_in">type</span> ps</span><br></pre></td></tr></table></figure><h2 id="printenv"><a href="#printenv" class="headerlink" title="printenv"></a>printenv</h2><p>列出全局环境变量, 有个 <code>env</code> 命令很像，但 <code>printenv</code> 可以打印变量的值。</p><p>普及：所有系统环境变量都是大写字母，用于区分普通用户的环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有全局环境变量</span></span><br><span class="line">printenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以显示指定全局环境变量的值, 等价于 echo $HOME</span></span><br><span class="line">printenv HOME <span class="comment"># /root</span></span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>列出所有全局变量、局部变量和普通用户定义的变量，按照字母顺序对结果进行排序。</p><p>注意：所有系统全局变量都是大写，用户定义的环境变量全部采用小写，这是标准规范。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="comment"># OPTIND=1</span></span><br><span class="line"><span class="comment"># OSTYPE=linux-gnu</span></span><br><span class="line"><span class="comment"># PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span></span><br><span class="line"><span class="comment"># PIPESTATUS=([0]=&quot;0&quot;)</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p>导出环境变量, 可以把一个局部变量导出成全局环境变量</p><p>注意：export 只有在当前Shell有效，退出后将失效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先声明一个局部环境变量</span></span><br><span class="line">my_var=<span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="comment"># 然后将其导出全局环境变量</span></span><br><span class="line"><span class="built_in">export</span> my_var</span><br></pre></td></tr></table></figure><h2 id="unset"><a href="#unset" class="headerlink" title="unset"></a>unset</h2><p>删除环境变量</p><p>注意：unset 只在当前shell删除环境变量，假如环境变量设置在 <code>~/.bash_profile</code> 等文件中用户重新启动依然生效。如果是在子进程删除全局环境变量只在子进程有效，不会影响父进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 HOME 环境变量，前面不需要带 $ 符号</span></span><br><span class="line"><span class="built_in">unset</span> HOME</span><br></pre></td></tr></table></figure><h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><p>给系统添加新用户</p><p>注：</p><ul><li>在创建新用户时如果不指定具体的值，就会使用系统那些默认值。</li><li>在创建新用户时如果未指定密码，需要使用 <code>passwd</code> 命令进行更改。</li></ul><h4 id="useradd-命令行参数"><a href="#useradd-命令行参数" class="headerlink" title="useradd 命令行参数"></a>useradd 命令行参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-c comment</td><td>给新用户添加备注</td></tr><tr><td>-d home_dir</td><td>为主目录指定一个名字（如果不想用登录名作为主目录名的话）</td></tr><tr><td>-e expire_date</td><td>用YYYY-MM-DD格式指定一个账户过期的日期</td></tr><tr><td>-f inactive_days</td><td>指定这个账户密码过期后多少天这个账户被禁用；0表示密码已过期就立即禁用，1表示禁用这个功能</td></tr><tr><td>-g initial_group</td><td>指定用户登录组的GID或组名</td></tr><tr><td>-G group</td><td>指定用户除登录组之外所属的一个或多个附加组</td></tr><tr><td>-k</td><td>必须和-m一起使用，将/etc/skel目录的内容复制到用户的HOME目录</td></tr><tr><td>-m</td><td>创建用户的HOME目录</td></tr><tr><td>-M</td><td>不创建用户的HOME目录（当默认设置里要求创建时才使用这个选项）</td></tr><tr><td>-n</td><td>创建一个与用户登录名同名的新租</td></tr><tr><td>-r</td><td>创建系统账户</td></tr><tr><td>-p passwd</td><td>为用户账户指定默认密码 (需要使用openssl把明文进行加密后设置，否则无效)</td></tr><tr><td>-s shell</td><td>指定默认的登录shell</td></tr><tr><td>-u uid</td><td>为账户指定唯一的UID</td></tr></tbody></table><h4 id="更改默认值参数"><a href="#更改默认值参数" class="headerlink" title="更改默认值参数"></a>更改默认值参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-b default_home</td><td>更改默认的创建用户HOME目录的位置</td></tr><tr><td>-e expiration_date</td><td>更改默认的心账户的过期日期</td></tr><tr><td>-f inactive</td><td>更改默认的心用户从密码过期到账户被禁用的天数</td></tr><tr><td>-g group</td><td>更改默认的组名称或GID</td></tr><tr><td>-s shell</td><td>更改默认的登录shell</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -D, 查看默认值</span></span><br><span class="line">useradd -D</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">GROUP=100                <span class="comment"># 新用户会被添加到GID为100的公共组</span></span><br><span class="line">HOME=/home               <span class="comment"># 新用户的HOME目录将位于 /home/loginname</span></span><br><span class="line">INACTIVE=-1              <span class="comment"># 新用户账户密码在过期后不会被禁用</span></span><br><span class="line">EXPIRE=                  <span class="comment"># 新用户账户未被设置过期日期</span></span><br><span class="line">SHELL=/bin/bash          <span class="comment"># 新用户账户将bash shell作为默认shell</span></span><br><span class="line">SKEL=/etc/skel           <span class="comment"># 系统会将/etc/skel目录下的内容复制到用户的HOME目录下</span></span><br><span class="line">CREATE_MAIL_SPOOL=yes    <span class="comment"># 系统为该用户账户在mail目录下创建一个用于接收邮件的文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 test 用户, -m 创建 /home/test 目录</span></span><br><span class="line">useradd -m <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个用户并设置密码</span></span><br><span class="line">useradd -m <span class="built_in">test</span> <span class="comment"># 不指定-p，因为需要加密那样很麻烦</span></span><br><span class="line">passwd <span class="built_in">test</span> <span class="comment"># 通过passwd修改指定用户密码</span></span><br></pre></td></tr></table></figure><p>添加新用户后可以执行 <code>cat /etc/passwd</code> 查看用户列表。</p><h2 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h2><p>删除用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除用户，默认会从 /etc/passwd 文件中删除用户信息，而不会删除系统中属于该账户的任何文件</span></span><br><span class="line">userdel 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># -r 用来删除用户目录， 之前创建的 /home/用户名 就不存在了, 使用-r参数需要小心，要检查是否有重要文件。</span></span><br><span class="line">userdel -r 用户名</span><br></pre></td></tr></table></figure><h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><p>修改用户密码, 只有 <code>root</code> 用户才有权限修改别人的密码。</p><p>使用 <code>passwd</code> 一般用于修改单个用户密码，如果想批量修改那么需要 <code>chpasswd</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果不指定用户名，修改的是自己当前用户密码， 回车后输入新密码</span></span><br><span class="line">passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改指定用户密码，比如test用户</span></span><br><span class="line">passwd <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="chpasswd"><a href="#chpasswd" class="headerlink" title="chpasswd"></a>chpasswd</h2><p>类似 <code>passwd</code> 命令也是用于修改用户密码，但它支持批量修改用户。</p><p><code>chpasswd</code> 命令从标准输入自动读取登录名和密码对（由冒号分割）列表，给密码加密。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用输入重定向从文本中读取</span></span><br><span class="line">chpasswd &lt; users.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从标准输入读取</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;test:fff33300..a&#x27;</span> | chpasswd</span><br></pre></td></tr></table></figure><p>user.txt 内容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test:helloworld0123..</span><br><span class="line">test1:fff33300..</span><br><span class="line">admin:youyouyou00..11</span><br></pre></td></tr></table></figure><h2 id="chsh"><a href="#chsh" class="headerlink" title="chsh"></a>chsh</h2><p>修改默认用户登录 shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须使用完整路径，不能使用shell名</span></span><br><span class="line">chsh -s /bin/sh</span><br></pre></td></tr></table></figure><h2 id="users"><a href="#users" class="headerlink" title="users"></a>users</h2><p>显示当前登录系统的所有用户的用户列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">users</span><br><span class="line"><span class="comment"># xiejiahe</span></span><br><span class="line"><span class="comment"># root</span></span><br><span class="line"><span class="comment"># admin</span></span><br></pre></td></tr></table></figure><hr><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢 《Linux命令行与Shell脚本编程大全》 一书，以上部分命令从这本书进行整理出来， 如有错误，欢迎指正，谢谢！</p><p><a href="#">⬆ 回顶部</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>log-drive一次 java.io.IOException Connection reset by peer 故障排查</title>
      <link href="f85e694a.html"/>
      <url>f85e694a.html</url>
      
        <content type="html"><![CDATA[<p>转载地址: <a href="https://mengkang.net/1118.html">https://mengkang.net/1118.html</a></p><p>我的弹幕服务，代码换了个环境运行，虽然服务可用，但是发现出现了如下情况，基本1秒输出来一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">java.io.IOException: Connection reset by peer</span><br><span class="line">  at sun.nio.ch.FileDispatcherImpl.read0(Native Method)</span><br><span class="line">  at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39)</span><br><span class="line">  at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)</span><br><span class="line">  at sun.nio.ch.IOUtil.read(IOUtil.java:192)</span><br><span class="line">  at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:380)</span><br><span class="line">  at io.netty.buffer.PooledUnsafeDirectByteBuf.setBytes(PooledUnsafeDirectByteBuf.java:311)</span><br><span class="line">  at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:853)</span><br><span class="line">  at io.netty.buffer.WrappedByteBuf.writeBytes(WrappedByteBuf.java:641)</span><br><span class="line">  at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:240)</span><br><span class="line">  at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:115)</span><br><span class="line">  at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:514)</span><br><span class="line">  at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:471)</span><br><span class="line">  at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:385)</span><br><span class="line">  at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:351)</span><br><span class="line">  at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:116)</span><br><span class="line">  at io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1412)</span><br><span class="line">  at io.netty.util.internal.chmv8.ForkJoinTask.doExec(ForkJoinTask.java:280)</span><br><span class="line">  at io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:877)</span><br><span class="line">  at io.netty.util.internal.chmv8.ForkJoinPool.scan(ForkJoinPool.java:1706)</span><br><span class="line">  at io.netty.util.internal.chmv8.ForkJoinPool.runWorker(ForkJoinPool.java:1661)</span><br><span class="line">  at io.netty.util.internal.chmv8.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:126)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/netty/netty/issues/5936">https://github.com/netty/netty/issues/5936</a><br><code>Connection reset by peer</code> is typically a result of your peer sending a TCP RST to you.</p></blockquote><h1 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h1><p>既然是网络故障，tcpdump 是否可用呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sudo netstat -lnp|grep 8657</span><br><span class="line">tcp        0      0 0.0.0.0:443                 0.0.0.0:*                   LISTEN      8657&#x2F;java</span><br></pre></td></tr></table></figure><p>没有列出全部的 socket 连接，从当前进程监听的端口入手试试。<code>ifconfig</code>可以看到这台机器有两个网卡（eth0 内网 ip，eth1 公网 ip）。</p><h2 id="tcpdump-下的-tcp-ip-协议解析"><a href="#tcpdump-下的-tcp-ip-协议解析" class="headerlink" title="tcpdump 下的 tcp/ip 协议解析"></a>tcpdump 下的 tcp/ip 协议解析</h2><p>先看下 tcpdump 输出tcp/ip 数据的大致格式</p><blockquote><p>参考 <a href="http://www.tcpdump.org/tcpdump_man.html">http://www.tcpdump.org/tcpdump_man.html</a> 中关于 tcp 协议的描述，我整理了下格式</p></blockquote><p>The general format of a TCP protocol line is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len</span><br></pre></td></tr></table></figure><ol><li><code>src</code> and <code>dst</code> are the source and destination IP addresses and ports.</li><li><code>tcpflags</code> are some combination of <code>S</code> (SYN), <code>F</code> (FIN), <code>P</code> (PUSH), <code>R</code> (RST), <code>U</code> (URG), <code>W</code> (ECN CWR), <code>E</code> (ECN-Echo) or <code>.</code> (ACK), or <code>none</code> if no flags are set.</li><li><code>data-seqno</code> describes the portion of sequence space covered by the data in this packet.</li><li><code>ackno</code> is sequence number of the next data expected the other direction on this connection.</li><li><code>window</code> is the number of bytes of receive buffer space available the other direction on this connection.</li><li><code>urg</code> indicates there is <code>urgent</code> data in the packet.</li><li><code>opts</code> are TCP options (e.g., mss 1024).</li><li><code>len</code> is the length of payload data.</li></ol><h2 id="抓包数据"><a href="#抓包数据" class="headerlink" title="抓包数据"></a>抓包数据</h2><p>通过<code>tcpdump</code>查看下443 端口的网络情况。与上面的格式略有不同。因为我有两个网卡，请求是从 eth0 进，从 eth1 出，我尝试使用<code>tcpdump -i any</code> 发现第三次握手输出的 askno 数据不对。（<strong>为什么会这样呢，还不知道，谁知道请告知下</strong>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$sudo tcpdump -i any -nn port 443</span><br><span class="line"></span><br><span class="line">16:18:41.553460 IP xxx.xxx.238.110.5745 &gt; xxx.xxx.198.40.443: S 806033:806033(0) win 14600 &lt;mss 1460,sackOK,timestamp 2230744217 0,nop,wscale 8&gt;</span><br><span class="line">16:18:41.553483 IP xxx.xxx.198.40.443 &gt; xxx.xxx.238.110.5745: S 1720728675:1720728675(0) ack 806034 win 14480 &lt;mss 1460,sackOK,timestamp 2425389802 2230744217,nop,wscale 7&gt;</span><br><span class="line">16:18:41.553647 IP xxx.xxx.238.110.5745 &gt; xxx.xxx.198.40.443: . ack 1 win 58 &lt;nop,nop,timestamp 2230744217 2425389802&gt;</span><br><span class="line">16:18:41.553677 IP xxx.xxx.238.110.5745 &gt; xxx.xxx.198.40.443: R 1:1(0) ack 1 win 58 &lt;nop,nop,timestamp 2230744217 2425389802&gt;</span><br></pre></td></tr></table></figure><blockquote><p>但是如果你要导出<code>*.pcap</code>文件然后用<code>wireshark</code>来查看，还是得将两个网卡的流量合并到一起才行。</p></blockquote><p>两个网卡分开抓</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 合并到一起写</span><br><span class="line">$sudo tcpdump -i eth0 -nn port 443</span><br><span class="line">$sudo tcpdump -i eth1 -nn port 443</span><br><span class="line"></span><br><span class="line">16:51:16.073956 IP xxx.xxx.238.2.61835 &gt; xxx.xxx.198.40.443: S 2659415794:2659415794(0) win 14600 &lt;mss 1460,sackOK,timestamp 2328745293 0,nop,wscale 8&gt;</span><br><span class="line">16:51:16.073985 IP xxx.xxx.198.40.443 &gt; xxx.xxx.238.2.61835: S 955422999:955422999(0) ack 2659415795 win 14480 &lt;mss 1460,sackOK,timestamp 2427344323 2328745293,nop,wscale 7&gt;</span><br><span class="line">16:51:16.074147 IP xxx.xxx.238.2.61835 &gt; xxx.xxx.198.40.443: . ack 955423000 win 58 &lt;nop,nop,timestamp 2328745293 2427344323&gt;</span><br><span class="line">16:51:16.074192 IP xxx.xxx.238.2.61835 &gt; xxx.xxx.198.40.443: R 0:0(0) ack 1 win 58 &lt;nop,nop,timestamp 2328745293 2427344323&gt;</span><br></pre></td></tr></table></figure><p>上面的握手比较简单对应着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时间 协议 src &gt; dst tcpflags data-seqno ack ackno win window &lt;opts&gt;</span><br></pre></td></tr></table></figure><h2 id="握手逻辑"><a href="#握手逻辑" class="headerlink" title="握手逻辑"></a>握手逻辑</h2><p>一次连接建立的三次握手的步骤：</p><ol><li>Caller sends SYN</li><li>Recipient responds with SYN, ACK</li><li>Caller sends ACK</li></ol><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><ol><li>src 发送的 tcpflags = S，也就是说发送的SYN请求，随机产生一个值 data-seqno = J(<code>2659415794</code>)，并将该数据包发送给 dst</li><li>dst 发送的 tcpflags = S，实际发送的时候 SYN 和 ACK 标志位都置1了，返回一个 ackno=<code>J</code> + 1，也就是<code>2659415795</code>，然后随机生成一个新的 data-seqno = K(<code>955422999</code>) 发送给 src</li><li>src 检查收到的 ackno 是不是等于<code>J</code>+<code>1</code>，然后再发送一个 ackno = <code>K</code>+1，也就是<code>955423000</code>，前面的文档中说道<code>tcpflags</code>为<code>.</code>的时候也表示<code>ACK</code></li><li>src 最后为什么又给 dst 发送一个 tcpflags = R 的请求呢？</li></ol><p><a href="https://mengkang.net/upload/image/2017/1221/1513846681114601.png"><img src="https://mengkang.net/upload/image/2017/1221/1513846681114601.png" alt="一次 java.io.IOException: Connection reset by peer 故障排查"></a></p><h2 id="为什么会出现-RST"><a href="#为什么会出现-RST" class="headerlink" title="为什么会出现 RST"></a>为什么会出现 RST</h2><p>因为具有周期性，我大概猜到了，是 lvs 对我的后端服务的健康检查导致的，联系了网络运营服务客服人员，我把<code>.pcap</code>给他们</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -i any port 443 -c 3 -w log.pcap</span><br></pre></td></tr></table></figure><p>他们确认源地址就是LVS的local地址。<br>健康检查的机制就是建立成功后就 RST 掉，就不占用 session 了。这是公司的规范，问题算是定位了。既然公司的规范，那么我们这边需要定制修改下，针对 vip 发送的 RST 不处理。</p><p>其他参考</p><blockquote><p><a href="https://github.com/netty/netty/issues/6029">https://github.com/netty/netty/issues/6029</a><br><a href="https://tools.ietf.org/html/rfc793">https://tools.ietf.org/html/rfc793</a><br><a href="https://my.oschina.net/costaxu/blog/127394">https://my.oschina.net/costaxu/blog/127394</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ambari-server中postgress启动</title>
      <link href="466081a0.html"/>
      <url>466081a0.html</url>
      
        <content type="html"><![CDATA[<p><img src="../img/image-20210310160022213.png" alt="image-20210310160022213"></p><p> Unable to start PostgreSQL server. Status stopped. . Exiting</p><p>bin  pg_ctl status </p><p> systemctl start  postgresql.service</p><p><img src="../img/image-20210310160212137.png" alt="image-20210310160212137"></p><p>FATAL:  could not write lock file “postmaster.pid”: No space left on device</p><p> df -h</p><p><img src="../img/image-20210310160232827.png" alt="image-20210310160232827"></p><p>systemctl start  postgresql.service</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="4225d45e.html"/>
      <url>4225d45e.html</url>
      
        <content type="html"><![CDATA[<h1 id="搭建单机kafka选型"><a href="#搭建单机kafka选型" class="headerlink" title="搭建单机kafka选型"></a>搭建单机kafka选型</h1><ul><li><p>选择docker容器内集成 kafka,zookeeper 的容器 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 找到的这个 容器设置了 kafka的hostname和 zookeeper的ip ,</span></span><br><span class="line"> docker run -d -e ADVERTISED_HOSTNAME=$(hostname -f)  -e KAFKA_ADVERTISED_HOST_NAME=192.168.248.128 -e ZOOKEEPER_IP=192.168.248.128 -p 9092:9092 -p 2181:2181 --restart=always jrottenberg/kafka-standalone</span><br></pre></td></tr></table></figure><p>基于上面的容器是可以运行 获取到了zookeeper的broker 但是kafka是连接不上 </p></li><li><p>docker-composer 来执行</p><p>参考第 <a href="https://github.com/conduktor/kafka-stack-docker-compose">https://github.com/conduktor/kafka-stack-docker-compose</a> </p><p>但是还有有个问题,我搭建的环境是离线的,尽量还是以 docker命令来执行减少安装其他软件</p></li><li><p>原始的 kafka,zookeeper 分开安装,在设置环境变量(选用的方案)</p></li></ul><h1 id="前置需要安装的软件"><a href="#前置需要安装的软件" class="headerlink" title="前置需要安装的软件"></a>前置需要安装的软件</h1><p>prettyZoo 查看zookeeper很方便</p><p>cmak (kafka manage) kafka监控软件</p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p><a href="https://ioccc.cc/2018/12/12/zookeeper-kafka/">https://ioccc.cc/2018/12/12/zookeeper-kafka/</a>   改部分参考该篇博文</p><h2 id="运行zookeeper"><a href="#运行zookeeper" class="headerlink" title="运行zookeeper"></a>运行zookeeper</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name zookeeper --publish 2181:2181 \</span><br><span class="line"> --volume &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime \</span><br><span class="line"> zookeeper:latest</span><br></pre></td></tr></table></figure><h2 id="运行kafka"><a href="#运行kafka" class="headerlink" title="运行kafka"></a>运行kafka</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kafka --publish 9092:9092 \</span><br><span class="line"> --link zookeeper \</span><br><span class="line"> --env KAFKA_ZOOKEEPER_CONNECT&#x3D;zookeeper:2181 \</span><br><span class="line"> --env KAFKA_ADVERTISED_HOST_NAME&#x3D;HOST_IP \</span><br><span class="line"> --env KAFKA_ADVERTISED_PORT&#x3D;9092 \</span><br><span class="line"> --volume &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime \</span><br><span class="line"> wurstmeister&#x2F;kafka:latest</span><br></pre></td></tr></table></figure><p>进去容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker  exec -it  &lt;ID&gt; &#x2F;bash&#x2F;sh</span><br><span class="line"></span><br><span class="line">cd &#x2F;opt&#x2F;kafka**&#x2F;bin</span><br></pre></td></tr></table></figure><h3 id="创建topic-名为test"><a href="#创建topic-名为test" class="headerlink" title="创建topic 名为test"></a>创建topic 名为test</h3><p> kafka-topics.sh –create –zookeeper zookeeper:2181 –replication-factor 1 –partitions 1 –topic test</p><h3 id="列出所有的topic"><a href="#列出所有的topic" class="headerlink" title="列出所有的topic"></a>列出所有的topic</h3><p> kafka-topics.sh –list –zookeeper zookeeper:2181</p><h3 id="创建生产者输入测试信息"><a href="#创建生产者输入测试信息" class="headerlink" title="创建生产者输入测试信息"></a>创建生产者输入测试信息</h3><p> kafka-console-producer.sh –broker-list localhost:9092 –topic test</p><p> kafka-console-consumer.sh –bootstrap-server localhost:9092 –topic test –from-beginning</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>需要将  KAFKA_ADVERTISED_HOST_NAME=<strong>HOST_IP</strong> 改为 docker所在的ip</p><p>在cmak中是看不到 topic.需要 用3.3.1 的命令去创建</p><p><img src="file://E:/blog/source/img/image-20210307132400145.png?lastModify=1615094706" alt="image-20210307132400145"></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github的action上实例操作</title>
      <link href="50c36cff.html"/>
      <url>50c36cff.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://51.ruyo.net/16876.html">https://51.ruyo.net/16876.html</a>  -&gt;&gt;&gt;&gt;&gt; <a href="https://github.com/bigleek/UnicomTask">https://github.com/bigleek/UnicomTask</a></p><p><a href="https://51.ruyo.net/16050.html">https://51.ruyo.net/16050.html</a>  -&gt;&gt;&gt;&gt;&gt;&gt; <a href="https://github.com/bigleek/Cloud189Checkin-Actions">https://github.com/bigleek/Cloud189Checkin-Actions</a></p><p>github action是github提供的自动化工具能对你参考的代码解析编译构建操作，也可以衍生出其他服务，之前是pro用户才能使用，在GitHub被微软收购后财大气粗的放出的重量级服务，期间很多人滥用action的虚拟机的环境去挖矿</p><p>创建了workflow后在仓库会有个**.github/workflows** 的文件夹，里面可以将敏感信息写到下面的环境变量中</p><p>设置action的环境变量的位置</p><p><img src="../img/image-20220409204154682.png" alt="image-20220409204154682"></p><p>笔者目前对github action有两个用途</p><p>1、主要是定时任务和提醒</p><p>2、主要是不是GitHub仓库的静态资源到腾讯的cloudbase中</p><p>现在先讨论第一种的使用方法</p><p>首先创建GitHub的任意仓库并</p><p><a href="https://github.com/TencentCloudBase/cloudbase-action">TencentCloudBase/cloudbase-action: 云开发 Tencent CloudBase Github Action 可以将 Github 项目自动部署到云开发环境，基于 CloudBase Framework，支持静态网站、云函数、云托管、小程序等项目</a></p><p>创建对应的用户并设置权限</p><p><img src="../img/image-20220409210624384.png" alt="image-20220409210624384"></p><p>授予文件类的权限否则用该用户上传文件时GitHub action会报没有权限</p><p><img src="../img/image-20220409210755155.png" alt="image-20220409210755155"></p><p><img src="../img/image-20220409210455374.png" alt="image-20220409210455374"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务</title>
      <link href="cdcc4eae.html"/>
      <url>cdcc4eae.html</url>
      
        <content type="html"><![CDATA[<p>转载 自 掘金: <a href="https://juejin.cn/post/6844903573667446797%E5%B8%B8%E7%94%A8%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">https://juejin.cn/post/6844903573667446797常用的分布式事务解决方案</a></p><blockquote><p>众所周知，数据库能实现<strong>本地事务</strong>，也就是在<strong>同一个数据库中</strong>，你可以允许一组操作要么全都正确执行，要么全都不执行。这里特别强调了<strong>本地事务</strong>，也就是目前的数据库只能支持同一个数据库中的事务。但现在的系统往往采用微服务架构，业务系统拥有独立的数据库，因此就出现了跨多个数据库的事务需求，这种事务即为“分布式事务”。那么在目前数据库不支持跨库事务的情况下，我们应该如何实现分布式事务呢？本文首先会为大家梳理分布式事务的基本概念和理论基础，然后介绍几种目前常用的分布式事务解决方案。废话不多说，那就开始吧～</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/3/10/1620fc3b8a2646d3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h2 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h2><p>事务由一组操作构成，我们希望这组操作能够全部正确执行，如果这一组操作中的任意一个步骤发生错误，那么就需要回滚之前已经完成的操作。也就是同一个事务中的所有操作，要么全都正确执行，要么全都不要执行。</p><h2 id="事务的四大特性-ACID"><a href="#事务的四大特性-ACID" class="headerlink" title="事务的四大特性 ACID"></a>事务的四大特性 ACID</h2><p>说到事务，就不得不提一下事务著名的四大特性。</p><ul><li>原子性 原子性要求，事务是一个不可分割的执行单元，事务中的所有操作要么全都执行，要么全都不执行。</li><li>一致性 一致性要求，事务在开始前和结束后，数据库的完整性约束没有被破坏。</li><li>隔离性 事务的执行是相互独立的，它们不会相互干扰，一个事务不会看到另一个正在运行过程中的事务的数据。</li><li>持久性 持久性要求，一个事务完成之后，事务的执行结果必须是持久化保存的。即使数据库发生崩溃，在数据库恢复后事务提交的结果仍然不会丢失。</li></ul><blockquote><p>注意：事务只能保证数据库的<strong>高可靠性</strong>，即数据库本身发生问题后，事务提交后的数据仍然能恢复；而如果不是数据库本身的故障，如硬盘损坏了，那么事务提交的数据可能就丢失了。这属于『<strong>高可用性</strong>』的范畴。因此，事务只能保证数据库的『高可靠性』，而『高可用性』需要整个系统共同配合实现。</p></blockquote><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>这里扩展一下，对事务的<strong>隔离性</strong>做一个详细的解释。</p><p>在事务的四大特性ACID中，要求的隔离性是一种严格意义上的隔离，也就是多个事务是串行执行的，彼此之间不会受到任何干扰。这确实能够完全保证数据的安全性，但在实际业务系统中，这种方式性能不高。因此，数据库定义了四种隔离级别，隔离级别和数据库的性能是呈反比的，隔离级别越低，数据库性能越高，而隔离级别越高，数据库性能越差。</p><h3 id="事务并发执行会出现的问题"><a href="#事务并发执行会出现的问题" class="headerlink" title="事务并发执行会出现的问题"></a>事务并发执行会出现的问题</h3><p>我们先来看一下在不同的隔离级别下，数据库可能会出现的问题：</p><ol><li>更新丢失 当有两个并发执行的事务，更新同一行数据，那么有可能一个事务会把另一个事务的更新覆盖掉。 当数据库没有加任何锁操作的情况下会发生。</li><li>脏读 一个事务读到另一个尚未提交的事务中的数据。 该数据可能会被回滚从而失效。 如果第一个事务拿着失效的数据去处理那就发生错误了。</li><li>不可重复读 不可重复度的含义：一个事务对同一行数据读了两次，却得到了不同的结果。它具体分为如下两种情况：<ul><li>虚读：在事务1两次读取同一记录的过程中，事务2对该记录进行了修改，从而事务1第二次读到了不一样的记录。</li><li>幻读：事务1在两次查询的过程中，事务2对该表进行了插入、删除操作，从而事务1第二次查询的结果发生了变化。</li></ul></li></ol><blockquote><p>不可重复读 与 脏读 的区别？ 脏读读到的是尚未提交的数据，而不可重复读读到的是已经提交的数据，只不过在两次读的过程中数据被另一个事务改过了。</p></blockquote><h3 id="数据库的四种隔离级别"><a href="#数据库的四种隔离级别" class="headerlink" title="数据库的四种隔离级别"></a>数据库的四种隔离级别</h3><p>数据库一共有如下四种隔离级别：</p><ol><li>Read uncommitted 读未提交 在该级别下，一个事务对一行数据修改的过程中，不允许另一个事务对该行数据进行修改，但允许另一个事务对该行数据读。 因此本级别下，不会出现更新丢失，但会出现脏读、不可重复读。</li><li>Read committed 读提交 在该级别下，未提交的写事务不允许其他事务访问该行，因此不会出现脏读；但是读取数据的事务允许其他事务的访问该行数据，因此会出现不可重复读的情况。</li><li>Repeatable read 重复读 在该级别下，读事务禁止写事务，但允许读事务，因此不会出现同一事务两次读到不同的数据的情况（不可重复读），且写事务禁止其他一切事务。</li><li>Serializable 序列化 该级别要求所有事务都必须串行执行，因此能避免一切因并发引起的问题，但效率很低。</li></ol><p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p><hr><h2 id="什么是分布式事务？"><a href="#什么是分布式事务？" class="headerlink" title="什么是分布式事务？"></a>什么是分布式事务？</h2><p>到此为止，所介绍的事务都是基于单数据库的本地事务，目前的数据库仅支持单库事务，并不支持跨库事务。而随着微服务架构的普及，一个大型业务系统往往由若干个子系统构成，这些子系统又拥有各自独立的数据库。往往一个业务流程需要由多个子系统共同完成，而且这些操作可能需要在一个事务中完成。在微服务系统中，这些业务场景是普遍存在的。此时，我们就需要在数据库之上通过某种手段，实现支持跨数据库的事务支持，这也就是大家常说的“分布式事务”。</p><p>这里举一个分布式事务的典型例子——用户下单过程。 当我们的系统采用了微服务架构后，一个电商系统往往被拆分成如下几个子系统：商品系统、订单系统、支付系统、积分系统等。整个下单的过程如下：</p><ol><li>用户通过商品系统浏览商品，他看中了某一项商品，便点击下单</li><li>此时订单系统会生成一条订单</li><li>订单创建成功后，支付系统提供支付功能</li><li>当支付完成后，由积分系统为该用户增加积分</li></ol><p>上述步骤2、3、4需要在一个事务中完成。对于传统单体应用而言，实现事务非常简单，只需将这三个步骤放在一个方法A中，再用Spring的@Transactional注解标识该方法即可。Spring通过数据库的事务支持，保证这些步骤要么全都执行完成，要么全都不执行。但在这个微服务架构中，这三个步骤涉及三个系统，涉及三个数据库，此时我们必须在数据库和应用系统之间，通过某项黑科技，实现分布式事务的支持。</p><h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><p>CAP理论说的是：在一个分布式系统中，最多只能满足C、A、P中的两个需求。</p><p>CAP的含义：</p><ul><li>C：Consistency 一致性 同一数据的多个副本是否实时相同。</li><li>A：Availability 可用性 可用性：一定时间内 &amp; 系统返回一个明确的结果 则称为该系统可用。</li><li>P：Partition tolerance 分区容错性 将同一服务分布在多个系统中，从而保证某一个系统宕机，仍然有其他系统提供相同的服务。</li></ul><p>CAP理论告诉我们，在分布式系统中，C、A、P三个条件中我们最多只能选择两个。那么问题来了，究竟选择哪两个条件较为合适呢？</p><p>对于一个业务系统来说，可用性和分区容错性是必须要满足的两个条件，并且这两者是相辅相成的。业务系统之所以使用分布式系统，主要原因有两个：</p><ul><li>提升整体性能 当业务量猛增，单个服务器已经无法满足我们的业务需求的时候，就需要使用分布式系统，使用多个节点提供相同的功能，从而整体上提升系统的性能，这就是使用分布式系统的第一个原因。</li><li>实现分区容错性 单一节点 或 多个节点处于相同的网络环境下，那么会存在一定的风险，万一该机房断电、该地区发生自然灾害，那么业务系统就全面瘫痪了。为了防止这一问题，采用分布式系统，将多个子系统分布在不同的地域、不同的机房中，从而保证系统高可用性。</li></ul><p>这说明分区容错性是分布式系统的根本，如果分区容错性不能满足，那使用分布式系统将失去意义。</p><p>此外，可用性对业务系统也尤为重要。在大谈用户体验的今天，如果业务系统时常出现“系统异常”、响应时间过长等情况，这使得用户对系统的好感度大打折扣，在互联网行业竞争激烈的今天，相同领域的竞争者不甚枚举，系统的间歇性不可用会立马导致用户流向竞争对手。因此，我们只能通过牺牲一致性来换取系统的<strong>可用性</strong>和<strong>分区容错性</strong>。这也就是下面要介绍的BASE理论。</p><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><p>CAP理论告诉我们一个悲惨但不得不接受的事实——我们只能在C、A、P中选择两个条件。而对于业务系统而言，我们往往选择牺牲一致性来换取系统的可用性和分区容错性。不过这里要指出的是，所谓的“牺牲一致性”并不是完全放弃数据一致性，而是牺牲<strong>强一致性</strong>换取<strong>弱一致性</strong>。下面来介绍下BASE理论。</p><ul><li>BA：Basic Available 基本可用<ul><li>整个系统在某些不可抗力的情况下，仍然能够保证“可用性”，即一定时间内仍然能够返回一个明确的结果。只不过“基本可用”和“高可用”的区别是：<ul><li>“一定时间”可以适当延长 当举行大促时，响应时间可以适当延长</li><li>给部分用户返回一个降级页面 给部分用户直接返回一个降级页面，从而缓解服务器压力。但要注意，返回降级页面仍然是返回明确结果。</li></ul></li></ul></li><li>S：Soft State：柔性状态 同一数据的不同副本的状态，可以不需要实时一致。</li><li>E：Eventual Consisstency：最终一致性 同一数据的不同副本的状态，可以不需要实时一致，但一定要保证经过一定时间后仍然是一致的。</li></ul><h2 id="酸碱平衡"><a href="#酸碱平衡" class="headerlink" title="酸碱平衡"></a>酸碱平衡</h2><p>ACID能够保证事务的强一致性，即数据是实时一致的。这在本地事务中是没有问题的，在分布式事务中，强一致性会极大影响分布式系统的性能，因此分布式系统中遵循BASE理论即可。但分布式系统的不同业务场景对一致性的要求也不同。如交易场景下，就要求强一致性，此时就需要遵循ACID理论，而在注册成功后发送短信验证码等场景下，并不需要实时一致，因此遵循BASE理论即可。因此要根据具体业务场景，在ACID和BASE之间寻求平衡。</p><h2 id="分布式事务协议"><a href="#分布式事务协议" class="headerlink" title="分布式事务协议"></a>分布式事务协议</h2><p>下面介绍几种实现分布式事务的协议。</p><h3 id="两阶段提交协议-2PC"><a href="#两阶段提交协议-2PC" class="headerlink" title="两阶段提交协议 2PC"></a>两阶段提交协议 2PC</h3><p>分布式系统的一个难点是如何保证架构下多个节点在进行事务性操作的时候保持一致性。为实现这个目的，二阶段提交算法的成立基于以下假设：</p><ul><li>该分布式系统中，存在一个节点作为协调者(Coordinator)，其他节点作为参与者(Cohorts)。且节点之间可以进行网络通信。</li><li>所有节点都采用预写式日志，且日志被写入后即被保持在可靠的存储设备上，即使节点损坏不会导致日志数据的消失。</li><li>所有节点不会永久性损坏，即使损坏后仍然可以恢复。</li></ul><p><strong>1. 第一阶段（投票阶段）：</strong></p><ol><li>协调者节点向所有参与者节点询问是否可以执行提交操作(vote)，并开始等待各参与者节点的响应。</li><li>参与者节点执行询问发起为止的所有事务操作，并将Undo信息和Redo信息写入日志。（注意：若成功这里其实每个参与者已经执行了事务操作）</li><li>各参与者节点响应协调者节点发起的询问。如果参与者节点的事务操作实际执行成功，则它返回一个”同意”消息；如果参与者节点的事务操作实际执行失败，则它返回一个”中止”消息。</li></ol><p><strong>2. 第二阶段（提交执行阶段）：</strong></p><p>当协调者节点从所有参与者节点获得的相应消息都为”同意”时：</p><ol><li>协调者节点向所有参与者节点发出”正式提交(commit)”的请求。</li><li>参与者节点正式完成操作，并释放在整个事务期间内占用的资源。</li><li>参与者节点向协调者节点发送”完成”消息。</li><li>协调者节点受到所有参与者节点反馈的”完成”消息后，完成事务。</li></ol><p>如果任一参与者节点在第一阶段返回的响应消息为”中止”，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：</p><ol><li>协调者节点向所有参与者节点发出”回滚操作(rollback)”的请求。</li><li>参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源。</li><li>参与者节点向协调者节点发送”回滚完成”消息。</li><li>协调者节点受到所有参与者节点反馈的”回滚完成”消息后，取消事务。</li></ol><p>不管最后结果如何，第二阶段都会结束当前事务。</p><p>二阶段提交看起来确实能够提供原子性的操作，但是不幸的事，二阶段提交还是有几个缺点的：</p><ol><li>执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态。</li><li>参与者发生故障。协调者需要给每个参与者额外指定超时机制，超时后整个事务失败。（没有多少容错机制）</li><li>协调者发生故障。参与者会一直阻塞下去。需要额外的备机进行容错。（这个可以依赖后面要讲的Paxos协议实现HA）</li><li>二阶段无法解决的问题：协调者再发出commit消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。</li></ol><p>为此，Dale Skeen和Michael Stonebraker在“A Formal Model of Crash Recovery in a Distributed System”中提出了三阶段提交协议（3PC）。</p><h3 id="三阶段提交协议-3PC"><a href="#三阶段提交协议-3PC" class="headerlink" title="三阶段提交协议 3PC"></a>三阶段提交协议 3PC</h3><p>与两阶段提交不同的是，三阶段提交有两个改动点。</p><ul><li>引入超时机制。同时在协调者和参与者中都引入超时机制。</li><li>在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。</li></ul><p>也就是说，除了引入超时机制之外，3PC把2PC的准备阶段再次一分为二，这样三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段。</p><p><strong>1. CanCommit阶段</strong></p><p>3PC的CanCommit阶段其实和2PC的准备阶段很像。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。</p><ol><li>事务询问 协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。</li><li>响应反馈 参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No</li></ol><p><strong>2. PreCommit阶段</strong></p><p>协调者根据参与者的反应情况来决定是否可以记性事务的PreCommit操作。根据响应情况，有以下两种可能。 假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行。</p><ol><li>发送预提交请求 协调者向参与者发送PreCommit请求，并进入Prepared阶段。</li><li>事务预提交 参与者接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中。</li><li>响应反馈 如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。</li></ol><p>假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。</p><ol><li>发送中断请求 协调者向所有参与者发送abort请求。</li><li>中断事务 参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。</li></ol><p><strong>3. doCommit阶段</strong> 该阶段进行真正的事务提交，也可以分为以下两种情况。</p><p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p><p><strong>3.1 执行提交</strong></p><ol><li>发送提交请求 协调接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。</li><li>事务提交 参与者接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。</li><li>响应反馈 事务提交完之后，向协调者发送Ack响应。</li><li>完成事务 协调者接收到所有参与者的ack响应之后，完成事务。</li></ol><p><strong>3.2 中断事务</strong> 协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。</p><ol><li>发送中断请求 协调者向所有参与者发送abort请求</li><li>事务回滚 参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。</li><li>反馈结果 参与者完成事务回滚之后，向协调者发送ACK消息</li><li>中断事务 协调者接收到参与者反馈的ACK消息之后，执行事务的中断。</li></ol><h2 id="分布式事务的解决方案"><a href="#分布式事务的解决方案" class="headerlink" title="分布式事务的解决方案"></a>分布式事务的解决方案</h2><p>分布式事务的解决方案有如下几种：</p><ul><li>全局消息</li><li>基于可靠消息服务的分布式事务</li><li>TCC</li><li>最大努力通知</li></ul><h3 id="方案1：全局事务（DTP模型）"><a href="#方案1：全局事务（DTP模型）" class="headerlink" title="方案1：全局事务（DTP模型）"></a>方案1：全局事务（DTP模型）</h3><p>全局事务基于DTP模型实现。DTP是由X/Open组织提出的一种分布式事务模型——X/Open Distributed Transaction Processing Reference Model。它规定了要实现分布式事务，需要三种角色：</p><ul><li>AP：Application 应用系统 它就是我们开发的业务系统，在我们开发的过程中，可以使用资源管理器提供的事务接口来实现分布式事务。</li><li>TM：Transaction Manager 事务管理器<ul><li>分布式事务的实现由事务管理器来完成，它会提供分布式事务的操作接口供我们的业务系统调用。这些接口称为TX接口。</li><li>事务管理器还管理着所有的资源管理器，通过它们提供的XA接口来同一调度这些资源管理器，以实现分布式事务。</li><li>DTP只是一套实现分布式事务的规范，并没有定义具体如何实现分布式事务，TM可以采用2PC、3PC、Paxos等协议实现分布式事务。</li></ul></li><li>RM：Resource Manager 资源管理器<ul><li>能够提供数据服务的对象都可以是资源管理器，比如：数据库、消息中间件、缓存等。大部分场景下，数据库即为分布式事务中的资源管理器。</li><li>资源管理器能够提供单数据库的事务能力，它们通过XA接口，将本数据库的提交、回滚等能力提供给事务管理器调用，以帮助事务管理器实现分布式的事务管理。</li><li>XA是DTP模型定义的接口，用于向事务管理器提供该资源管理器(该数据库)的提交、回滚等能力。</li><li>DTP只是一套实现分布式事务的规范，RM具体的实现是由数据库厂商来完成的。</li></ul></li></ul><blockquote><ol><li>有没有基于DTP模型的分布式事务中间件？</li></ol></blockquote><ol><li>DTP模型有啥优缺点？</li></ol><h3 id="方案2：基于可靠消息服务的分布式事务"><a href="#方案2：基于可靠消息服务的分布式事务" class="headerlink" title="方案2：基于可靠消息服务的分布式事务"></a>方案2：基于可靠消息服务的分布式事务</h3><p>这种实现分布式事务的方式需要通过消息中间件来实现。假设有A和B两个系统，分别可以处理任务A和任务B。此时系统A中存在一个业务流程，需要将任务A和任务B在同一个事务中处理。下面来介绍基于消息中间件来实现这种分布式事务。</p><p>![title](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="383" height="474"></svg>)</p><ul><li>在系统A处理任务A前，首先向消息中间件发送一条消息</li><li>消息中间件收到后将该条消息持久化，但并不投递。此时下游系统B仍然不知道该条消息的存在。</li><li>消息中间件持久化成功后，便向系统A返回一个确认应答；</li><li>系统A收到确认应答后，则可以开始处理任务A；</li><li>任务A处理完成后，向消息中间件发送Commit请求。该请求发送完成后，对系统A而言，该事务的处理过程就结束了，此时它可以处理别的任务了。 但commit消息可能会在传输途中丢失，从而消息中间件并不会向系统B投递这条消息，从而系统就会出现不一致性。这个问题由消息中间件的事务回查机制完成，下文会介绍。</li><li>消息中间件收到Commit指令后，便向系统B投递该消息，从而触发任务B的执行；</li><li>当任务B执行完成后，系统B向消息中间件返回一个确认应答，告诉消息中间件该消息已经成功消费，此时，这个分布式事务完成。</li></ul><blockquote><p>上述过程可以得出如下几个结论：</p></blockquote><ol><li>消息中间件扮演者分布式事务协调者的角色。</li><li>系统A完成任务A后，到任务B执行完成之间，会存在一定的时间差。在这个时间差内，整个系统处于数据不一致的状态，但这短暂的不一致性是可以接受的，因为经过短暂的时间后，系统又可以保持数据一致性，满足BASE理论。</li></ol><p>上述过程中，如果任务A处理失败，那么需要进入回滚流程，如下图所示：</p><p>![title](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="336" height="472"></svg>)</p><ul><li>若系统A在处理任务A时失败，那么就会向消息中间件发送Rollback请求。和发送Commit请求一样，系统A发完之后便可以认为回滚已经完成，它便可以去做其他的事情。</li><li>消息中间件收到回滚请求后，直接将该消息丢弃，而不投递给系统B，从而不会触发系统B的任务B。</li></ul><blockquote><p>此时系统又处于一致性状态，因为任务A和任务B都没有执行。</p></blockquote><p>上面所介绍的Commit和Rollback都属于理想情况，但在实际系统中，Commit和Rollback指令都有可能在传输途中丢失。那么当出现这种情况的时候，消息中间件是如何保证数据一致性呢？——答案就是超时询问机制。</p><p>![title](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="417" height="549"></svg>)</p><p>系统A除了实现正常的业务流程外，还需提供一个事务询问的接口，供消息中间件调用。当消息中间件收到一条事务型消息后便开始计时，如果到了超时时间也没收到系统A发来的Commit或Rollback指令的话，就会主动调用系统A提供的事务询问接口询问该系统目前的状态。该接口会返回三种结果：</p><ul><li>提交 若获得的状态是“提交”，则将该消息投递给系统B。</li><li>回滚 若获得的状态是“回滚”，则直接将条消息丢弃。</li><li>处理中 若获得的状态是“处理中”，则继续等待。</li></ul><blockquote><p>消息中间件的超时询问机制能够防止上游系统因在传输过程中丢失Commit/Rollback指令而导致的系统不一致情况，而且能降低上游系统的阻塞时间，上游系统只要发出Commit/Rollback指令后便可以处理其他任务，无需等待确认应答。而Commit/Rollback指令丢失的情况通过超时询问机制来弥补，这样大大降低上游系统的阻塞时间，提升系统的并发度。</p></blockquote><p>下面来说一说消息投递过程的可靠性保证。 当上游系统执行完任务并向消息中间件提交了Commit指令后，便可以处理其他任务了，此时它可以认为事务已经完成，接下来消息中间件<strong>一定会保证消息被下游系统成功消费掉！</strong>那么这是怎么做到的呢？这由消息中间件的投递流程来保证。</p><p>消息中间件向下游系统投递完消息后便进入阻塞等待状态，下游系统便立即进行任务的处理，任务处理完成后便向消息中间件返回应答。消息中间件收到确认应答后便认为该事务处理完毕！</p><p>如果消息在投递过程中丢失，或消息的确认应答在返回途中丢失，那么消息中间件在等待确认应答超时之后就会重新投递，直到下游消费者返回消费成功响应为止。当然，一般消息中间件可以设置消息重试的次数和时间间隔，比如：当第一次投递失败后，每隔五分钟重试一次，一共重试3次。如果重试3次之后仍然投递失败，那么这条消息就需要人工干预。</p><p>![title](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="440" height="541"></svg>)</p><p>![title](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="432" height="598"></svg>)</p><blockquote><p>有的同学可能要问：消息投递失败后为什么不回滚消息，而是不断尝试重新投递？</p></blockquote><p>这就涉及到整套分布式事务系统的实现成本问题。 我们知道，当系统A将向消息中间件发送Commit指令后，它便去做别的事情了。如果此时消息投递失败，需要回滚的话，就需要让系统A事先提供回滚接口，这无疑增加了额外的开发成本，业务系统的复杂度也将提高。对于一个业务系统的设计目标是，在保证性能的前提下，最大限度地降低系统复杂度，从而能够降低系统的运维成本。</p><blockquote><p>不知大家是否发现，上游系统A向消息中间件提交Commit/Rollback消息采用的是异步方式，也就是当上游系统提交完消息后便可以去做别的事情，接下来提交、回滚就完全交给消息中间件来完成，并且完全信任消息中间件，认为它一定能正确地完成事务的提交或回滚。然而，消息中间件向下游系统投递消息的过程是同步的。也就是消息中间件将消息投递给下游系统后，它会阻塞等待，等下游系统成功处理完任务返回确认应答后才取消阻塞等待。为什么这两者在设计上是不一致的呢？</p></blockquote><p>首先，上游系统和消息中间件之间采用异步通信是为了提高系统并发度。业务系统直接和用户打交道，用户体验尤为重要，因此这种异步通信方式能够极大程度地降低用户等待时间。此外，异步通信相对于同步通信而言，没有了长时间的阻塞等待，因此系统的并发性也大大增加。但异步通信可能会引起Commit/Rollback指令丢失的问题，这就由消息中间件的超时询问机制来弥补。</p><p>那么，消息中间件和下游系统之间为什么要采用同步通信呢？</p><p>异步能提升系统性能，但随之会增加系统复杂度；而同步虽然降低系统并发度，但实现成本较低。因此，在对并发度要求不是很高的情况下，或者服务器资源较为充裕的情况下，我们可以选择同步来降低系统的复杂度。 我们知道，消息中间件是一个独立于业务系统的第三方中间件，它不和任何业务系统产生直接的耦合，它也不和用户产生直接的关联，它一般部署在独立的服务器集群上，具有良好的可扩展性，所以不必太过于担心它的性能，如果处理速度无法满足我们的要求，可以增加机器来解决。而且，即使消息中间件处理速度有一定的延迟那也是可以接受的，因为前面所介绍的BASE理论就告诉我们了，我们追求的是最终一致性，而非实时一致性，因此消息中间件产生的时延导致事务短暂的不一致是可以接受的。</p><h3 id="方案3：最大努力通知（定期校对）"><a href="#方案3：最大努力通知（定期校对）" class="headerlink" title="方案3：最大努力通知（定期校对）"></a>方案3：最大努力通知（定期校对）</h3><p>最大努力通知也被称为定期校对，其实在方案二中已经包含，这里再单独介绍，主要是为了知识体系的完整性。这种方案也需要消息中间件的参与，其过程如下：</p><p>![title](data:image/svg+xml;utf8,<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="635" height="262"></svg>)</p><ul><li>上游系统在完成任务后，向消息中间件同步地发送一条消息，确保消息中间件成功持久化这条消息，然后上游系统可以去做别的事情了；</li><li>消息中间件收到消息后负责将该消息同步投递给相应的下游系统，并触发下游系统的任务执行；</li><li>当下游系统处理成功后，向消息中间件反馈确认应答，消息中间件便可以将该条消息删除，从而该事务完成。</li></ul><p>上面是一个理想化的过程，但在实际场景中，往往会出现如下几种意外情况：</p><ol><li>消息中间件向下游系统投递消息失败</li><li>上游系统向消息中间件发送消息失败</li></ol><p>对于第一种情况，消息中间件具有重试机制，我们可以在消息中间件中设置消息的重试次数和重试时间间隔，对于网络不稳定导致的消息投递失败的情况，往往重试几次后消息便可以成功投递，如果超过了重试的上限仍然投递失败，那么消息中间件不再投递该消息，而是记录在失败消息表中，消息中间件需要提供失败消息的查询接口，下游系统会定期查询失败消息，并将其消费，这就是所谓的“定期校对”。</p><p>如果重复投递和定期校对都不能解决问题，往往是因为下游系统出现了严重的错误，此时就需要人工干预。</p><p>对于第二种情况，需要在上游系统中建立消息重发机制。可以在上游系统建立一张本地消息表，并将 <strong>任务处理过程</strong> 和 <strong>向本地消息表中插入消息</strong> 这两个步骤放在一个本地事务中完成。如果向本地消息表插入消息失败，那么就会触发回滚，之前的任务处理结果就会被取消。如果这量步都执行成功，那么该本地事务就完成了。接下来会有一个专门的消息发送者不断地发送本地消息表中的消息，如果发送失败它会返回重试。当然，也要给消息发送者设置重试的上限，一般而言，达到重试上限仍然发送失败，那就意味着消息中间件出现严重的问题，此时也只有人工干预才能解决问题。</p><p>对于不支持事务型消息的消息中间件，如果要实现分布式事务的话，就可以采用这种方式。它能够通过<strong>重试机制</strong>+<strong>定期校对</strong>实现分布式事务，但相比于第二种方案，它达到数据一致性的周期较长，而且还需要在上游系统中实现消息重试发布机制，以确保消息成功发布给消息中间件，这无疑增加了业务系统的开发成本，使得业务系统不够纯粹，并且这些额外的业务逻辑无疑会占用业务系统的硬件资源，从而影响性能。</p><p>因此，尽量选择支持事务型消息的消息中间件来实现分布式事务，如RocketMQ。</p><h3 id="方案4：TCC（两阶段型、补偿型）"><a href="#方案4：TCC（两阶段型、补偿型）" class="headerlink" title="方案4：TCC（两阶段型、补偿型）"></a>方案4：TCC（两阶段型、补偿型）</h3><p>TCC即为Try Confirm Cancel，它属于补偿型分布式事务。顾名思义，TCC实现分布式事务一共有三个步骤：</p><ul><li>Try：尝试待执行的业务<ul><li>这个过程并未执行业务，只是完成所有业务的一致性检查，并预留好执行所需的全部资源</li></ul></li><li>Confirm：执行业务<ul><li>这个过程真正开始执行业务，由于Try阶段已经完成了一致性检查，因此本过程直接执行，而不做任何检查。并且在执行的过程中，会使用到Try阶段预留的业务资源。</li></ul></li><li>Cancel：取消执行的业务<ul><li>若业务执行失败，则进入Cancel阶段，它会释放所有占用的业务资源，并回滚Confirm阶段执行的操作。</li></ul></li></ul><p>下面以一个转账的例子来解释下TCC实现分布式事务的过程。</p><blockquote><p>假设用户A用他的账户余额给用户B发一个100元的红包，并且余额系统和红包系统是两个独立的系统。</p></blockquote><ul><li>Try<ul><li>创建一条转账流水，并将流水的状态设为<strong>交易中</strong></li><li>将用户A的账户中扣除100元（预留业务资源）</li><li>Try成功之后，便进入Confirm阶段</li><li>Try过程发生任何异常，均进入Cancel阶段</li></ul></li><li>Confirm<ul><li>向B用户的红包账户中增加100元</li><li>将流水的状态设为<strong>交易已完成</strong></li><li>Confirm过程发生任何异常，均进入Cancel阶段</li><li>Confirm过程执行成功，则该事务结束</li></ul></li><li>Cancel<ul><li>将用户A的账户增加100元</li><li>将流水的状态设为<strong>交易失败</strong></li></ul></li></ul><p>在传统事务机制中，业务逻辑的执行和事务的处理，是在不同的阶段由不同的部件来完成的：业务逻辑部分访问资源实现数据存储，其处理是由业务系统负责；事务处理部分通过协调资源管理器以实现事务管理，其处理由事务管理器来负责。二者没有太多交互的地方，所以，传统事务管理器的事务处理逻辑，仅需要着眼于事务完成（commit/rollback）阶段，而不必关注业务执行阶段。</p><h4 id="TCC全局事务必须基于RM本地事务来实现全局事务"><a href="#TCC全局事务必须基于RM本地事务来实现全局事务" class="headerlink" title="TCC全局事务必须基于RM本地事务来实现全局事务"></a>TCC全局事务必须基于RM本地事务来实现全局事务</h4><p>TCC服务是由Try/Confirm/Cancel业务构成的， 其Try/Confirm/Cancel业务在执行时，会访问资源管理器（Resource Manager，下文简称RM）来存取数据。这些存取操作，必须要参与RM本地事务，以使其更改的数据要么都commit，要么都rollback。</p><p>这一点不难理解，考虑一下如下场景：</p><p><img src="https://user-gold-cdn.xitu.io/2018/3/10/1620fc316321942a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="title"></p><p>假设图中的服务B没有基于RM本地事务（以RDBS为例，可通过设置auto-commit为true来模拟），那么一旦[B:Try]操作中途执行失败，TCC事务框架后续决定回滚全局事务时，该[B:Cancel]则需要判断[B:Try]中哪些操作已经写到DB、哪些操作还没有写到DB：假设[B:Try]业务有5个写库操作，[B:Cancel]业务则需要逐个判断这5个操作是否生效，并将生效的操作执行反向操作。</p><p>不幸的是，由于[B:Cancel]业务也有n（0&lt;=n&lt;=5）个反向的写库操作，此时一旦[B:Cancel]也中途出错，则后续的[B:Cancel]执行任务更加繁重。因为，相比第一次[B:Cancel]操作，后续的[B:Cancel]操作还需要判断先前的[B:Cancel]操作的n（0&lt;=n&lt;=5）个写库中哪几个已经执行、哪几个还没有执行，这就涉及到了幂等性问题。而对幂等性的保障，又很可能还需要涉及额外的写库操作，该写库操作又会因为没有RM本地事务的支持而存在类似问题。。。可想而知，如果不基于RM本地事务，TCC事务框架是无法有效的管理TCC全局事务的。</p><p>反之，基于RM本地事务的TCC事务，这种情况则会很容易处理：[B:Try]操作中途执行失败，TCC事务框架将其参与RM本地事务直接rollback即可。后续TCC事务框架决定回滚全局事务时，在知道“[B:Try]操作涉及的RM本地事务已经rollback”的情况下，根本无需执行[B:Cancel]操作。</p><p>换句话说，基于RM本地事务实现TCC事务框架时，一个TCC型服务的cancel业务要么执行，要么不执行，不需要考虑部分执行的情况。</p><h4 id="TCC事务框架应该提供Confirm-Cancel服务的幂等性保障"><a href="#TCC事务框架应该提供Confirm-Cancel服务的幂等性保障" class="headerlink" title="TCC事务框架应该提供Confirm/Cancel服务的幂等性保障"></a>TCC事务框架应该提供Confirm/Cancel服务的幂等性保障</h4><p>一般认为，服务的幂等性，是指针对同一个服务的多次(n&gt;1)请求和对它的单次(n=1)请求，二者具有相同的副作用。</p><p>在TCC事务模型中，Confirm/Cancel业务可能会被重复调用，其原因很多。比如，全局事务在提交/回滚时会调用各TCC服务的Confirm/Cancel业务逻辑。执行这些Confirm/Cancel业务时，可能会出现如网络中断的故障而使得全局事务不能完成。因此，故障恢复机制后续仍然会重新提交/回滚这些未完成的全局事务，这样就会再次调用参与该全局事务的各TCC服务的Confirm/Cancel业务逻辑。</p><p>既然Confirm/Cancel业务可能会被多次调用，就需要保障其幂等性。 那么，应该由TCC事务框架来提供幂等性保障？还是应该由业务系统自行来保障幂等性呢？ 个人认为，应该是由TCC事务框架来提供幂等性保障。如果仅仅只是极个别服务存在这个问题的话，那么由业务系统来负责也是可以的；然而，这是一类公共问题，毫无疑问，所有TCC服务的Confirm/Cancel业务存在幂等性问题。TCC服务的公共问题应该由TCC事务框架来解决；而且，考虑一下由业务系统来负责幂等性需要考虑的问题，就会发现，这无疑增大了业务系统的复杂度。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://www.infoq.com/cn/interviews/soa-chengli">大规模SOA系统中的分布事务处理_程立</a></li><li><a href="https://cs.brown.edu/courses/cs227/archives/2012/papers/weaker/cidr07p15.pdf">Life beyond Distributed Transactions: an Apostate’s Opinion</a></li><li><a href="http://www.bytesoft.org/tcc-intro/">关于如何实现一个TCC分布式事务框架的一点思考</a></li><li><a href="http://www.enterpriseintegrationpatterns.com/patterns/conversation/TryConfirmCancel.html">How can a requestor ensure a consistent outcome across multiple, independent providers</a></li><li><a href="http://www.hollischuang.com/archives/681#rd?sukey=3997c0719f1515205acb269da14295ad50b0186483fbd0a402a566f45b33525978b375ccc44dba3e85c4d645a320ba47">关于分布式事务、两阶段提交协议、三阶提交协议</a></li><li><a href="https://en.wikipedia.org/wiki/Three-phase_commit_protocol_ei.cs.vt.edu/~cs5204/fall99/distributedDBMS/sreenu/3pc.html">Three-phase commit protocol</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器插件推荐(转载)</title>
      <link href="d4fc710d.html"/>
      <url>d4fc710d.html</url>
      
        <content type="html"><![CDATA[<p>转载于 <a href="https://www.runningcheese.com/extensions">https://www.runningcheese.com/extensions</a>(作者 奔跑中的奶酪 )</p><p><strong>扩展之于浏览器，就像 APP 之于智能手机。</strong></p><p>浏览器扩展的数量成千上万，但真正好用的并不多，能被用户选择使用的其实也就 50个 左右，而真正安装到浏览器上的也不会超过 20 个。</p><p>此外，网上推荐扩展的文章也很多，但大多”<strong>没什么卵用</strong>“。</p><p>这类文章通常会喜欢标题党<strong>，动不动就是这个神器，那个黑科技，又或者</strong>喜欢推荐 Adblock Plus <strong>这种入门拓展，还有就是错误地</strong>把扩展（或拓展）说成是插件，这就像给你推荐电脑的人，他总是把硬盘说成是内存。</p><p>下面是我总结的<strong>2020 年度最喜欢浏览器扩展</strong>，支持 Chrome、Firefox、Edge，预计能帮你解决 90% 的浏览器扩展需求。</p><h2 id="我们需要什么样的扩展？"><a href="#我们需要什么样的扩展？" class="headerlink" title="我们需要什么样的扩展？"></a>我们需要什么样的扩展？</h2><p>作为一个有 6 年开发经验，试用超过 2000 多款扩展的用户，我经常在想，我们到底需要什么样的扩展？下面是我的两个理解：</p><h3 id="1、用合适的工具做事"><a href="#1、用合适的工具做事" class="headerlink" title="1、用合适的工具做事"></a><strong>1、用合适的工具做事</strong></h3><p>由于浏览器应用层面的限制，扩展的功能是带着“<strong>镣铐</strong>”的，即便是玩出花来，拓展也没有办法穿透浏览器，如果某些功能，用软件来完成更好，别犹豫，直接用软件吧。</p><p>比如截图扩展 <strong>Nimbus Screen Capture</strong>、文字识别 <strong>Copyfish</strong>、视频下载 <strong>Video DownloadHelper</strong>，它们都已经是同类扩展中的佼佼者了，但还是没办法像软件那样的强大而全面。</p><p>比如截图软件可以用 <strong>FastStone Capture</strong>，文字识别软件用 <strong>天若ORC</strong>，视频下载软件用 <strong>IDM</strong>。（详细回复关键字 <strong>C07</strong>）</p><p>同样，如果某些功能用“<strong>油猴脚本</strong>”就能完成，那就没必要安装扩展了，用脚本的方法要来得更加轻便。</p><h3 id="2、扩展在精不在多，一个扩展做好一件事"><a href="#2、扩展在精不在多，一个扩展做好一件事" class="headerlink" title="2、扩展在精不在多，一个扩展做好一件事"></a><strong>2、扩展在精不在多，一个扩展做好一件事</strong></h3><p>我们总是喜欢试用各式各样的扩展，但大多数扩展其实都是伪需求，有没有其实区别不大。</p><p>真正有需求的是那些<strong>基础的、使用率高的、大多数人都适用</strong>的扩展，所以在扩展选择上，我们可以换个思路：</p><p><strong>从需要出发，倒推浏览器扩展，然后在同类扩展中选择最好的那一款。</strong></p><p>下面是我总结的 2020 年度最喜欢浏览器扩展，支持 Chrome、Firefox、Edge 三款浏览器，带 ★ 为推荐安装，如 Chrome 商店无法正常打开，可以到 <a href="https://www.runningcheese.com/go?url=https://crxdl.com">https://crxdl.com</a> 下载。</p><h2 id="1、常用扩展"><a href="#1、常用扩展" class="headerlink" title="1、常用扩展"></a>1、常用扩展</h2><table><thead><tr><th align="left"><strong>功能</strong></th><th align="left"><strong>介绍</strong></th><th align="left"><strong>安装</strong></th></tr></thead><tbody><tr><td align="left">脚本管理</td><td align="left">Tampermonkey，相比 油猴、暴力猴 更加稳定高效。★<a href="https://www.runningcheese.com/userscripts">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/tampermonkey/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">样式管理</td><td align="left">xStyle，相比 Stylish、Stylus 更为简洁，管理也更加方便。★<a href="https://www.runningcheese.com/stylish">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://github.com/FirefoxBar/xStyle/releases"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/xstyle/hncgkmhphmncjohllpoleelnibpmccpj"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">拨号页</td><td align="left">InfinityTab，可能是目前最好的新标签页，但自带的图标有返利尾巴。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/infinity-new-tab-pro-firefox/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/infinity-%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5-pro/hajlmbnnniemimmaehcefkamdadpjlfa"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">代理工具</td><td align="left">Proxy SwitchyOmega ，方便简单，可以轻松管理和切换多个代理设置。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/switchyomega/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclg.gif"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">广告过滤</td><td align="left">Ublock，简单好用，支持网页广告、视频广告的过滤。★<a href="https://www.runningcheese.com/adblock">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/ublock-origin/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/ublock-origin/odfafepnkmbhccpbejgmiehpchacaeak"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">密码管理</td><td align="left">BitWarden，免费、简单、多平台通用的密码管理工具。★<a href="https://www.runningcheese.com/password">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/bitwarden-password-manager/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/bitwarden-free-password-m/nngceckbapebfimnlniiiahkandclblb"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/bitwarden-%E5%85%8D%E8%B4%B9%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%99%A8/jbkfoedolllekgbhcbcoahefnbanhhlh"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">鼠标拖拽</td><td align="left">GlitterDrag 是 Firefox 首选，Chrome 用 crxMouse，Edge 用 SuperDrag。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/glitterdrag/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/crxmouse-chrome-gestures/jlgkpaicikihijadgifklkbpdajbkhjo"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/superdrag/nlefalggllbckbaegjonehiokkddgcbn?hl=zh-CN"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">鼠标手势</td><td align="left">用软件更好，Windows 用 Mouseinc，Mac 用 BetterAndBetter。<a href="https://www.runningcheese.com/operation">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/c09"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmezw9kwt7j300g00g0nc.jpg" alt="Windows"></a> <a href="https://www.runningcheese.com/c10"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmezvu4ga4j300g00g08a.jpg" alt="Mac"></a></td></tr><tr><td align="left">视频下载</td><td align="left">用软件更好，Windows 用 IDM，Mac 用 NDM。★<a href="https://www.runningcheese.com/idm">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/tonec-idm-integration-module"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/idm-integration-module/ngpampappnmepgilojfohadhhmbhlaek/"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/idm-integration-module/llbjbkhnmlidjebalopleeepgdfgcpec"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">下载管理</td><td align="left">下载管理，接管自带的下载功能，简洁，没有多余功能。★（火狐自带）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/%E4%B8%8B%E8%BD%BD%E7%AE%A1%E7%90%86/dgoaeahpciglgomkbmfblkcfanpfckhb"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E4%B8%8B%E8%BD%BD%E7%AE%A1%E7%90%86/oljecelfndgchlbkmodifnpodpialkjo"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">二维码</td><td align="left">二维码，将文本、链接、图片生成二维码，也可识别二维码图片。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/qrcode-generator-and-reader/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/qr-code-generator-and-rea/hkojjajclkgeijhcmfjcjkddfjpaimek"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81%EF%BC%88%E7%94%9F%E6%88%90%E5%8F%8A%E8%AF%86%E5%88%AB%EF%BC%89/majobenfcengbipnapomhopjknaiffph"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">用户代理</td><td align="left">User-Agent Switcher and Manager，目前 UA 最全的一款用户代理扩展。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/user-agent-string-switcher/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/user-agent-switcher-and-m/bhchdcejhohfmigjafbampogmaanbfkg"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/useragent-switcher-and-m/cnjkedgepfdpdbnepgmajmmjdjkjnifa"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">浏览器请求</td><td align="left">Header Editor，拥有重定向、反盗链、用户代理修改等功能。★<a href="https://www.runningcheese.com/http">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/header-editor/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/header-editor/eningockdidmgiojffjmkdblpjocbhgh"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">RSS 阅读</td><td align="left">用软件更好，Windows 用 irreader，Mac 用 Reeder。★<a href="https://www.runningcheese.com/rss-feed">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/rsshub-radar"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/rsshub-radar/kefjpfngnndepjbopdmoebkipbgkggaa"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/rsshub-radar/gangkeiaobmjcjokiofpkfpcobpbmnln"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">截图工具</td><td align="left">用软件更好，Windows 用 FastStone Capture，Mac 用 iShot。《相关文章》</td><td align="left"><a href="https://www.runningcheese.com/c07"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmezw9kwt7j300g00g0nc.jpg" alt="Windows"></a> <a href="https://www.runningcheese.com/c08"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmezvu4ga4j300g00g08a.jpg" alt="Mac"></a></td></tr><tr><td align="left">OCR识别</td><td align="left">用软件更好，Windows 用 天若OCR，Mac 用 Text Scaner。《相关文章》</td><td align="left"><a href="https://www.runningcheese.com/c07"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmezw9kwt7j300g00g0nc.jpg" alt="Windows"></a> <a href="https://www.runningcheese.com/c08"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmezvu4ga4j300g00g08a.jpg" alt="Mac"></a></td></tr><tr><td align="left">电子书</td><td align="left">用软件更好，Windows 用 京东读书，Mac 用 CleanView。《相关文章》</td><td align="left"><a href="https://www.runningcheese.com/c07"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmezw9kwt7j300g00g0nc.jpg" alt="Windows"></a> <a href="https://www.runningcheese.com/c08"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmezvu4ga4j300g00g08a.jpg" alt="Mac"></a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="2、标签管理"><a href="#2、标签管理" class="headerlink" title="2、标签管理"></a>2、标签管理</h2><table><thead><tr><th align="left">功能</th><th align="left">简介（<a href="https://www.runningcheese.com/tabs">专题文章</a>）</th><th align="left">安装</th></tr></thead><tbody><tr><td align="left">稍候阅读</td><td align="left">In My Pocket，标记没来得急读完的网页，支持多平台同步。★<a href="https://www.runningcheese.com/i10">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/in-my-pocket/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/save-to-pocket/jicacccodjjgmghnmekophahpmddeemd"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">会话管理</td><td align="left">Tab Session Manager，手动或者自动保存浏览会话。★<a href="https://www.runningcheese.com/i10">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/tab-session-manager/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/tab-session-manager/iaiomicjabeggjcfkbimgmglanimpnae"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/tab-session-manager/jkjjclfiflhpjangefhgfjhgfbhajadk"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">快捷笔记</td><td align="left">Sidebar Note，支持选中文字一键发送至笔记本，支持快捷键。@</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/sidebar-note/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a></td></tr><tr><td align="left">网页剪藏</td><td align="left">Evernote Web Clipper，一键标注和保存完整的网页到 Evernote 上。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/evernote-web-clipper"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/evernote-web-clipper/llhcnbijpnechllogkacbcjmkcgjbjfi"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">小号管理</td><td align="left">SessionBox，用于同一网站登录多个账户。（火狐自带）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/sessionbox-free-multi-log/megbklhjamjbcafknkgmokldgolkdfig"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">标签页恢复</td><td align="left">Undo Close Tab，简单且高效的标签页恢复扩展。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/undoclosetabbutton/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/emhohdghchmjepmigjojkehidlielknj"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">标签页查看</td><td align="left">Tree Style Tab，树状显示当前打开的网页，Chrome 用 Aerys。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/tree-style-tab/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/aerys-tab-manager/kclbicheojedbinfjdjjolmciodoihkl"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">标签页位置</td><td align="left">Tab Position Options，调整标签页的打开位置。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/tab_position_options/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/iaiomicjabeggjcfkbimgmglanimpnae"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">内存控制</td><td align="left">Auto Tab Discard，自动冻结不活动的标签页来节省内存占用。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/auto-tab-discard/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/auto-tab-discard/jhnleheckmknfcgijgkadoemagpecfol"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/auto-tab-discard/nfkkljlcjnkngcmdpcammanncbhkndfe"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">新标签页覆盖</td><td align="left">New Tab Override，修改打开新标签页的内容。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/new-tab-override/?src=featured"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/new-tab-redirect/icpgjfneehieebagbmdbhnlpiopdcmna"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">防止关闭</td><td align="left">LiveOn，关闭最后一个标签页时不关闭浏览器。★（火狐自带）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/live-on/oficfgdfeoknbjfhommlpiekdapmnebh"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">打开多个链接</td><td align="left">Open Multiple URLs，但推荐用网站 <a href="https://www.runningcheese.com/go?url=http://openmultipleurl.com">openmultipleurl.com</a> 来打开。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/de/firefox/addon/open-multiple-urls/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/open-multiple-urls/oifijhaokejakekmnjmphonojcfkpbbh"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">标签页复制</td><td align="left">Copy as Markdown，复制标签页链接为 Markdown 格式，支持快捷键。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/copy-as-markdown/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/copy-as-markdown/fkeaekngjflipcockcnpobkpbbfbhmdn"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/copy-as-markdown/cbbdkefgbfifiljnnklfhnhcnlmpglpd"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">浏览器调用</td><td align="left">Open With，调用其他浏览器或者配置打开当前网页。<a href="https://www.runningcheese.com/openwith">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/open-with/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/open-with/cogjlncmljjnjpbgppagklanlcbchlno"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">链接多选</td><td align="left">Snap Links Plus，使用鼠标右键可框选多个链接和复选框。<a href="https://www.runningcheese.com/openwith">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/snaplinksplus"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/linkclump/lfpjkncokllnfokkgpkobnkbkmelfefj"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="3、书签管理"><a href="#3、书签管理" class="headerlink" title="3、书签管理"></a>3、书签管理</h2><table><thead><tr><th align="left">名称</th><th align="left">简介</th><th align="left">安装</th></tr></thead><tbody><tr><td align="left">书签检测</td><td align="left">Bookmarks Organizer，检测失效与重复的书签。<a href="https://www.runningcheese.com/bm">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/bookmarks-organizer"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/quick-bookmark-cleaner/ljfgijlbekebdhniagdekklbmmchhjja"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">书签图标刷新</td><td align="left">Checkmarks，在侧边栏中打开，然后依次打开刷新图标。（火狐特有）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/checkmarks-web-ext/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a></td></tr><tr><td align="left">快速添加书签</td><td align="left">Bookmark Tab Here，书签右键菜单上添加“**添加到此…**”的选项。（火狐特有）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/bookmark-tab-here/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a></td></tr><tr><td align="left">书签更新</td><td align="left">Update Bookmark，直接在书签的右键菜单中修改标题和地址。（火狐特有）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/replace-bookmark/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a></td></tr><tr><td align="left">书签搜索</td><td align="left">Holmes，让 Chrome 像 Firefox 一样支持输入 * 后搜索书签。（火狐自带）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/holmes/gokficnebmomagijbakglkcmhdbchbhn"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="4、搜索增强"><a href="#4、搜索增强" class="headerlink" title="4、搜索增强"></a>4、搜索增强</h2><table><thead><tr><th align="left">名称</th><th align="left">简介（<a href="https://www.runningcheese.com/quick-search">专题文章</a>）</th><th align="left">安装</th></tr></thead><tbody><tr><td align="left">右键搜索</td><td align="left">Selection Context Search，功能最全的右键搜索扩展。★<a href="https://www.runningcheese.com/quick-search">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/selection-context-search/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/selection-context-search/kplgehmegmjifbhioeldcnphfkcfckjj?hl=zh-CN"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">站内搜索</td><td align="left">Selection Context Search，在设置里增加“站内搜索”的选项。★ （同上）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/selection-context-search/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/selection-context-search/kplgehmegmjifbhioeldcnphfkcfckjj?hl=zh-CN"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">以图搜图</td><td align="left">Selection Context Search，在设置里增加“以图搜图”选项。★（同上）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/selection-context-search/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/selection-context-search/kplgehmegmjifbhioeldcnphfkcfckjj?hl=zh-CN"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">粘贴并搜索</td><td align="left">Paste n’ Go，搜索框右键里增加“粘贴并搜索”的选项。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/paste-n-go/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/paste-n-go/ichdjcfpibgdoecejabegkfpnbdjhhhf"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E7%B2%98%E8%B4%B4-%E6%8F%90%E4%BA%A4/pahdefjlnaikfgelmlbieeiikplcbipm"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">右键限制</td><td align="left">用脚本更好，解除大部分网站禁止复制、选择、右键菜单的限制。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://greasyfork.org/zh-CN/scripts/41075"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmf3gunfzsj300g00g0lo.jpg" alt="Userscript"></a></td></tr><tr><td align="left">搜索切换</td><td align="left">用脚本更好，在各个搜索引擎之间跳转，并有友好的自定义设置菜单。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://greasyfork.org/zh-CN/scripts/27752"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmf3gunfzsj300g00g0lo.jpg" alt="Userscript"></a></td></tr><tr><td align="left">多重搜索</td><td align="left">用脚本更好，通过“小书签”然后用“关键字”来实现。<a href="https://www.runningcheese.com/quick-search">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/bookmarklet"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmf3gunfzsj300g00g0lo.jpg" alt="Userscript"></a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="5、英语阅读"><a href="#5、英语阅读" class="headerlink" title="5、英语阅读"></a>5、英语阅读</h2><table><thead><tr><th align="left">名称</th><th align="left">简介</th><th align="left"></th></tr></thead><tbody><tr><td align="left">翻译工具</td><td align="left">沙拉查词，多功能强大的聚合翻译扩展。★<a href="https://www.runningcheese.com/translation">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/ext-saladict/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/idghocbbahafpfhjnfhpbfbmpegphmmp"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">网页翻译</td><td align="left">翻译网页，Chrome、Edge 自带全文翻译，也可以用“彩云小译”。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/traduzir-paginas-web/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/lingocloud-web-translatio/jmpepeebcbihafjjadogphmbgiffiajh"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E5%BD%A9%E4%BA%91%E5%B0%8F%E8%AF%91-%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6/abbgboelhkajgikdbjclaecchkneaoma"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">词汇发现</td><td align="left">单词发现者，高亮网页中的英语单词，可自定义单词难度，扩大您的词汇。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/words-discoverer/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/words-discoverer-expand-y/noncaeikjgpbdeoocblijjgegnobogib"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">语法检测</td><td align="left">Grammarly，检测并自动纠正语法错误。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/grammarly-1/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/grammarly-for-microsoft-e/cnlefmmeadmemmdciolhbnfeacpdfbkd"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">文本校对</td><td align="left">LanguageTool，语法、文风和拼字校对工具。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/languagetool/?src=external-lt-homepage"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/grammar-and-spell-checker/oldceeleldhonbafppcapldpdifcinji"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/grammar-and-spell-checker/hfjadhjooeceemgojogkhlppanjkbobc"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="6、阅读辅助"><a href="#6、阅读辅助" class="headerlink" title="6、阅读辅助"></a>6、阅读辅助</h2><table><thead><tr><th align="left">名称</th><th align="left">简介（<a href="https://www.runningcheese.com/web-viewing">专题文章</a>）</th><th align="left">安装</th></tr></thead><tbody><tr><td align="left">字体渲染</td><td align="left">Font Rendering，解决 Chrome、Edge 字体发虚的问题。★（火狐自带）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/font-rendering-enhancer/hmbmmdjlcdediglgfcdkhinjdelkiock"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">雅黑字体</td><td align="left">替换中文字体为雅黑，同时避免影响英文部分。★（Mac不必安装）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/%E6%9B%BF%E6%8D%A2%E5%AD%97%E4%BD%93%E7%9A%84%E4%B8%AD%E6%96%87%E9%83%A8%E5%88%86%E4%B8%BA%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/%E6%9B%BF%E6%8D%A2%E5%AD%97%E4%BD%93%E7%9A%84%E4%B8%AD%E6%96%87%E9%83%A8%E5%88%86%E4%B8%BA%E9%9B%85%E9%BB%91/enpkigfhoabjjjonanmddidnnahopmcn"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">手形工具</td><td align="left">ScrollAnywhere，按住鼠标左键，像手机屏幕一样地滑动网页。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/scroll_anywhere/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/scrollanywhere/jehmdpemhgfgjblpkilmeoafmkhbckhi"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">快速下一页</td><td align="left">NextPage，页尾处按空格自动翻页，按 N 键下一页，按 P 键上一页。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/nextpage/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/nextpage/njgkgdihapikidfkbodalicplflciggb"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E4%B8%8B%E4%B8%80%E9%A1%B5/bdgjidjidpokocijgeefmliejkkjannk"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">阅读模式</td><td align="left">简悦，比自带模式模式更加优雅的阅读扩展。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/simpread/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E7%AE%80%E6%82%A6-simpread/clgdhlhfiocphghdkdbgdlmfaafccfmc"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">黑夜模式</td><td align="left">Dark Mode，将网页变成黑夜阅读模式。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/dark-mode-webextension/?src=userprofile"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/dark-mode/dmghijelimhndkbmpgbldicpogfkceaj"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/dark-mode/boldmdfoencgjfblcelefkjfafmpiahm"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">亮度调整</td><td align="left">用脚本更好，通过“小书签”然后用“关键字”来实现。<a href="https://www.runningcheese.com/bookmarklet">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/bookmarklet"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmf3gunfzsj300g00g0lo.jpg" alt="Userscript"></a></td></tr><tr><td align="left">侧边栏浏览</td><td align="left">Side View，在侧边栏中查看当前网页。（火狐特有）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/side-view/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a></td></tr><tr><td align="left">访问限制</td><td align="left">Block Site，限制访问一些网站，还有上网时间，适合工作的时使用。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/blocksite/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/block-site-website-blocke/eiimnmioipafcokbfikbljfdeojpcgbh"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/blocksite-%E4%BF%9D%E6%8C%81%E4%B8%93%E6%B3%A8%E5%B9%B6%E6%8E%A7%E5%88%B6%E6%82%A8%E7%9A%84%E6%97%B6%E9%97%B4/lbnblmjlpifpfpefbcgefbhnlcnnjgjk"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">维基阅读</td><td align="left">Wikiwand，让排版老旧的 Wikipedia 有一个全新的界面。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/wikiwand-webextension/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/wikiwand-wikipedia-modern/emffkefkbkpkgpdeeooapgaicgmcbolj"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr></tbody></table><h2 id="7、图片浏览"><a href="#7、图片浏览" class="headerlink" title="7、图片浏览"></a>7、图片浏览</h2><table><thead><tr><th align="left">名称</th><th align="left">简介（<a href="https://www.runningcheese.com/picture-viewing">专题文章</a>）</th><th align="left">安装</th></tr></thead><tbody><tr><td align="left">图片查看助手</td><td align="left">浮图秀，按 Alt 键显示高清大图，可配合脚本 <a href="https://www.runningcheese.com/go?url=https://greasyfork.org/zh-CN/scripts/24204">PicViewer</a> 一起使用。★</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/photoshow/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/photoshow/mgpdnhlllbpncjpgokgfogidhoegebod/"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E6%B5%AE%E5%9B%BE%E7%A7%80/afdelcfalkgcfelngdclbaijgeaklbjk"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">图片保存工具</td><td align="left">SAVE IN…，一键保存图片到指定位置，图片管理利器。★<a href="https://www.runningcheese.com/i13">《相关文章》</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/save-in/#&gid=1&pid=1"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/save-in%E2%80%A6/jpblofcpgfjikaapfedldfeilmpgkedf"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">图片批量下载</td><td align="left">ImageAssistant，嗅探图片、图片筛选、批量下载等功能。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/ia-batch-image-downloader/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/imageassistant-batch-imag/dbjbempljhcmhlfpfacalomonjpalpko"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E5%9B%BE%E7%89%87%E5%8A%A9%E6%89%8Bimageassistant-%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87/odphnbhiddhdpoccbialllejaajemdio"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">图床工具</td><td align="left">微博图床，使用前需要登录微博网页版，还支持批量上传。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/weibo-picture-store/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/pinjkilghdfhnkibhcangnpmcpdpmehk"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/jkmnhcnemipgjihagldeipnipfognpgh"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="8、音乐收听"><a href="#8、音乐收听" class="headerlink" title="8、音乐收听"></a>8、音乐收听</h2><table><thead><tr><th align="left">名称</th><th align="left">简介（<a href="https://www.runningcheese.com/music-artifact">专题文章</a>）</th><th align="left">安装</th></tr></thead><tbody><tr><td align="left">音乐收听</td><td align="left">Listen 1，聚合来自网易云音乐、QQ音乐、虾米等网站的歌曲。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/listen1/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/listen-1/indecfegkejajpaipjipfkkbedgaodbp"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/listen-1/hneiglcmpeedblkmbndhfbeahcpjojjg"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">歌词展示</td><td align="left">Lyrics Here，在 Youtube，Spotify 等音乐网站上显示当前播放音乐的歌词。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/youtube-lyrics-by-rob-w/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/lyrics-here-by-rob-w/lifkpflabnobkgbjpcmocmgcajlecbcp"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">广播收听</td><td align="left">Search to Play the Song，可以说是 Listen 1的简洁版，还能听广播。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/search-to-play-the-song/anfmgjkkbagjfdejhbjdiapgkbhpigpm"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">歌曲识别</td><td align="left">AHA Music，识别当前浏览器播放中的歌曲，还支持本地音乐。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/song-identifier/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/aha-music-music-identifie/dpacanjfikmhoddligfbehkpomnbgblf"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/aha-music-music-identif/ejfccgmelcclnoadalcepdmnpgcnglfc"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr></tbody></table><h2 id="9、视频观看"><a href="#9、视频观看" class="headerlink" title="9、视频观看"></a>9、视频观看</h2><table><thead><tr><th align="left">名称</th><th align="left">简介（<a href="https://www.runningcheese.com/video-viewing">专题文章</a>）</th><th align="left">安装</th></tr></thead><tbody><tr><td align="left">视频放大</td><td align="left">用脚本更好，将视频放大填充到网页全屏。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://greasyfork.org/zh-CN/scripts/4870"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmf3gunfzsj300g00g0lo.jpg" alt="Userscript"></a></td></tr><tr><td align="left">视频弹窗</td><td align="left">Popup Tool，视频小窗播放，支持弹幕，Chrome 用 Separate Window。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/popup-tool/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/separate-window/cbgkkbaghihhnaeabfcmmglhnfkfnpon"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">弹幕过滤器</td><td align="left">Pakku，哔哩哔哩弹幕过滤器，屏蔽相似弹幕。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/pakkujs/?src=external-home"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/pakku%EF%BC%9A%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%BC%B9%E5%B9%95%E8%BF%87%E6%BB%A4%E5%99%A8/jklfcpboamajpiikgkbjcnnnnooefbhh"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/pakku%EF%BC%9A%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%BC%B9%E5%B9%95%E8%BF%87%E6%BB%A4%E5%99%A8/lnfcfeidnipnphibahlkdhalpkpmccoc"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">U2B双语字幕</td><td align="left">用脚本更好，让 YouTube 显示双语字幕。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://greasyfork.org/zh-CN/scripts/397363"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmf3gunfzsj300g00g0lo.jpg" alt="Userscript"></a></td></tr><tr><td align="left">U2B频道屏蔽</td><td align="left">BlockTube，屏蔽不想看的视频频道，包括首页用和搜索页面。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/blocktube/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/blocktube/bbeaicapbccfllodepmimpkgecanonai"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">刷抖音</td><td align="left">Web for TikTok，在线刷 TikTok，就像用手机刷一样。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/web-for-tiktok/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/web-for-tiktok/jcchnijhoijlmhljldhpgoegfbfjhfap"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/web-for-tiktok/ccjbgffbjdbnnpdnopghofogcfeopdmn"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="10、小众扩展"><a href="#10、小众扩展" class="headerlink" title="10、小众扩展"></a>10、小众扩展</h2><table><thead><tr><th align="left">名称</th><th align="left">简介</th><th align="left">安装</th></tr></thead><tbody><tr><td align="left">Cookie 编辑</td><td align="left">EditThisCookie，编辑 Cookie，比如可以设置帐号永不退出。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/etc2/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">Aria2 下载</td><td align="left">Aria2 manager，用于导出和自动拦截下载到 Aria2 下载器。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/aria2manager/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/aria2-manager/lbfekjdfefiipnbkpgldhicajcoldcmb"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/aria2-manager/ojbidmhgnhijiiagnlfnlbhhnkajklcl"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">网页监测</td><td align="left">Distill Web Monitor，用于跟踪监测网页更新。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/distill-web-monitor-ff/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/distill-web-monitor/inlikjemeeknofckkjolnjbpehgadgge"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/distill-web-monitor/hldhhgncaohjmpcjjhggekonocabhceg"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">历史记录分析</td><td align="left">History Master，更加友好的可视化历史记录分析工具。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/history-master/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/history-master/mkfgjjeggnmkbobjmelbjhdchcoadnin"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">反反广告</td><td align="left">Anti Adblock Detector，去除 Adblock 的检测拦截。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/anti-adblock-blocker"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/anti-adblock-detector/kjhdffcfinhkdfbbhjlfoadcdfgihmlp"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">跳过验证码</td><td align="left">Buster，跳过谷歌的验证码。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/buster-captcha-solver/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/buster-captcha-solver-for/mpbjkejclgfgadiemmefgebjfooflfhl"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/buster-captcha-solver-fo/admkpobhocmdideidcndkfaeffadipkc"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">谷歌访问助手</td><td align="left">iGuge，用于访问 Google 相关的网站，其他的则需要付费购买。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/iguge/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/ncldcbhpeplkfijdhnoepdgdnmjkckij"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/igg%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E5%8A%A9%E6%89%8B/mchibleoefileemjfghfejaggonplmmg"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">网页全文索引</td><td align="left">Falcon，地址栏输入 f 查找历史浏览网页里的内容。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/falcon/mmifbbohghecjloeklpbinkjpbplfalb"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">自选基金助手</td><td align="left">自选基金助手，小窗口展示“<strong>天天基金网</strong>”的数据。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/choose-funds/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/%E8%87%AA%E9%80%89%E5%9F%BA%E9%87%91%E5%8A%A9%E6%89%8B-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E5%9F%BA%E9%87%91%E6%B6%A8%E8%B7%8C%E5%B9%85/dhdelcemeednchdmijiocipbjlknndff"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/%E8%87%AA%E9%80%89%E5%9F%BA%E9%87%91%E5%8A%A9%E6%89%8B-%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E5%9F%BA%E9%87%91%E6%B6%A8%E8%B7%8C%E5%B9%85/kophadiajpobbfoobhclbobddkoindoi"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="11、开发工具"><a href="#11、开发工具" class="headerlink" title="11、开发工具"></a>11、开发工具</h2><table><thead><tr><th align="left">名称</th><th align="left">简介</th><th align="left"></th></tr></thead><tbody><tr><td align="left">加密文件编辑</td><td align="left">mozlz4-edit，修改加密配置文件，比如 search.json.mozlz4。（火狐特有）</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/mozlz4-edit/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a></td></tr><tr><td align="left">快捷键扩展</td><td align="left">Vimium，像 VIM 一样通过键盘来操控浏览器，按 F 键显示快捷键。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/vimium-ff/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/vimium-c-%E5%85%A8%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C%E6%B5%8F%E8%A7%88%E5%99%A8/aibcglbfblnogfjhbcmmpobjhnomhcdo"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">GitHub 阅读</td><td align="left">Octotree，让Github仓库的代码以树状的形式展示。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/en-US/firefox/addon/octotree/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/octotree-github-code-tr/joagmknfcgpikbadjkaikmnhpjadihjg"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">自动化工具</td><td align="left">Wildfire，让工作实现操作自动化，可以用于替代 <a href="https://www.runningcheese.com/go?url=https://wiki.imacros.net/Webextensions">iMacros</a>。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/wildfire/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/wildfire/djhgeeodemlfdpmcccdekfalbhllcoim"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/wildfire/mbkkgojenmaoojdgobdjkjnncinhkkmo"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">取色器</td><td align="left">Color Picker，取色器和颜色调整，适合网页开发。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/sharp-color-picker/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">扩展源码查看</td><td align="left">Extension source viewer，查看扩展的源码，还可以使用 <a href="https://www.runningcheese.com/go?url=https://robwu.nl/crxviewer/">在线版本</a></td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/crxviewer/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/chrome-extension-source-v/jifpbeccnghkjeaalbbjmodiffmgedin"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">屏幕测距</td><td align="left">Dimensions，一个简单实用的网页元素测距工具。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/dimensions_extension/?src=search"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/dimensions/baocaagndhipibgklemoalmkljaimfdj"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a></td></tr><tr><td align="left">字体检测</td><td align="left">Font Finder，一键检查当前网页文字所使用的字体。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/font-inspect/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/font-finder/bhiichidigehdgphoambhjbekalahgha"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/font-finder/hhojcpbmilabimndlmnbegcknapalgph"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">网站技术分析</td><td align="left">Wappalyzer，探测当前网站所使用的系统构架、站点环境、服务器配置等。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/wappalyzer/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/wappalyzer/mnbndgmknlpdjdnjfmfcdjoegcckoikn"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr><tr><td align="left">网页加载速度</td><td align="left">LoadTime，测试网页加载时间。</td><td align="left"><a href="https://www.runningcheese.com/go?url=https://addons.mozilla.org/zh-CN/firefox/addon/load-time/"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfgqa8gykj300g00g0py.jpg" alt="Firefox"></a> <a href="https://www.runningcheese.com/go?url=https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdztkbvgwj300g00g0q8.jpg" alt="Chrome"></a> <a href="https://www.runningcheese.com/go?url=https://microsoftedge.microsoft.com/addons/detail/page-load-time/llcdjocbfkdndmjbgpaibfkdjkjogeho"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmdzttnlwvj300g00g0p6.jpg" alt="Edge"></a></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows 上的工具清单</title>
      <link href="839087f3.html"/>
      <url>839087f3.html</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://blog.rxliuli.com/p/5b565be2d93c4e03871e42aff60e2a9a/#">https://blog.rxliuli.com/p/5b565be2d93c4e03871e42aff60e2a9a/#</a>  全文转载</strong></p><p>本文最后更新于：2021年2月22日 上午</p><blockquote><p>但弄雕虫之技，尘芥草莽，于泥泞自勉……</p></blockquote><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="MS-VSCode：前端标准-IDE"><a href="#MS-VSCode：前端标准-IDE" class="headerlink" title="MS VSCode：前端标准 IDE"></a>MS VSCode：前端标准 IDE</h3><p>[便携版], [开源], [跨平台], [免费]</p><blockquote><p>具体可以参考：<a href="https://code.visualstudio.com/">官网</a>, <a href="https://github.com/Microsoft/vscode">GitHub</a>, <a href="https://jeasonstudio.gitbooks.io/vscode-cn-doc/content/">GitBook 中文介绍</a></p></blockquote><p>MS VSCode 是微软出品的一个跨平台，基于 Web 的，免费的开源文本编辑器。目前已经使用了半年多了，对其的了解也更加深入。就目前看来，VSCode 应该是前端生态最好的 IDE 了。作为一个文本编辑器，大多数的文本文件都有语法支持的扩展真的太棒了，这点要强过专门的 IDE。</p><p>主要优点：</p><ul><li>开箱即用：基本上下载完就能开始使用了，不需要太多自定义的配置</li><li>多语言支持：这是很多文本编辑器/IDE 都没有做到的，例如下面吾辈最喜欢的 IDEA 到目前为止官方仍然只支持英文，但吾辈觉得本土化之后才能对萌新更加友好（门槛低，学习曲线平缓）</li><li>插件丰富：目前吾辈使用 VSCode 主要用于前端，编辑 Markdown 文章，一些系统/程序的配置文件等，安装了插件之后使用对各种功能的支持还算不错。</li></ul><p>缺点：</p><p>很明显，MS 的东西最后会不会变成全家桶/流氓谁也不清楚，虽然去年貌似 MS 在 GitHub 上的贡献量超过了 Google，但想想 MS 的开源黑历史。。。而且，作为一个专门的编程编辑器，有许多的细节上还是很粗糙（貌似开源项目的通病），相比于专业的 IDE（例如 WebStorm）还是相差不少。<br>下面举一些例子</p><ul><li>本地文件历史: 没有加入到 Git 管理中的文件丢失，血与泪的教训啊</li><li>单词检查: 英文单词写错了还不知道，萌萌哒！</li><li>代码跳转功能很弱: 专业 IDE 里几乎所有有关连的东西都是可以跳转的。例如在 CSS 中查看使用 class 的引用列表，在 HTML 中跳转到 CSS 的 class 定义处，HTML 中有代码提示 CSS 类。JS 中查看函数的引用列表，查看函数的定义处，查看函数的实现（老实说 VSCode 基于 ts 实现的代码提示感觉真是在下一盘大棋。。。）</li><li>Git 支持: VSCode 中 Git 支持还不成熟，并没有像 IDE 中那么方便与强大</li><li>HTML 标签修改的时候没有自动修改对应的标签: 纯粹是细节性问题</li><li>TODO 支持: 对 <strong><code>TODO</code></strong> 标签没有支持</li></ul><p>常用的 Plugin</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">auto-rename-tag</a>: 自动重命名对应标签</li><li><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync">code-settings-sync</a>: VSCode 设置同步</li><li><a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv">dotenv</a>: <code>env</code> 语法支持</li><li><a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets">es7-react-js-snippets</a>: react es7 的代码片段</li><li><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">gitlens</a>: Git 增强插件</li><li><a href="https://marketplace.visualstudio.com/items?itemName=pushqrdx.inline-html">inline-html</a>: js 模板字符串中的 <code>HTML</code> 代码提示</li><li><a href="https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings">intellij-idea-keybindings</a>: IDEA 快捷键映射</li><li><a href="https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus">language-stylus</a>: <code>stylus</code> 语言支持</li><li><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">markdown-all-in-one</a>: Markdown 编辑主要插件</li><li><a href="https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf">markdown-pdf</a>: 将 Markdown 导出 PDF 文档</li><li><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">material-icon-theme</a>: material 风格的图标</li><li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">path-intellisense</a>: 路径提示</li><li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">prettier-vscode</a>: 配合 ESLint 做代码格式自动修复</li><li><a href="https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode">quokka-vscode</a>: 持续监听/运行 js 文件</li><li><a href="https://marketplace.visualstudio.com/items?itemName=thisismanta.stylus-supremacy">stylus-supremacy</a>: <code>stylus</code> 格式化</li><li><a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme">vsc-material-theme</a>: Material 风格的 VSCode</li><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">vscode-eslint</a>: JavaScript 代码规范检查</li><li><a href="https://marketplace.visualstudio.com/items?itemName=NuclleaR.vscode-extension-auto-import">vscode-extension-auto-import</a>: 自动 import 函数</li><li><a href="https://marketplace.visualstudio.com/items?itemName=firsttris.vscode-jest-runner">vscode-jest-runner</a>: 快速运行/调试 jest 测试</li><li><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">vscode-markdownlint</a>: Markdown 语法检查</li><li><a href="https://marketplace.visualstudio.com/items?itemName=ipatalas.vscode-postfix-ts">vscode-postfix-ts</a>: Markdown 语法检查</li><li><a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight">vscode-todo-highlight</a>: <code>TODO</code> 注释高亮</li><li><a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime">vscode-wakatime</a>: 记录与统计代码的时间</li></ul><blockquote><p><a href="https://gist.github.com/rxliuli/9069f63e5bc0fc0f5cbbfc44a8b0da44">VSCode Settings</a></p></blockquote><h3 id="Google-Chrome：最好的浏览器"><a href="#Google-Chrome：最好的浏览器" class="headerlink" title="Google Chrome：最好的浏览器"></a>Google Chrome：最好的浏览器</h3><p>[部分开源], [跨平台], [免费]</p><blockquote><p><a href="https://www.google.com/chrome/">官网</a>, <a href="https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html">Google Chromium 各版本下载</a></p></blockquote><p>非常有名的浏览器，来源于 Google，在 PC 上不管是用于开发还是日常使用都能够满足需求。相比于国内的流氓而言非常干净简洁（至少，看起来而言），相比于 FireFox 来说更快，插件体系也已经足够庞大完整，基本上想要的都有了。</p><p>常用的 Plugin：</p><ul><li><a href="https://chrome.google.com/webstore/detail/autopagerize/igiofjhpmpihnifddepnpngfjhkfenbp">AutoPagerize</a>：自动翻页插件，浏览很多网站时不需要手动点击下一页了，可以自动加载出来下一页的结果。</li><li><a href="https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj">Checker Plus for Gmail™</a>：对于日常使用 Gmail 的吾辈而言非常有用</li><li><a href="https://chrome.google.com/webstore/detail/crxmouse-chrome-gestures/jlgkpaicikihijadgifklkbpdajbkhjo">crxMouse Chrome™ 手势</a>：鼠标手势插件，可以使用手势更简单地完成一些事情</li><li><a href="https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh">Dark Reader</a>：为所有网站加上黑色主题，大部分情况下都还不错</li><li><a href="https://chrome.google.com/webstore/detail/anlikcnbgdeidpacdbdljnabclhahhmd">Enhanced Github</a>：显示 GitHub Repository 大小，允许单独下载每一个文件</li><li><a href="https://chrome.google.com/webstore/detail/enhancer-for-youtube/ponfpcnoihfmfllpaingbgckeeldkhle">Enhancer for YouTube™</a>：怎么说呢，Youtube 已经很好了，但吾辈还是觉得需要这个插件来优化播放体验</li><li><a href="https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf">Fatkun 图片批量下载</a>：批量下载网页上的图片，偶尔用一下吧</li><li><a href="https://chrome.google.com/webstore/detail/free-download-manager/ahmpjcflkgiildlgicmcieglgoilbfdp">Free Download Manager</a>：FDM Chrome 集成插件，将 Chrome 下载链接使用 FDM 多线程下载</li><li><a href="https://chrome.google.com/webstore/detail/github-hovercard/mmoahbbnojgkclgceahhakhnccimnplk">GitHub Hovercard</a>：GitHub 增强插件，鼠标悬浮在仓库链接上面就可以预览</li><li><a href="https://chrome.google.com/webstore/detail/image-search-options/kljmejbpilkadikecejccebmccagifhl">Image Search Options</a>：使用右键以图搜图</li><li><a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien">Isometric Contributions</a>：GitHub 美化插件，将 GitHub 贡献以 3D 的效果显示出来</li><li><a href="https://chrome.google.com/webstore/detail/jetbrains-ide-support/hmhgeddbohgjknpmjagkdomcpobmllji">JetBrains IDE Support</a>：使用 Chrome 实时显示 IDEA 的 HTML/CSS/JavaScript 文件，与 IDEA 的插件配合使用</li><li><a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd">LastPass: Free Password Manager</a>：跨平台的免费密码管理器，有了这个之后再也不用所有网站都使用同一个密码了</li><li><a href="https://chrome.google.com/webstore/detail/mailto-for-gmail/dgkkmcknielgdhebimdnfahpipajcpjn">Mailto: for Gmail™</a>：对于 mailto 协议的链接以 Gmail 网页版打开</li><li><a href="https://chrome.google.com/webstore/detail/markdown-here/elifhakcjgalahccnjkneoccemfahfoa">Markdown Here</a>：在线将 Markdown 转换为有格式的文档，例如在一个普通的富文本编辑器（不支持 Markdown）中，可以先用 Markdown 语法写内容，然后转换一下就得到了有样式的内容了。</li><li><a href="https://chrome.google.com/webstore/detail/neat-url/jchobbjgibcahbheicfocecmhocglkco">Neat URL</a>：移除网址中的无用段，例如返利链接后面的参数</li><li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc">Octotree</a>：GitHub 代码树状图插件，方便查看项目文件</li><li><a href="https://chrome.google.com/webstore/detail/owo/ckfodameiahfhlainaclajkgfagkpodb">OwO</a>：颜文字插件，多亏了这个让吾辈能够愉快的刷推了</li><li><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">Proxy SwitchyOmega</a>：科学上网必需</li><li><a href="https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne">Stylus</a>：使用自定义网站样式的插件，比 Stylish 的名声好一些</li><li><a href="https://chrome.google.com/webstore/detail/tabliss-a-beautiful-new-t/hipekcciheckooncpjeljhnekcoolahp">Tabliss</a>：新标签页插件</li><li><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">Tampermonkey</a>：使用自定义网站脚本的插件，可以使用各种 <code>user.js</code> 脚本，相当于小型的插件管理器了</li><li><a href="https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg">The Great Suspender</a>：自动休眠标签页，避免 Chrome 使用的内存太过庞大</li><li><a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm">uBlock Origin</a>：日常上网必须，屏蔽各种广告，比 Adblock 的名声好一些</li><li><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">Vue.js devtools</a>：在 DevTool 中添加 Vuejs 选项卡，便于对 Vuejs 进行调试</li><li><a href="https://chrome.google.com/webstore/detail/webrtc-network-limiter/npeicpdbkakmehahjeeohfdhnlpdklia">WebRTC Network Limiter</a>：阻止浏览器通过 WebRTC 泄露 IP 地址</li><li><a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad">WEB 前端助手(FeHelper)</a>：貌似是百度的前端插件，但目前还没有什么流氓行为</li><li><a href="https://chrome.google.com/webstore/detail/%E5%BF%AB%E7%BF%BB%E8%AF%91/chpeaiibggkmaongjphijmielpkokcdg">快翻译</a>：这个翻译插件是真心不错，某种意义上讲比 Chrome 自带的翻译都要好（#大雾）</li><li><a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco">扩展管理器（Extension Manager）</a>：插件很少的时候还好，一多起来还是需要一个插件进行管理，快速启用和禁用一些插件，根据场景切换启用插件列表</li></ul><p>Chrome 虽然已经很完美了，但 Google 却并非如此，最近 Chrome 开始变得越来越封闭了。首先是 Chrome 应用被删除，现在又禁止安装非官方商店中的第三方插件（目前仍可以通过开发者模式安装），真心越来越麻烦了。</p><blockquote><p>附：这里提供一个快捷安装第三方插件的工具 <a href="http://www.webappbus.com/">Chrome 插件伴侣</a>，方便解决 Chrome67 之后安装非商店插件的麻烦</p></blockquote><h3 id="IDEA：最好的-Java-IDE"><a href="#IDEA：最好的-Java-IDE" class="headerlink" title="IDEA：最好的 Java IDE"></a>IDEA：最好的 Java IDE</h3><p>[便携版], [部分开源], [跨平台]</p><blockquote><p><a href="https://www.jetbrains.com/idea/">官网</a>, <a href="https://github.com/JetBrains/intellij-community">GitHub 社区版</a><br>强烈建议升级至 <strong>2019.2.3</strong>，官方终于把智障的重构字符串查找引用默认关闭了，可喜可贺，可喜可贺</p></blockquote><p>虽然说起最好的 IDE 什么的肯定是各种争论，但吾辈还是想说，在 Java 语言开发方面，IDEA 是目前最好的 IDE 了。</p><p>优点：</p><ul><li><p>智能提示<br>IDEA 在代码提示方面真的是无可比拟（相比于 Eclipse 来说），通常在还没有打完全部代码的时候，IDEA 就知道想要做什么了，然后给吾辈最常用的提示。并且，对于某些不太好的代码，IDEA 会提出一些建议甚至帮助进行安全的重构。一般而言吾辈认为，如果 IDEA 认为代码有问题，那么一般真的是代码有问题（确实有些情况下也不尽如此）</p></li><li><p>开箱即用<br>虽然很不起眼，但这确实很重要。当下载完 IDEA 之后，几乎不需要安装什么插件，进行繁复的配置，就能开始工作了！因为 IDEA 帮我们准备好了绝大多数情况所需要的插件，很多配置也都有着良好的默认值。</p></li><li><p>插件系统<br>或许 IDEA 的插件数量比不上 Eclipse，但 IDEA 的插件系统确实已经很完善了，至少，对于吾辈而言已然足够了。</p></li><li><p>界面很棒<br>其实这个就是吸引吾辈入坑 IDEA 的原因之一，毕竟曾经其他人都在用着 Eclipse 的时候，吾辈看到了 IDEA 的黑色主题就被吸引了，然后到现在成了 IDEA 的死忠粉。</p></li><li><p>搜索功能<br>非常强大的搜索功能，可以搜索类，文件，字段，以及全文搜索，包括正则表达式，文件后缀名等过滤功能。</p></li><li><p>调试<br>或许有人说，现代的 IDE 基本上都有调试功能吧。但 IDEA 是不同的，它可以同时调试 Java 与 JavaScirpt 以及其他所集成的语言，这可真是强大无比。使用 JavaScript 发送一个请求，然后进入后台代码调试，得到 SQL 语句，去查询数据库，而这一切，都是在 IDEA 内部完成的！</p></li><li><p>语言注入</p><p>这是 IDEA 比较高级的部分了，但这也是一个相当强大的功能。例如，有时候我们不得不手写 SQL 语句，或者在 JavaScript 中拼接 HTML 代码。难道我们必须要去对应的文件中编辑完之后复制过来么？不不不，语言注入就是可以为某一个代码片段注入为某一种语言，例如你可以为 Java 中的字符串注入 SQL 语言。在字符串中，你写 SQL 语句就有提示了！</p><blockquote><p>当然，语言注入也是要符合基本法的，必须是 IDEA 支持的语言才行，不过 IDEA 对主流语言的支持都还不错。</p></blockquote></li></ul><p>缺点：</p><ul><li>硬件杀手<br>IDEA 是出了名的吃内存（日常），吃磁盘（扫描项目建立索引）以及 CPU（索引）。</li><li>小病不断<br>虽然 IDEA 很是强大，但各种小问题也是层出不穷。例如自定义的 Maven 到了新的项目就变成默认的了。。。</li></ul><p>常用的 Plugin：</p><ul><li><p>Jrebel：做 Java Web 开发时真心免不了的 Plugin，能够有效解决 Web 容器（例如 Apache Tomcat）启动速度慢的问题（因为几乎所有的资源都能够热加载，热部署）。</p></li><li><p>LiveEdit：提供了 HTML/CSS/JavaScript 的实时预览和刷新功能。</p></li><li><p>MybatisX：Mybatis 的一个辅助开发插件，能够比较愉快的使用 Mybatis 框架了</p></li><li><p>Alibaba Java Coding Guidelines：Alibaba 出品的一个 Java 规范检查插件，能够规避一些不好的代码。</p></li><li><p>Translation：目前使用感觉最好的翻译插件，能够提供比较长的内容进行翻译（某些翻译插件只能翻译很短的内容）。</p></li><li><p>String Manipulation：字符串操作工具，可以方便对变量名或其他字符串修改为其他风格，例如将变量从</p></li></ul><p>  驼峰命名</p><p>  （Java 标准命名） 修改为</p><p>  下划线命名</p><p>  （SQL 标准命名）或者</p><p>  中缀线命名</p><p>  （HTML/CSS 标准命名）。</p><blockquote><p>其实这么多命名规范真心坑。。。</p></blockquote><ul><li><p>Custom Postfix Templates：提供自定义的后缀模板</p></li><li><p>GsonFormat：格式化 <code>json</code> 数据并转换为 <code>Java</code> 中的 <code>POJO</code>，其实对于吾辈而言主要是用来写爬虫时生成 <code>json</code> 数据对应的实体类</p></li><li><p>Markdown Navigator：IDEA 平台的 Markdown 写作插件，比自带的 Markdown Support 要好很多，主要在需要写的 Markdown 内容中含有代码时比较方便。</p></li><li><p>Maven Helper：一个 Apache Maven 的辅助操作插件</p></li><li><p>CodeGlance：在编辑器右侧显示一块代码缩略图，主要为了方便使用滑块进行上下滑动</p></li><li><p>Grep Console：自定义控制台的输出颜色</p></li><li><p>.ignore：在使用版本控制时，快速忽略某些文件/文件夹，目前支持广泛</p></li><li><p>CMD support：Cmd 支持，主要是方便在 IDEA 中直接运行 bat 脚本</p></li><li><p>NodeJS：集成了 NodeJS，可以直接在 IDEA 中运行 NodeJS</p></li><li><p>Vue.js：集成 Vue.js 框架</p></li><li><p>Properties to YAML Converter：将 <code>Properties</code> 文件快速转换为 <code>YAML</code> 格式的配置文件</p></li><li><p>WakaTime：统计使用的编程语言，不同 IDE 的记录。<a href="https://wakatime.com/">官网</a></p></li></ul><blockquote><p>入门推荐教程（简体中文）：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial">https://github.com/judasn/IntelliJ-IDEA-Tutorial</a></p></blockquote><h3 id="drawio：开源免费的画图工具"><a href="#drawio：开源免费的画图工具" class="headerlink" title="drawio：开源免费的画图工具"></a>drawio：开源免费的画图工具</h3><p>[便携版], [开源], [免费]，[跨平台]</p><blockquote><p><a href="https://app.diagrams.net/">官网</a>, <a href="https://github.com/jgraph/drawio">GitHub</a></p></blockquote><p>目前能找到的最好的免费开源的画图解决方案，能够制作流程图、UML 图、组织结构图、泳道图等绘图。允许导出为图片/HTML/PDF 等各种格式，全平台免费可用的解决方案。</p><blockquote><p>ProcessOn 是一个更加本地化的解决方案，并且添加了思维导图支持，只允许在线编辑导致了数据的最终权力不在自己手上，强制收费则让（小）团队使用成为一件可望而不可及的事情。<br>注：此处不是故意黑 ProcessOn，因为吾辈也是它的付费用户，但在团队内推广使用确实会存在一些问题。</p></blockquote><h3 id="Cmder：Windows-上模拟-Linux-终端"><a href="#Cmder：Windows-上模拟-Linux-终端" class="headerlink" title="Cmder：Windows 上模拟 Linux 终端"></a>Cmder：Windows 上模拟 Linux 终端</h3><p>[便携版], [开源], [免费]</p><blockquote><p><a href="http://cmder.net/">官网</a>, <a href="https://github.com/cmderdev/cmder">GitHub</a></p></blockquote><p>曾经有段时间吾辈也很迷信 Linux，觉得 Linux 适合开发者使用（事实上确实如此），但后来还是因为电脑的硬件原因（驱动问题，莫名其妙的卡死在登录页面）而回到了 Windows。而最让人念念不忘的就是 Linux Bash 终端了，相比于 Windows 自带的 Cmd/PowerShell 来说漂亮/强大了许多。当然，Windows 相比于 Linux 的最大优点就是稳定（不怕折腾，很难损坏系统本身）以及可视化（大部分的设计都有可视化界面进行配置）。然而有时候还是不得不使用命令行，而这时便显示出 Windows 的不足了，直到后来吾辈在偶然的机会碰到了 Cmder，发现了 Windows 上果然已经有了解决方案。</p><p>Cmder 是一个在 Windows 上模拟 Linux Bash 的终端模拟器，其实对于吾辈而言，主要是因为 Cmder 比较漂亮，集成了很多组件（例如 Git, SSH, Curl, Less, vim），而且还能在上面安装 Windows 下的包管理系统 <strong>Chocolatey</strong>。安装了包管理器之后就能直接使用 <code>choco command options</code> 命令安装软件了。</p><blockquote><p>具体方法可以参考另外一篇文章：<a href="https://blog.rxliuli.com/p/ad968d70/">Windows 下 Cmder 安装 Chocolatey</a></p></blockquote><h3 id="Git：Git-版本控制系统"><a href="#Git：Git-版本控制系统" class="headerlink" title="Git：Git 版本控制系统"></a>Git：Git 版本控制系统</h3><p>[便携版], [开源], [跨平台], [免费]</p><blockquote><p><a href="https://git-scm.com/">官网</a>, <a href="https://github.com/git/git">GitHub</a></p></blockquote><p>最初由 Linus 开发的一个分布式的版本控制系统，现在已经是最流行的版本控制系统之一了。说到 Git 不得不提 GitHub，GitHub 为 Git 实现了一个在线代码（或者其他）托管平台，相当好用而且托管开源项目是免费的。其实对于吾辈而言 Git 只是一个用于在本地操作 GitHub 的客户端罢了（很少有添加到 Git 而没有提交到 GitHub 的代码）。正是因为 GitHub 对 Git 的支持之好，所以吾辈才喜欢使用 Git 的。。。（#因果颠倒）</p><h3 id="Termius：简单漂亮的-SSH-连接工具"><a href="#Termius：简单漂亮的-SSH-连接工具" class="headerlink" title="Termius：简单漂亮的 SSH 连接工具"></a>Termius：简单漂亮的 SSH 连接工具</h3><p>[跨平台]</p><blockquote><p><a href="https://www.termius.com/">官网</a></p></blockquote><p>非常漂亮的一个远程连接工具，免费版本仅支持 SSH 连接，而 SFTP 则是收费版本的功能，吾辈作为前端感觉算是足够了。</p><blockquote><p>更强大的远程连接工具：<a href="https://mobaxterm.mobatek.net/">Mobaxterm</a>，功能非常强大但界面复古（Win7 时代的风格）。</p></blockquote><h3 id="HeidiSQL：SQL-客户端"><a href="#HeidiSQL：SQL-客户端" class="headerlink" title="HeidiSQL：SQL 客户端"></a>HeidiSQL：SQL 客户端</h3><p>[便携版], [开源], [免费]</p><blockquote><p><a href="https://www.heidisql.com/">官网</a>, <a href="https://github.com/HeidiSQL/HeidiSQL">GitHub</a></p></blockquote><p>一个支持 MSSQL,MySQL 和 PostgreSQL 的开源数据库轻量级客户端。吾辈使用这个 SQL 客户端最重要的原因就是满足了吾辈对于数据库文件的导入/导出需求，谁让 IDEA 自带的 DataGrip 没有导出功能呢</p><blockquote><p>附：吾辈很清楚 MySQL 有自带的导出命令，然而并不灵活。。。至少这个能够定义创建数据表，插入数据时使用的策略</p></blockquote><h3 id="freeFTPd：免费的-FTP-SFTP-服务端"><a href="#freeFTPd：免费的-FTP-SFTP-服务端" class="headerlink" title="freeFTPd：免费的 FTP/SFTP 服务端"></a>freeFTPd：免费的 FTP/SFTP 服务端</h3><p>[开源], [免费]</p><blockquote><p><a href="http://www.freesshd.com/">官网</a></p></blockquote><p>开源免费的 FTP/SFTP 服务端，非常适合在开发过程中模拟 FTP/SFTP 服务端使用。而且相比于 <a href="https://filezilla-project.org/">FileZilla</a> 更加简单，也不会从一开始就出现错误需要解决。</p><hr><h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><h3 id="Win-R：快速启动"><a href="#Win-R：快速启动" class="headerlink" title="Win + R：快速启动"></a>Win + R：快速启动</h3><p>虽说 Windows 上也有快速启动工具，但 Windows 原生的快速启动已然足够使用了。将快捷方式命名为一个简单的名字，例如将 <strong>Google Chrome</strong> 命名为 <strong>GC</strong>，然后丢到当前用户目录下，然后使用 <strong>Win + R</strong> 弹出运行窗口，然后输入 <strong>GC</strong>，系统就会启动 <strong>Google Chrome</strong> 了。</p><p>当然，更好的方法是新建一个目录保存这些快速启动的快捷方式，然后将目录添加到环境变量中即可（<code>Path</code>）。</p><h3 id="SSR：正常上网必须"><a href="#SSR：正常上网必须" class="headerlink" title="SSR：正常上网必须"></a>SSR：正常上网必须</h3><p>[便携版], [开源], [跨平台], [免费]</p><blockquote><p><a href="https://github.com/shadowsocksr-backup">GitHub</a></p></blockquote><p>为了正常浏览网络折腾与支付一些代价都是微不足道的，貌似比 <code>ShadowScoks</code> 要稳定一点，不过据传闻作者最初并未打算将其开源。</p><h3 id="Proxifier：代理一切"><a href="#Proxifier：代理一切" class="headerlink" title="Proxifier：代理一切"></a>Proxifier：代理一切</h3><blockquote><p><a href="https://www.proxifier.com/">官网</a></p></blockquote><p>虽然 SSR 可以连接代理服务器，同时还提供局域网内的 Socks5/HTTP 的代理，同时 Chrome 自动使用系统代理，所以我们可以方便的直接打开 Google 了。然而，并不是所有程序都像是 Chrome 浏览器那么友好，许多支持代理的程序都需要手动进行配置，更麻烦的地方是：很多程序不包含代理设置 – 尤其是开发相关的工具链。</p><p>先说几个具体的使用场景吧</p><ul><li>进行 web 开发时，有些 npm 包（electron/SQLLite）会在 install 时从网络下载二进制文件，而因为众所周知的原因，它们的下载速度并不快，而 nodejs 也不能配置代理（事实上，即便配置了，也不是所有 npm 包都会读）</li><li>希望监听某些程序到底有没有发送网络请求，但却不能尽知</li></ul><h3 id="MacType：字体美化"><a href="#MacType：字体美化" class="headerlink" title="MacType：字体美化"></a>MacType：字体美化</h3><p>[开源], [免费]</p><blockquote><p><a href="http://www.mactype.net/">官网</a>, <a href="https://github.com/snowie2000/mactype">GitHub</a></p></blockquote><p>Windows 上的字体就是会出现锯齿（所谓的点阵字体真是坑），不过 MacType 可以缓解这一现象。它可以美化 Windows 对字体的渲染（绝大部分程序都不会出现问题），让吾辈在使用 Windows 的时候看着代码更舒服一点。</p><blockquote><p>附: MacType 配置推荐 <strong>注册表加载 + Iof =&gt; XHei =&gt; Default</strong><br>附：字体个人推荐 <a href="https://github.com/be5invis/Sarasa-Gothic">Sarasa-Gothic</a>，中文名是更纱黑体，包含 <strong>英/简中/繁中/日</strong> 四种语言</p></blockquote><h3 id="Joplin：适合开发者的笔记工具"><a href="#Joplin：适合开发者的笔记工具" class="headerlink" title="Joplin：适合开发者的笔记工具"></a>Joplin：适合开发者的笔记工具</h3><p>[便携版], [开源], [跨平台], [免费]</p><blockquote><p><a href="https://joplinapp.org/">官网</a>, <a href="https://github.com/laurent22/joplin">GitHub</a></p></blockquote><p>一个开源跨平台的笔记工具，使用的模式是本地程序 + 第三方服务同步的方式，编辑功能算是比较弱的，同步也不算是最好的，甚至于客户端也不算是最漂亮的。但是，它有一些非常显著的优点，甚至足以压倒以上的缺点。</p><p>主要优点：</p><ol><li>搜索很快，非常快</li><li>可以使用外部编辑器打开</li><li>数据都在自己手里，提供一次性导出全部的功能</li><li>使用标准的 md，可以直接复制到其他平台</li><li>可以基于它进行二次开发</li></ol><p>主要缺点：</p><ol><li>ui/ux 有点简陋</li><li>没有 vsc 插件导致使用外部编辑器也并不是非常方便</li></ol><blockquote><p>之前吾辈使用过 OneNote 和 Notion，两者都是非常好的笔记工具，但两者存在的一些缺点导致吾辈在使用一段时间后选择了放弃。</p><ul><li>OneNote：主要问题是需要自己调整文本格式，不支持 markdown，以及富文本带来的分享问题。</li><li>Notion：主要问题是编辑体验不好，搜索非常慢，以及非标准 markdown 导致的分享问题。可以参考 <a href="https://blog.rxliuli.com/p/b1d53b2d48c24af7904985f6c3764cdb">Notion 使用体验</a></li></ul></blockquote><h3 id="FDM：免费的多线程下载器"><a href="#FDM：免费的多线程下载器" class="headerlink" title="FDM：免费的多线程下载器"></a>FDM：免费的多线程下载器</h3><p>[免费]</p><blockquote><p><a href="http://http//www.freedownloadmanager.org">官网</a></p></blockquote><p>全称 Free Download Manager，没什么太多好说的，但用起来还算不错，不会弹个窗口提示下载什么的，然而下载完成也没提示真的坑。。。</p><p>基本上满足吾辈日常的下载需求吧</p><ul><li><input checked="" disabled="" type="checkbox"> 提供客户端界面</li><li><input checked="" disabled="" type="checkbox"> 多线程</li><li><input checked="" disabled="" type="checkbox"> 集成 chrome</li><li><input checked="" disabled="" type="checkbox"> 静默下载</li><li><input checked="" disabled="" type="checkbox"> 下载后可以打开文件/文件夹</li><li><input disabled="" type="checkbox"> 下载完成后没有弹窗提示</li><li><input disabled="" type="checkbox"> 便携版（配置可携带化）</li></ul><h3 id="Bandizip：压缩-解压缩"><a href="#Bandizip：压缩-解压缩" class="headerlink" title="Bandizip：压缩/解压缩"></a>Bandizip：压缩/解压缩</h3><p>[便携版], [免费]</p><blockquote><p><a href="https://www.bandizip.com/">官网</a></p></blockquote><p>目前吾辈觉得最好的压缩/解压缩软件，具体压缩率/支持格式什么的吾辈也并非专业所以就不说了。但就使用体验上看 Bandizip 是要明显优于其他同类软件的（WinRAR, 7Zip）。</p><p>吾辈看到的优点：</p><ul><li>预览压缩文件时左侧有文件夹树状列表，不需要再用鼠标点击进进出出的活塞运动了</li><li>自动解压，这个功能相当棒，可以智能解压压缩文件到文件夹中（如果压缩包里面只有一个文件夹就直接解压出来，否则会将压缩包里面的内容解压到一个与压缩包同名的文件夹中），这个功能看起来很不起眼，但吾辈在此之前并未找到（需要特别注意压缩包的内容）</li></ul><blockquote><p>注：最新版本强制更新还有广告，所以需要下载修改版或是旧版本，即便如此，它的自动解压仍然是非常优秀的解压功能。</p></blockquote><h3 id="ClipboardFusion：剪切板增强"><a href="#ClipboardFusion：剪切板增强" class="headerlink" title="ClipboardFusion：剪切板增强"></a>ClipboardFusion：剪切板增强</h3><p>[便携版], [免费]</p><blockquote><p><a href="https://www.clipboardfusion.com/">官网</a></p></blockquote><p>Windows 剪切板增强工具，不得不说 Windows 上的工具确实很多。即使一个功能 Windows 本身支持的不好，然而总有其他的工具对其增强就是了。当然，吾辈需要的只是它的剪切板历史功能。</p><blockquote><p>注：目前 Windows 已经自带了剪切板历史功能，但尚未支持搜索，同时在布局上也并不是特别友好（只能显示 4 条），轻量级用户可以选择这个（毕竟是自带，很方便）。<br>注：之前在用 Ditto，但后面在吾辈电脑上出现了 bug，所以更换了其他工具，但并不是说它不好。参考：<a href="https://xbeta.info/ditto.htm">善用佳软评测</a> 对其的介绍很全面，这里也就无需赘述了。</p></blockquote><h3 id="JPEGView：图片浏览"><a href="#JPEGView：图片浏览" class="headerlink" title="JPEGView：图片浏览"></a>JPEGView：图片浏览</h3><p>[便携版], [免费]</p><blockquote><p><a href="https://sourceforge.net/projects/jpegview/">官网</a></p></blockquote><p>简单而且好用的图片查看器，相比于吾辈之前使用的 ImageView（中文名是 <strong>快眼看图王</strong>）更快，相比于 HoneyView 更见简洁和易操作。</p><p>主要优点如下：</p><ul><li>操作简单：滚轮缩放，按住移动，ESC 关闭，Left/Right 查看上/下张图片</li><li>性能很高：实测打开速度比 imageview/honeyview 都要更快</li></ul><p>借用<a href="https://www.zhihu.com/question/21305023">知乎</a>网友理想中的图片查看器需求图</p><p><a href="https://cdn.jsdelivr.net/gh/rxliuli/img-bed/20200408210706.png"><img src="https://cdn.jsdelivr.net/gh/rxliuli/img-bed/20200408210706.png" alt="理想中的图片查看器"></a></p><p><a href="https://cdn.jsdelivr.net/gh/rxliuli/img-bed/20200408210706.png">理想中的图片查看器</a></p><h3 id="Everything：文件快速搜索"><a href="#Everything：文件快速搜索" class="headerlink" title="Everything：文件快速搜索"></a>Everything：文件快速搜索</h3><p>[便携版], [免费]</p><blockquote><p><a href="https://www.voidtools.com/">官网</a></p></blockquote><p>用过 Windows Explorer（文件管理器）搜索文件的人都知道速度是有多慢，有了 Everything 之后这一切都是往事了。Everything 建立了全盘索引，可以对文件/文件夹进行实时搜索，速度之快简直和默认的文件管理器有天壤之别。当然，也能够根据正则表达式/类型进行高级查询。</p><h3 id="Snipaste：截图-贴图"><a href="#Snipaste：截图-贴图" class="headerlink" title="Snipaste：截图/贴图"></a>Snipaste：截图/贴图</h3><p>[便携版], [免费]</p><blockquote><p><a href="https://zh.snipaste.com/">官网</a>, <a href="https://github.com/Snipaste">GitHub</a>, <a href="https://docs.snipaste.com/zh-cn/">GitBook 中文教程</a></p></blockquote><p>很漂亮，很漂亮，很漂亮！重要的话说三遍，Snipaste 相比于其他的截图软件（FSCapture）在使用时感觉漂亮了很多，而且在使用时会方便很多（截图完成后直接就进行编辑，而不是跳转到编辑器中编辑截图），保存时自动保存并且复制到剪切板也很方便。总而言之就是细节做的相当棒！</p><h3 id="PicGo：图床上传"><a href="#PicGo：图床上传" class="headerlink" title="PicGo：图床上传"></a>PicGo：图床上传</h3><p>[开源], [跨平台], [免费]</p><blockquote><p><a href="https://molunerfinn.com/PicGo/">官网</a>, <a href="https://github.com/rxliuli/PicGo">GitHub</a></p></blockquote><p>使用 Markdown 写作必备的图床工具，解决了吾辈关于 GitHub 图床的几个痛点。</p><ul><li>上传之前重命名</li><li>上传一键就好</li><li>上传后图片管理</li></ul><h3 id="ScreenToGif：录制-GIF-动态图"><a href="#ScreenToGif：录制-GIF-动态图" class="headerlink" title="ScreenToGif：录制 GIF 动态图"></a>ScreenToGif：录制 GIF 动态图</h3><p>[便携版], [开源], [免费]</p><blockquote><p><a href="https://www.screentogif.com/">官网</a>, <a href="https://github.com/NickeManarin/ScreenToGif">GitHub</a></p></blockquote><p>虽然吾辈已经有了截图工具，但某些时候单靠截图并不能很好的表达意思，这时候就需要使用 Gif 去记录一系列的操作。这也是 ScreenToGif 的主要功能，将记录转换成 Gif 动态图。</p><p>嘛，虽然就使用上吾辈觉得还是有一些不便：</p><ul><li>吸附窗口操作不太直观</li><li>保存时不能直接一键保存到指定目录并复制到剪切板</li></ul><p>不过这也是目前吾辈能找到的比较好用的一个了</p><h3 id="QuickLook：文件管理器预览增强"><a href="#QuickLook：文件管理器预览增强" class="headerlink" title="QuickLook：文件管理器预览增强"></a>QuickLook：文件管理器预览增强</h3><p>[便携版], [开源], [免费]</p><blockquote><p><a href="https://pooi.moe/QuickLook/">官网</a>, <a href="https://github.com/xupefei/QuickLook">GitHub</a></p></blockquote><p>Windows Explorer 预览功能增强，支持很多种格式的文件/文件夹进行预览，包括但不限于文本、图像、视频、音频、压缩包、文件夹等。在按下空格时，就弹出一个预览窗口，感觉还是不错的。</p><h3 id="Steam：国外的游戏平台"><a href="#Steam：国外的游戏平台" class="headerlink" title="Steam：国外的游戏平台"></a>Steam：国外的游戏平台</h3><p>[跨平台], [免费]</p><blockquote><p><a href="https://steamcommunity.com/">官网</a></p></blockquote><p>来自于金三胖出品的非常著名的游戏平台，非常之多的游戏在该平台上发售。Steam 提供了非常多的支付方式，对国内用户相当友好（支付宝/微信/银联）。吾辈个人是只玩 Galgame 的，所以能入正支持到做 Galgame 的公司表示还是很开心的。<br>唉，不过 Steam 也没能逃过魔掌呢。。。<a href="https://www.google.com/search?q=steam+%E8%90%BD%E6%88%B7%E4%B8%8A%E6%B5%B7%E6%B5%A6%E4%B8%9C">steam 落户上海浦东</a>，吾辈表示转区势在必得了！</p><blockquote><p>附：Steam 上没有什么盗版游戏，所以想免费玩游戏的人就不用抱有什么幻想了</p></blockquote><h3 id="Mozilla-FireFox：抱有期待的浏览器"><a href="#Mozilla-FireFox：抱有期待的浏览器" class="headerlink" title="Mozilla FireFox：抱有期待的浏览器"></a>Mozilla FireFox：抱有期待的浏览器</h3><p>[开源], [跨平台], [免费]</p><blockquote><p><a href="https://firefox.com/">官网</a>, <a href="https://github.com/mozilla/gecko-dev">GitHub</a></p></blockquote><p>FireFox 是一个将 IE 拉下神坛的浏览器，一个开源的注重隐私的浏览器，但现在，它已然有些没落了。尤其是最近的 FireFox57 后为了提升性能更新了浏览器的整体架构，导致旧的扩展基本全部失效，恢复曾经的附加扩展生态却又不知道需要多久了。但是，这些问题，相比于隐私（信息收集）与自由（不限制扩展）来说，还是值得考虑一下的，确实挺期待 FireFox 之后发展的。</p><p>相比于其他的浏览器最大的特点就是隐私性和自由，收集隐私是完全可选的（国内的流氓浏览器信息收集简直过分），附加扩展基本不怎么限制（Chrome 限制扩展只能从官方商店直接安装）。</p><blockquote><p>补充:</p><ul><li>2019-06-18: 现在 Chrome 居然限制 <strong>uBlock Origin</strong> 这类的扩展了。。。</li></ul></blockquote><h3 id="AIMP：本地音乐播放器"><a href="#AIMP：本地音乐播放器" class="headerlink" title="AIMP：本地音乐播放器"></a>AIMP：本地音乐播放器</h3><p>[免費]</p><blockquote><p><a href="http://www.aimp.ru/">官网</a></p></blockquote><p>一个非常漂亮的本地音乐播放器，貌似对歌曲音质的支持也很好（没什么感触，不玩耳机的萌新一只）。。。</p><h3 id="PotPlayer：视频播放器"><a href="#PotPlayer：视频播放器" class="headerlink" title="PotPlayer：视频播放器"></a>PotPlayer：视频播放器</h3><p>[便携版], [免费]</p><blockquote><p><a href="https://potplayer.daum.net/">官网</a></p></blockquote><p>非常强大/漂亮的本地视频播放器，虽然也可以播放 URL 的视频资源，但主要还是播放本地视频，支持大多数常见格式而且对于 1080P 之上的画质支持非常棒！</p><h3 id="qBittorrent：BT-下载"><a href="#qBittorrent：BT-下载" class="headerlink" title="qBittorrent：BT 下载"></a>qBittorrent：BT 下载</h3><p>[免费]</p><blockquote><p><a href="https://www.qbittorrent.org/">官网</a></p></blockquote><p>不错的 BT 客户端，相比于<strong>大名鼎鼎</strong>的比特彗星，它没有广告，没有等级。对于热门种子的下载速度十分喜人，最高可以跑到 10M 左右，比特彗星永远没有跑到这么高过。。。</p><h3 id="Dism-：Windows-的一个集中式的系统管理工具"><a href="#Dism-：Windows-的一个集中式的系统管理工具" class="headerlink" title="Dism++：Windows 的一个集中式的系统管理工具"></a>Dism++：Windows 的一个集中式的系统管理工具</h3><p>[便携版], [免费]</p><blockquote><p><a href="https://www.chuyu.me/">官网</a>, <a href="https://github.com/Chuyu-Team/Dism-Multi-language">GitHub</a></p></blockquote><p>一个集中式管理 Windows 各种设置的 GUI 控制面板，能够方便的控制系统的各种设置（包括 Windows 10 的更新。。。），提供了一个简单但却还算可以的垃圾清理工具，感觉上很干净而且可以独立运行！</p><h3 id="TreeSizeFree：以树状视图查看文件夹"><a href="#TreeSizeFree：以树状视图查看文件夹" class="headerlink" title="TreeSizeFree：以树状视图查看文件夹"></a>TreeSizeFree：以树状视图查看文件夹</h3><p>[便携版], [免费]</p><blockquote><p><a href="https://www.jam-software.com/treesize/">官网</a></p></blockquote><p>用来以树状结构查看文件夹大小的工具，可以知道到底是哪些文件占用了硬盘及其大小。</p><h3 id="renamer：文件-文件夹重命名"><a href="#renamer：文件-文件夹重命名" class="headerlink" title="renamer：文件/文件夹重命名"></a>renamer：文件/文件夹重命名</h3><p>[便携版], [免费]</p><blockquote><p><a href="http://www.den4b.com/">官网</a></p></blockquote><p>或许很多人想吐槽，重命名不就一个 F2 的事情么？是的，如果只需要重命名一个文件，F2 是最快捷的方式。但 rename 针对的是需要重命名数十，数百个文件的情况，这种时候手动重命名实在太过于糟糕了点！</p><h3 id="waifu2x-caffe：图片清晰化"><a href="#waifu2x-caffe：图片清晰化" class="headerlink" title="waifu2x-caffe：图片清晰化"></a>waifu2x-caffe：图片清晰化</h3><p>[便携版], [免费], [开源], [跨平台]</p><blockquote><p><a href="http://waifu2x.udp.jp/">官网</a>, <a href="https://github.com/nagadomi/waifu2x">GitHub</a>, <a href="https://github.com/lltcggie/waifu2x-caffe">GitHub Windows</a></p></blockquote><p>可以让图片变得清晰，具体技术实现涉及机器学习等尖端技术（#dalao），可以说是很厉害了呢</p><h3 id="Bandicam：视频录制"><a href="#Bandicam：视频录制" class="headerlink" title="Bandicam：视频录制"></a>Bandicam：视频录制</h3><blockquote><p><a href="https://www.bandicam.com/">官网</a></p></blockquote><p>还算好用的视频录制工具，可以很方便的进行视频的录制。<br>特色功能：</p><ul><li>绘制模式：在录制视频时进行频幕上的编辑</li><li>窗口依附：可以轻松指定需要录制的窗口</li><li>多格式输出：支持输出多种格式，按照不同分辨率，预置平台输出</li><li>添加水印：防盗利器，在视频中添加自己的 LOGO</li></ul><h3 id="LockHunter：解除文件占用"><a href="#LockHunter：解除文件占用" class="headerlink" title="LockHunter：解除文件占用"></a>LockHunter：解除文件占用</h3><p>[免费]</p><blockquote><p><a href="https://lockhunter.com/">官网</a></p></blockquote><p>在删除文件/目录时，偶尔会遇到文件占用的问题，这个小工具直接集成到 MS Explorer 右键菜单中，可以方便查看占用程序，并关闭它。</p><h3 id="rufus：USB-启动盘制作工具"><a href="#rufus：USB-启动盘制作工具" class="headerlink" title="rufus：USB 启动盘制作工具"></a>rufus：USB 启动盘制作工具</h3><p>[便携版], [免费], [开源]</p><blockquote><p><a href="https://rufus.ie/">官网</a>, <a href="https://github.com/pbatard/rufus">GitHub</a></p></blockquote><p>小巧方便的 USB 启动盘制作工具，完全的一键操作，<strong>下载 =&gt; 解压 =&gt; 运行</strong> 三连之后就是父母辈的人都能看懂的界面了！</p><h3 id="Geek-Uninstaller：深度卸载"><a href="#Geek-Uninstaller：深度卸载" class="headerlink" title="Geek Uninstaller：深度卸载"></a>Geek Uninstaller：深度卸载</h3><h3 id="Loseless-Audio-Validator：音频校验"><a href="#Loseless-Audio-Validator：音频校验" class="headerlink" title="Loseless Audio Validator：音频校验"></a>Loseless Audio Validator：音频校验</h3><p>[便携版], [跨平台], [开源], [免费]</p><blockquote><p><a href="http://losslessaudiochecker.com/">官网</a></p></blockquote><p>校验音乐是否是真的 <strong>Flac/Ape</strong> 无损音质的，其实作为一个外行人吾辈表示并不理解什么音频波形什么的。</p><h3 id="ApowerMirror-手机投屏"><a href="#ApowerMirror-手机投屏" class="headerlink" title="ApowerMirror: 手机投屏"></a>ApowerMirror: 手机投屏</h3><p>[跨平台]</p><blockquote><p><a href="https://www.apowersoft.com/phone-mirror">官网</a></p></blockquote><p>在局域网内将手机屏幕投影到 PC 上，延迟性在半秒之内，基本上不影响使用。相比于 <a href="https://www.teamviewer.cn/cn/">TeamViewer</a> 的主要优点是不走中央服务器，延迟没那么高。而与之类似的 <a href="https://www.airserver.com/">AirServer</a> 却延迟很大，而且操作过快时就会崩溃。吾辈主要是在 PC 演示操作时，涉及到手机上的操作时，为了避免录屏中断或是后期拼接，故而需要将手机屏幕投影至 PC 方便持续录制。</p><h3 id="HandBrake-视频压缩工具"><a href="#HandBrake-视频压缩工具" class="headerlink" title="HandBrake: 视频压缩工具"></a>HandBrake: 视频压缩工具</h3><p>[便携版], [跨平台], [免费], [开源]</p><blockquote><p><a href="https://handbrake.fr/">官网</a></p></blockquote><p>非常简单的视频压缩工具，对非专业人士非常友好，只要选择合适的<strong>预设</strong>，任何人都能批量将视频压缩。吾辈一般使用的是 <code>MP4+Web Optimized</code>，可以将 50M 的视频压缩到 10M 左右，同时支持删除音轨进一步缩小视频大小。</p><blockquote><p>ref: <a href="https://www.pkstep.com/archives/37386">HandBrake 免費影片壓縮軟體教學，將視頻的檔案縮小。（Mac ,Windows）</a></p></blockquote><h2 id="国内流氓"><a href="#国内流氓" class="headerlink" title="国内流氓"></a>国内流氓</h2><h3 id="QQ：国内不得不用的流氓-IM"><a href="#QQ：国内不得不用的流氓-IM" class="headerlink" title="QQ：国内不得不用的流氓 IM"></a>QQ：国内不得不用的流氓 IM</h3><blockquote><p><a href="https://im.qq.com/">官网</a></p></blockquote><p>垃圾 QQ，毁我人生！<br>好了，以上纯属吐槽不用在意。QQ 是腾讯的社交 IM，由于国内使用人数极其庞大，所以吾辈也不得不用的软件。一个软件居然会向系统添加驱动服务，而且禁用了还不让使用，真是厉害了呀。。。</p><h3 id="百度网盘：国内事实上的垄断网盘"><a href="#百度网盘：国内事实上的垄断网盘" class="headerlink" title="百度网盘：国内事实上的垄断网盘"></a>百度网盘：国内事实上的垄断网盘</h3><p>[跨平台], [免费]</p><blockquote><p><a href="https://pan.baidu.com/">官网</a></p></blockquote><p>国内事实上的大文件共享服务，目前对普通用户的限制非常大，逼得人不得不开通 <a href="https://pan.baidu.com/buy/checkoutcounter?from=homepage&svip=1">SVip</a> 才能使用，但同时也不能得到满速下载，在下载量较大后，之后的下载就会在服务端限速，同时百度网盘的客户端非常讨厌，即便是 SVip 也会看到广告。</p><hr><blockquote><p>Pass：以上国内的流氓吾辈使用的都是修改过的绿色版本，基本上没什么太多麻烦的东西了呢</p></blockquote><hr><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="便携版"><a href="#便携版" class="headerlink" title="便携版"></a>便携版</h3><p>能够下载完解压之后无需安装即可直接使用的软件，所有的配置文件也都在程序运行的文件目录下（非用户目录下），理论上可以配置完成一次之后就可以用一辈子了（#笑）</p><h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><p>开放程序源代码，任何人都可以自由浏览</p><h3 id="部分开源"><a href="#部分开源" class="headerlink" title="部分开源"></a>部分开源</h3><p>指程序既有开源版本又有商业版本，所以标识为部分开源</p><h3 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h3><p>至少兼容两个主流 PC 系统平台（Windows/MacOS #Linux 桌面在哭泣 #笑）才会标记为跨平台</p><h3 id="免费"><a href="#免费" class="headerlink" title="免费"></a>免费</h3><p>所有功能都完全免费（或许有捐助请求）才会标识为免费，有收费的高级功能的程序不会被标记为免费，例如 IDEA 就不会被标识为免费</p><blockquote><p>以上均为吾辈个人主观认知，参考一下就好。。。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ambari</title>
      <link href="e29592b7.html"/>
      <url>e29592b7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ambari安装指南"><a href="#Ambari安装指南" class="headerlink" title="Ambari安装指南"></a>Ambari安装指南</h1><p>注意事项</p><p>目前centos 7 默认python 环境 为2.7 现在调用 中需要请求比如</p><p><a href="https://master:8441/agent/v1/register/master">https://master:8441/agent/v1/register/master</a> 注册时  会出现问题</p><p>我没有去升级 参考了该链接 <a href="https://www.cnblogs.com/TopGear/p/12852397.html">Ambari 2.4 在 CentOS 7.4 因 TLS_1.2 协商内部错误导致注册失败</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install -y ntp &amp;&amp; systemctl enable ntpd &amp;&amp; systemctl start ntpd</span><br><span class="line">yum install -y unzip</span><br><span class="line">yum install -y gcc</span><br></pre></td></tr></table></figure><hr><h2 id="X-安装环境"><a href="#X-安装环境" class="headerlink" title="[X] 安装环境:"></a>[X] 安装环境:</h2><ul><li><p>系统版本:CentOS 7.3 x86_64</p></li><li><p>JAVA版本:JDK-1.8.x</p></li><li><p>确保机器的 Python 版本大于或等于2.6</p></li><li><p>服务器列表:</p><blockquote><p><code>192.168.68.17 master</code> #Ambari Server</p><p><code>192.168.68.18 work1</code> #<strong>Ambari Agent,namenode2,journalnode1,datanode1,nodemanager1</strong></p><p><code>192.168.68.20 work2</code> #<strong>Ambari Agent,journalnode2,datanode2,nodemanager2</strong></p><p><code>192.168.68.21 work3</code> #<strong>Ambari Agent,journalnode3,datanode3,nodemanager3</strong></p></blockquote></li></ul><h3 id="SSL-需要的话可以升级"><a href="#SSL-需要的话可以升级" class="headerlink" title="SSL(需要的话可以升级)"></a>SSL(需要的话可以升级)</h3><blockquote><p>需要openssl的1.0以上版本!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install openssl</span><br><span class="line">或者</span><br><span class="line">yum upgrade openssl</span><br></pre></td></tr></table></figure></blockquote><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><blockquote><p>yum install -y java-1.8.0-openjdk-headless.x86_64 或者下载RPM 包安装</p><p>建议安装Sun的JDK1.8版本! 安装完毕并配置java环境变量,在/etc/profile末尾添加如下代码:</p><p>如果是用yum 在线安装 的openjdk  安装地址在 /lib/jvm/ 下面</p><p>或者是下载 oraclejdk 着一般需要解压后 设置java_home </p><p>上述地址在初始化 ambari-server setup 时是需要用到的</p><p>export JAVA_HOME=/usr/java/default<br>export PATH=$JAVA_HOME/bin:$PATH</p><p>保存退出即可,然后执行<code>source /etc/profile</code>生效.在命令行执行java -version 如下代表JAVA安装成功.</p></blockquote><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><blockquote><p>需要配置各个节点的免密码登录!<br>首先在自己机器上使用<code>ssh-keygen -t rsa</code></p><p>ssh-copy-id root@work1</p><p>ssh-copy-id root@work2</p><p>ssh-copy-id root@work3</p></blockquote><h3 id="NTP-必要条件"><a href="#NTP-必要条件" class="headerlink" title="NTP(必要条件)"></a>NTP(必要条件)</h3><p>集群的时钟要保证基本的一致.稍有不一致是可以容忍的,但是很大的不一致会 造成奇怪的行为. 运行 NTP 或者其他什么东西来同步你的时间.<br>如果你查询的时候或者是遇到奇怪的故障,可以检查一下系统时间是否正确!</p><blockquote><p>crontab -e</p><p>*/10 * * * * ntpdate time.nist.gov</p></blockquote><h3 id="ulimit和nproc"><a href="#ulimit和nproc" class="headerlink" title="ulimit和nproc"></a>ulimit和nproc</h3><blockquote><p>Hdaoop会在同一时间使用很多的文件句柄.大多数linux系统使用的默认值1024是不能满足的,修改<code>/etc/security/limits.conf</code>文件为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*               soft    nproc   16384</span><br><span class="line">*               hard    nproc   16384  </span><br><span class="line">*               soft    nofile  65536  </span><br><span class="line">*               hard    nofile  65536</span><br></pre></td></tr></table></figure></blockquote><hr><h3 id="修改host和虚拟机的名称"><a href="#修改host和虚拟机的名称" class="headerlink" title="修改host和虚拟机的名称"></a>修改host和虚拟机的名称</h3><p>192.168.68.17,192.168.68.18,192.168.68.20,192.168.68.21的 /etc/hosts</p><p>文件 在文件最后添加:</p><blockquote><p>192.168.68.17  master<br>192.168.68.18  work1<br>192.168.68.20  work2<br>192.168.68.21  work3</p></blockquote><p>同时修改虚拟的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname master </span><br><span class="line">vi &#x2F;etc&#x2F;hosts</span><br><span class="line">192.168.56.101 master</span><br><span class="line">192.168.56.102 work1</span><br><span class="line">192.168.56.103 work2</span><br><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br><span class="line">HOSTNAME&#x3D;master</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure><hr><h3 id="禁止-PackageKit"><a href="#禁止-PackageKit" class="headerlink" title="禁止 PackageKit"></a>禁止 PackageKit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkill -9 packagekitd</span><br><span class="line">vim &#x2F;etc&#x2F;yum&#x2F;pluginconf.d&#x2F;refresh-packagekit.conf</span><br></pre></td></tr></table></figure><p>将内容改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enabled&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙和SELINUX"><a href="#关闭防火墙和SELINUX" class="headerlink" title="关闭防火墙和SELINUX"></a>关闭防火墙和SELINUX</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#关闭</span><br><span class="line">service firewalld stop</span><br><span class="line">#随着系统启动自动关闭</span><br><span class="line">chkconfig firewalld off</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>systemctl stop firewalld<br>  systemctl disable firewalld</p><p>  vim /etc/selinux/config</p><p>  修改 SELINUX=disabled</p><h2 id="X-安装Ambari-Server"><a href="#X-安装Ambari-Server" class="headerlink" title="[X] 安装Ambari Server"></a>[X] 安装Ambari Server</h2><p>在T1上操作</p><h3 id="1-添加yum资源库"><a href="#1-添加yum资源库" class="headerlink" title="[1] 添加yum资源库:"></a>[1] 添加yum资源库:</h3><blockquote><p>wget -nv <a href="http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.7.3.0/ambari.repo">http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.7.3.0/ambari.repo</a> -O /etc/yum.repos.d/ambari.repo</p><p>yum clean all</p><p>yum install ambari-server</p></blockquote><h3 id="2-校验YUM仓库ambari"><a href="#2-校验YUM仓库ambari" class="headerlink" title="[2] 校验YUM仓库ambari:"></a>[2] 校验YUM仓库ambari:</h3><p>由于公司安全机制,这个地方可能不会安装成功<br>执行<code>yum repolist</code>,如果有<code>ambari</code>字符串的话,就可以开始安装了!</p><h3 id="3-1-YUM在线安装-ambari-server"><a href="#3-1-YUM在线安装-ambari-server" class="headerlink" title="[3.1] YUM在线安装: ambari-server"></a>[3.1] YUM在线安装: ambari-server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ambari-server</span><br></pre></td></tr></table></figure><p>实验证明,网速巨慢,耐心…,等待安装完成!</p><h3 id="3-2-YUM离线本地安装-ambari-server"><a href="#3-2-YUM离线本地安装-ambari-server" class="headerlink" title="[3.2] YUM离线本地安装: ambari-server"></a>[3.2] YUM离线本地安装: ambari-server</h3><ul><li>先找一个网络好的环境,配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;yum.conf</span><br></pre></td></tr></table></figure><p>  文件,修改</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keepcache</span><br></pre></td></tr></table></figure><p>  为</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p>  ,来保留安装包;再通过</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ambari-server</span><br></pre></td></tr></table></figure><p>  安装成功后后;把相关的rpm文件复制到需要离线安装的环境上;例如:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ambari-server-2.1.2-377.x86_64.rpm</span><br><span class="line">ambari-agent-2.1.2-377.x86_64.rpm</span><br><span class="line">postgresql-8.4.20-3.el6_6.x86_64.rpm</span><br><span class="line">postgresql-devel-8.4.20-3.el6_6.x86_64.rpm</span><br><span class="line">postgresql-libs-8.4.20-3.el6_6.x86_64.rpm</span><br><span class="line">postgresql-server-8.4.20-3.el6_6.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>再执行<code>yum localhost ./postgresql-8.4.20-3.el6_6.x86_64.rpm ./postgresql-server-8.4.20-3.el6_6.x86_64.rpm ./postgresql-libs-8.4.20-3.el6_6.x86_64.rpm ./postgresql-devel-8.4.20-3.el6_6.x86_64.rpm ./ambari-server-2.1.2-377.x86_64.rpm</code>来进行离线安装!</li></ul><h3 id="5-配置AMBARI-SERVER"><a href="#5-配置AMBARI-SERVER" class="headerlink" title="[5] 配置AMBARI-SERVER"></a>[5] 配置AMBARI-SERVER</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##指定JAVA_HOME</span><br><span class="line">ambari-server setup -j &#x2F;usr&#x2F;java&#x2F;default</span><br><span class="line">##不指定JAVA_HOME执行</span><br><span class="line">ambari-server setup</span><br></pre></td></tr></table></figure><blockquote><p>选择n会按默认配置<br>数据库类型：postgresql<br>数据库：ambari<br>用户名：ambari<br>密码：bigdata<br>等待安装完成</p></blockquote><h3 id="6-启动AMBARI-SERVER"><a href="#6-启动AMBARI-SERVER" class="headerlink" title="[6] 启动AMBARI-SERVER"></a>[6] 启动AMBARI-SERVER</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">## 初始化 ambari 包含配置数据库和 jdk环境</span><br><span class="line">ambari-server setup</span><br><span class="line">## 重置 </span><br><span class="line">ambari-server reset</span><br><span class="line">## 安装高版的 ambari ,后升级</span><br><span class="line">ambari-server upgrade</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##启动:</span><br><span class="line">ambari-server start</span><br><span class="line">##查看:</span><br><span class="line">ps -ef | grep Ambari</span><br><span class="line">##停止:</span><br><span class="line">ambari-server stop</span><br><span class="line">##帮助</span><br><span class="line">ambari-server help</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>然后访问：<a href="http://master:8080/">http://master:8080</a><br>不出意外的话就安装完成了<br>用户名/密码:admin/admin</p></blockquote><h3 id="6-安装AMBARI-AGENT-可选-在web界面自动安装注册"><a href="#6-安装AMBARI-AGENT-可选-在web界面自动安装注册" class="headerlink" title="[6] 安装AMBARI-AGENT(可选 在web界面自动安装注册)"></a>[6] 安装AMBARI-AGENT(可选 在web界面自动安装注册)</h3><p>在网络环境不好的地方或者sshd的端口不是标准的22时,可以在每个agent节点上先手工安装AMBARI-AGENT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ambari-agent</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h2><ul><li>Ambari安装的环境路径: 各台机器的安装目录:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;lib&#x2F;hadoop</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;hbase</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;zookeeper</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;hcatalog</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;hive</span><br></pre></td></tr></table></figure><ul><li><p>Log路径, 这里需要看出错信息都可以在目录下找到相关的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;log&#x2F;hadoop</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;hbase</span><br></pre></td></tr></table></figure></li><li><p>配置文件的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;hadoop</span><br><span class="line">&#x2F;etc&#x2F;hbase</span><br><span class="line">&#x2F;etc&#x2F;hive</span><br></pre></td></tr></table></figure></li><li><p>HDFS的存储路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;hadoop&#x2F;hdfs</span><br></pre></td></tr></table></figure></li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ul><li>主机名格式必须是<code>hoastname.domain</code>,如<code>master</code></li><li>Zookeeper-Agent端修改Server指向的HOSTNAME, <code>/etc/ambari-agent/conf/ambari-agent.ini</code>,如修改过主机hostname</li><li>安装失败后或重新安装先执行<code>ambari-server reset</code> 后 <code>ambari-setup</code></li><li>最后一步安装可能会失败,多数原因是下载包错误引起的,可重复安装直到成功,本人反复几个最终成功了,网络,网络,尤其就朝民,各种干扰!</li></ul><h3 id="ssl-版本导致的agent注册失败"><a href="#ssl-版本导致的agent注册失败" class="headerlink" title="ssl 版本导致的agent注册失败"></a>ssl 版本导致的agent注册失败</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#在agent的配置,主要针对ambari 2.6.2</span><br><span class="line">[security]</span><br><span class="line">force_https_protocol&#x3D;PROTOCOL_TLSv1_2</span><br></pre></td></tr></table></figure><p><strong>[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:579)</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;python&#x2F;cert-verification.cfg</span><br><span class="line">[https]</span><br><span class="line">verify&#x3D;disable</span><br></pre></td></tr></table></figure><h3 id="卸载hdp"><a href="#卸载hdp" class="headerlink" title="卸载hdp"></a>卸载hdp</h3><p><img src="../img/image-20201222161524135.png" alt="image-20201222161524135"></p><p><img src="../img/image-20201222161640124.png" alt="image-20201222161640124"></p><ol><li><p>确保防火墙关闭，能够ping通ambari-server服务所在机器的IP</p></li><li><p>升级openssl服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum upgrade openssl</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3. 关闭 openssl 的检查</span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;bash</span><br><span class="line">   sed -i &#39;s&#x2F;verify&#x3D;platform_default&#x2F;verify&#x3D;disable&#x2F;&#39; &#x2F;etc&#x2F;python&#x2F;cert-verification.cfg</span><br></pre></td></tr></table></figure><ol start="4"><li><p>先停掉ambari-server，然后依次停掉各个ambari-agent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ambari-server stop</span><br><span class="line">ambari-agent stop</span><br></pre></td></tr></table></figure></li><li><p>在所有ambari-agent节点上，修改ambari-agent.ini文件的[security]，新增force_https_protocol如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ambari-agent/conf/ambari-agent.ini</span><br><span class="line">[security]</span><br><span class="line">force_https_protocol=PROTOCOL_TLSv1_2</span><br></pre></td></tr></table></figure></li><li><p>依次开启ambari-agent，最后开启ambari-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ambari-server start</span><br><span class="line">ambari-agent start</span><br></pre></td></tr></table></figure></li></ol><h3 id="卡在安装界面看log不报错"><a href="#卡在安装界面看log不报错" class="headerlink" title="卡在安装界面看log不报错"></a>卡在安装界面看log不报错</h3><p><img src="../img/image-20201224140234774.png" alt="image-20201224140234774"></p><p>这是由于 我们使用了远程的地址,下载比较慢 查看服务器后台</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ps -ef|grep yum</span></span><br><span class="line">root       8946   8942  0 14:01 ?        00:00:00 /bin/sh -c  rpm -qa | grep smartsense- ||  yum -y install smartsense-hst ||  rpm -i /var/lib/ambari-agent/cache/stacks/HDP/3.0/services/SMARTSENSE/package/files/rpm/*.rpm</span><br><span class="line">root       8949   8946  1 14:01 ?        00:00:00 /usr/bin/python /bin/yum -y install smartsense-hst</span><br><span class="line">root       8993   3120  0 14:01 pts/0    00:00:00 grep --color=auto yum</span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现 yum是在运行的 <strong>期间大概耗费20多分钟</strong></p><h3 id="补充搭建本地仓库-目前使用的是在线仓库搭建"><a href="#补充搭建本地仓库-目前使用的是在线仓库搭建" class="headerlink" title="补充搭建本地仓库 (目前使用的是在线仓库搭建)"></a>补充搭建本地仓库 (目前使用的是在线仓库搭建)</h3><p>安装Nginx</p><p>编辑本地仓库 vi  /etc/yum.repos.d/nginx.repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name&#x3D;nginx repo</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enabled&#x3D;1</span><br></pre></td></tr></table></figure><p>yum repolist</p><p>yum install nginx.x86_64</p><p>首先确定我们的版本 ambari 2.7.3.0  ,hdp  HDP-3.1.4.0 <a href="https://docs.cloudera.com/HDPDocuments/Ambari-2.7.4.0/bk_ambari-installation/content/hdp_314_repositories.html">链接</a></p><p> <a href="http://192.168.11.48:9005/#">Timeline Service V1.5 Start</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Execution of &#39;curl -sS -L -w &#39;%&#123;http_code&#125;&#39; -X PUT -d &#39;&#39; -H &#39;Content-Length: 0&#39; &#39;http:&#x2F;&#x2F;work1:50070&#x2F;webhdfs&#x2F;v1&#x2F;ats&#x2F;done?op&#x3D;SETPERMISSION&amp;user.name&#x3D;hdfs&amp;permission&#x3D;755&#39;&#39; returned status_code&#x3D;403.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方案 <a href="https://community.cloudera.com/t5/Support-Questions/App-Timeline-Server-not-start/td-p/230460">https://community.cloudera.com/t5/Support-Questions/App-Timeline-Server-not-start/td-p/230460</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># su - hdfs</span><br></pre></td></tr></table></figure><p><em>As hdfs</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hdfs dfsadmin -safemode get </span><br></pre></td></tr></table></figure><p><em>From the above you will confirm the status in the error “safe mode” then</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hdfs dfsadmin -safemode leave </span><br></pre></td></tr></table></figure><p><a href="https://liujia.anqun.org/index.php/archives/1211/">https://liujia.anqun.org/index.php/archives/1211/</a></p><p>xfs_repair </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>书写技术文档的规范结合阮一峰的博客介绍</title>
      <link href="cadd68a.html"/>
      <url>cadd68a.html</url>
      
        <content type="html"><![CDATA[<p>技术文档每天都会遇到,条理不够清晰,表达不够准确首先是很难让人理解,同时还会增加沟通的成本</p><p>我这边结合阮一峰的博客也结合我最近写文档的思路列一下<br>两个方向是实践类(包括但不限于 部署,搭建),预研学习类(包括 新技术,技术选型,新趋势)<br>实践类较为简单<br>先来个实例网站<a href="https://support.huaweicloud.com/dpmg-hdp-kunpengbds/kunpengambarihdp_04_0011.html">华为云的部署文档</a><br>1.t1<br>    1.1 t2<br>        1.1.1t3<br>        a.<br>        b.<br>        c.<br>        或者<br>        -<br>        -<br>        - </p><p>这种来分开步骤和梳理逻辑<br>同时遇到的问题或者是要集中介绍和梳理的内容可以放在后面开头<br>问题这种一般先描述现象和问题,然后 列出解决方案不必纠结与 ,把问题讲清楚<br>在md也尽量使用规范 引用  代码块 需要分开使用不要乱用,对应主要的部分可以加粗高亮</p><p>对于第二种预研学习类<br>来个实例网站 <a href="https://help.aliyun.com/document_detail/129908.html?spm=a2c4g.11186623.2.25.7d0049ec9vDbQk">阿里云 云数据库 hbase</a> </p><p>先应该是基本概念 来介绍名词和这个技术或者服务的概览<br>列出类似的产品服务,描述这个技术和产品的特点 依赖的环境和 版本<br>给出实例代码和<br>有实例代码或者 sample来</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用fdisk挂载和初始化磁盘以华为云服务器为例</title>
      <link href="ca3ef640.html"/>
      <url>ca3ef640.html</url>
      
        <content type="html"><![CDATA[<h4 id="先使用-fdisk-l-查看磁盘情况"><a href="#先使用-fdisk-l-查看磁盘情况" class="headerlink" title="先使用 fdisk -l 查看磁盘情况"></a>先使用 fdisk -l 查看磁盘情况</h4><p><img src="../img/image-20210122100412882.png" alt="image-20210122100412882"></p><p>磁盘看到已经能在系统上显示了 但是没有初始化和挂载分区,使用使用 df du 等,命令是看不到具体的情况</p><p>看到有 <strong>/dev/vdb</strong>没有被使用那就去初始化然后去使用</p><h3 id="使用-fdisk-dev-vdb-来初始化"><a href="#使用-fdisk-dev-vdb-来初始化" class="headerlink" title="使用 fdisk /dev/vdb 来初始化"></a>使用 fdisk /dev/vdb 来初始化</h3><p>先进入会有 (Command (m for help))步骤如下</p><ol><li> n    是去初步去创建新磁盘</li><li> 进入 一直按 enter  包括 primary,extend  ,起始磁盘等都走默认 ,Partition number 默认为1 </li><li> p  查看具体的分区情况</li><li> w  写入修改</li></ol><p>下图为过程</p><p><img src="../img/image-20210122100726644.png" alt="image-20210122100726644"></p><h3 id="fdisk-l-查看磁盘已经初始化"><a href="#fdisk-l-查看磁盘已经初始化" class="headerlink" title="fdisk -l 查看磁盘已经初始化"></a>fdisk -l 查看磁盘已经初始化</h3><p><img src="../img/image-20210122101643077.png" alt="image-20210122101643077"></p><p>图片如下可以看到 分区已经形成,由于我们走默认使用只有一个</p><h3 id="使用ext4格式化-dev-vdb1-这个分区"><a href="#使用ext4格式化-dev-vdb1-这个分区" class="headerlink" title="使用ext4格式化 /dev/vdb1 这个分区"></a>使用ext4格式化 /dev/vdb1 这个分区</h3><p>ext4 格式化后 </p><p><img src="../img/image-20210122101257839.png" alt="image-20210122101257839"></p><h3 id="使用-blkid-dev-vdb1-来查看-UUID"><a href="#使用-blkid-dev-vdb1-来查看-UUID" class="headerlink" title="使用 blkid /dev/vdb1 来查看 UUID"></a>使用 blkid /dev/vdb1 来查看 UUID</h3><p><img src="../img/image-20210122101816988.png" alt="image-20210122101816988"></p><h3 id="修改-etc-fstab-来开机自动挂载分区"><a href="#修改-etc-fstab-来开机自动挂载分区" class="headerlink" title="修改 /etc/fstab 来开机自动挂载分区"></a>修改 <strong>/etc/fstab</strong> 来开机自动挂载分区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID&#x3D;0b3040e2-1367-4abb-841d-ddb0b92693df &#x2F;mnt&#x2F;sdc       ext4    defaults        0 2</span><br></pre></td></tr></table></figure><p>可以考这边内容 需要修改 UUID ,和挂载的文件夹 ,我这边是在根目录下面 创建的文件夹挂载的</p><blockquote><ol><li><p>以内容上仅为示例，具体请以实际情况为准，参数说明如下：</p><ul><li><p>第一列为UUID，此处填写<a href="https://support.huaweicloud.com/qs-evs/evs_01_0033.html#evs_01_0033__li840964143216">1</a>中查询到的磁盘分区的UUID。</p></li><li><p>第二列为磁盘分区的挂载目录，可以通过<strong>df -TH</strong>命令查询。</p></li><li><p>第三列为磁盘分区的文件系统格式， 可以通过<strong>df -TH</strong>命令查询。</p></li><li><p>第四列为磁盘分区的挂载选项，此处通常设置为defaults即可。</p></li><li><p>第五列为Linux dump备份选项。</p><ul><li>0表示不使用Linux dump备份。现在通常不使用dump备份，此处设置为0即可。</li><li>1表示使用Linux dump备份。</li></ul></li><li><p>第六列为fsck选项，即开机时是否使用fsck检查磁盘。</p><ul><li><p>0表示不检验。</p></li><li><p>挂载点为（/）根目录的分区，此处必须填写1。</p><p>根分区设置为1，其他分区只能从2开始，系统会按照数字从小到大依次检查下去。</p></li></ul></li></ul></li></ol></blockquote><h3 id="使用mount-a加载-etc-fstab-的配置"><a href="#使用mount-a加载-etc-fstab-的配置" class="headerlink" title="使用mount -a加载**/etc/fstab**的配置"></a>使用<strong>mount -a</strong>加载**/etc/fstab**的配置</h3><p><strong>mount -a</strong> 没有报错后 用df du 都可以看到你挂载的目录和对应的分区</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker容器导入导出和配置</title>
      <link href="aba1fef8.html"/>
      <url>aba1fef8.html</url>
      
        <content type="html"><![CDATA[<h1 id="镜像导入导出"><a href="#镜像导入导出" class="headerlink" title="镜像导入导出"></a><strong>镜像导入导出</strong></h1><p>目前的导入导出是 sava/load,export/import ,前者有完整的数据,后者类似于容器的快照,开始搭建时,想直接复制我们服务器中运行的容器,导出后在docker中运行后 一直报</p><p>No command specified” from re-imported docker image/container</p><p>后面有了解 sava/load 会有完整的数据 但是 export的tar包这个命令将导入镜像文件和参数</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="关于-gdal容器"><a href="#关于-gdal容器" class="headerlink" title="关于 gdal容器"></a>关于 gdal容器</h2><p>目前使用的gdal的容器是  osgeo/gdal:ubuntu-small-3.2.1</p><blockquote><p>docker run -itd –privileged -v /usr/local/gdal/data/:/home    <br>–name gdal_python osgeo/gdal:ubuntu-small-3.2.1</p></blockquote><ul><li>容器的名称需要和上面 application-boot.yml的关联上,需要通过容器的主机 ssh 控制 docker 下的容器</li><li>需要复制 shp2pg.py 到  /usr/local/gdal/data/</li></ul><p>后面的版本是有添加 gdal的环境</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> osgeo/gdal:ubuntu-small-<span class="number">3.2</span>.<span class="number">1</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> gdallikedemo</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> add-apt-repository ppa:openjdk-r/ppa &amp;&amp; \</span></span><br><span class="line"><span class="bash">  apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="bash">  apt-get install -y java-1.8.0-openjdk &amp;&amp; \</span></span><br><span class="line"><span class="bash">  apt-get clean;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> NAME.jar /home/NAME.jar</span></span><br><span class="line"><span class="comment"># RUN nohup java -jar /home/NAME.jar &gt;/dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/home/NAME.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h1 id="搭建pgsql集群"><a href="#搭建pgsql集群" class="headerlink" title="搭建pgsql集群"></a><strong>搭建pgsql集群</strong></h1><p>搭建集群 可以参考之前的文档 我这边只是列出清单</p><table><thead><tr><th align="left">集群名称</th><th align="left"></th></tr></thead><tbody><tr><td align="left">pg_master</td><td align="left">pg_hba.conf( 配置网络和集群的IP,注意配置 所有从服务器的IP),postgresql.conf(配置数据库自己的服务和资源使用)</td></tr><tr><td align="left">pg_slaver1</td><td align="left">同上,recovery.conf(设置恢复和通信)</td></tr><tr><td align="left">pg_slaver2</td><td align="left">同上,recovery.conf(设置恢复和通信)</td></tr></tbody></table><p>tips:</p><ul><li>建议在postgresql.conf 中的日志打开,日志的配置</li></ul><p>logging_collector =on        # Enable capturing of stderr and csvlog</p><p>日志会在本地的/data/postgresql/data 启动时挂载的点,会有log目录可以找到异常信息</p><ul><li>尽量选择复制配置文件,像postgresql.conf这种<strong>标准配置文件主从有区别要注意</strong></li></ul><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a><strong>nginx</strong></h1><p>拉取 nginx镜像后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 --restart&#x3D;always -v \</span><br><span class="line"></span><br><span class="line">&#x2F;data&#x2F;nginx&#x2F;html:&#x2F;etc&#x2F;nginx&#x2F;html&#x2F;   \</span><br><span class="line"></span><br><span class="line">-v &#x2F;data&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \</span><br><span class="line"></span><br><span class="line">-v &#x2F;data&#x2F;nginx&#x2F;conf.d&#x2F;default.conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf \</span><br><span class="line"></span><br><span class="line">nginx:1.19.6</span><br></pre></td></tr></table></figure><p>一个要注意的是 网上都是nginx默认的挂载是/usr/share/nginx/html ,使用依照了 官方docker版本我挂载了数据,一直都有是404 ,后面看日志是</p><blockquote><p>2021/01/13 21:56:42 [error] 21#21: *1 “/etc/nginx/html/index.html” is not found (2: No such file or directory), client: 172.17.0.1, server: localhost, request: “GET / HTTP/1.1”, host: “127.0.0.1”</p><p>172.17.0.1 - - [13/Jan/2021:21:56:42 +0000] “GET / HTTP/1.1” 404 153 “-“ “curl/7.29.0”</p></blockquote><p>这边关联到/etc/nginx/html/ 后正常可以看到 welcome nginx的页面</p><h1 id="geoserver"><a href="#geoserver" class="headerlink" title="geoserver"></a>geoserver</h1><p>目前使用的是官方的 geoserver的集群 主要 是要导出 yaml 的文件</p><p>将本地的geoserver 镜像导入 harber的私服中然后再 配置 k8s挂载卷然后编辑</p><ol><li>挂载卷</li><li>harber的远程地址</li></ol><h2 id="推送镜像到harber"><a href="#推送镜像到harber" class="headerlink" title="推送镜像到harber"></a>推送镜像到harber</h2><p>首先 使用命令  docker tag  IMAGE_ID NAME:TAG</p><p>将load 的镜像设置对应的标签方便后面使用k8s导入的配置文件好找到</p><p>push_im.sh文件中的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 发布最终版本</span><br><span class="line"># 版本号</span><br><span class="line">version&#x3D;latest</span><br><span class="line"># 打包镜像</span><br><span class="line">docker build -t NAME:$version .</span><br><span class="line"># 配置标签</span><br><span class="line">docker tag NAME:$version 192.168.7.120&#x2F;public&#x2F;NAME:$version</span><br><span class="line"># 推送镜像</span><br><span class="line">docker push 192.168.7.120&#x2F;public&#x2F;NAME:$version</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>version 对应的字段要有 ,同时 harber 地址要改的</p><p>上面的这个 <strong>docker build -t NAME:$version .</strong>   是有个点的, 需要dockerfile文件的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gis初入门</title>
      <link href="6a9c1835.html"/>
      <url>6a9c1835.html</url>
      
        <content type="html"><![CDATA[<p>参考链接 <a href="https://segmentfault.com/a/1190000015674238">https://segmentfault.com/a/1190000015674238</a></p><p>GIS是一个设计用来捕获、存储、操作（manipulate）、分析、管理和展示空间或图像数据的系统。</p><p><strong>GIS 应用</strong> = <strong>基础底图</strong> + <strong>操作图层</strong> + <strong>任务</strong></p><ul><li><strong>基础底图</strong>：可以简单地理解为就是地图，并且要求是一个不会频繁改变的地图。</li><li><strong>操作图层</strong>：用户使用的主要图层，承载主要的待<strong>编辑、展示和分析</strong>的信息数据。</li><li><strong>任务</strong>：如导航、地址编码等计算量比较大的分析任务。</li></ul><h2 id="GIS-数据和协议"><a href="#GIS-数据和协议" class="headerlink" title="GIS 数据和协议"></a>GIS 数据和协议</h2><p>由于 ArcGIS 在行业内的龙头地位，其指定的一系列数据格式和交换协议，成为 GIS 业界的标准协议。目前制定 GIS 协议的标准化组织为<a href="http://www.opengeospatial.org/">开放地理空间协会（OGC）</a>，其制定的规范称为 <strong>OpenGIS</strong>（Open Geodata Interoperation Specification）。</p><p>相关的接口和协议非常多，以后再一一补齐。目前大部分 demo 系统，导入的数据格式为 shp 文件，往往是由甲方直接提供、或者是网上的公开 GIS 服务提供商可提供下载的，不需要我们自行转换数据格式。ArcGIS 可以直接识别并导入，入库后也使用标准接口协议开放服务，比如 WMS（网络地图服务）和 WFS（网络要素服务）。</p><h2 id="免费开源-GIS-软件"><a href="#免费开源-GIS-软件" class="headerlink" title="免费开源 GIS 软件"></a>免费开源 GIS 软件</h2><p>开源 GIS 软件，从大类来分，包含服务器版和桌面版（即桌面版）。显然我们最关注的是服务器版的 GIS 软件 / 组件。</p><p>服务器版的部署架构和 ArcGIS 基本类似，也是分 web、GIS Server、database 三大模块，并且可以分开部署。</p><p>参考链接<a href="https://blog.csdn.net/sxausgyy/article/details/8151019">https://blog.csdn.net/sxausgyy/article/details/8151019</a></p><p><strong>要素模型(Feature)</strong><br>要素是GeoTools中的核心术语，它是描述地理空间数据对<br>象的基本单位，它描述了一个现实世界中的客观地理实体，如:一条河流、一座桥梁都<br>可以理解为要素。</p><p><strong>栅格数据</strong><br>栅格数据是从上向下拍摄的地球照片，使用离散单元存储其值，图片的每个像素点都有一个指定值<br>服务器本身存储，传输速度快，服务器压力小，多为png,jpg,gif<br>数据量大，更新慢</p><p><strong>矢量数据</strong><br>矢量数据是仅仅存储节点，比如箭头，线条，点等。存储的是对象的轮廓，而栅格数据适合表达对象的内容。<br>矢量数据类型有点，线和多边形。<br>数量小，数据更新快<br>服务器压力大，技术要求高</p><p><img src="../img/1334284682_7917.jpg" alt="1334284682_7917"></p><p>在gist环境下回有图层的概念</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dockerfile使用</title>
      <link href="2ba9cf6c.html"/>
      <url>2ba9cf6c.html</url>
      
        <content type="html"><![CDATA[<p>目前需要创建docker容器 之前用的是基于 Java环境的镜像 构件的,当前开发都后期需要gdal和其他的环境,仅仅基于java的 命令是远远不够用户的</p><p>首先gdal 官方提供了源,但是这个源没有java环境需要我们安装,他提供了多个Linux发行版本 包括Ubuntu和alpine ,起初基于Ubuntu small来搭建的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM osgeo&#x2F;gdal:ubuntu-small-3.2.1</span><br><span class="line">MAINTAINER gdallikedemo</span><br><span class="line">RUN add-apt-repository ppa:openjdk-r&#x2F;ppa &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y java-1.8.0-openjdk &amp;&amp; \</span><br><span class="line">    apt-get clean;</span><br><span class="line">COPY MY_JAR.jar  &#x2F;home&#x2F;MY_JAR.jar</span><br><span class="line"># RUN nohup  java -jar &#x2F;home&#x2F;MY_JAR.jar  &gt;&#x2F;dev&#x2F;null  2&gt;&amp;1 &amp;</span><br><span class="line">CMD [&quot;java&quot;,&quot;-jar&quot;,&quot;&#x2F;home&#x2F;MY_JAR.jar&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>,但是在添加源的时候又依赖于命令 add-resportiy 添加源,如果用 Ubuntu-full后可以看到文件明显增大到1g,明显不符合要求,我就换了alpine  ,看网上介绍路由器和小型设备的,看了后就在这个版本上添加</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> osgeo/gdal:alpine-normal-<span class="number">3.2</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> gdallikedemo</span><br><span class="line"><span class="comment"># 添加命令 安装java</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add  --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add openjdk8 ;</span></span><br><span class="line"><span class="comment"># 声明端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">11003</span></span><br><span class="line"><span class="comment"># 复制指定文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> MY_JAR.jar  /home/MY_JAR.jar</span></span><br><span class="line"><span class="comment"># RUN nohup  java -jar /home/MY_JAR.jar  &gt;/dev/null  2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/home/MY_JAR.jar&quot;</span>]</span></span><br><span class="line">                                     </span><br></pre></td></tr></table></figure><p>如果需要后面的服务也可以</p><p>参考该要求<a href="https://vuepress.mirror.docker-practice.com/basic_concept/image/#%E5%88%86%E5%B1%82%E5%AD%98%E5%82%A8">分层存储</a></p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>Dockerfile 中每一个指令都会建立一层，<code>RUN</code> 也不例外。每一个 <code>RUN</code> 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，<code>commit</code> 这一层的修改，构成新的镜像。</p><p>一定要注一个实现 不要多次run,尽量集合在一起执行</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写Linux启动文件并设置为自启动使用systemctl</title>
      <link href="3e75944c.html"/>
      <url>3e75944c.html</url>
      
        <content type="html"><![CDATA[<h2 id="编写Linux启动文件并设置为自启动使用systemctl"><a href="#编写Linux启动文件并设置为自启动使用systemctl" class="headerlink" title="编写Linux启动文件并设置为自启动使用systemctl"></a>编写Linux启动文件并设置为自启动使用systemctl</h2><p>常见使用的格式模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Sakura Frp Client Service</span><br><span class="line">After&#x3D;network.target syslog.target</span><br><span class="line">Wants&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">RestartSec&#x3D;5s</span><br><span class="line">ExecStart&#x3D; 执行步骤</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>可以使用 下面的步骤的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[Unit]</span></span><br><span class="line"><span class="string">    Description=Sakura Frp Client Service</span></span><br><span class="line"><span class="string">    After=network.target syslog.target</span></span><br><span class="line"><span class="string">    Wants=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [Service]</span></span><br><span class="line"><span class="string">    Type=simple</span></span><br><span class="line"><span class="string">    Restart=on-failure</span></span><br><span class="line"><span class="string">    RestartSec=5s</span></span><br><span class="line"><span class="string">    ExecStart=<span class="variable">$&#123;FRP_EXEC_DIR&#125;</span><span class="variable">$&#123;FRP_EXEC&#125;</span> -f <span class="variable">$&#123;FRP_KEY&#125;</span>:<span class="variable">$&#123;FRP_TID&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    [Install]</span></span><br><span class="line"><span class="string">    WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">    &quot;</span> &gt; /lib/systemd/system/frpc.service</span><br></pre></td></tr></table></figure><p>后面可以使用</p><p>systemctl daemon-reload</p><h3 id="启动-frpc-服务"><a href="#启动-frpc-服务" class="headerlink" title="启动 frpc 服务"></a>启动 frpc 服务</h3><p>systemctl enable frpc<br>systemctl start  frpc</p><p>还有一些其他的systemctl 的 命令 像 status 类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;</span><br><span class="line">Wants&#x3D;network-online.target</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;</span><br><span class="line">User&#x3D;</span><br><span class="line">WorkingDirectory&#x3D;</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">RestartSec&#x3D;3</span><br><span class="line">StartLimitBurst&#x3D;10</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pgsql重要视图转载</title>
      <link href="245877594.html"/>
      <url>245877594.html</url>
      
        <content type="html"><![CDATA[<p>转载地址 <a href="http://blog.itpub.net/31493717/viewspace-2643152/">PostgreSQL统计信息的几个重要视图</a></p><p>1、pg_stat_database</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-[ RECORD 1 ]--+------------------------------</span><br><span class="line">datid          | 13156                            #数据库的oid</span><br><span class="line">datname        | postgres                         #数据库名</span><br><span class="line">numbackends    | 0                                #访问当前数据库的连接数量</span><br><span class="line">xact_commit    | 2357                             #该数据库事务提交总量：和下面的rollback和作为TPS统计</span><br><span class="line">xact_rollback  | 17                               #该数据库事务rollback总量，如果特别多，需要看业务是否有问题了</span><br><span class="line">blks_read      | 1946                             #总磁盘物理读的块数，这里的read可能是从 cache中读取，如果很高需要结合blk_read_time看是否真的存在从磁盘读取的情况</span><br><span class="line">blks_hit       | 103625                           #从shared buffer命中块数</span><br><span class="line">tup_returned   | 1413113                          #对于表来说，是全表扫描的行数；对于索引是通过索引返回的索引行数，如果这个值明显大于tup_fetched，说明当前数据库存在大量的全表扫描。查看执行计划，这个是databas全局级别的</span><br><span class="line">tup_fetched    | 36041                            #指通过索引返回的行数</span><br><span class="line">tup_inserted   | 104                              #插入的行数</span><br><span class="line">tup_updated    | 0                                #更新的行数</span><br><span class="line">tup_deleted    | 19                               #删除的行数</span><br><span class="line">conflicts      | 0                                #与恢复冲突取消的查询次数，只会在备机上发生</span><br><span class="line">temp_files     | 0                                #产生临时文件的数量，如果这个值很高，需要调大work_mem</span><br><span class="line">temp_bytes     | 0                                #临时文件的大小</span><br><span class="line">deadlocks      | 0                                #死锁的数量，如果这个值很大说明业务逻辑有问题</span><br><span class="line">blk_read_time  | 0                                #数据库中花费在读取文件的时间，这个值很高说明内存较小，需要频繁从磁盘读入数据文件</span><br><span class="line">blk_write_time | 0                                #数据库中花费在写数据文件的时间，pg中脏页一般写入page cache，如果这个值较高，则说明cache较小，操作系统的cache需要更积极的写入</span><br><span class="line">stats_reset    | 2019-02-11 23:42:37.526743-08    #统计信息重置的时间</span><br></pre></td></tr></table></figure><p>通过pg_stat_database可以大概了解数据库的历史情况。</p><p>比如tup_returned值明显大于tup_fetched，历史SQL语句很多是全表扫描，存在没有使用索引的SQL，可结合pg_stat_statments查找慢SQL，也可结合pg_stat_user_table找全表扫描次数和行数最多的表；</p><p>通过看tup_updated很高，可以说明数据库有频繁的更新，这个时候需要关注vaccum相关的指标和长事务，如果没有及时进行垃圾回收，会引起表膨胀；</p><p>temp_files较高说明存在很多排序，hash,或者聚合这种操作，可以增大work_mem减少临时文件的产生，并且同时这些操作的性能也会有较大的提升。</p><p>2、pg_stat_user_tables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">yzs&#x3D;# select *from pg_stat_user_tables;</span><br><span class="line">-[ RECORD 1 ]-------+------------------------------</span><br><span class="line">relid               | 16440        #表oid</span><br><span class="line">schemaname          | public       #模式名</span><br><span class="line">relname             | t1           #表名</span><br><span class="line">seq_scan            | 50           #这个表进行全表扫描的次数</span><br><span class="line">seq_tup_read        | 1867763      #全表扫描的数据行数，如果这个值很大说明操作这个表的SQL语句很可能是全表扫描，需要结合执行计划分析</span><br><span class="line">idx_scan            |              #索引扫描的次数</span><br><span class="line">idx_tup_fetch       |              #通过索引扫描返回的行数</span><br><span class="line">n_tup_ins           | 1130502      #插入的数据行数</span><br><span class="line">n_tup_upd           | 0            #更新的数据行数</span><br><span class="line">n_tup_del           | 81920        #删除的数据行数</span><br><span class="line">n_tup_hot_upd       | 0            #hot update的数据行数，这个值与n_tup_upd接近说明更新性能较好，不需要更新索引</span><br><span class="line">n_live_tup          | 655366       #活的行数量</span><br><span class="line">n_dead_tup          | 0            #死记录个数</span><br><span class="line">n_mod_since_analyze | 6            #上次analyze的实际</span><br><span class="line">last_vacuum         | 2019-04-07 00:22:00.955542-07 #上次手动vacuum的实际</span><br><span class="line">last_autovacuum     |              #上次autovacuum的实际</span><br><span class="line">last_analyze        |              #上次analyze时间</span><br><span class="line">last_autoanalyze    | 2019-04-07 00:26:07.668391-07 #上次自动analyze时间</span><br><span class="line">vacuum_count        | 2            #vacuum次数</span><br><span class="line">autovacuum_count    | 0            #自动vacuum次数</span><br><span class="line">analyze_count       | 0            #analyze次数</span><br><span class="line">autoanalyze_count   | 10           #自动analyze次数</span><br></pre></td></tr></table></figure><p>通过查询pg_stat_user_tables，可以基本清除哪些表的全表扫描次数较多，表中DML哪种操作多，也可以了解垃圾数据的数量。</p><p>3、pg_stat_user_indexes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yzs&#x3D;# select *from pg_stat_user_indexes;</span><br><span class="line">-[ RECORD 1 ]-+----------</span><br><span class="line">relid         | 16447      #相关表的oid</span><br><span class="line">indexrelid    | 16450      #索引的oid</span><br><span class="line">schemaname    | public     #模式名</span><br><span class="line">relname       | t3         #表名</span><br><span class="line">indexrelname  | t3_id_idx  #索引名</span><br><span class="line">idx_scan      | 0          #通过索引扫描的次数，如果该值很小，说明该索引很少被用到，可以考虑删除</span><br><span class="line">idx_tup_read  | 0          #通过任意索引方法返回的索引行数</span><br><span class="line">idx_tup_fetch | 0          #通过索引方法返回的数据行数</span><br></pre></td></tr></table></figure><p>可以知道当前哪些索引频繁使用，哪些是无效索引。无效索引可以删除掉，减少磁盘空间的使用和提升insert、delete、update的性能。</p><p>4、pg_statio_user_tables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yzs&#x3D;# select *from pg_statio_user_tables;</span><br><span class="line">-[ RECORD 1 ]---+--------</span><br><span class="line">relid           | 16447    </span><br><span class="line">schemaname      | public</span><br><span class="line">relname         | t3</span><br><span class="line">heap_blks_read  | 1    #从page cache或磁盘读取表的块数</span><br><span class="line">heap_blks_hit   | 1    #从shared buffer命中的块数</span><br><span class="line">idx_blks_read   | 0    #从page cache或磁盘读取的索引的块数</span><br><span class="line">idx_blks_hit    | 0    #从shared buffer命中的索引块数</span><br><span class="line">toast_blks_read |      #从page cache或磁盘读取的toast表的块数</span><br><span class="line">toast_blks_hit  |      #在shared buffer中命中toast表的块数</span><br><span class="line">tidx_blks_read  |      #从page cache或者磁盘中读入的toast表索引的块数</span><br><span class="line">tidx_blks_hit   |      #在shared buffer中命中toast表索引的块数</span><br></pre></td></tr></table></figure><p>如果heap_blks_read、idx_blks_read很高，说明shared buffer较小，存在频繁从磁盘或者page cache读取到shared buffer中命中toast表的块数。</p><p>5、 pg_stat_bgwriter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yzs&#x3D;# select *from pg_stat_bgwriter;</span><br><span class="line">-[ RECORD 1 ]---------+------------------------------</span><br><span class="line">checkpoints_timed     | 206     #指超过checkpoint_timeout的时间后触发的检查点次数</span><br><span class="line">checkpoints_req       | 8       #手动触发checkpoint或者因为WAL文件数量达到max_wal_size时也会增加，如果这个值大于checkpoints_req说明checkpoint_timeout设置的不合理</span><br><span class="line">checkpoint_write_time | 306582  #从shared buffer 中write到page cache花费的时间</span><br><span class="line">checkpoint_sync_time  | 367     #checkpoint调用fsync将脏数据刷到磁盘花费的时间，如果这个值很长，容易造成IO抖动，需要增加checkpoint_timeout或者checkpoint_completion_target</span><br><span class="line">buffers_checkpoint    | 6671    #通过checkpoint写入脏块的数量</span><br><span class="line">buffers_clean         | 0       #通过bgwriter写入块的数量</span><br><span class="line">maxwritten_clean      | 0       #bgwriter超过bgwriter_lru_maxpages时停止的次数，如果这个值很高，需要增加bgwriter_lru_maxpages</span><br><span class="line">buffers_backend       | 7953    #通过backend写入的块数量</span><br><span class="line">buffers_backend_fsync | 0       #backend需要fsync的次数</span><br><span class="line">buffers_alloc         | 11613   #被分配的缓冲区数量</span><br><span class="line">stats_reset           | 2019-02-11 23:42:35.273758-08</span><br></pre></td></tr></table></figure><p>通过这个视图，可以判断checkpoint以及max_wal_size是否合理</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pgsql和mysql的对比和特性</title>
      <link href="3192111075.html"/>
      <url>3192111075.html</url>
      
        <content type="html"><![CDATA[<p>目前找到的资料和说法如下 后续还会继续补充</p><h4 id="1-pgsql-的特点"><a href="#1-pgsql-的特点" class="headerlink" title="1. pgsql 的特点"></a>1. pgsql 的特点</h4><p>主要是 多线程的使用同时 提供提供了丰富的类型支持 json,varchar, 等,索引的类型也是有很多包括 b-tree,map,hash,gist这些索引 ,同时 处理的数据量也能保证数据量的读写,PostgreSQL支持物化视图</p><p>Pg 的列里有隐藏的乐观锁 version 字段, 默认的 repeatable read 级别就能保证并发更新的正确性,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GIS 领域处于优势地位，因为它有丰富的几何类型，实际上不止几何类型，PG有大量字典、数组、bitmap 等数据类型</span><br><span class="line"></span><br><span class="line">PG 的可以使用函数和条件索引，这使得PG数据库的调优非常灵活，mysql就没有这个功能，条件索引在web应用中很重要。</span><br><span class="line"></span><br><span class="line">PG有极其强悍的 SQL 编程能力（9.x 图灵完备，支持递归！），有非常丰富的统计函数和统计语法支持，比如分析函数（ORACLE的叫法，PG里叫window函数），还可以用多种语言来写存储过程，对于R的支持也很好。这一点上MYSQL就差的很远，很多分析功能都不支持</span><br><span class="line"></span><br><span class="line">作者：方圆</span><br><span class="line">链接：https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;20010554&#x2F;answer&#x2F;15863274</span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line">PG不止支持传统数据类型：numeric、strings、date、decimal等，还支持非结构的数据类型：json、xml、hstore等以及网络数据类型、bit字符串，还有ARRAYS，地理数据类型。</span><br></pre></td></tr></table></figure><h4 id="2-mysql的特点"><a href="#2-mysql的特点" class="headerlink" title="2. mysql的特点"></a>2. mysql的特点</h4><p>主要的对内存的使用比较好 同时包含两个数据库引擎 inodb,MyISAM,目前主要是使用Inodeb来保证数据库的事务和读写问题,同时 MyISAM是有其他功能,主要提供的类型是字符串 ,索引的类型主要是 b-tree,到达百万后数据的瓶颈明显</p><p>MySQL 的事务隔离级别 repeatable read 并不能阻止常见的并发更新,</p><p><a href="https://imlike.cc/img/v2-226fd5e2cf8dbdd7ab0a43f371d17aee_r.jpg?source=1940ef5c"><img src="../img/v2-226fd5e2cf8dbdd7ab0a43f371d17aee_r.jpg?source=1940ef5c" alt="preview"></a></p><p><a href="https://pic2.zhimg.com/v2-71bfcfc6933b45d0263683dd3f8d217c_r.jpg?source=1940ef5c"><img src="https://pic2.zhimg.com/v2-71bfcfc6933b45d0263683dd3f8d217c_r.jpg?source=1940ef5c" alt="preview"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">进程模式与线程模式的对比PostgreSQL和oracle是进程模式，MySQL是线程模式。进程模式对多CPU利用率比较高。进程模式共享数据需要用到共享内存，而线程模式数据本身就是在进程空间内都是共享的，不同线程访问只需要控制好线程之间的同步。线程模式对资源消耗比较少。所以MySQL能支持远比oracle多的更多的连接。对于PostgreSQL的来说，如果不使用连接池软件，也存在这个问题，但PostgreSQL中有优秀的连接池软件软件，如pgbouncer和pgpool，所以通过连接池也可以支持很多的连接。</span><br><span class="line"></span><br><span class="line">作者：蛙课网</span><br><span class="line">链接：https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;20010554&#x2F;answer&#x2F;743955463</span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">堆表与索引组织表的的对比Oracle支持堆表，也支持索引组织表PostgreSQL只支持堆表，不支持索引组织表Innodb只支持索引组织表索引组织表的优势：表内的数据就是按索引的方式组织，数据是有序的，如果数据都是按主键来访问，那么访问数据比较快。而堆表，按主键访问数据时，是需要先按主键索引找到数据的物理位置。索引组织表的劣势：索引组织表中上再加其它的索引时，其它的索引记录的数据位置不再是物理位置，而是主键值，所以对于索引组织表来说，主键的值不能太大，否则占用的空间比较大。对于索引组织表来说，如果每次在中间插入数据，可能会导致索引分裂，索引分裂会大大降低插入的性能。所以对于使用innodb来说，我们一般最好让主键是一个无意义的序列，这样插入每次都发生在最后，以避免这个问题。由于索引组织表是按一个索引树，一般它访问数据块必须按数据块之间的关系进行访问，而不是按物理块的访问数据的，所以当做全表扫描时要比堆表慢很多，这可能在OLTP中不明显，但在数据仓库的应用中可能是一个问题。</span><br><span class="line"></span><br><span class="line">作者：蛙课网</span><br><span class="line">链接：https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;20010554&#x2F;answer&#x2F;743955463</span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>（转载）经验：什么影响了数据库查询速度、什么影响了MySQL性能</title>
      <link href="3414469055.html"/>
      <url>3414469055.html</url>
      
        <content type="html"><![CDATA[<p>平时时不时遇到数据库，CPU飚到100%，或者数据库突然查询时间变长，看不出来，或者无从下手的时候可以看一下下面转载的文章，也有优化的方向</p><p>目前来说，pgsql 这种数据对吧千万级的数据，如果不是特别复杂的查询，或者全表搜索这种，应该是最多2~3s</p><p><a href="https://imlike.cc/segmentfault.com/a/1190000013672421">链接的原始地址</a></p><h2 id="一、什么影响了数据库查询速度"><a href="#一、什么影响了数据库查询速度" class="headerlink" title="一、什么影响了数据库查询速度"></a>一、什么影响了数据库查询速度</h2><h3 id="1-1-影响数据库查询速度的四个因素"><a href="#1-1-影响数据库查询速度的四个因素" class="headerlink" title="1.1 影响数据库查询速度的四个因素"></a>1.1 影响数据库查询速度的四个因素</h3><p><a href="https://imlike.cc/img/java4-1575116694.png"><img src="https://imlike.cc/img/java4-1575116694.png" alt="经验：什么影响了数据库查询速度、什么影响了MySQL性能"></a></p><h3 id="1-2-风险分析"><a href="#1-2-风险分析" class="headerlink" title="1.2 风险分析"></a>1.2 风险分析</h3><p><strong>QPS：*</strong>Queries Per Second* 意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</p><p><strong>TPS：</strong>是<em>TransactionsPerSecond</em>的缩写，也就是事务数/秒。它是软件测试结果的测量单位。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</p><blockquote><p>Tips：最好不要在主库上数据库备份，大型活动前取消这样的计划。</p></blockquote><ul><li><strong>效率低下的sql：</strong>超高的QPS与TPS。</li><li><strong>大量的并发：</strong>数据连接数被占满（max_connection默认100，一般把连接数设置得大一些）。<br><strong>并发量：</strong>同一时刻数据库服务器处理的请求数量</li><li><strong>超高的CPU使用率：</strong>CPU资源耗尽出现宕机。</li><li><strong>磁盘IO：</strong>磁盘IO性能突然下降、大量消耗磁盘性能的计划任务。解决：更快磁盘设备、调整计划任务、做好磁盘维护。</li></ul><h3 id="1-3-网卡流量：如何避免无法连接数据库的情况"><a href="#1-3-网卡流量：如何避免无法连接数据库的情况" class="headerlink" title="1.3 网卡流量：如何避免无法连接数据库的情况"></a>1.3 网卡流量：如何避免无法连接数据库的情况</h3><ul><li>减少从服务器的数量（从服务器会从主服务器复制日志）</li><li>进行分级缓存（避免前端大量缓存失效）</li><li>避免使用select * 进行查询</li><li>分离业务网络和服务器网络</li></ul><h3 id="1-4-大表带来的问题（重要）"><a href="#1-4-大表带来的问题（重要）" class="headerlink" title="1.4 大表带来的问题（重要）"></a>1.4 大表带来的问题（重要）</h3><h4 id="1-4-1-大表的特点"><a href="#1-4-1-大表的特点" class="headerlink" title="1.4.1 大表的特点"></a>1.4.1 大表的特点</h4><ul><li>记录行数巨大，单表超千万</li><li>表数据文件巨大，超过10个G</li></ul><h4 id="1-4-2-大表的危害"><a href="#1-4-2-大表的危害" class="headerlink" title="1.4.2 大表的危害"></a>1.4.2 大表的危害</h4><p><strong>1.慢查询：很难在短时间内过滤出需要的数据</strong></p><p>查询字区分度低 -&gt; 要在大数据量的表中筛选出来其中一部分数据会产生大量的磁盘io -&gt; 降低磁盘效率</p><p><strong>2.对DDL影响：</strong></p><p>建立索引需要很长时间：</p><ul><li>MySQL -v&lt;5.5 建立索引会锁表</li><li>MySQL -v&gt;=5.5 建立索引会造成主从延迟（mysql建立索引，先在组上执行，再在库上执行）</li></ul><p><strong>修改表结构需要长时间的锁表：</strong>会造成长时间的主从延迟(‘480秒延迟’)</p><h4 id="1-4-3-如何处理数据库上的大表"><a href="#1-4-3-如何处理数据库上的大表" class="headerlink" title="1.4.3 如何处理数据库上的大表"></a>1.4.3 如何处理数据库上的大表</h4><p>分库分表把一张大表分成多个小表</p><p>难点：</p><ul><li>分表主键的选择</li><li>分表后跨分区数据的查询和统计</li></ul><h3 id="1-5-大事务带来的问题（重要）"><a href="#1-5-大事务带来的问题（重要）" class="headerlink" title="1.5 大事务带来的问题（重要）"></a>1.5 大事务带来的问题（重要）</h3><h4 id="1-5-1-什么是事务"><a href="#1-5-1-什么是事务" class="headerlink" title="1.5.1 什么是事务"></a>1.5.1 什么是事务</h4><p><a href="https://imlike.cc/img/java10-1575116694.png"><img src="https://imlike.cc/img/java10-1575116694.png" alt="经验：什么影响了数据库查询速度、什么影响了MySQL性能"></a></p><h4 id="1-5-2事务的ACID属性"><a href="#1-5-2事务的ACID属性" class="headerlink" title="1.5.2事务的ACID属性"></a>1.5.2事务的ACID属性</h4><p><strong>1、原子性（atomicity)：</strong>全部成功，全部回滚失败。银行存取款。</p><p><strong>2、一致性（consistent)：</strong>银行转账的总金额不变。</p><p><strong>3、隔离性（isolation)：</strong></p><p>隔离性等级：</p><ul><li><strong>未提交读(READ UNCOMMITED)</strong> 脏读,两个事务之间互相可见；</li><li>**已提交读(READ COMMITED)**符合隔离性的基本概念,一个事务进行时，其它已提交的事物对于该事务是可见的，即可以获取其它事务提交的数据。</li><li><strong>可重复读(REPEATABLE READ)</strong> InnoDB的默认隔离等级。事务进行时，其它所有事务对其不可见，即多次执行读，得到的结果是一样的！</li><li><strong>可串行化（SERIALIZABLE）</strong>在读取的每一行数据上都加锁，会造成大量的锁超时和锁征用，严格数据一致性且没有并发是可使用。</li></ul><blockquote><p>查看系统的事务隔离级别：show variables like ‘%iso%’;<br>开启一个新事务：begin;<br>提交一个事务：commit;<br>修改事物的隔离级别：set session tx_isolation=’read-committed’;</p></blockquote><p><strong>4、持久性(DURABILITY)：</strong>从数据库的角度的持久性，磁盘损坏就不行了</p><p><a href="https://imlike.cc/img/java9-1575116694.png"><img src="https://imlike.cc/img/java9-1575116694.png" alt="经验：什么影响了数据库查询速度、什么影响了MySQL性能"></a></p><p>redo log机制保证事务更新的一致性和持久性</p><h4 id="1-5-3-大事务"><a href="#1-5-3-大事务" class="headerlink" title="1.5.3 大事务"></a>1.5.3 大事务</h4><p>运行时间长，操作数据比较多的事务；</p><p>风险：<strong>锁定数据太多，回滚时间长，执行时间长。</strong></p><ul><li>锁定太多数据，造成大量阻塞和锁超时；</li><li>回滚时所需时间比较长，且数据仍然会处于锁定；</li><li>如果执行时间长，将造成主从延迟，因为只有当主服务器全部执行完写入日志时，从服务器才会开始进行同步，造成延迟。</li></ul><p><strong>解决思路：</strong></p><ul><li>避免一次处理太多数据，可以分批次处理；</li><li>移出不必要的SELECT操作，保证事务中只有必要的写操作。</li></ul><h2 id="二、什么影响了MySQL性能（非常重要）"><a href="#二、什么影响了MySQL性能（非常重要）" class="headerlink" title="二、什么影响了MySQL性能（非常重要）"></a>二、什么影响了MySQL性能<strong>（非常重要）</strong></h2><h3 id="2-1-影响性能的几个方面"><a href="#2-1-影响性能的几个方面" class="headerlink" title="2.1 影响性能的几个方面"></a>2.1 影响性能的几个方面</h3><ul><li>服务器硬件。</li><li>服务器系统（系统参数优化）。</li><li>存储引擎。</li><li><ul><li>MyISAM：不支持事务，表级锁。</li><li>InnoDB: 支持事务，支持行级锁，事务ACID。</li></ul></li><li>数据库参数配置。</li><li>数据库结构设计和SQL语句。（重点优化）</li></ul><h3 id="2-2-MySQL体系结构"><a href="#2-2-MySQL体系结构" class="headerlink" title="2.2 MySQL体系结构"></a>2.2 MySQL体系结构</h3><p>分三层：客户端-&gt;服务层-&gt;存储引擎</p><p><a href="https://imlike.cc/img/java2-1575116694.png"><img src="https://imlike.cc/img/java2-1575116694.png" alt="经验：什么影响了数据库查询速度、什么影响了MySQL性能"></a></p><ul><li>MySQL是插件式的存储引擎，其中存储引擎分很多种。只要实现符合mysql存储引擎的接口，可以开发自己的存储引擎!</li><li>所有跨存储引擎的功能都是在服务层实现的。</li><li>MySQL的存储引擎是针对表的，不是针对库的。也就是说在一个数据库中可以使用不同的存储引擎。但是不建议这样做。</li></ul><h3 id="2-3-InnoDB存储引擎"><a href="#2-3-InnoDB存储引擎" class="headerlink" title="2.3 InnoDB存储引擎"></a>2.3 InnoDB存储引擎</h3><p>MySQL5.5及之后版本默认的存储引擎：InnoDB。</p><h4 id="2-3-1-InnoDB使用表空间进行数据存储。"><a href="#2-3-1-InnoDB使用表空间进行数据存储。" class="headerlink" title="2.3.1 InnoDB使用表空间进行数据存储。"></a>2.3.1 InnoDB使用表空间进行数据存储。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;innodb_file_per_table</span><br></pre></td></tr></table></figure><p>如果innodb_file_per_table 为 ON 将建立独立的表空间，文件为tablename.ibd；</p><p>如果innodb_file_per_table 为 OFF 将数据存储到系统的共享表空间，文件为ibdataX（X为从1开始的整数）；</p><p>.frm ：是服务器层面产生的文件，类似服务器层的数据字典，<strong>记录表结构。</strong></p><h4 id="2-3-2-MySQL5-5默认-系统表空间与-MySQL5-6及以后默认-独立表空间"><a href="#2-3-2-MySQL5-5默认-系统表空间与-MySQL5-6及以后默认-独立表空间" class="headerlink" title="2.3.2 (MySQL5.5默认)系统表空间与(MySQL5.6及以后默认)独立表空间"></a>2.3.2 (MySQL5.5默认)系统表空间与(MySQL5.6及以后默认)独立表空间</h4><ul><li>系统表空间无法简单的收缩文件大小，造成空间浪费，并会产生大量的磁盘碎片。</li><li>独立表空间可以通过optimeze table 收缩系统文件，不需要重启服务器也不会影响对表的正常访问。</li><li>如果对多个表进行刷新时，实际上是顺序进行的，会产生IO瓶颈。</li><li>独立表空间可以同时向多个文件刷新数据。</li></ul><p><strong>强烈建议对Innodb 使用独立表空间，优化什么的更方便，可控。</strong></p><h4 id="2-3-3-系统表空间的表转移到独立表空间中的方法"><a href="#2-3-3-系统表空间的表转移到独立表空间中的方法" class="headerlink" title="2.3.3 系统表空间的表转移到独立表空间中的方法"></a>2.3.3 系统表空间的表转移到独立表空间中的方法</h4><p>1、使用mysqldump 导出所有数据库数据（存储过程、触发器、计划任务一起都要导出 ）可以在从服务器上操作。</p><p>2、停止MYsql 服务器，修改参数（my.cnf加入innodb_file_per_table），并删除Inoodb相关文件（可以重建Data目录）。</p><p>3、重启MYSQL，并重建Innodb系统表空间。</p><p>4、 重新导入数据。</p><p>或者 Alter table 同样可以的转移，但是无法回收系统表空间中占用的空间。</p><h3 id="2-4-InnoDB存储引擎的特性"><a href="#2-4-InnoDB存储引擎的特性" class="headerlink" title="2.4 InnoDB存储引擎的特性"></a>2.4 InnoDB存储引擎的特性</h3><h4 id="2-4-1-特性一：事务性存储引擎及两个特殊日志类型：Redo-Log-和-Undo-Log"><a href="#2-4-1-特性一：事务性存储引擎及两个特殊日志类型：Redo-Log-和-Undo-Log" class="headerlink" title="2.4.1 特性一：事务性存储引擎及两个特殊日志类型：Redo Log 和 Undo Log"></a>2.4.1 特性一：事务性存储引擎及两个特殊日志类型：Redo Log 和 Undo Log</h4><ul><li>Innodb 是一种事务性存储引擎。</li><li>完全支持事务的ACID特性。</li><li>支持事务所需要的两个特殊日志类型：Redo Log 和Undo Log</li></ul><blockquote><p>Redo Log：实现事务的持久性(已提交的事务)。<br>Undo Log：未提交的事务，独立于表空间，需要随机访问，可以存储在高性能io设备上。</p></blockquote><p>Undo日志记录某数据被修改前的值，可以用来在事务失败时进行rollback；Redo日志记录某数据块被修改后的值，可以用来恢复未写入data file的已成功事务更新的数据。</p><p>InnoDB小知识点：<a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247490339&idx=2&sn=03dcec83524fd3aaa2bab57dac2763a2&chksm=ebd6240fdca1ad19a6aa3548e299a1cc9749a52f9191481fe3831e3f10150ed992f44fe4d84a&scene=21#wechat_redirect">InnoDB一棵B+树可以存放多少行数据？</a></p><h4 id="2-4-2-特性二：支持行级锁"><a href="#2-4-2-特性二：支持行级锁" class="headerlink" title="2.4.2 特性二：支持行级锁"></a>2.4.2 特性二：支持行级锁</h4><ul><li>InnoDB支持行级锁。</li><li>行级锁可以最大程度地支持并发。</li><li>行级锁是由存储引擎层实现的。</li></ul><h3 id="2-5-什么是锁"><a href="#2-5-什么是锁" class="headerlink" title="2.5 什么是锁"></a>2.5 什么是锁</h3><h4 id="2-5-1-锁"><a href="#2-5-1-锁" class="headerlink" title="2.5.1 锁"></a>2.5.1 锁</h4><p><a href="https://www.javazhiyin.com/wp-content/uploads/2019/11/java6-1575116694.png"><img src="https://www.javazhiyin.com/wp-content/uploads/2019/11/java6-1575116694.png" alt="经验：什么影响了数据库查询速度、什么影响了MySQL性能"></a></p><h4 id="2-5-2-锁类型"><a href="#2-5-2-锁类型" class="headerlink" title="2.5.2 锁类型"></a>2.5.2 锁类型</h4><p><a href="https://imlike.cc/img/java3-1575116695.png"><img src="https://imlike.cc/img/java3-1575116695.png" alt="经验：什么影响了数据库查询速度、什么影响了MySQL性能"></a></p><h4 id="2-5-3-锁的粒度"><a href="#2-5-3-锁的粒度" class="headerlink" title="2.5.3 锁的粒度"></a>2.5.3 锁的粒度</h4><p>MySQL的事务支持不是绑定在MySQL服务器本身，而是<strong>与存储引擎相关</strong></p><p><a href="https://www.javazhiyin.com/wp-content/uploads/2019/11/java2-1575116695.png"><img src="https://www.javazhiyin.com/wp-content/uploads/2019/11/java2-1575116695.png" alt="经验：什么影响了数据库查询速度、什么影响了MySQL性能"></a></p><p>将table_name加表级锁命令：lock table table_name write; 写锁会阻塞其它用户对该表的‘读写’操作，直到写锁被释放：unlock tables；</p><ul><li>锁的开销越大，粒度越小，并发度越高。</li><li>表级锁通常是在服务器层实现的。</li><li>行级锁是存储引擎层实现的。innodb的锁机制，服务器层是不知道的</li></ul><h4 id="2-5-4-阻塞和死锁"><a href="#2-5-4-阻塞和死锁" class="headerlink" title="2.5.4 阻塞和死锁"></a>2.5.4 阻塞和死锁</h4><p>1.阻塞是由于资源不足引起的排队等待现象。</p><p>2.死锁是由于两个对象在拥有一份资源的情况下申请另一份资源，而另一份资源恰好又是这两对象正持有的，导致两对象无法完成操作，且所持资源无法释放。</p><p>关于MySQL锁的详解：<a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247490303&idx=2&sn=d2c2c4830ba8d4a2e89619f025b54a10&chksm=ebd625d3dca1acc56a86c895a7a4819b91c182a1d24ac6b48a2bea017cfa9c3ee0cbdf734961&scene=21#wechat_redirect">学会MySQL中的索引和锁</a></p><h3 id="2-6-如何选择正确的存储引擎"><a href="#2-6-如何选择正确的存储引擎" class="headerlink" title="2.6 如何选择正确的存储引擎"></a>2.6 如何选择正确的存储引擎</h3><p>参考条件：</p><ul><li>事务</li><li>备份(Innobd免费在线备份)</li><li>崩溃恢复</li><li>存储引擎的特有特性</li></ul><p>总结:Innodb大法好。</p><p><strong>注意：尽量别使用混合存储引擎，比如回滚会出问题在线热备问题。</strong></p><h3 id="2-7-配置参数"><a href="#2-7-配置参数" class="headerlink" title="2.7 配置参数"></a>2.7 配置参数</h3><h4 id="2-7-1-内存配置相关参数"><a href="#2-7-1-内存配置相关参数" class="headerlink" title="2.7.1 内存配置相关参数"></a>2.7.1 内存配置相关参数</h4><p>确定可以使用的内存上限。</p><p><strong>内存的使用上限不能超过物理内存，否则容易造成内存溢出；**</strong>（对于32位操作系统，MySQL只能使用3G以下的内存。*<strong>*）</strong></p><p>确定MySQL的每个连接单独使用的内存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort_buffer_size #定义了每个线程排序缓存区的大小，MySQL在有查询、需要做排序操作时才会为每个缓冲区分配内存（直接分配该参数的全部内存）；join_buffer_size #定义了每个线程所使用的连接缓冲区的大小，如果一个查询关联了多张表，MySQL会为每张表分配一个连接缓冲，导致一个查询产生了多个连接缓冲；read_buffer_size #定义了当对一张MyISAM进行全表扫描时所分配读缓冲池大小，MySQL有查询需要时会为其分配内存，其必须是4k的倍数；read_rnd_buffer_size #索引缓冲区大小，MySQL有查询需要时会为其分配内存，只会分配需要的大小。</span><br></pre></td></tr></table></figure><p>注意：以上四个参数是为一个线程分配的，如果有100个连接，那么需要×100。</p><p><strong>MySQL数据库实例：</strong></p><p>①MySQL是单进程多线程（而oracle是多进程），也就是说MySQL实例在系统上表现就是一个服务进程，即进程；</p><p>②MySQL实例是线程和内存组成，实例才是真正用于操作数据库文件的；</p><p>一般情况下一个实例操作一个或多个数据库；集群情况下多个实例操作一个或多个数据库。</p><p><strong>如何为缓存池分配内存：</strong></p><p>Innodb_buffer_pool_size，定义了Innodb所使用缓存池的大小，对其性能十分重要，必须足够大，但是过大时，使得Innodb 关闭时候需要更多时间把脏页从缓冲池中刷新到磁盘中；</p><p><em>总内存-（每个线程所需要的内存\</em>连接数）-系统保留内存*</p><p>key_buffer_size，定义了MyISAM所使用的缓存池的大小，由于数据是依赖存储操作系统缓存的，所以要为操作系统预留更大的内存空间；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(index_length) from information_schema.talbes where engine&#x3D;&#39;myisam&#39;</span><br></pre></td></tr></table></figure><p>注意：即使开发使用的表全部是Innodb表，也要为MyISAM预留内存，因为MySQL系统使用的表仍然是MyISAM表。</p><p>max_connections 控制允许的最大连接数，一般2000更大。</p><p><strong>不要使用外键约束保证数据的完整性。</strong></p><h3 id="2-8-性能优化顺序"><a href="#2-8-性能优化顺序" class="headerlink" title="2.8 性能优化顺序"></a>2.8 性能优化顺序</h3><p>从上到下：</p><p><a href="https://www.javazhiyin.com/wp-content/uploads/2019/11/java0-1575116695.png"><img src="https://www.javazhiyin.com/wp-content/uploads/2019/11/java0-1575116695.png" alt="经验：什么影响了数据库查询速度、什么影响了MySQL性能"></a></p><p><strong>END</strong></p><p><a href="javascript:;">赏加个鸡腿<img src="https://imlike.cc/pics/weixin.png" alt="img">支付宝<img src="https://imlike.cc/pics/alipay.jpg" alt="img">微信</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es索引生命周期维护</title>
      <link href="2302551430.html"/>
      <url>2302551430.html</url>
      
        <content type="html"><![CDATA[<p>keyword text</p><p><strong>hot-warm-cold</strong>架构将索引数据切分成hot/warm/cold的索引。<code>hot索引</code>负责最新数据的读写，可使用内存存储；<code>warm索引</code>负责较旧数据的读取，可使用内存或SSD存储；<code>cold索引</code>很少被读取，可使用大容量磁盘存储。随着时间的推移，数据不断从hot索引-&gt;warm索引-&gt;cold索引迁移。针对不同阶段的索引我们还可以调整索引的主分片数，副本数，单分片的segment数等等，更好的利用机器资源。</p><p><strong>索引生命周期管理（Index Lifecycle Management ，简称ILM</strong>)<br>作者：Monica2333<br>链接：<a href="https://juejin.im/post/6844904131262431246">https://juejin.im/post/6844904131262431246</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">PUT _ilm&#x2F;policy&#x2F;my_policy</span><br><span class="line">&#123;</span><br><span class="line">  &quot;policy&quot;: &#123;</span><br><span class="line">    &quot;phases&quot;: &#123;</span><br><span class="line">      &quot;hot&quot;: &#123;</span><br><span class="line">        &quot;actions&quot;: &#123;</span><br><span class="line">          &quot;rollover&quot;: &#123;</span><br><span class="line">&#x2F;&#x2F;rollover前距离索引的创建时间最大为7天</span><br><span class="line">            &quot;max_age&quot;: &quot;7d&quot;,</span><br><span class="line">&#x2F;&#x2F;rollover前索引的最大大小不超过50G</span><br><span class="line">            &quot;max_size&quot;: &quot;50G&quot;,</span><br><span class="line">&#x2F;&#x2F;rollover前索引的最大文档数不超过1个（测试用）</span><br><span class="line">            &quot;max_docs&quot;: 1,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;warm&quot;: &#123;</span><br><span class="line">&#x2F;&#x2F;rollover之后进入warm阶段的时间不小于30天</span><br><span class="line">        &quot;min_age&quot;: &quot;30d&quot;,</span><br><span class="line">        &quot;actions&quot;: &#123;</span><br><span class="line">          &quot;forcemerge&quot;: &#123;</span><br><span class="line">&#x2F;&#x2F;强制分片merge到segment为1</span><br><span class="line">            &quot;max_num_segments&quot;: 1</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;shrink&quot;: &#123;</span><br><span class="line">&#x2F;&#x2F;收缩分片数为1</span><br><span class="line">            &quot;number_of_shards&quot;: 1</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;allocate&quot;: &#123;</span><br><span class="line">&#x2F;&#x2F;副本数为2</span><br><span class="line">            &quot;number_of_replicas&quot;: 2</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;cold&quot;: &#123;</span><br><span class="line">&#x2F;&#x2F;rollover之后进入cold阶段的时间不小于60天</span><br><span class="line">        &quot;min_age&quot;: &quot;60d&quot;,</span><br><span class="line">        &quot;actions&quot;: &#123;</span><br><span class="line">          &quot;allocate&quot;: &#123;</span><br><span class="line">            &quot;require&quot;: &#123;</span><br><span class="line">&#x2F;&#x2F;分配到cold 节点，ES可根据机器资源配置不同类型的节点</span><br><span class="line">              &quot;type&quot;: &quot;cold&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;delete&quot;: &#123;</span><br><span class="line">&#x2F;&#x2F;rollover之后进入cold阶段的时间不小于60天</span><br><span class="line">        &quot;min_age&quot;: &quot;90d&quot;,</span><br><span class="line">        &quot;actions&quot;: &#123;</span><br><span class="line">          &quot;delete&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：Monica2333</span><br><span class="line">链接：https:&#x2F;&#x2F;juejin.im&#x2F;post&#x2F;6844904131262431246</span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu给外接设备修改分辨率</title>
      <link href="2232115083.html"/>
      <url>2232115083.html</url>
      
        <content type="html"><![CDATA[<p>参考链接 <a href="http://ubuntuhandbook.org/index.php/2017/04/custom-screen-resolution-ubuntu-desktop/">How to Set A Custom Screen Resolution in Ubuntu Desktop</a></p><p>目前正常 dp-1上面有2560x1440 2k的分辨率但是有时候显示不出来,导致不能显示最优的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DP-1 connected 2560x1440+0+0 (normal left inverted right x axis y axis) 597mm x 336mm</span><br><span class="line">   2560x1440     59.95 +  74.97* </span><br><span class="line">   1920x1080     60.00    50.00    59.94  </span><br><span class="line">   1920x1080i    60.00    50.00    59.94  </span><br><span class="line">   1280x1440     59.91  </span><br><span class="line">   1680x1050     59.88  </span><br><span class="line">   1280x1024     75.02    60.02  </span><br><span class="line">   1440x900      59.90  </span><br><span class="line">   1280x960      60.00  </span><br><span class="line">   1280x720      60.00    50.00    59.94  </span><br><span class="line">   1024x768      75.03    70.07    60.00  </span><br><span class="line">   832x624       74.55  </span><br><span class="line">   800x600       72.19    75.00    60.32    56.25  </span><br><span class="line">   720x576       50.00  </span><br><span class="line">   720x480       60.00    59.94  </span><br><span class="line">   640x480       75.00    72.81    60.00    59.94  </span><br><span class="line">   720x400       70.08  </span><br></pre></td></tr></table></figure><p>cvt 2560 1440 来看分辨率的最优设置</p><p>编辑 ~/.profile的文件来实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo xrandr --newmode &quot;2560x1440_74.97&quot;  118.25  1600 1696 1856 2112  900 903 908 934 -hsync +vsync</span><br><span class="line">sudo xrandr --newmode &quot;2560x1440_60.00&quot;  312.25  2560 2752 3024 3488  1440 1443 1448 1493 -hsync +vsync</span><br><span class="line"></span><br><span class="line">sudo xrandr --addmode DP-1 &quot;2560x1440_74.97&quot;</span><br></pre></td></tr></table></figure><p><a href="https://imlike.cc/img/1597749619474.png"><img src="../img/1597749619474.png" alt="1597749619474"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins的遇到的坑</title>
      <link href="1581320389.html"/>
      <url>1581320389.html</url>
      
        <content type="html"><![CDATA[<h3 id="maven本地仓库地址"><a href="#maven本地仓库地址" class="headerlink" title="maven本地仓库地址"></a>maven本地仓库地址</h3><p>Jenkins本地仓库依赖的common和工具包,是独立安装的,使用在解析上述依赖时会出现问题,需要在Jenkins所在的本地 maven install 一下,或者在用sh写脚本让执行</p><h3 id="更新完plugin部分job看不到的情况"><a href="#更新完plugin部分job看不到的情况" class="headerlink" title="更新完plugin部分job看不到的情况"></a>更新完plugin部分job看不到的情况</h3><p>重启还是进一步操作后出现,不是project,job 看不到的情况</p><ol><li>网上看到的是配置没到到 jenkins_home/workspace 下面的project,</li></ol><p>但是我看Jenkins的配置是对的,在对应的文件夹下面是有配置</p><ol><li>网上给的Jenkins迁移job的问题我看了不是这个问题</li></ol><h4 id="我遇到的是job下面的config-xml-maven2-module失败导致的"><a href="#我遇到的是job下面的config-xml-maven2-module失败导致的" class="headerlink" title="我遇到的是job下面的config.xml maven2-module失败导致的"></a>我遇到的是job下面的config.xml maven2-module失败导致的</h4><p>最后解决方案是重启tomcat不是Jenkins是,重启Jenkins是 <code>URL/jenkins/restart</code>, 看到tomcat的日志出现解析 jobs下面的各个job下面的config.xml 出问题 <strong><code>maven2-module</code></strong> ,对于非maven的项目就可以直接解析, 原来是 Maven Integration 插件不存在导致,原有的maven项目不能解析和显示</p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派下面搭建pgsql</title>
      <link href="1327663525.html"/>
      <url>1327663525.html</url>
      
        <content type="html"><![CDATA[<p>搭建pgsql的环境查看的文档</p><p>怎么在一台树莓派上安装 Postgres 数据库</p><p>树莓派中安装MySQL 5.7<br>感慨是准备是安装MySQL的,树莓派的环境 : Linux raspberrypi 4.19.97-v7l+ #1294 2020 armv7l</p><p>目前直接用 sudo apt-get install mysql-service 但是不行返回结果</p><p>没有可用的软件包 mysql-server，但是它被其它的软件包引用了。<br>这可能意味着这个缺失的软件包可能已被废弃，<br>或者只能在其他发布源中找到<br>然而下列软件包会取代它：<br>mariadb-server-10.0</p><p>目前来说直接安装的路被堵死</p><p>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqlclient-dev_5.7.18-1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqlclient-dev_5.7.18-1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqlclient20_5.7.18-1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqlclient20_5.7.18-1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqld-dev_5.7.18-1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqld-dev_5.7.18-1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-client-5.7_5.7.18-1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-client-5.7_5.7.18-1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-client-core-5.7_5.7.18-1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-client-core-5.7_5.7.18-1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-server-5.7_5.7.18-1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-server-5.7_5.7.18-1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-server-core-5.7_5.7.18-1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-server-core-5.7_5.7.18-1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-defaults/mysql-common_5.8+1.0.2_all.deb">http://ftp.debian.org/debian/pool/main/m/mysql-defaults/mysql-common_5.8+1.0.2_all.deb</a></p><p>sudo dpkg -i mysql-common_5.8+1.0.2_all.deb<br>sudo dpkg -i mysql-client-core-5.7_5.7.18-1_armhf.deb<br>sudo dpkg -i mysql-client-5.7_5.7.18-1_armhf.deb<br>sudo dpkg -i mysql-server-core-5.7_5.7.18-1_armhf.deb<br>sudo dpkg -i mysql-server-5.7_5.7.18-1_armhf.deb<br>上面的命令是直接在debian上下载 arm版本的MySQL但是现在访问网站已经找不到对于的deb包</p><p>而且在MySQL官网也没找到官方下载链接 arm的包</p><p>访问<a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/</a> 拿到对于的deb包版本为5.7.26-1,比上面的高</p><p>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqlclient-dev_5.7.26-1+b1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqlclient-dev_5.7.26-1+b1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqlclient20_5.7.26-1+b1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqlclient20_5.7.26-1+b1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqld-dev_5.7.26-1+b1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/libmysqld-dev_5.7.26-1+b1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-client-5.7_5.7.26-1+b1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-client-5.7_5.7.26-1+b1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-client-core-5.7_5.7.26-1+b1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-client-core-5.7_5.7.26-1+b1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-server-5.7_5.7.26-1+b1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-server-5.7_5.7.26-1+b1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-server-core-5.7_5.7.26-1+b1_armhf.deb">http://ftp.debian.org/debian/pool/main/m/mysql-5.7/mysql-server-core-5.7_5.7.26-1+b1_armhf.deb</a><br>wget <a href="http://ftp.debian.org/debian/pool/main/m/mysql-defaults/mysql-common_5.8+1.0.2_all.deb">http://ftp.debian.org/debian/pool/main/m/mysql-defaults/mysql-common_5.8+1.0.2_all.deb</a></p><p>sudo dpkg -i mysql-common_5.8+1.0.2_all.deb<br>sudo dpkg -i mysql-client-core-5.7_5.7.26-1+b1_armhf.deb<br>sudo dpkg -i mysql-client-5.7_5.7.26-1+b1_armhf.deb<br>sudo dpkg -i     mysql-server-core-5.7_5.7.26-1+b1_armhf.deb<br>sudo dpkg -i mysql-server-5.7_5.7.26-1+b1_armhf.deb<br>安装后显示</p><p>dpkg: 依赖关系问题使得 mysql-server-core-5.7 的配置工作不能继续：<br>mysql-server-core-5.7 依赖于 libaio1 (&gt;= 0.3.93)；然而：<br>未安装软件包 libaio1。<br>mysql-server-core-5.7 依赖于 libc6 (&gt;= 2.29)；然而：<br>系统中 libc6:armhf 的版本为 2.28-10+rpi1。<br>mysql-server-core-5.7 依赖于 libstdc++6 (&gt;= 9)；然而：<br>系统中 libstdc++6:armhf 的版本为 8.3.0-6+rpi1。</p><p>依赖太多找不到目前放弃安装MySQL使用官方推进的Mariadb<br>sudo apt-get install mariadb-server</p><p>当服务器安装完成后，你需要运行：</p><p>sudo mysql_secure_installation<br>来为你的数据库设置安全。</p><p>主要这个用途是设置你 root 的密码，root 的远程访问权限，是否允许匿名访问，是否允许远程访问等。</p><p>如果你只是测试在本地使用这个数据库，你可以不用设置这个。</p><p>但是我们还是建议你设置。</p><p>当前使用pi这个用户无法登陆Mariadb的需要用root登陆</p><p>CREATE USER ‘pi’@’%’ IDENTIFIED BY ‘123’;<br>GRANT USAGE ON . TO ‘pi’@’%’;<br>GRANT ALL PRIVILEGES ON . TO ‘pi’@’%’ IDENTIFIED BY ‘123’ WITH GRANT OPTION;<br>FLUSH PRIVILEGES;</p><p>重启服务器的命令是：</p><p>root@raspberrypi:~# service mariadb restart</p><p>安装pgsql<br>主要参考下面的博客文章 怎么在一台树莓派上安装 Postgres 数据库</p><p>安装pgsql还是简单的 首先输入命令</p><p>apt-get install postgresql</p><p>先安装后软件已经有客户端了,同时会带也会初始化的用户 : postgres</p><p>Postgres 用户去配置数据库：</p><p>sudo su postgres</p><p>初始化一个新的用户(pi) createuser pi -P –interactive</p><p>PostgreSQL 配置允许远程连接：</p><p>1、 编辑 PostgreSQL 配置文件 /etc/postgresql/9.6/main/postgresql.conf ，取消 listen_addresses 行的注释，并把它的值从 localhost 改变成 *。然后保存并退出。</p><p>2、 编辑 pg_hba 配置文件 /etc/postgresql/9.6/main/postgresql.conf，将 127.0.0.1/32 改变成 0.0.0.0/0 （对于IPv4）和将 ::1/128 改变成 ::/0 （对于 IPv6）。然后保存并退出。</p><p>3、 重启 PostgreSQL 服务： sudo service postgresql restart。</p><p>sudo service postgresql restart</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>知识管理工具</title>
      <link href="803410763.html"/>
      <url>803410763.html</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要知识管理"><a href="#为什么要知识管理" class="headerlink" title="为什么要知识管理"></a>为什么要知识管理</h3><pre><code> 知识管理就是(Personal Knowledge Management),在当前一个知识爆炸的时代,无效信息不经过整理,过几天就会只存在收藏夹 不能被接受的知识是无效,这里的知识是要能被使用或者是可以传授的,不是读书感受,类似与一种综合的笔记</code></pre><blockquote><p>知识和信息不能混为一谈，信息是免费的，但毫无目标的获取信息，就无法将信息转化为知识。因此学习必须要有目标，如果你用有限的时间去学无限的知识，你将被知识“淹没”，我们要学习那些给自己带来最大提升的知识。</p><p>　　时间是一个最稀缺的资源，在学习知识的过程中，必须考虑知识获取的“成本”问题，这个成本除了金钱之外，最重要的是时间成本。因此，学习知识的工具需要满足：“花费时间较短，获得价值较高的知识”。</p><p>　　对于纸质书籍的发现和评论，豆瓣读书是一个理想的工具，在使用之前，先标记自己读过的较为喜欢的书籍，不建议标记娱乐性书籍，这样能保证“豆瓣猜”的准确性，之后豆瓣就能根据你的阅读兴趣找到相关的书籍，你可以根据其他人对书籍的评价来决定是否购买。期刊杂志也是同样的道理。</p><p>　　总的来说，网络和电子读物适合浅阅读，具有深度和专业的知识还是需要阅读纸质书籍，你付出了金钱，却节省了时间。</p><p>　　平时工作学习中遇到问题，可以直接使用搜索引擎来寻找答案，通过搜索引擎也可以学到一些你不知道的小知识。</p></blockquote><p>​    学习和积累的基础就是能对要学习的知识点可以罗列出来同时加入自己的认识和理解,不仅有利用后面复习和及时查看 同时文档可以导出和打印 方便查看</p><h3 id="知识管理工具"><a href="#知识管理工具" class="headerlink" title="知识管理工具"></a>知识管理工具</h3><p>用一个产品就可以做文档（Google docs）、管理项目进度（Trello）、做知识文档（Confluence、Github Wiki）、团队协同文档（Dropbox Paper、Quip）、搭建个人博客、做 在线笔记、知识管理（Evernote），而且不用科学上网基础功能不用像 Office 365一样付费，即使付费也可走万能的淘宝，之前还有小伙伴买到永久会员资格知识库管理,文档和知识库,团队的wiki ,</p><p>当前的知识管理工具常见类型</p><ul><li><p>思维导图型</p><p>主要构成是方块和连线以及备注构成的图 类似的鱼骨图</p><p><img src="../img/1594443779161.png" alt="1594443779161"></p></li></ul><ul><li><p>各种云笔记(印象笔记,有道云笔记,为知笔记)全部是在web端的操作</p><p>文档型的笔记,由文件夹,子文件夹,文档(富文本,支持插入office或者思维导图)</p><p><img src="../img/1594444126796.png" alt="1594444126796"></p></li></ul><ul><li><p>wiki,javadoc,Confluence类</p><p>存在条理清晰的目录和内容也是富文本在公司内部使用比较多</p><p><img src="../img/Confluence_Edit_Page.png" alt="Edit page of Confluence"></p></li></ul><ul><li><p>notion,语雀 等综合类</p><p>这类知识管理工具都是以page(语雀以知识库中的文档和目录来体现)),notion是万物都可以引用,page内加page同时可以引用别人的内容</p><p><img src="../img/1594444538182.png" alt="1594444538182"></p><blockquote><p>Notion 自称是一款「<strong>将笔记、知识库和任务管理无缝整合的协作平台</strong>」。它具有无限的层级和相互链接的组织弹性，给笔记间的关系提供了足够自由的组织方式；它排版灵活，能够把笔记里的内容按块（Block）进行组织和拖拽，甚至可以做出 Trello 看板进行项目管理；它的内容类型丰富，可以嵌入图片、网页、文档甚至视频，几乎无所不能。</p><p><a href="https://sspai.com/post/39694">https://sspai.com/post/39694</a> 少数派: Notion：重新定义数字笔记</p></blockquote></li></ul><h3 id="怎么获取和筛选知识"><a href="#怎么获取和筛选知识" class="headerlink" title="怎么获取和筛选知识"></a>怎么获取和筛选知识</h3><ol><li><p>搜索引擎多个搜索引擎搜索,加插件屏蔽到搜索结果中的广告</p><p><a href="http://s.uc.cn/">http://s.uc.cn/</a> uc的多重搜索</p><p><a href="https://dogedoge.com/">多吉搜索</a> </p></li><li><p>外网一手资料</p></li><li><p>各种wiki和简单入门的网站</p></li><li><p>博客 和论坛都是好去处</p></li></ol><p>….</p><h3 id="培养积累和学习的习惯"><a href="#培养积累和学习的习惯" class="headerlink" title="培养积累和学习的习惯"></a>培养积累和学习的习惯</h3><p> ….</p>]]></content>
      
      
      
        <tags>
            
            <tag> 知识管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu输出的分辨率</title>
      <link href="3468817301.html"/>
      <url>3468817301.html</url>
      
        <content type="html"><![CDATA[<p>xrandr</p><p><img src="../img/1590471579954.png" alt="1590471579954"></p><p>之前会默认的1080p,我这个显示器是2k的分辨率,使用thunderbolt转接槽接的HDMI接口</p><p>但是有时候(长时间不工作息屏,先关机后关显示器电源)时会出现显示不出来2k的选项,</p><p>2560x1440     59.95 +  74.97*</p><ol><li>sudo xrandr –newmode “1920x1080_60.00” 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync</li><li>sudo xrandr –addmode VGA1 “1920x1080_60.00”</li><li>sudo xrandr –output VGA1 –mode “1920x1080_60.00”</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> thunderbolt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git/GitHub 中文术语表</title>
      <link href="19126373.html"/>
      <url>19126373.html</url>
      
        <content type="html"><![CDATA[<p>​        转载Linux中国关于 <a href="https://linux.cn/article-12245-1.html">Git/GitHub 中文术语表</a> ,可以参考一下不至于混乱</p><p>Git 和 GitHub 已经成为了开发者的基础工具，尤其是参与开源软件开发时经常会使用它们。但是在 Git 和 GitHub 使用过程中遇到的很多术语并没有标准的或约定俗成的中文译名，因此，我们根据 <a href="https://help.github.com/cn/github/getting-started-with-github/github-glossary">GitHub</a> 、<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/docs/gitglossary.html">Git</a> 等文档，并结合我们的翻译惯例，收集整理了 Git 和 GitHub 中常用术语的中文译名及其解释。</p><p>这里值得注意是术语有复刻、挂钩、议题、星标、变基、仓库等，这些术语之前要么经常中英文混杂使用，要么中文译法不确定，我们根据多年的翻译和开发经验，在 GitHub 译法的基础上进行斟酌，整理了如下的术语表供大家使用参考。此外，“复刻”这个翻译应该是我们 <a href="https://linux.cn/article-7877-1.html">LCTT 首倡</a>的；而“议题”这个对 issue 的译法也比之前的一些其它译法更为精准；“仓库”一词还有存储库、版本库等译法，但是仓库一词似乎更加合适。</p><h3 id="受让人assignee"><a href="#受让人assignee" class="headerlink" title="受让人assignee"></a>受让人assignee</h3><p>分配到某个议题的用户。</p><h3 id="追溯blame"><a href="#追溯blame" class="headerlink" title="追溯blame"></a>追溯blame</h3><p>Git 中的“追溯”功能描述对文件每行的最新修改，一般会显示修订、作者和时间。这很有用，例如，可以跟踪何时添加了功能，或者哪个提交导致了特定漏洞。</p><h3 id="分支branch"><a href="#分支branch" class="headerlink" title="分支branch"></a>分支branch</h3><p>分支是仓库的平行版本。它包含在仓库中，但不影响主要或 master 分支，可让你自由工作而不中断“即时”版本。在执行所需的更改后，可以将分支合并回 master 分支以发布更改。</p><h3 id="检出checkout"><a href="#检出checkout" class="headerlink" title="检出checkout"></a>检出checkout</h3><p>你可以在命令行上使用 <code>git checkout</code> 创建新分支，将当前的工作分支更改为不同的分支，甚至使用 <code>git checkout [branchname] [path to file]</code>从不同的分支切换到不同版本的文件。“检出”操作会使用对象数据库中的树对象或 blob 更新工作树的全部或部分，以及更新索引和 HEAD（如果整个工作树指向新分支）。</p><h3 id="优选cherry-picking"><a href="#优选cherry-picking" class="headerlink" title="优选cherry-picking"></a>优选cherry-picking</h3><p>从一系列更改（通常是提交）中选择一部分更改，并在不同的代码库上将它们记录为新的更改系列。在 Git 中，这通过 <code>git cherry-pick</code> 命令来执行，在另一个分支上解压缩现有提交引入的更改，并根据当前分支的提示将其记录为新提交。</p><h3 id="清洁clean"><a href="#清洁clean" class="headerlink" title="清洁clean"></a>清洁clean</h3><p>工作树在对应当前头部引用的版本时是清洁的。另请参阅“脏”。</p><h3 id="克隆clone"><a href="#克隆clone" class="headerlink" title="克隆clone"></a>克隆clone</h3><p>克隆是指存在于计算机上而非网站服务器其他位置的仓库副本，或者是复制的操作。在克隆时，可在首选编辑器中编辑文件，使用 Git 跟踪更改而无需保持在线。你克隆的仓库仍与远程版本连接，以便当你在线时将本地更改推送到远程，以保持同步。</p><h3 id="行为准则code-of-conduct"><a href="#行为准则code-of-conduct" class="headerlink" title="行为准则code of conduct"></a>行为准则code of conduct</h3><p>为如何参与社区制定标准的文档。</p><h3 id="代码所有者code-owner"><a href="#代码所有者code-owner" class="headerlink" title="代码所有者code owner"></a>代码所有者code owner</h3><p>被指定为部分仓库代码所有者的个人。当有人打开对代码所有者拥有的代码进行更改的拉取请求（非草稿模式）时，会自动申请代码所有者审查。</p><h3 id="协作者collaborator"><a href="#协作者collaborator" class="headerlink" title="协作者collaborator"></a>协作者collaborator</h3><p>协作者是受仓库所有者邀请参与，对仓库拥有读取和写入权限的人。</p><h3 id="提交commit"><a href="#提交commit" class="headerlink" title="提交commit"></a>提交commit</h3><p>提交或“修订”是对一个文件（或一组文件）的个别更改。在进行提交以保存工作时，Git 会创建唯一的 ID（也称为 “SHA” 或“哈希”），用于记录提交的特定更改以及提交者和提交时间。提交通常包含一条提交消息，其中简要说明所做的更改。</p><h3 id="提交作者commit-author"><a href="#提交作者commit-author" class="headerlink" title="提交作者commit author"></a>提交作者commit author</h3><p>进行提交的用户。</p><h3 id="提交-IDcommit-ID"><a href="#提交-IDcommit-ID" class="headerlink" title="提交 IDcommit ID"></a>提交 IDcommit ID</h3><p>也称为 SHA。用于识别提交的 40 字符校验和的哈希。</p><h3 id="提交消息commit-message"><a href="#提交消息commit-message" class="headerlink" title="提交消息commit message"></a>提交消息commit message</h3><p>随附于提交的简短描述性文字，用于沟通提交引入的更改。</p><h3 id="持续集成continuous-integration"><a href="#持续集成continuous-integration" class="headerlink" title="持续集成continuous integration"></a>持续集成continuous integration</h3><p>也称为 CI。在个人对 GitHub 上配置的仓库提交更改后运行自动化构建和测试的过程。CI 是软件开发中一种帮助检测错误的常用最佳实践。</p><h3 id="贡献指南contribution-guidelines"><a href="#贡献指南contribution-guidelines" class="headerlink" title="贡献指南contribution guidelines"></a>贡献指南contribution guidelines</h3><p>说明人们应如何参与项目的文档。</p><h3 id="贡献contributions"><a href="#贡献contributions" class="headerlink" title="贡献contributions"></a>贡献contributions</h3><p>GitHub 上的特定活动。</p><h3 id="贡献者contributor"><a href="#贡献者contributor" class="headerlink" title="贡献者contributor"></a>贡献者contributor</h3><p>贡献者是指对仓库没有协作者权限但参与过项目，并且他们打开的拉取请求已合并到仓库的人员。</p><h3 id="默认分支default-branch"><a href="#默认分支default-branch" class="headerlink" title="默认分支default branch"></a>默认分支default branch</h3><p>仓库中的基本分支，除非你指定不同的分支，否则会自动对它完成所有拉取请求和代码提交。此分支通常称为 <code>master</code>。</p><h3 id="游离的-HEADdetached-HEAD"><a href="#游离的-HEADdetached-HEAD" class="headerlink" title="游离的 HEADdetached HEAD"></a>游离的 HEADdetached HEAD</h3><p>如果你操作的是游离的 HEAD，Git 将会警告你，这意味着 Git 不指向某个分支，并且你的任何提交都不会出现在提交历史记录中。例如，在检出并非任何特定分支最新提交的任意提交时，你操作的是“游离的 HEAD”。</p><h3 id="差异diff"><a href="#差异diff" class="headerlink" title="差异diff"></a>差异diff</h3><p>差异是指两个提交之间的更改或保存的更改之间的区别，它将从视觉上描述文件自上次提交后添加或删除的内容。</p><h3 id="脏dirty"><a href="#脏dirty" class="headerlink" title="脏dirty"></a>脏dirty</h3><p>工作树如果包含尚未提交到当前分支的更改，将被视为“脏”。</p><h3 id="快进fast-forward"><a href="#快进fast-forward" class="headerlink" title="快进fast-forward"></a>快进fast-forward</h3><p>快进是一种特殊类型的合并，在其中你有修订以及“合并”另一个分支的更改作为现有分支的子系。在这种情况下，你无法进行新的合并提交，而只是更新此修订。这在远程仓库的远程跟踪分支中经常发生。</p><h3 id="功能分支feature-branch"><a href="#功能分支feature-branch" class="headerlink" title="功能分支feature branch"></a>功能分支feature branch</h3><p>用于试验新功能或修复未正式使用的议题的分支。也称为主题分支。</p><h3 id="围栏代码块fenced-code-block"><a href="#围栏代码块fenced-code-block" class="headerlink" title="围栏代码块fenced code block"></a>围栏代码块fenced code block</h3><p>你可以在代码块前后使用三个反引号 `````，通过 GitHub Flavored Markdown 创建缩进代码块。</p><h3 id="获取fetch"><a href="#获取fetch" class="headerlink" title="获取fetch"></a>获取fetch</h3><p>在使用 <code>git fetch</code> 时，你将从远程仓库添加更改到本地工作分支，而不提交它们。与 <code>git pull</code> 不同，提取可让你在更改提交到本地分支之前先进行审查。</p><h3 id="跟进（用户）following-users"><a href="#跟进（用户）following-users" class="headerlink" title="跟进（用户）following (users)"></a>跟进（用户）following (users)</h3><p>获取关于另一个用户的贡献和活动的通知。</p><h3 id="强制推送force-push"><a href="#强制推送force-push" class="headerlink" title="强制推送force push"></a>强制推送force push</h3><p>一种使用本地更改覆盖远程仓库的 Git 推送，不管是否冲突。</p><h3 id="复刻fork"><a href="#复刻fork" class="headerlink" title="复刻fork"></a>复刻fork</h3><p>复刻是其他用户仓库在你的帐户上的个人副本。复刻允许你自由更改项目而不影响原始上游仓库。你也可以在上游仓库中打开拉取请求，并使复刻同步最新的更改，因为两个仓库仍然互相连接。</p><h3 id="gitfile"><a href="#gitfile" class="headerlink" title="gitfile"></a>gitfile</h3><p>一种普通的 <code>.git</code> 文件，始终位于工作树的根部，指向 Git 目录，包含整个 Git 仓库及其元数据。你可以在命令行上使用 <code>git rev-parse --git-dir</code> 查看仓库（实际仓库）的此文件。</p><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>当前分支。</p><h3 id="挂钩hook"><a href="#挂钩hook" class="headerlink" title="挂钩hook"></a>挂钩hook</h3><p>在多个 Git 命令正常执行时，对可选脚本进行标注以允许开发者添加功能或检查。通常，挂钩允许预先验证和潜在中止命令，并且允许在操作完成后再发事后通知。</p><h3 id="实例instance"><a href="#实例instance" class="headerlink" title="实例instance"></a>实例instance</h3><p>组织包含在其配置和控制的虚拟机中的 GitHub 私有副本。</p><h3 id="议题issue"><a href="#议题issue" class="headerlink" title="议题issue"></a>议题issue</h3><p>议题是提议的与仓库相关的改进、任务或问题。（对于公共仓库）任何人都可创建议题，然后由仓库协作者调解。每个议题都包含自己的讨论线程。你也可以使用标签将议题归类并分配到某人。</p><h3 id="密钥指纹key-fingerprint"><a href="#密钥指纹key-fingerprint" class="headerlink" title="密钥指纹key fingerprint"></a>密钥指纹key fingerprint</h3><p>用于识别较长公钥的简短字节系列。</p><h3 id="关键词keyword"><a href="#关键词keyword" class="headerlink" title="关键词keyword"></a>关键词keyword</h3><p>用在拉取请求中时关闭议题的特定文字。</p><h3 id="标签label"><a href="#标签label" class="headerlink" title="标签label"></a>标签label</h3><p>议题或拉取请求的标记。仓库随附一系列默认标签，但用户也可创建自定义标签。</p><h3 id="LFS"><a href="#LFS" class="headerlink" title="LFS"></a>LFS</h3><p>Git Large File Storage。一种开源 Git 扩展，用于对大文件进行版本控制。</p><h3 id="许可证license"><a href="#许可证license" class="headerlink" title="许可证license"></a>许可证license</h3><p>一种可随附于项目的文档，告知们能够对你的源代码执行哪些操作，不能执行哪些操作。</p><h3 id="行注释line-comment"><a href="#行注释line-comment" class="headerlink" title="行注释line comment"></a>行注释line comment</h3><p>拉取请求内特定代码行上的评论。</p><h3 id="主干master"><a href="#主干master" class="headerlink" title="主干master"></a>主干master</h3><p>默认开发分支。只要创建 Git 仓库，就会创建一个名为 <code>master</code> 的分支，并且它会变为活动的分支。大多数情况下，这包含本地开发，但纯属惯例，而非必需。</p><h3 id="提及mention"><a href="#提及mention" class="headerlink" title="提及mention"></a>提及mention</h3><p>一种通过在用户名前加上 @ 符号来发送给用户的通知。GitHub 上组织中的用户也可成为可提及的团队一部分。</p><h3 id="合并merge"><a href="#合并merge" class="headerlink" title="合并merge"></a>合并merge</h3><p>合并是从一个分支（在相同的仓库中或来自一个分叉）提取更改，然后将其应用到另一个分支。这通常是作为“拉取请求”（可视为请求合并）或通过命令行完成。如果没有冲突的更改，可通过 GitHub.com web 界面使用拉取请求完成合并，或始终通过命令行完成。</p><h3 id="合并冲突merge-conflict"><a href="#合并冲突merge-conflict" class="headerlink" title="合并冲突merge conflict"></a>合并冲突merge conflict</h3><p>合并的分支之间发生的差异。当人们对同一文件的同一行进行不同的更改时，或者一个人编辑某文件而另一个人删除该文件时，就会发生合并冲突。必须解决合并冲突后才可合并分支。</p><h3 id="合并请求merge-request"><a href="#合并请求merge-request" class="headerlink" title="合并请求merge request"></a>合并请求merge request</h3><p>合并请求（MR）是 GitLab 上类似于 GitHub 上的拉取请求的概念。</p><h3 id="里程碑milestone"><a href="#里程碑milestone" class="headerlink" title="里程碑milestone"></a>里程碑milestone</h3><p>一种跟踪仓库中议题或拉取请求组进度的方式。</p><h3 id="镜像mirror"><a href="#镜像mirror" class="headerlink" title="镜像mirror"></a>镜像mirror</h3><p>仓库的新副本。</p><h3 id="非快进non-fast-forward"><a href="#非快进non-fast-forward" class="headerlink" title="非快进non-fast-forward"></a>非快进non-fast-forward</h3><p>当仓库的本地副本未与上游仓库同步时，你在推送本地更改之前需要提取上游更改。</p><h3 id="通知notification"><a href="#通知notification" class="headerlink" title="通知notification"></a>通知notification</h3><p>web 或电子邮件（根据你的设置）传送的更新，提供你感兴趣的活动的相关信息。</p><h3 id="外部协作者outside-collaborator"><a href="#外部协作者outside-collaborator" class="headerlink" title="外部协作者outside collaborator"></a>外部协作者outside collaborator</h3><p>已被授予访问一个或多个组织的仓库但对组织没有其他访问权限的用户，且不属于组织的成员。</p><h3 id="开源open-source"><a href="#开源open-source" class="headerlink" title="开源open source"></a>开源open source</h3><p>开源软件是可供任何人自由使用、修改和共享（以修改和未修改的形式）的软件。今天，“开源”的概念通常扩展到软件以外，代表一种协作原则，其中工作材料在线供任何人分叉、修改、讨论和参与。</p><h3 id="源origin"><a href="#源origin" class="headerlink" title="源origin"></a>源origin</h3><p>默认上游仓库。大多数项目至少有一个它们跟踪的上游项目。默认情况下，源用于该目的。</p><h3 id="所有者owner"><a href="#所有者owner" class="headerlink" title="所有者owner"></a>所有者owner</h3><p>对组织有完全管理权限的组织成员。</p><h3 id="私有贡献private-contributions"><a href="#私有贡献private-contributions" class="headerlink" title="私有贡献private contributions"></a>私有贡献private contributions</h3><p>对私有（与公共相对）仓库的贡献。</p><h3 id="私有仓库private-repository"><a href="#私有仓库private-repository" class="headerlink" title="私有仓库private repository"></a>私有仓库private repository</h3><p>私有仓库仅对仓库所有者和所有者指定的协作者可见。</p><h3 id="生产分支production-branch"><a href="#生产分支production-branch" class="headerlink" title="生产分支production branch"></a>生产分支production branch</h3><p>包含可使用或部署到应用程序或站点的最终更改的分支。</p><h3 id="个人资料profile"><a href="#个人资料profile" class="headerlink" title="个人资料profile"></a>个人资料profile</h3><p>显示 GitHub 上用户活动相关信息的页面。</p><h3 id="受保护分支protected-branch"><a href="#受保护分支protected-branch" class="headerlink" title="受保护分支protected branch"></a>受保护分支protected branch</h3><p>受保护分支在仓库管理员选择保护的分支上禁止多项 Git 功能。必要检查未通过或必需审查未批准，不能对它们执行强制推送、删除和更改合并，或者不能从 GitHub web 界面上传文件到其中。受保护分支通常是默认分支。</p><h3 id="公共贡献public-contributions"><a href="#公共贡献public-contributions" class="headerlink" title="公共贡献public contributions"></a>公共贡献public contributions</h3><p>对公共（与私有相对）仓库的贡献。</p><h3 id="公共仓库public-repository"><a href="#公共仓库public-repository" class="headerlink" title="公共仓库public repository"></a>公共仓库public repository</h3><p>公共仓库可供任何人查看，包括不是 GitHub 用户的人员。</p><h3 id="拉取pull"><a href="#拉取pull" class="headerlink" title="拉取pull"></a>拉取pull</h3><p>拉取是指提取与合并更改。例如，如果有人编辑了你操作的远程文件，你要将这些更改拉取到本地副本，以使其保持最新。另请参阅“提取”。</p><h3 id="拉取权限pull-access"><a href="#拉取权限pull-access" class="headerlink" title="拉取权限pull access"></a>拉取权限pull access</h3><p>读取权限的同义词。</p><h3 id="拉取请求pull-request"><a href="#拉取请求pull-request" class="headerlink" title="拉取请求pull request"></a>拉取请求pull request</h3><p>拉取请求（PR）是提议更改用户提交的仓库，然后被仓库协作者接受或拒绝。像议题一样，每个拉取请求都有自己的论坛。</p><h3 id="拉取请求审查pull-request-review"><a href="#拉取请求审查pull-request-review" class="headerlink" title="拉取请求审查pull request review"></a>拉取请求审查pull request review</h3><p>拉取请求中协作者批准更改或在拉取请求合并之前申请进一步更改的评论。</p><h3 id="推送push"><a href="#推送push" class="headerlink" title="推送push"></a>推送push</h3><p>推送是指将提交的更改发送到 GitHub.com 上的远程仓库。例如，如果你在本地更改内容，便可推送这些更改，让其他人访问。</p><h3 id="推送分支push-a-branch"><a href="#推送分支push-a-branch" class="headerlink" title="推送分支push a branch"></a>推送分支push a branch</h3><p>成功将分支推送到远程仓库后，使用本地分支中的更改来更新远程分支。在你“推送分支”时，Git 将会到远程仓库中搜索分支的头部引用，并验证它是分支本地头部引用的直系原型。在验证后，Git 将拉取所有对象（从本地头部引用可获取，而远程仓库中缺失）到远程对象数据库，然后更新远程头部引用。如果远程头部不是本地头部的原型，推送将会失败。</p><h3 id="推送权限push-access"><a href="#推送权限push-access" class="headerlink" title="推送权限push access"></a>推送权限push access</h3><p>写入权限的同义词。</p><h3 id="读取权限read-access"><a href="#读取权限read-access" class="headerlink" title="读取权限read access"></a>读取权限read access</h3><p>对仓库的权限级别，允许用户拉取或者读取仓库中的信息。所有公共仓库向所有 GitHub 用户授予读取权限。拉取权限的同义词。</p><h3 id="自述文件README"><a href="#自述文件README" class="headerlink" title="自述文件README"></a>自述文件README</h3><p>包含仓库中文件相关信息的文本文件，通常是仓库访问者看到的第一个文件。自述文件连同仓库许可证、参与指南以及行为准则，帮助你交流要求和管理项目的参与。</p><h3 id="变基rebase"><a href="#变基rebase" class="headerlink" title="变基rebase"></a>变基rebase</h3><p>将一系列更改从一个分支重新应用到不同的基本分支，并将该分支的头部重置为结果。</p><h3 id="发布release"><a href="#发布release" class="headerlink" title="发布release"></a>发布release</h3><p>GitHub 封装软件并向用户提供软件的方式。</p><h3 id="远程remote"><a href="#远程remote" class="headerlink" title="远程remote"></a>远程remote</h3><p>这是托管于服务器（很可能是 GitHub.com）上的仓库或分支版本。远程版本可以连接到本地克隆，以使更改保持同步。</p><h3 id="远程仓库remote-repository"><a href="#远程仓库remote-repository" class="headerlink" title="远程仓库remote repository"></a>远程仓库remote repository</h3><p>用于跟踪同一个项目但储存在其他位置的仓库。</p><h3 id="远程-URLremote-URL"><a href="#远程-URLremote-URL" class="headerlink" title="远程 URLremote URL"></a>远程 URLremote URL</h3><p>存储代码的位置：GitHub、其他用户分支甚至不同服务器 上的仓库。</p><h3 id="副本replica"><a href="#副本replica" class="headerlink" title="副本replica"></a>副本replica</h3><p>为主要 GitHub Enterprise 实例提供冗余的 GitHub Enterprise 实例。</p><h3 id="仓库repository"><a href="#仓库repository" class="headerlink" title="仓库repository"></a>仓库repository</h3><p>仓库是 GitHub 最基本的元素，最容易被想象成项目的文件夹。一个仓库包含所有项目文件（包括文档），并且存储每个文件的修订历史记录。仓库可有多个协作者，也可以是公共仓库或私有仓库。</p><h3 id="仓库维护员repository-maintainer"><a href="#仓库维护员repository-maintainer" class="headerlink" title="仓库维护员repository maintainer"></a>仓库维护员repository maintainer</h3><p>管理仓库的人员。此人可帮助对议题分类，以及使用标签和其他功能管理仓库的工作，也可负责更新自述文件和参与文件。</p><h3 id="解决resolve"><a href="#解决resolve" class="headerlink" title="解决resolve"></a>解决resolve</h3><p>手动修复自动合并失败的操作。</p><h3 id="还原revert"><a href="#还原revert" class="headerlink" title="还原revert"></a>还原revert</h3><p>恢复 GitHub 上的拉取请求时，新拉取请求会自动打开，其中有一个提交用于从原始合并的拉取请求恢复合并提交。在 Git 中，你可以使用 <code>git revert</code> 恢复提交。</p><h3 id="审查review"><a href="#审查review" class="headerlink" title="审查review"></a>审查review</h3><p>审查允许对仓库具有访问权限的其他人评论拉取请求中提议的更改、审批更改或在拉取请求合并之前请求进一步更改。</p><h3 id="服务挂钩service-hook"><a href="#服务挂钩service-hook" class="headerlink" title="服务挂钩service hook"></a>服务挂钩service hook</h3><p>也称为“Web 挂钩”。Web 挂钩是一种通知方式，只要仓库或组织上发生特定操作，就会发送通知到外部 web 服务器。</p><h3 id="压扁squash"><a href="#压扁squash" class="headerlink" title="压扁squash"></a>压扁squash</h3><p>将多个提交合并为一个。也是 Git 命令。</p><h3 id="暂存实例staging-instance"><a href="#暂存实例staging-instance" class="headerlink" title="暂存实例staging instance"></a>暂存实例staging instance</h3><p>在修改应用到实际 GitHub Enterprise 实例之前测试修改的一种方式。</p><h3 id="状态status"><a href="#状态status" class="headerlink" title="状态status"></a>状态status</h3><p>拉取请求中的可视表现形式，表示你的提交符合你参与的仓库所设定的条件。</p><h3 id="星标star"><a href="#星标star" class="headerlink" title="星标star"></a>星标star</h3><p>仓库的书签或赞赏表示。星标是项目受欢迎程度排名的手动方式。</p><h3 id="主题分支topic-branch"><a href="#主题分支topic-branch" class="headerlink" title="主题分支topic branch"></a>主题分支topic branch</h3><p>开发者用来识别开发概念行的常规 Git 分支。由于分支很容易并且便宜，因此往往适合拥有多个小分支，每个小分支包含定义明确的概念，或者渐进但相关的更改。也可称为“特征分支”。</p><h3 id="上游upstream"><a href="#上游upstream" class="headerlink" title="上游upstream"></a>上游upstream</h3><p>在谈论分支或分叉时，原始仓库的主要分支通常被称为“上游”，因为它是其他更改的主要来源。你操作的分支/分叉则称为“下游”。也称为“源”。</p><h3 id="上游分支upstream-branch"><a href="#上游分支upstream-branch" class="headerlink" title="上游分支upstream branch"></a>上游分支upstream branch</h3><p>合并到所述分支的默认分支（或所述分支变基到的分支）。它通过 <code>branch.&lt;name&gt;.remote</code> 和 <code>branch.&lt;name&gt;.merge</code> 配置。如果 A 的上游分支是源/B，有时我们会说“A 在跟踪源/B”。</p><h3 id="查看watch"><a href="#查看watch" class="headerlink" title="查看watch"></a>查看watch</h3><p>你可以关注仓库或议题，以便在议题或拉取请求有更新时接收通知。</p><h3 id="web-挂钩webhooks"><a href="#web-挂钩webhooks" class="headerlink" title="web 挂钩webhooks"></a>web 挂钩webhooks</h3><p>Web 挂钩可让你构建或设置订阅 GitHub.com 上特定事件的 GitHub 应用程序。Web 挂钩提供一种通知方式，只要仓库或组织中发生特定操作，就会发送通知到外部 web 服务器。也称为“服务挂钩”。</p><h3 id="写入权限write-access"><a href="#写入权限write-access" class="headerlink" title="写入权限write access"></a>写入权限write access</h3><p>对仓库的权限级别，可让用户推送或写入更改到仓库。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将博客搬至CSDN</title>
      <link href="1341101137.html"/>
      <url>1341101137.html</url>
      
        <content type="html"><![CDATA[<p>将博客搬至CSDN,方便搜索引擎检索</p><p><img src="../img/%E8%B1%86%E7%93%A3.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 搬家 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>activiti零零碎碎的记录</title>
      <link href="3807663978.html"/>
      <url>3807663978.html</url>
      
        <content type="html"><![CDATA[<p>熟悉app创建app然后是用发布 processes可以看出来<br>  对于每个用户会有任务<br>  同时这个同时称为activiti workflow(工作流) deploy的可能</p><p>processengineConfiguration -&gt;processEngine-&gt;respositoryService<br>                                            taskSerivice 对于任务的查询<br>                                            identityService 用户先关的查询<br>                                            formService<br>                                            runtimeService<br>                                            ManagementService<br>                                            HistoryService<br>                                            对于上面的接口</p><ul><li><p>ProcessEngines.getDefaultProcessEngine()会在第一次调用时 初始化并创建一个流程引擎，以后再调用就会返回相同的流程引擎。 使用对应的方法可以创建和关闭所有流程引擎：ProcessEngines.init() 和 ProcessEngines.destroy()。</p></li><li><p>RepositoryService可能是使用Activiti引擎时最先接触的服务。 它提供了管理和控制发布包和流程定义的操作。 这里不涉及太多细节，流程定义是BPMN 2.0流程的java实现。 它包含了一个流程每个环节的结构和行为。 发布包是Activiti引擎的打包单位。一个发布包可以包含多个BPMN 2.0 xml文件和其他资源。 开发者可以自由选择把任意资源包含到发布包中。 既可以把一个单独的BPMN 2.0 xml文件放到发布包里，也可以把整个流程和相关资源都放在一起。 （比如，’hr-processes’实例可以包含hr流程相关的任何资源）。 可以通过RepositoryService来部署这种发布包。 发布一个发布包，意味着把它上传到引擎中，所有流程都会在保存进数据库之前分析解析好。 从这点来说，系统知道这个发布包的存在，发布包中包含的流程就已经可以启动了。</p></li><li><p>RuntimeService正好是完全相反的。它负责启动一个流程定义的新实例。 如上所述，流程定义定义了流程各个节点的结构和行为。 流程实例就是这样一个流程定义的实例。对每个流程定义来说，同一时间会有很多实例在执行。 RuntimeService也可以用来获取和保存流程变量。 这些数据是特定于某个流程实例的，并会被很多流程中的节点使用 （比如，一个排他网关常常使用流程变量来决定选择哪条路径继续流程）。 Runtimeservice也能查询流程实例和执行。 执行对应BPMN 2.0中的’token’。基本上执行指向流程实例当前在哪里。 最后，RuntimeService可以在流程实例等待外部触发时使用，这时可以用来继续流程实例。 流程实例可以有很多暂停状态，而服务提供了多种方法来’触发’实例， 接受外部触发后，流程实例就会继续向下执行。</p><blockquote><p>它是Activiti这类BPMN引擎的核心功能之一。 所有与任务有关的功能都包含在TaskService中： 查询分配给用户或组的任务</p><p>创建独立运行任务。这些任务与流程实例无关。</p><p>手工设置任务的执行者，或者这些用户通过何种方式与任务关联。</p><p>认领并完成一个任务。认领意味着一个人期望成为任务的执行者， 即这个用户会完成这个任务。完成意味    着“做这个任务要求的事情”。 通常来说会有很多种处理形式。</p></blockquote></li><li><p>IdentityService非常简单。它可以管理（创建，更新，删除，查询…）群组和用户。 请注意， Activiti执行时并没有对用户进行检查。 例如，任务可以分配给任何人，但是引擎不会校验系统中是否存在这个用户。 这是Activiti引擎也可以使用外部服务，比如ldap，活动目录，等等。</p></li><li><p>FormService是一个可选服务。即使不使用它，Activiti也可以完美运行， 不会损失任何功能。这个服务提供了启动表单和任务表单两个概念。 启动表单会在流程实例启动之前展示给用户， 任务表单会在用户完成任务时展示。Activiti支持在BPMN 2.0流程定义中设置这些表单。 这个服务以一种简单的方式将数据暴露出来。再次重申，它时可选的， 表单也不一定要嵌入到流程定义中。</p></li><li><p>HistoryService提供了Activiti引擎手机的所有历史数据。 在执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。</p></li><li><p>ManagementService在使用Activiti的定制环境中基本上不会用到。 它可以查询数据库的表和表的元数据。另外，它提供了查询和管理异步操作的功能。 Activiti的异步操作用途很多，比如定时器，异步操作， 延迟暂停、激活，等等。后续，会讨论这些功能的更多细节。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu软件的配置</title>
      <link href="3494110652.html"/>
      <url>3494110652.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>nginx</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123; listen 80; server_name localhost [www.example.com](http://www.example.com/);</span><br><span class="line">    root /Users/yangyi/www;  #全局定义，表示在该server下web的根目录 </span><br><span class="line">    client_max_body_size 100M; </span><br><span class="line">    keepalive_timeout 20; </span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    access_log logs/host.access.log main; #用来指定此虚拟主机的访问日志存放路径，输出格式为main。</span><br><span class="line">    error_log logs/host.error.log error; #错误日志存放路径，输出格式为error。</span><br><span class="line">    error_page 404 /404.html;    #状态码为404时的时候的网页地址,还可定义500,502之类的 ....</span><br><span class="line"> &#125; 以上一些配置为在该server下具有全局性，例如</span><br></pre></td></tr></table></figure><p>nginx允许跨域配置:return 204;上是针对预检请求（preflight request）,后面add_header 是应对的CROS浏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;  </span><br><span class="line">     if ($request_method &#x3D; &#39;OPTIONS&#39;) &#123;</span><br><span class="line">            return 204;</span><br><span class="line">        &#125;</span><br><span class="line">    add_header Access-Control-Allow-Origin *;</span><br><span class="line">    add_header Access-Control-Allow-Methods &#39;GET, POST, OPTIONS&#39;;</span><br><span class="line">    add_header Access-Control-Allow-Headers &#39;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#39;;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:8001 --name kodexplorer -v &lt;path&#x2F;to&#x2F;data&gt;:&#x2F;var&#x2F;www&#x2F;html xaljer&#x2F;kodexplorer</span><br><span class="line">docker run -d -p 8001:8001 --name   yangxuan8282&#x2F;kodexplorer -v &quot;$PWD&quot;:&#x2F;var&#x2F;www&#x2F;html yangxuan8282&#x2F;kodexplorer</span><br><span class="line">docker run --name&#x3D;my_portainer -d -p 80:8001 -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock</span><br><span class="line">docker run --name&#x3D;kodexplorer -d -p 8001:8001 -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock</span><br><span class="line"></span><br><span class="line">docker run --privileged&#x3D;true -d  -p 8001:80  --name kod-dockerfile-1  kod:v8</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cnpm intall hexo-generator-search --save</span><br><span class="line">cnpm intall  hexo-prism-plugin --save</span><br><span class="line">cnpm install hexo-all-minifier --save</span><br><span class="line">cnpm i -S hexo-prism-plugin --save</span><br><span class="line"></span><br><span class="line">npm config set proxy http:&#x2F;&#x2F;127.0.0.1:7890</span><br><span class="line">npm config list</span><br><span class="line">npm config set  registry </span><br><span class="line"> npm install --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>postgresql</p><blockquote><p><strong>1. 修改postgresql.conf</strong></p><p>postgresql.conf存放位置在/etc/postgresql/9.x/main下，这里的x取决于你安装PostgreSQL的版本号，编辑或添加下面一行，使PostgreSQL可以接受来自任意IP的连接请求。</p><p>listen_addresses = ‘*’ </p><p><strong>2. 修改pg_hba.conf</strong></p><p>pg_hba.conf，位置与postgresql.conf相同，虽然上面配置允许任意地址连接PostgreSQL，但是这在pg中还不够，我们还需在pg_hba.conf中配置服务端允许的认证方式。任意编辑器打开该文件，编辑或添加下面一行。</p><p># TYPE  DATABASE  USER  CIDR-ADDRESS  METHOD host  all  all 0.0.0.0/0 md5</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> 软件配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站推荐</title>
      <link href="2974411664.html"/>
      <url>2974411664.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>## 导航类</th></tr></thead><tbody><tr><td><a href="https://adzhp.cn/mian-fei-shi-pin.html">免费视频网站、APP和高清电影下载合集爱达杂货铺</a></td></tr><tr><td><a href="https://jubtnet.github.io/jubt/">聚BT - 聚合最优质的BT、磁力资源BT搜索 磁力搜索 云盘搜索 影视APP 在线影视 磁力影视 种子搜索</a></td></tr><tr><td><a href="https://hao.su/531/?from=dalao.ru">免费的在线影视网站汇总 - 不死鸟 - 分享为王</a></td></tr><tr><td><a href="http://ilxdh.com/">龙轩导航-做个有用的导航</a></td></tr><tr><td><a href="https://www.btmoo.com/#">BT磁力搜索网址_BTMOO</a></td></tr></tbody></table><table><thead><tr><th>## 临时文件传输(少用百度云)</th></tr></thead><tbody><tr><td><a href="https://cowtransfer.com/">奶牛快传</a></td></tr><tr><td><a href="https://www.lanzou.com/">蓝奏云</a></td></tr><tr><td><a href="https://send.firefox.com/">Firefox Send</a></td></tr><tr><td><a href="https://www.wenshushu.cn/">文叔叔</a></td></tr></tbody></table><table><thead><tr><th>## bt磁力网站</th></tr></thead><tbody><tr><td><a href="https://hao.su/908/">bt 磁力搜索网站</a></td></tr><tr><td><a href="https://sourl.cn/PePJ7m">比特球云盘</a></td></tr><tr><td><a href="http://btfox0.org/?from=hao.su">btfox</a></td></tr><tr><td><a href="http://www.mahuazy.net/">麻花影视采集</a></td></tr><tr><td><a href="https://www.juhuitv.com/">剧汇 TV</a></td></tr><tr><td><a href="https://sourl.cn/meKnEp">萝莉岛 APP</a></td></tr><tr><td><a href="https://www.xiacoo.com/article/ajhu.html">bt 磁力网站大全</a></td></tr><tr><td><a href="https://hao.su/1492/">网页在线工具</a></td></tr></tbody></table><table><thead><tr><th>##  资讯类</th></tr></thead><tbody><tr><td><a href="https://tophub.today/">今日热榜官网</a></td></tr><tr><td><a href="https://tophub.fun/main/home/hot/0">鱼塘热榜</a></td></tr><tr><td><a href="http://www.williamlong.info/">月光博客-关注互联网和搜索引擎的IT科技博客</a></td></tr><tr><td><a href="http://www.solidot.org/">Solidot: 奇客的资讯，重要的东西</a></td></tr><tr><td><a href="http://www.ruanyifeng.com/blog/">阮一峰的网络日志</a></td></tr><tr><td><a href="http://www.ftchinese.com/">FT中文网 - 全球财经精粹</a></td></tr><tr><td><a href="https://www.cnbc.com/world/?region=world">International Business, World News &amp; Global Stock Market Analysis–CNBC</a></td></tr><tr><td><a href="https://www.scmp.com/">HK, China, Asia news &amp; opinion from SCMP’s global editionSouth China Morning Post 南华早报</a></td></tr></tbody></table><table><thead><tr><th>##  视频播放和vip解析</th></tr></thead><tbody><tr><td><a href="http://ddrk.me/">低端影视</a></td></tr><tr><td><a href="http://www.dililitv.com/">渧渧哩哩</a></td></tr><tr><td><a href="https://爱看电影.xyz/">速影TV - 免费快速在线电影网</a></td></tr><tr><td><a href="https://www.duboku.tv/">独播库</a></td></tr><tr><td><a href="https://www.yunbtv.com/">云播TV-云播,云影院,云播放,云点播,最新电影,最新电视剧</a></td></tr><tr><td><a href="https://www.dybee.tv/">电影蜜蜂-高清电影资源最新电影下载</a></td></tr><tr><td><a href="http://www.wanmeikk.me/">完美看看-海量高清电影、电视剧、动漫免费在线观看</a></td></tr><tr><td><a href="http://kiwi8.top/mov/s?url=https://m.mgtv.com/b/337284/8002740.html">kiwi视频解析</a></td></tr><tr><td><a href="http://www.guandianzhiku.com/v/s/?url=https://www.iqiyi.com/v_19rr575vxk.html">搜搜GIF - 解析尽在掌握</a></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>acitiviti的NativeQuery</title>
      <link href="2572672426.html"/>
      <url>2572672426.html</url>
      
        <content type="html"><![CDATA[<h3 id="有写过activiti-activiti数据库的分类"><a href="#有写过activiti-activiti数据库的分类" class="headerlink" title="有写过activiti  activiti数据库的分类 "></a>有写过activiti <a href="2197510555.html"> activiti数据库的分类 </a></h3><p>​          之前有<strong>Query接口</strong>但是自定义程度太低,针对复杂的查询还是需要**NativeQuery **还是需要用下面是我转载的一篇文章 <a href="https://www.cnblogs.com/lyh421/p/6474392.html">2017.2.21 activiti实战–第十三章–流量数据查询与跟踪（一）查询接口介绍及运行时数据查询</a></p><p><strong>第十三章 流量数据查询与跟踪</strong></p><p>本章讲解运行时与历史数据的查询方法。主要包含三种：标准查询，Native查询，CustomSql查询。</p><p><strong>13.1 Query API</strong></p><p>Activiti的查询API分为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 标准查询</span><br><span class="line">  以Java对象的方式，创建一个指定类型的Query对象，然后链式编程查询。</span><br><span class="line">  缺点：不支持复杂的查询。</span><br><span class="line">2 Nativit查询</span><br><span class="line">  采用标准SQL的方式查询，因此支持复杂的查询。</span><br><span class="line">  缺点：仅支持部分对象的查询。</span><br></pre></td></tr></table></figure><p><strong>（1）Query接口与NativeQuery</strong></p><p>Query接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 （I）Query&lt;...&gt;</span><br><span class="line">2       asc()                    T</span><br><span class="line">3       desc()                   T</span><br><span class="line">4       count()                  long</span><br><span class="line">5       singleResult()           U</span><br><span class="line">6       list()                   List&lt;U&gt;</span><br><span class="line">7       listPage(int,int)        List&lt;U&gt;</span><br></pre></td></tr></table></figure><p>NativeQuery接口（可以看到与Query无区别）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 （I）NativeQuery&lt;...&gt;</span><br><span class="line">2       asc()                    T</span><br><span class="line">3       desc()                   T</span><br><span class="line">4       count()                  long</span><br><span class="line">5       singleResult()           U</span><br><span class="line">6       list()                   List&lt;U&gt;</span><br><span class="line">7       listPage(int,int)        List&lt;U&gt;</span><br></pre></td></tr></table></figure><p>Query接口的子接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> 1 UserQuery</span><br><span class="line"> 2 GroupQuery</span><br><span class="line"> 3</span><br><span class="line"> 4 JobQuery</span><br><span class="line"> 5 ProcessDefinitionQuery</span><br><span class="line"> 6 DeploymentQuery</span><br><span class="line"> 7 ModelQuery</span><br><span class="line"> 8 TaskQuery</span><br><span class="line"> 9 ExecutionQuery</span><br><span class="line">10 ProcessInstanceQuery</span><br><span class="line">11</span><br><span class="line">12 HistroricProcessInstanceQuery</span><br><span class="line">13 HistroricTaskInstanceQuery</span><br><span class="line">14 HistroricActivityInstanceQuery</span><br><span class="line">15 HistroricDetailQuery</span><br><span class="line">16 HistroricVariableInstanceQuery</span><br></pre></td></tr></table></figure><p>NativeQuery接口的子接口（正如前面所说，NativeQuery只支持部分流程对象）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> 1 UserQuery</span><br><span class="line"> 2 GroupQuery</span><br><span class="line"> 3</span><br><span class="line"> 4 JobQuery</span><br><span class="line"> 5 ProcessDefinitionQuery</span><br><span class="line"> 6 DeploymentQuery</span><br><span class="line"> 7 ModelQuery</span><br><span class="line"> 8 NativeTaskQuery</span><br><span class="line"> 9 NativeExecutionQuery</span><br><span class="line">10 NativeProcessInstanceQuery</span><br><span class="line">11</span><br><span class="line">12 NativeHistroricProcessInstanceQuery</span><br><span class="line">13 NativeHistroricTaskInstanceQuery</span><br><span class="line">14 NativeHistroricActivityInstanceQuery</span><br><span class="line">15 HistroricDetailQuery</span><br><span class="line">16 HistroricVariableInstanceQuery</span><br></pre></td></tr></table></figure><p><strong>（2）使用xxxService创建查询</strong></p><p>运行时与历史数据涉及到的Service有：RuntimeService，TaskService，HistoryService。</p><p>这里以TaskService为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 （I）TaskService</span><br><span class="line">2    createTaskQuery（）             TaskQuery</span><br><span class="line">3    createNativeTaskQuery（）       NativeTaskQuery</span><br></pre></td></tr></table></figure><p><strong>13.2 运行时数据查询</strong></p><p>运行时涉及到的Service是：RuntimeService，TaskService。</p><p><strong>（1）流程对象对应的数据库表</strong></p><p>Activiti提供了通过流程对象获取对应表名的接口，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 String tableName &#x3D; managementService.getTableName(Task.Class)</span><br><span class="line">&#x2F;&#x2F;此时返回的tableName &#x3D; &quot;ACT_RU_TASK&quot;</span><br></pre></td></tr></table></figure><p>下面列出流程对象对应的数据库表名。</p><table><thead><tr><th>类名</th><th>表名</th></tr></thead><tbody><tr><td>**.task.Task</td><td>ACT_RU_TASK</td></tr><tr><td>**.runtime.Job</td><td>ACT_RU_JOB</td></tr><tr><td>**.runtime.Execution</td><td>ACT_RU_EXECUTION</td></tr><tr><td>**.runtime.ProcessInstance</td><td>ACT_RU_<strong>EXECUTION</strong></td></tr><tr><td>**.repository.ProcessDefinition</td><td>ACT_RE_PROCDEF</td></tr><tr><td>**.repository.Deployment</td><td>ACT_RE_DEPLOYMENT</td></tr><tr><td>**.history.HistoricProcessInstance</td><td>ACT_HI_PROCINST</td></tr><tr><td>**.history.HistoricActivityInstance</td><td>ACT_HI_ACTINST</td></tr><tr><td>**.history.HistoricDetail</td><td>ACT_HI_<strong>DETAIL</strong></td></tr><tr><td>**.history.HistoricVariableUpdate</td><td>ACT_HI_<strong>DETAIL</strong></td></tr><tr><td>**.history.HistoricFormProperty</td><td>ACT_HI_<strong>DETAIL</strong></td></tr><tr><td>**.history.HistoricTaskInstance</td><td>ACT_HI_TASKINST</td></tr><tr><td>**.history.HistoricVariableInstance</td><td>ACT_HI_VARINST</td></tr></tbody></table><p><strong>（2）任务查询</strong></p><p>任务查询的时候，一般都需要满足<strong>分页查询</strong>的要求。所以标准查询无法做到，采用Native查询。从前面的接口介绍中可以看出，<strong>Native</strong>TaskQuery是有的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 List&lt;Task&gt; tasks &#x3D; taskService.createNativeTaskQuery()</span><br><span class="line">2                    .sql(&quot;SELECT * FROM ACT_RU_TASK T WHERE T.NAME_ &#x3D; #&#123;taskName&#125;&quot; ) &#x2F;&#x2F;此处的表明也可通过managementService.getTableName(Task.Class)获得</span><br><span class="line">3                    .parameter(&quot;taskName&quot;,&quot;人事审批&quot;)</span><br><span class="line">4                    .listPage()；&#x2F;&#x2F;使用list()则不分页</span><br></pre></td></tr></table></figure><p>如果不需要分页，采用标准查询也可以完成task的查询功能。</p><p>如果要条件查询，只需要修改sql语句，把 = 换做 like 即可。</p><p><strong>（2）查询参与的流程</strong></p><p>需求：查询已经办理过的流程，以及跟踪流程的办理情况。</p><p>使用标准查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 &#x2F;&#x2F;第9章时已经介绍过ProcessInstance与Execution的关系为一对多</span><br><span class="line">2 List&lt;ProcessInstance&gt; processInstanceList &#x3D; runtimeService.createProcessInstanceQuery().list();</span><br><span class="line">3</span><br><span class="line">4 List&lt;Execution&gt; executionList &#x3D; runtimeService.createExecutionQuery().list();</span><br></pre></td></tr></table></figure><p>但是ProcessInstanceQuery与ExecutionQuery均没有提供”查询某个用户相关的流程”这个接口。所以这时需要用到Native查询。</p><p>native查询的用法前面已经讲过。sql语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 --用于native查询的sql语句</span><br><span class="line">2 SELECT RES.* FROM ACT_RU_EXECUTION RES</span><br><span class="line">3 LEFT JOIN ACT_HI_TASKINST ART</span><br><span class="line">4 ON ART.PROC_INST_ID_ &#x3D; RES.PROC_INST_ID_</span><br><span class="line">5 WHERE ART.ASSIGNEE_ &#x3D; #&#123;userId&#125;</span><br><span class="line">6 AND ACT_ID_ IS NOT NULL</span><br><span class="line">7 AND IS_ACTIVE_ &#x3D; &#39;TRUE&#39;</span><br><span class="line">8 ORDER BY START_TIME_ DESC</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu目前经常用到的命令</title>
      <link href="1501012444.html"/>
      <url>1501012444.html</url>
      
        <content type="html"><![CDATA[<h3 id="最近常用的方法"><a href="#最近常用的方法" class="headerlink" title="最近常用的方法"></a>最近常用的方法</h3><ul><li><p>Linux下软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/node-v12.16.2-linux-x64/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/node-v12.16.2-linux-x64/npm /usr/<span class="built_in">local</span>/bin/npm</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/usr/local/node-v12.16.2-linux-x64/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line">sudo chown  -R leek node-v12.16.2-linux-x64  更改用户权限</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>终端走代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:7890   </span><br><span class="line">export ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:7891</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派天翼云盘目录索引</title>
      <link href="759123676.html"/>
      <url>759123676.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://ventoso.top/2020/03/13/sharelist/">或许是最好用的天翼云目录索引程序-sharelist</a></p><p>sharelist <a href="https://github.com/reruin/sharelist">项目地址</a></p><p>1 该项目需要先有nodejs的环境,注意树莓派arm版本的</p><blockquote><p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><p> npm install -g pm2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|   ShareList is installing ...</span><br><span class="line">install.sh: 29: install.sh: npm: not found</span><br><span class="line">install.sh: 30: install.sh: npm: not found</span><br><span class="line">install.sh: 32: install.sh: pm2: not found</span><br><span class="line">install.sh: 33: install.sh: pm2: not found</span><br><span class="line">install.sh: 34: install.sh: pm2: not found</span><br></pre></td></tr></table></figure><p>中间出现问题安装完npm还有这个问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;+============================================================+&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;|                    ShareList Installer                     |&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;|                                                            |&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;|                                         &lt;reruin@gmail.com&gt; |&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;|------------------------------------------------------------|&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;|                                         https://reruin.net |&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;+============================================================+&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n|   ShareList is installing ... &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deps</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="subst">$(command -v apt-get)</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  apt-get install -y curl &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">  curl -sL https://deb.nodesource.com/setup_8.x | bash - &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">  apt-get install -y nodejs &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">elif</span> [ -n <span class="string">&quot;<span class="subst">$(command -v yum)</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  yum install -y curl &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">  curl --silent --location https://rpm.nodesource.com/setup_8.x | bash - &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">  yum install -y nodejs &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line">npm install pm2 -g</span><br><span class="line"></span><br><span class="line">pm2 start app.js --name sharelist --env prod</span><br><span class="line">pm2 save</span><br><span class="line">pm2 startup</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;|\n|   Success: ShareList has been installed\n|&quot;</span></span><br></pre></td></tr></table></figure><p>看了下是在29行出问题的</p><blockquote><p> pm2 list</p><p> pm2 show  applicationName</p><p>pm2 start 会运行当前目录下的app.js</p></blockquote><p>加入后管理按钮就在页面下面</p><p><img src="../img/1587285755580.png" alt="1587285755580"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 天翼云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中axios中post跨域SpringBoot获取不到RequestBody数据</title>
      <link href="552952049.html"/>
      <url>552952049.html</url>
      
        <content type="html"><![CDATA[<p>目前使用axios实现vue中与后台数据交互,目前GET,DELETE都是正常使用,但是会有跨域的问题,我就是临时在返回头加上了Access-Control-Allow-Origin:”*”</p><p>但是一直由于POST提交数据后台数据一直获取不到RequestBody,我之前使用postman测试都是可以通过的,显示<strong>status failure</strong>后台也根本不报错,因为获取不到</p><p>开始是以为是我格式问题换了几种数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">&#x27;http://localhost:8080/xxx/model/&#x27;</span> + path, modelIds).then(response = &gt; &#123;<span class="built_in">this</span>.searchContent()</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line">axios.post(<span class="string">&#x27;http://localhost:8080/xxx/process/model/27501&#x27;</span>, &#123;</span><br><span class="line">    comment: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    userName: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    headers: &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;,</span><br><span class="line">    data: modelIds,</span><br><span class="line">    url: <span class="string">&#x27;http://localhost:8080/xxx/model/&#x27;</span> + path</span><br><span class="line">&#125;;</span><br><span class="line">axios(options)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有就是PUT提交时 application/x-www-form-urlencoded,后台用RequestParam,或者不写都可以接受,对象的话要set,get方法,我刚开始用的form-data,SpringBoot是获取不到数据的</p><p>我目前用的是nginx,代理</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的next主题换到Yelee(Yilia)</title>
      <link href="1815339691.html"/>
      <url>1815339691.html</url>
      
        <content type="html"><![CDATA[<p>原有的主题是已经配过valine的 <a href="https://valine.js.org/configuration">配置valine</a>,</p><p>需要注意下面的配置</p><p>本主题基于主题 <a href="https://github.com/litten/hexo-theme-yilia">Hexo-Theme-Yilia</a> 修改而来，在此再次感谢原作者 <a href="http://litten.github.io/">Litten</a>。修复了一些 bugs，改变了大量的样式，添加了不少特性。对原主题百般折腾后，发觉变动越来越大，</p><p>索性就发布个新主题了，主题随我微博名 “夜Yelee” 。个人喜欢简洁的样式，重视内容的浏览，</p><p>同时希望作为个人网站的博客，能稍微凸显出博主个性。各种修改折腾大抵基于以上考虑。</p><h4 id="layout-partial-post-nav-ejs"><a href="#layout-partial-post-nav-ejs" class="headerlink" title="layout/_partial/post/nav.ejs"></a>layout/_partial/post/nav.ejs</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.valine</span> &amp;&amp; <span class="attr">theme.valine.appid</span> &amp;&amp; <span class="attr">theme.valine.appkey</span>)&#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">class</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin:30px;padding:15px;background:#fff&#125; &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">800px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.comments</span> &#123;</span></span><br><span class="line">                margin: auto;</span><br><span class="line">                padding: 10px;</span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>(&#x27;<span class="attr">..</span>/<span class="attr">comments</span>/<span class="attr">valine</span>&#x27;, &#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">key:</span> <span class="attr">post.slug</span>,</span></span><br><span class="line"><span class="tag">        <span class="attr">title:</span> <span class="attr">post.title</span>,</span></span><br><span class="line"><span class="tag">        <span class="attr">url:</span> <span class="attr">config.url</span>+<span class="attr">url_for</span>(<span class="attr">post.path</span>)</span></span><br><span class="line"><span class="tag">        &#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure><h4 id="layout-partial-comments-valine-ejs"><a href="#layout-partial-comments-valine-ejs" class="headerlink" title="layout/_partial/comments/valine.ejs"></a>layout/_partial/comments/valine.ejs</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vcomment&quot;</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--载入js，在 body之前插入即可--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Leancloud 操作库:--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Valine 的核心代码库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;//cdn.jsdelivr.net/npm/valine/dist/Valine.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> notify = <span class="string">&#x27;&lt;%= theme.valine.notify %&gt;&#x27;</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> verify = <span class="string">&#x27;&lt;%= theme.valine.verify %&gt;&#x27;</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Valine(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// AV 对象来自上面引入av-min.js(老司机们不要开车➳♡゛扎心了老铁)</span></span></span><br><span class="line">        av: AV,</span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#vcomment&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        emoticon_url: <span class="string">&#x27;https://cloud.panjunwen.com/alu&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        emoticon_list: [<span class="string">&quot;狂汗.png&quot;</span>, <span class="string">&quot;不说话.png&quot;</span>, <span class="string">&quot;汗.png&quot;</span>, <span class="string">&quot;坐等.png&quot;</span>, <span class="string">&quot;献花.png&quot;</span>, <span class="string">&quot;不高兴.png&quot;</span>, <span class="string">&quot;中刀.png&quot;</span>, <span class="string">&quot;害羞.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;皱眉.png&quot;</span>, <span class="string">&quot;小眼睛.png&quot;</span>, <span class="string">&quot;暗地观察.png&quot;</span></span></span><br><span class="line">        ],</span><br><span class="line"><span class="javascript">        app_id: <span class="string">&#x27;&lt;%= theme.valine.appid %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        app_key: <span class="string">&#x27;&lt;%= theme.valine.appkey %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        placeholder: <span class="string">&#x27;&lt;%= theme.valine.placeholder %&gt;&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.location.hash) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> checkExist = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="built_in">window</span>.location.hash.replace(<span class="string">&quot;#&quot;</span>, <span class="string">&quot;&quot;</span>))) &#123;</span></span><br><span class="line"><span class="javascript">                location.href = <span class="built_in">window</span>.location.hash;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">clearInterval</span>(checkExist);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 250);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>起初参考<a href="https://blog.xxwhite.com/2017/Valine.html">MonoLogueChi博客</a>,不知道什么原因:( 在主页的界面的每个标题下面都有一个留言的窗口</p><p>于是我将加到 <code>ARTICLE.EJS</code> 换了地方 <code>themes/hexo-theme-yelee/layout/_partial/post/nav.ejs</code> ,注意换了路径需要将</p><blockquote><p>&lt;%- partial(‘../comments/valine’, {<br>key: post.slug,<br>title: post.title,<br>url: config.url+url_for(post.path)<br>}) %&gt;</p></blockquote><p>中的<code>../POST/valine</code>相对地址也跟着换掉</p><h3 id="自动生成摘要"><a href="#自动生成摘要" class="headerlink" title="自动生成摘要"></a>自动生成摘要</h3><p><a href="http://moxfive.coding.me/yelee/2.Basic-Usage/post-excerpt.html">官方推荐的文章摘要格式</a></p><blockquote><h3 id="方法一-lt-more-gt"><a href="#方法一-lt-more-gt" class="headerlink" title="方法一: &lt;!-- more --&gt;"></a>方法一: <code>&lt;!-- more --&gt;</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; title: Hello World&gt; date: 2015-12-03 00:00:00&gt; ---&gt; &lt;Excerpt in index | 首页摘要&gt;&gt;</span><br><span class="line">&lt;!-- more --&gt;&gt;</span><br><span class="line">&lt;The rest of contents | 余下全文&gt;&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p><code>&lt;!-- more --&gt;</code> 之前最好不要有空格等字符；</p></blockquote><h3 id="方法二-description-in-Front-matter"><a href="#方法二-description-in-Front-matter" class="headerlink" title="方法二: description in Front-matter"></a>方法二: <code>description</code> in <a href="https://hexo.io/zh-cn/docs/front-matter.html">Front-matter</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; title: Hello World&gt; date: 2015-12-03 00:00:00&gt; +description: &quot;Welcome to Hexo! This is your very first post.&quot;&gt;</span><br><span class="line">---&gt; &lt;Contents&gt;&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>通过 <code>description</code> 添加的摘要只能为纯文本；</p></blockquote></blockquote><p>但是很复杂每次写的时候都要添加对于标签重复劳动,对于之前的文章都要这样去设置很机械,后面发现了</p><p>有 <code>hexo-auto-excerpt</code> 可以使用</p><ol><li><p>npm install –save hexo-auto-excerpt</p></li><li><p>将<code>layout/_partial/article.ejs</code>，在<code>div.article-entry</code>中的代码换成下面的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (index)&#123; %&gt;</span><br><span class="line">      &lt;% if (post.excerpt) &#123; %&gt;</span><br><span class="line">      &lt;%- post.excerpt %&gt;</span><br><span class="line">      &lt;% &#125; else if (theme.auto_excerpt.enable) &#123; %&gt;</span><br><span class="line">      &lt;% var br_position &#x3D; 0 %&gt;</span><br><span class="line">      &lt;% for (var br_count &#x3D; 0; br_count &lt; theme.auto_excerpt.lines; br_count++) &#123; %&gt;</span><br><span class="line">      &lt;% br_position &#x3D; post.content.indexOf(&#39;\n&#39;,br_position + 1) %&gt;</span><br><span class="line">      &lt;% if(br_position &lt; 0) &#123; break &#125; %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">      &lt;% if(br_position &gt; 0) &#123; %&gt;</span><br><span class="line">      &lt;% show_all_content &#x3D; false %&gt;</span><br><span class="line">      &lt;p&gt;&lt;%- post.content.substring(0, br_position + 1) %&gt;&lt;p&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">          &lt;% &#125; else &#123; %&gt;</span><br><span class="line">          &lt;%- partial(&#39;toc&#39;, &#123; post: post&#125;) %&gt;</span><br><span class="line">          &lt;%- post.content %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>_config.yml 添加下面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line"> enable: true</span><br><span class="line"> lines: 3</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://whyour.cn/post/hexo-yilia-auto-excerpt.html">hexo博文摘要生成方案</a></p><h3 id="Yelee-Yilia-打赏和调节版本署名的样式"><a href="#Yelee-Yilia-打赏和调节版本署名的样式" class="headerlink" title="Yelee(Yilia)打赏和调节版本署名的样式"></a>Yelee(Yilia)打赏和调节版本署名的样式</h3><p>yelee没有打赏功能目前需要自己实现目前需要修改</p><ol><li><p>_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打赏</span></span><br><span class="line"><span class="attr">donate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment">#设定打赏功能是否可用</span></span><br><span class="line">  <span class="attr">reward_wording:</span> <span class="string">加个鸡腿</span></span><br><span class="line">  <span class="attr">wechat:</span> <span class="string">/pics/weixin.png</span> <span class="comment">#微信二维码图片的路径</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/pics/alipay.jpg</span> <span class="comment">#支付宝二维码图片的路径</span></span><br><span class="line"><span class="comment"># 打赏</span></span><br><span class="line"><span class="comment"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span></span><br><span class="line"><span class="attr">reward_type:</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 打赏wording</span></span><br><span class="line"><span class="attr">reward_wording:</span> <span class="string">&#x27;加个鸡腿&#x27;</span></span><br><span class="line"><span class="comment"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/pics/weixin.png</span></span><br><span class="line"><span class="comment"># 微信二维码图片地址</span></span><br><span class="line"><span class="attr">weixin:</span> <span class="string">/pics/alipay.jpg</span></span><br><span class="line"><span class="comment"># rss配置</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br></pre></td></tr></table></figure></li><li><p>layout/_partial/post/nav.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (((theme.reward_type &#x3D;&#x3D;&#x3D; 2 &amp;&amp; !post.reward) || (theme.reward_type &#x3D;&#x3D;&#x3D; 1 &amp;&amp; post.reward)) &amp;&amp; !index)&#123; %&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;&#x2F;share&#x2F;reward.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;page-reward&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;javascript:;&quot; class&#x3D;&quot;page-reward-btn tooltip-top&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;tooltip tooltip-east&quot;&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;tooltip-item&quot;&gt;</span><br><span class="line">                赏</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;tooltip-content&quot;&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;tooltip-text&quot;&gt;</span><br><span class="line">                    &lt;span class&#x3D;&quot;tooltip-inner&quot;&gt;</span><br><span class="line">                        &lt;p class&#x3D;&quot;reward-p&quot;&gt;&lt;i class&#x3D;&quot;icon icon-quo-left&quot;&gt;&lt;&#x2F;i&gt;&lt;%&#x3D; theme.reward_wording%&gt;&lt;i</span><br><span class="line">                                class&#x3D;&quot;icon icon-quo-right&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;reward-box&quot;&gt;</span><br><span class="line">                            &lt;% if(theme.alipay) &#123;%&gt;</span><br><span class="line">                            &lt;div class&#x3D;&quot;reward-box-item&quot;&gt;</span><br><span class="line">                                &lt;img class&#x3D;&quot;reward-img&quot; src&#x3D;&quot;&lt;%&#x3D; theme.alipay%&gt;&quot;&gt;</span><br><span class="line">                                &lt;span class&#x3D;&quot;reward-type&quot;&gt;支付宝&lt;&#x2F;span&gt;</span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line">                            &lt;% &#125; %&gt;</span><br><span class="line">                            &lt;% if(theme.weixin) &#123;%&gt;</span><br><span class="line">                            &lt;div class&#x3D;&quot;reward-box-item&quot;&gt;</span><br><span class="line">                                &lt;img class&#x3D;&quot;reward-img&quot; src&#x3D;&quot;&lt;%&#x3D; theme.weixin%&gt;&quot;&gt;</span><br><span class="line">                                &lt;span class&#x3D;&quot;reward-type&quot;&gt;微信&lt;&#x2F;span&gt;</span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line">                            &lt;% &#125; %&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>最后是在source下的share文件夹下保存css文件 地址../share/reward.css</p></li></ol><p>修改版本署名的样式 /themes/hexo-theme-yelee/layout/_partial/post/nav.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;is_copyright&quot;&gt;</span><br><span class="line">&lt;ui class&#x3D;post-copyright&gt;</span><br><span class="line">   &lt;li&gt;&lt;strong&gt;&lt;%&#x3D; __(&#39;copyright_info.title&#39;) %&gt;:&lt;&#x2F;strong&gt;&lt;a href&#x3D;&quot;&lt;%- url_for(post.path) %&gt;&quot;&gt;&lt;%&#x3D; post.title %&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;strong&gt;&lt;%&#x3D; __(&#39;copyright_info.author&#39;) %&gt;:&lt;&#x2F;strong&gt;&lt;a href&#x3D;&quot;&#x2F;&quot; title&#x3D;&quot;&lt;%&#x3D; __(&#39;tooltip.back2home&#39;) %&gt;&quot;&gt;&lt;%&#x3D;theme.author%&gt;&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;     &lt;li&gt;&lt;strong&gt;&lt;%&#x3D; __(&#39;copyright_info.date&#39;) %&gt;:&lt;&#x2F;strong&gt;&lt;%&#x3D; post.date.format(&quot;YYYY-MM-DD, HH:mm:ss&quot;) %&gt;  &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt; &lt;strong&gt;&lt;%&#x3D; __(&#39;copyright_info.updated&#39;) %&gt;:&lt;&#x2F;strong&gt;&lt;%&#x3D; post.updated.format(&quot;YYYY-MM-DD, HH:mm:ss&quot;) %&gt; &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;strong&gt;&lt;%&#x3D; __(&#39;copyright_info.url&#39;) %&gt;:&lt;&#x2F;strong&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;post-url&quot; href&#x3D;&quot;&lt;%- url_for(post.path) %&gt;&quot; title&#x3D;&quot;&lt;%&#x3D; post.title %&gt;&quot;&gt;&lt;%&#x3D; post.permalink %&gt;&lt;&#x2F;a&gt;         &lt;strong class&#x3D;&quot;copy-path&quot; data-clipboard-text&#x3D;&quot;&lt;%&#x3D; __(&#39;copyright_info.from&#39;) %&gt; &lt;%&#x3D; post.permalink %&gt;</span><br><span class="line"> &lt;%&#x3D; __(&#39;copyright_info.by&#39;) %&gt; &lt;%&#x3D;theme.author%&gt;&quot; title&#x3D;&quot;&lt;%&#x3D; __(&#39;tooltip.copyPath&#39;) %&gt;&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;fa fa-clipboard&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;strong&gt;         &lt;script&gt; var clipboard &#x3D; new Clipboard(&#39;.copy-path&#39;); &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;         &lt;strong&gt;&lt;%&#x3D; __(&#39;copyright_info.license&#39;) %&gt;:&lt;&#x2F;strong&gt;&lt;i class&#x3D;&quot;fa fa-creative-commons&quot;&gt;&lt;&#x2F;i&gt; &lt;a rel&#x3D;&quot;license&quot; href&#x3D;&quot;http:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;4.0&#x2F;&quot; title&#x3D;&quot;CC BY-NC-SA 4.0 International&quot; target &#x3D; &quot;_blank&quot;&gt;&quot;&lt;%&#x3D; __(&#39;copyright_info.cc&#39;) %&gt;&quot;&lt;&#x2F;a&gt; &lt;%&#x3D; __(&#39;copyright_info.notice&#39;) %&gt;    &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ui&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="代码区前后有很多空行"><a href="#代码区前后有很多空行" class="headerlink" title="代码区前后有很多空行"></a>代码区前后有很多空行</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-entry</span></span><br><span class="line"><span class="selector-tag">pre</span>, <span class="selector-tag">code</span>    <span class="selector-tag">font-family</span>: <span class="selector-tag">font-mono</span>, <span class="selector-tag">monospace</span>, <span class="selector-tag">font-chs</span>    <span class="selector-tag">font-size</span>: 1<span class="selector-tag">em</span></span><br><span class="line">## 后面加这几个</span><br><span class="line">.line:after    content: &#x27;&#x27;    display: inline-block;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/MOxFIVE/hexo-theme-yelee/issues/142#issuecomment-253408991">解决链接</a></p><h3 id="添加统计字数"><a href="#添加统计字数" class="headerlink" title="添加统计字数"></a>添加统计字数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (post.tags &amp;&amp; post.tags.length)&#123; %&gt;-</span><br><span class="line">&lt;div class&#x3D;&quot;article-tag tagcloud&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;article-tag tagcloud&quot; style&#x3D;&quot;display: flex; flex-wrap: wrap&quot;&gt;</span><br><span class="line">        &lt;%-          list_tags(post.tags, &#123;            show_count: false,            class: &#39;article-tag&#39;          &#125;)        %&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;post-count&quot;&gt;总字数&lt;%&#x3D; wordcount(post.content) %&gt;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;post-count&quot;&gt;预计阅读&lt;%&#x3D; min2read(post.content) %&gt;分钟&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Yelee </tag>
            
            <tag> Yilia </tag>
            
            <tag> hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用yandex搭建自定义域名的邮件服务</title>
      <link href="2045142583.html"/>
      <url>2045142583.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.daweibro.com/node/255">2019年最新Yandex免费域名邮箱申请使用全攻略</a></p><p>我注册的域名是免费的 <a href="https://my.freenom.com/clientarea.php">注册ml域名的地址</a>下面的注册好的列表</p><p>注册不成功显示 Not available 可以使用这个入口<a href="http://www.point.ml/en/index.html?lang=en">http://www.point.ml/en/index.html?lang=en</a></p><p><a href="../img/1586576471104.png"><img src="../img/1586576471104.png" alt="1586576471104"></a></p><p>刚开始用的是<a href="https://www.bajiedns.com/%E8%BF%99%E4%B8%AAdns,%E4%BD%86%E6%98%AF%E9%85%8D%E7%BD%AE%E5%90%8E%E4%BE%9D%E7%85%A7%E6%B2%A1%E5%8F%8D%E5%BA%94">https://www.bajiedns.com/这个dns,但是配置后依照没反应</a> dns.la,he dns.com 这两个都要手机号码而且后面操作也麻烦,我后面选择<a href="https://www.dnspod.cn/">dnspod</a>之前用的就是这个后面是要变收费 ,看页面也没提免费解析,</p><p>1 .修改nameservr(NS)-&gt;f1g1ns1.dnspod.net ,f1g1ns2.dnspod.net.</p><p>2 .验证这个域名是你的在yandex哪会有 yandex-verification 的部分</p><p>3 .解析域名到mx.yandex.com 这样才能使用他们的邮件服务</p><p>4 .添加一个TXT记录，子域名为“mail._domainkey”，值为“v=DKIM1; k=rsa; t=s jjj”。</p><p><a href="../img/1586576874444.png"><img src="../img/1586576874444.png" alt="1586576874444"></a></p><p>上述配置完后就可以使用 adduser 创建用户后,注意创建后也要在网页<a href="https://mail.yandex.com登陆同意协议后方能使用/">https://mail.yandex.com登陆同意协议后方能使用</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IMAP：imap.yandex.com 端口：993(SSL)</span><br><span class="line">POP3：pop.yandex.com 端口：995(SSL)</span><br><span class="line">SMTP：smtp.yandex.com 端口：465(SSL)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mail </tag>
            
            <tag> yandex </tag>
            
            <tag> 域名 </tag>
            
            <tag> 邮件服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu进程(daemon)管理,启动和停止</title>
      <link href="1520204912.html"/>
      <url>1520204912.html</url>
      
        <content type="html"><![CDATA[<p>systemctl list-units –all –type=service</p><p>systemctl list-units –all –type=service –no-pager</p><p><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html">Systemd 入门教程：命令篇</a></p><p>ystemd 是 Linux 系统工具，用来启动<a href="http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html">守护进程</a>，已成为大多数发行版的标准配置。</p><p>正确使用的一种，利用systemctl命令。 您的系统可能使用其他服务初始化命令，例如常用服务。 但是，当命令systemctl可用时，使用list-units选项应该会产生良好的结果。 添加了一些额外的参数，这些参数可以自行解释。</p><h3 id="Linux启动过程"><a href="#Linux启动过程" class="headerlink" title="Linux启动过程"></a>Linux启动过程</h3><p>也可以设置每次登录自动执行脚本，在/etc/profile.d/目录下新建sh脚本，<br>/etc/profile会遍历/etc/profile.d/*.sh</p><p>另外，几个脚本的区别：<br>（1） /etc/profile： 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从/etc/profile.d目录的配置文件中搜集shell的设置。</p><p>（2） /etc/bashrc: 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取（即每次新开一个终端，都会执行bashrc）。</p><p>（3） ~/.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次。默认情况下,设置一些环境变量,执行用户的.bashrc文件。</p><p>（4） ~/.bashrc: 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。</p><p>（5） <del>/.bash_logout: 当每次退出系统(退出bash shell)时,执行该文件. 另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而</del>/.bashrc等中设定的变量(局部)只能继承 /etc/profile中的变量,他们是”父子”关系。</p><p>（6） <del>/.bash_profile: 是交互式、login 方式进入 bash 运行的</del>/.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。</p><p><a href="javascript:;"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派内网穿透</title>
      <link href="2070834639.html"/>
      <url>2070834639.html</url>
      
        <content type="html"><![CDATA[<p>下面是我了解的提供内网穿透的网站,也可以使用比较传统的花生壳</p><ul><li><p><a href="https://www.natfrp.com/">Sakura Frp </a>我用的这个</p></li><li><p><a href="http://www.ngrok.cc/">Sunny-Ngrok </a>支持ngrok,frp两种客户端 还是推荐的</p></li><li><p><a href="https://natapp.cn/">natapp</a> 第一个pass 要手机号码注册而且后面使用其服务还要实名(支付宝验证)</p></li><li><p><a href="../xiaomy.net">网云穿内网穿透</a></p><p>这个看介绍还不错 但是没有树莓派的软件,树莓派目前的 linux-arm不能用64位的,它提供的是wyc_linux_64所以就放弃的,但是它有提供Java版,但是要配置jre环境就算了</p></li></ul><p><a href="../img/1586077499502.png"><img src="../img/1586077499502.png" alt="1586077499502"></a></p><p>大概使用Sakura Frp步骤</p><ol><li><p>下载对应的软件</p><p>这个是注意事项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于客户端更新，所有用户将需要重新下载最新版本的客户端，请老用户访问左侧软件下载获取最新版本客户端。**为了避免滥用，所有国内节点将不会转发未实名用户的HTTP流量（特指使用TCP隧道建立的对HTTP协议web服务器的映射），如希望使用国内节点建站请实名认证或加群(747976298)联系我(Q:2792020)并提供已备案的域名然后使用HTTP&#x2F;HTTPS隧道。**</span><br></pre></td></tr></table></figure><p><a href="https://qianqu.me/frp/frpc_linux_arm">https://qianqu.me/frp/frpc_linux_arm</a> 下载树莓派的链接</p></li><li><p>创建隧道</p><p><a href="../img/1586077969123.png"><img src="../img/1586077969123.png" alt="1586077969123"></a></p></li><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x frpc_linux_arm    </span><br><span class="line">将文件传输到你创建的文件下面  </span><br><span class="line">sudo .&#x2F;frpc_linux_arm         </span><br><span class="line">完成后在平级的文件夹下面会有frp_user.txt的配置文件      然后在终端下面会显示</span><br></pre></td></tr></table></figure></li></ol><p>本地：127.0.0.1:80 请把域名: yun.imlike.cc 的CNAME记录更改为: us-la-kr.sakurafrp.com (或更改A记录为: 98.126.219.155)</p><blockquote><p>此时直接访问us-la-kr.sakurafrp.com 是503 Service Unavailable错误,还有就是上面提到的告示,使用国内的节点需要通过站长的通过否则也会导致页面错误</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派nginx代理转发到本机端口</title>
      <link href="981520166.html"/>
      <url>981520166.html</url>
      
        <content type="html"><![CDATA[<p>sudo apt-get update</p><p>sudo apt-get install nginx</p><p>安装成功后 sudo /etc/init.d/nginx start 启动一下访问树莓派的IP能访问成功就可以了</p><p>选择/etc/nginx/nginx.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">   server&#123;</span><br><span class="line">            listen 80;</span><br><span class="line">            server_name yun.imlike.cc;</span><br><span class="line">             location &#x2F; &#123;</span><br><span class="line">             # 一些基本反向代理配置以及获取请求真是IP地址</span><br><span class="line">                    proxy_redirect off;</span><br><span class="line">                    proxy_set_header Host $host;</span><br><span class="line">                    proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">                    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">                    proxy_pass http:&#x2F;&#x2F;192.168.2.189:8001;</span><br><span class="line">            &#125;</span><br><span class="line">           # access_log &#x2F;home&#x2F;wwwlogs&#x2F;git.aboutme.ink.log;</span><br><span class="line">    &#125;</span><br><span class="line">       server&#123;</span><br><span class="line">            listen 80;</span><br><span class="line">            server_name portal.imlike.cc;</span><br><span class="line">             location &#x2F; &#123;</span><br><span class="line">             # 一些基本反向代理配置以及获取请求真是IP地址</span><br><span class="line">                    proxy_redirect off;</span><br><span class="line">                    proxy_set_header Host $host;</span><br><span class="line">                    proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">                    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">                    proxy_pass http:&#x2F;&#x2F;192.168.2.189:9000;</span><br><span class="line">            &#125;</span><br><span class="line">           # access_log &#x2F;home&#x2F;wwwlogs&#x2F;git.aboutme.ink.log;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sudo /etc/init.d/nginx restart 重启一下</p><h3 id="优化访问"><a href="#优化访问" class="headerlink" title="优化访问"></a>优化访问</h3><p>目前是已经知道树莓派的IP的有两种优化的</p><ol><li><p>使用host改本地访问</p><p>目前我将host改为</p><p>192.168.2.189 yun.imlike.cc<br>192.168.2.189 portal.imlike.cc</p><p>这样这两个域名将会解析到192.168.2.189IP上,由于由于nginx上面的配置会解析 server_name对应的yun.imlike.cc,portal.imlike.cc效果如下</p><p><a href="../img/1586076685372.png"><img src="../img/1586076685372.png" alt="1586076685372"></a></p></li><li><p>使用路由器改变DNS解析,使其解析到树莓派IP</p><p>该方式还没实现,原理是一样的</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派docker搭建配置</title>
      <link href="1469044090.html"/>
      <url>1469044090.html</url>
      
        <content type="html"><![CDATA[<h3 id="搭建docker环境"><a href="#搭建docker环境" class="headerlink" title="搭建docker环境"></a>搭建docker环境</h3><p>如果你过去安装过 docker，先删掉:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><p>首先安装依赖:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br></pre></td></tr></table></figure><p>信任 Docker 的 GPG 公钥:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>如果你是树莓派或其它ARM架构计算机，请运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [arch&#x3D;armhf] https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;debian \     $(lsb_release -cs) stable&quot; | \    sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list</span><br></pre></td></tr></table></figure><p>最后安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get updatesudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h2 id="使用脚本自动安装"><a href="#使用脚本自动安装" class="headerlink" title="使用脚本自动安装"></a>使用脚本自动安装</h2><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Raspbian 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun#</span><br><span class="line">$ sudo sh get-docker.sh --mirror AzureChinaCloud</span><br></pre></td></tr></table></figure><p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的稳定(stable)版本安装在系统中。</p><h2 id="启动-Docker-CE"><a href="#启动-Docker-CE" class="headerlink" title="启动 Docker CE"></a>启动 Docker CE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable docker$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="建立-docker-用户组"><a href="#建立-docker-用户组" class="headerlink" title="建立 docker 用户组"></a>建立 docker 用户组</h2><p>默认情况下，<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Unix socket</a> 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p><p>建立 <code>docker</code> 组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户加入 <code>docker</code> 组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p><strong>退出当前终端并重新登录，进行如下测试。</strong></p><h3 id="测试-Docker-是否安装正确"><a href="#测试-Docker-是否安装正确" class="headerlink" title="测试 Docker 是否安装正确"></a>测试 Docker 是否安装正确</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-worldUnable to find image &#39;hello-world:latest&#39; locallylatest: Pulling from library&#x2F;hello-world4ee5c797bcd7: Pull complete Digest: sha256:f9dfddf63636d84ef479d645ab5885156ae030f611a56f3a7ac7f2fdd86d7e4eStatus: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps:1. The Docker client contacted the Docker daemon.2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.   (arm32v7)3. The Docker daemon created a new container from that image which runs the   executable that produces the output you are currently reading.4. The Docker daemon streamed that output to the Docker client, which sent it   to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https:&#x2F;&#x2F;hub.docker.com&#x2F;For more examples and ideas, visit: https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;</span><br></pre></td></tr></table></figure><h3 id="docker-compose的安装"><a href="#docker-compose的安装" class="headerlink" title="docker-compose的安装"></a>docker-compose的安装</h3><p>开始是找的国内的镜像,但是下载一直是8k的文件不能执行打开就是文件下载失败这种内容,可能是我这个网络问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.4&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-composechmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure><p>后面我找到别的资源</p><p>至此Docker就安装好了，再安装docker compose。<br>先看有没有pip或pip3，有就直接卸了。然后安装：</p><p>Bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get remove python-pip python3-pip</span><br><span class="line">$ wget https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py$ python get-pip.py$ python3 get-pip.py</span><br></pre></td></tr></table></figure><p>然后安装一些依赖库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install python-dev python3-dev libevent-dev python-scipy libssl-dev libffi-devapt install apt-transport-https ca-certificates curl gnupg2 software-properties-commonpip install cryptography</span><br></pre></td></tr></table></figure><p>查看pip版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~# pip3 --versionpip 19.1.1 from &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.5&#x2F;dist-packages&#x2F;pip (python 3.5)root@raspberrypi:~#</span><br></pre></td></tr></table></figure><p>安装docker compose<br>这里通过pip的方式安装，所以先安装pip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install docker-compose</span><br></pre></td></tr></table></figure><p>如果你报了什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: unsupported operand type(s) for -&#x3D;: &#39;Retry&#39; and &#39;int&#39;</span><br></pre></td></tr></table></figure><p>这样的错误，多半是用了上古时代的pip，参考上述方式卸载重装，然后重启一下。如果是下面这样的错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host&#x3D;&#39;www.piwheels.org&#39;, port&#x3D;443): Read timed out.</span><br></pre></td></tr></table></figure><p><strong>是由于网络连接超时，重新执行命令就好，或者用国内镜像下载。可以多试几次</strong></p><p>安装好了查看版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~# docker-compose --versiondocker-compose version 1.24.1, build 4667896root@raspberrypi:~#</span><br></pre></td></tr></table></figure><p>sudo pip3 install docker-compose</p><h3 id="设置docker镜像"><a href="#设置docker镜像" class="headerlink" title="设置docker镜像"></a>设置docker镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https:&#x2F;&#x2F;1nj0zren.mirror.aliyuncs.com&quot;,</span><br><span class="line">        &quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">        &quot;http:&#x2F;&#x2F;f1361db2.m.daocloud.io&quot;,</span><br><span class="line">        &quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>镜像加速器 镜像加速器地址 专属加速器？ 其它加速？</th></tr></thead><tbody><tr><td>Docker 中国官方镜像    <a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></td></tr><tr><td>Docker Hub DaoCloud 镜像站    <a href="http://f1361db2.m.daocloud.io/">http://f1361db2.m.daocloud.io</a> 可登录，系统分配</td></tr><tr><td>Docker Hub Azure 中国镜像   <a href="https://dockerhub.azk8s.cn/">https://dockerhub.azk8s.cn</a></td></tr><tr><td>Docker Hub、GCR、Quay 科大镜像站    <a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></td></tr><tr><td>Docker Hub、GCR、Quay 阿里云     https://<your_code>.mirror.aliyuncs.com 需登录，系统分配</td></tr><tr><td>Docker Hub 七牛云     <a href="https://reg-mirror.qiniu.com/">https://reg-mirror.qiniu.com</a></td></tr><tr><td>Docker Hub、GCR、Quay 网易云      <a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com</a></td></tr><tr><td>Docker Hub 腾讯云     <a href="https://mirror.ccs.tencentyun.com/">https://mirror.ccs.tencentyun.com</a></td></tr></tbody></table><p>作者：y0ngb1n链接：<a href="https://juejin.im/post/5cd2cf01f265da0374189441%E6%9D%A5%E6%BA%90%EF%BC%9A%E6%8E%98%E9%87%91%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82">https://juejin.im/post/5cd2cf01f265da0374189441来源：掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p><p>### docker命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#查看 Docker 版本</span><br><span class="line">docker -&#96;&#96;vsudo</span><br><span class="line"># 仓库&#x2F;镜像:版本（留空的话默认为 latest）</span><br><span class="line">docker pull</span><br><span class="line">sudo docker run     </span><br><span class="line"># 加参数，用来创建容器查看运行容器</span><br><span class="line">sudo docker ps     </span><br><span class="line">#查看所有下载的镜像</span><br><span class="line">sudo docker images  </span><br><span class="line">#进入容器终端</span><br><span class="line">sudo docker exec -i -t ha &#x2F;bin&#x2F;bash   </span><br><span class="line">#实时查看10行的 ha 日志</span><br><span class="line">sudo docker logs -f -t --tail 10 ha </span><br><span class="line">#重启</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">#设置 Docker 开机启动</span><br><span class="line">sudo systemctl enable  docker</span><br><span class="line">#开启 Docker 服务</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用配置和工具命令"><a href="#常用配置和工具命令" class="headerlink" title="常用配置和工具命令"></a>常用配置和工具命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#查看 Docker 版本docker -vsudo docker pull 仓库&#x2F;镜像:版本（留空的话默认为 latest）</span><br><span class="line">sudo docker run </span><br><span class="line">加参数，用来创建容器#查看运行容器</span><br><span class="line">sudo docker ps</span><br><span class="line">#查看所有下载的镜像</span><br><span class="line">sudo docker images</span><br><span class="line">#进入容器终端</span><br><span class="line">sudo docker exec -i -t ha &#x2F;bin&#x2F;bash</span><br><span class="line">#实时查看10行的 ha 日志</span><br><span class="line">sudo docker logs -f -t --tail 10 ha</span><br><span class="line">#重启 systemctl 守护进程</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">#设置 Docker 开机启动</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">#开启 Docker 服务</span><br><span class="line">sudo systemctl start docker </span><br><span class="line">#下载 Docker 图形化界面 portainer</span><br><span class="line">sudo docker pull portainer&#x2F;portainer</span><br><span class="line">#创建 portainer 容器</span><br><span class="line">sudo docker volume create portainer_data</span><br><span class="line">#运行portainer</span><br><span class="line">sudo docker run -d -p 9000:9000 --name portainer --restart always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>docker images,docker ps</p><p>docker pull nextcloud</p><p>docker pull portainer/portainer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti -d --name kevin-portainer -p 9000:9000 --restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock  portainer&#x2F;portainerdocker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart unless-stopped -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock  portainer&#x2F;portainer</span><br></pre></td></tr></table></figure><p><a href="../img/1585911408361.png"><img src="../img/1585911408361.png" alt="1585911408361"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> docker volume create portainer_data</span><br><span class="line"> docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class="line">该容器命名为my_portainer，将容器中portainer默认端口9000，映射到宿主机端口9000，使用socket映射 /var/run/docker.sock:/var/run/docker.sock，指定volume映射（即将portainer_volume对应的宿主机目录挂载到容器的/data目录），容器基于portainer/portainer镜像启动</span><br></pre></td></tr></table></figure><p><a href="../img/1585911501671.png"><img src="../img/1585911501671.png" alt="1585911501671"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;home&#x2F;nextclouddocker run --name nextcloud -p 8080:80   -v &#x2F;home&#x2F;nextcloud:&#x2F;var&#x2F;www&#x2F;html&#x2F;data -d nextcloud</span><br><span class="line">参数说明：–name：设定容器名称为nextcloud-p 8080:80 ：端口映射，将宿主机8080端口映射到容器中的80端口-v &#x2F;data&#x2F;nextcloud:&#x2F;var&#x2F;www&#x2F;html&#x2F;data将容器中项目的data目录映射到本地&#x2F;data&#x2F;nextcloud目录下方便配置和数据保存-d 是以后台形式启动</span><br></pre></td></tr></table></figure><p><a href="../img/1585911463432.png"><img src="../img/1585911463432.png" alt="1585911463432"></a></p><p><a href="https://cloud.tencent.com/developer/article/1371476">https://cloud.tencent.com/developer/article/1371476</a></p><p>中间找不文件就选择下面这个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;lib&#x2F;find . -name &quot;config.php&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派设置用户和ssh,VN连接</title>
      <link href="2385605860.html"/>
      <url>2385605860.html</url>
      
        <content type="html"><![CDATA[<p>启动后的树莓派页面</p><p><a href="../img/1585892445445.png"><img src="../img/1585892445445.png" alt="1585892445445"></a></p><h2 id="ssh-连接使用private-key"><a href="#ssh-连接使用private-key" class="headerlink" title="ssh 连接使用private-key"></a>ssh 连接使用private-key</h2><p>首先是需要你已经生成了本地的秘钥,然后将本地的公钥加入到对方的authorized_keys中ssh-copy-id传过去</p><p>否则可以直接用用户和密码登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub | ssh  USERNAME@IP-ADDRESS &#39;cat &gt;&gt; .ssh&#x2F;authorized_keys&#39;ssh-copy-id YOU-USERNAME@IP-ADDRESS</span><br></pre></td></tr></table></figure><h3 id="设置国内源"><a href="#设置国内源" class="headerlink" title="设置国内源"></a>设置国内源</h3><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/raspbian/">https://mirror.tuna.tsinghua.edu.cn/help/raspbian/</a></p><p>树莓派选择Debian 10 (buster)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 编辑 &#96;&#x2F;etc&#x2F;apt&#x2F;sources.list&#96; 文件，删除原文件所有内容，用以下内容取代：</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspbian&#x2F;raspbian&#x2F; buster main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspbian&#x2F;raspbian&#x2F; buster main non-free contrib</span><br><span class="line"># 编辑 &#96;&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;raspi.list&#96; 文件，删除原文件所有内容，用以下内容取代：</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspberrypi&#x2F; buster main ui</span><br></pre></td></tr></table></figure><h3 id="设置期间的问题"><a href="#设置期间的问题" class="headerlink" title="设置期间的问题"></a>设置期间的问题</h3><ol><li><p>sudo root 报su: 鉴定故障</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entos7 su 鉴定故障解决方法Linux(fedora\centos\ubuntu等)终端窗口运行 su 输入密码，提示鉴定失败。根据网上查询的原因是：安装linux时，未输入ROOT密码；或新建用户，勾选“设为管理员”，仅为新用户设置密码。未设置ROOT密码，系统检测失败。亲测解决方法如下：打开终端 ：sudo passwd root输入当前用户密码，然后输入设置的root密码。(重新设置root密码）</span><br></pre></td></tr></table></figure></li><li><p>sudo chmod -777 /home</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo: &#x2F;etc&#x2F;sudoers 可被任何人写sudo: 没有找到有效的 sudoers 资源，退出sudo: 无法初始化策略插件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;sudoers下面的权限修改回去需要直接修改说不定就直接出什么问题了sudo su - chmod 777 &#x2F;etc&#x2F;sudoers echo &#39;username  ALL&#x3D;(ALL)    ALL&#39; &gt;&gt; &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></li><li><p>Ubuntu vi 上下左右变ABCD问题解决方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一.执行命令 sudo apt-get remove vim-common 二 .  sudo apt-get install vimcp &#x2F;etc&#x2F;vim&#x2F;vimrc ~&#x2F;.vimrc  &#x2F;&#x2F;没网用这个</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue和element-ui初步使用</title>
      <link href="3181160514.html"/>
      <url>3181160514.html</url>
      
        <content type="html"><![CDATA[<p>是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。是一种 MVVM (Model-View-ViewModel)</p><ol><li><h3 id="使用vue首先是需要导入vue-js-下面就是简单的vue对象"><a href="#使用vue首先是需要导入vue-js-下面就是简单的vue对象" class="headerlink" title="使用vue首先是需要导入vue.js,下面就是简单的vue对象"></a>使用vue首先是需要导入vue.js,下面就是简单的vue对象</h3></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![processInstance](&#x2F;home&#x2F;leek&#x2F;桌面&#x2F;processInstance.png)&lt;div id&#x3D;&quot;app&quot;&gt;    &lt;h2&gt;&#123;&#123;name&#125;&#125; 显示&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;&lt;script src&#x3D;&quot;.&#x2F;node_modules&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;    &#x2F;&#x2F; 生成一个Vue实例    var app &#x3D; new Vue(&#123;        el:&quot;#app&quot;, &#x2F;&#x2F; el,即element。要渲染的的页面元素        data:&#123; &#x2F;&#x2F; 数据            name:&quot;like&quot;        &#125;    &#125;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ol><li><h3 id="标签绑定数据"><a href="#标签绑定数据" class="headerlink" title="标签绑定数据"></a>标签绑定数据</h3></li></ol><p>常见数据绑定的熟悉是</p><ul><li><a href="https://cn.vuejs.org/v2/api/#v-text">v-text</a> 绑定的值直接显示不解析</li><li><a href="https://cn.vuejs.org/v2/api/#v-html">v-html</a> <strong>内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译</strong></li><li><a href="https://cn.vuejs.org/v2/api/#v-show">v-show</a> 是否显示</li><li><a href="https://cn.vuejs.org/v2/api/#v-if">v-if</a> <strong>内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译</strong></li><li><a href="https://cn.vuejs.org/v2/api/#v-for">v-for</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;(item, index) in items&quot;&gt;&lt;&#x2F;div&gt;&lt;div v-for&#x3D;&quot;(val, key) in object&quot;&gt;&lt;&#x2F;div&gt; &lt;div v-for&#x3D;&quot;(val, name, index) in object&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://cn.vuejs.org/v2/api/#v-on">v-on</a> 可以用@缩写@click,@node-click</p></li><li><p><a href="https://cn.vuejs.org/v2/api/#v-bind">v-bind</a> 可以用:缩写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.prop - 作为一个 DOM property 绑定而不是作为 attribute 绑定。(差别在哪里？).camel - (2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持).sync (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。</span><br></pre></td></tr></table></figure></li></ul><ol><li><h3 id="vue的声明周期"><a href="#vue的声明周期" class="headerlink" title="vue的声明周期"></a>vue的声明周期</h3></li></ol><p><a href="../img/lifecycle.png"><img src="../img/lifecycle.png" alt="lifecycle"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var app &#x3D; new Vue(&#123;    el: &quot;#app&quot;,    data: &#123;        num: 0    &#125;,    beforeCreate() &#123;        console.log(&quot;创建前&quot;)    &#125;,    created() &#123;        console.log(&quot;创建&quot;)    &#125;,    beforeMount() &#123;        console.log(&quot;计数前&quot;)    &#125;,    mounted() &#123;        console.log(&quot;计数了&quot;)    &#125;,&#125;)</span><br></pre></td></tr></table></figure><h2 id="element-UI相关的"><a href="#element-UI相关的" class="headerlink" title="element-UI相关的"></a>element-UI相关的</h2><ol><li><h3 id="element-UI"><a href="#element-UI" class="headerlink" title="element-UI"></a>element-UI</h3><p>网站快速成型工具:一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库 <a href="https://element.eleme.cn/#/zh-CN/component/container">网站</a></p></li><li><h3 id="element-UI-目前我看到的标签-表格"><a href="#element-UI-目前我看到的标签-表格" class="headerlink" title="element-UI 目前我看到的标签(表格,)"></a>element-UI 目前我看到的标签(表格,)</h3><h4 id="标签1-gt-el-pagination-用于分页-下面是它的相关参数"><a href="#标签1-gt-el-pagination-用于分页-下面是它的相关参数" class="headerlink" title="标签1-&gt;el-pagination 用于分页 下面是它的相关参数"></a>标签1-&gt;el-pagination 用于分页 下面是它的相关参数</h4><p>Attributes</p><p>| 参数 | 说明 | 类型 | 可选值 | 默认值 |<br>| ——————- | ———————————————————— | ——– | ———————————————————— | ————————————– |<br>| small | 是否使用小型分页样式 | boolean | — | false |<br>| background | 是否为分页按钮添加背景色 | boolean | — | false |<br>| page-size | 每页显示条目个数，支持 .sync 修饰符 | number | — | 10 |<br>| total | 总条目数 | number | — | — |<br>| page-count | 总页数，total 和 page-count 设置任意一个就可以达到显示页码的功能；如果要支持 page-sizes 的更改，则需要使用 total 属性 | Number | — | — |<br>| pager-count | 页码按钮的数量，当总页数超过该值时会折叠 | number | 大于等于 5 且小于等于 21 的奇数 | 7 |<br>| current-page | 当前页数，支持 .sync 修饰符 | number | — | 1 |<br>| layout | 组件布局，子组件名用逗号分隔 | String | <code>sizes</code>, <code>prev</code>, <code>pager</code>, <code>next</code>, <code>jumper</code>, <code>-&gt;</code>, <code>total</code>, <code>slot</code> | ‘prev, pager, next, jumper, -&gt;, total’ |<br>| page-sizes | 每页显示个数选择器的选项设置 | number[] | — | [10, 20, 30, 40, 50, 100] |<br>| popper-class | 每页显示个数选择器的下拉框类名 | string | — | — |<br>| prev-text | 替代图标显示的上一页文字 | string | — | — |<br>| next-text | 替代图标显示的下一页文字 | string | — | — |<br>| disabled | 是否禁用 | boolean | — | false |<br>| hide-on-single-page | 只有一页时是否隐藏 | boolean | — | - |</p><h3 id="¶-Events"><a href="#¶-Events" class="headerlink" title="¶ Events"></a><a href="https://element.eleme.cn/#/zh-CN/component/pagination#events">¶</a> Events</h3><p>| 事件名称 | 说明 | 回调参数 |<br>| ————– | ———————————- | ——– |<br>| size-change | pageSize 改变时会触发 | 每页条数 |<br>| current-change | currentPage 改变时会触发 | 当前页 |<br>| prev-click | 用户点击上一页按钮改变当前页后触发 | 当前页 |<br>| next-click | 用户点击下一页按钮改变当前页后触发 | 当前页 |</p><h4 id="标签2-gt-el-tooltip-用于显示提示"><a href="#标签2-gt-el-tooltip-用于显示提示" class="headerlink" title="标签2-&gt;el-tooltip 用于显示提示"></a>标签2-&gt;el-tooltip 用于显示提示</h4></li></ol><p>Attributes</p><table><thead><tr><th align="center">参数</th><th align="center">说明</th><th align="center">类型</th><th align="center">可选值</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">effect</td><td align="center">默认提供的主题</td><td align="center">String</td><td align="center">dark/light</td><td align="center">dark</td></tr><tr><td align="center">content</td><td align="center">显示的内容，也可以通过 <code>slot#content</code> 传入 DOM</td><td align="center">String</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">placement</td><td align="center">Tooltip 的出现位置</td><td align="center">String</td><td align="center">top/top-start/top-end/bottom/bottom-start/bottom-end/left/left-start/left-end/right/right-start/right-end</td><td align="center">bottom</td></tr><tr><td align="center">value / v-model</td><td align="center">状态是否可见</td><td align="center">Boolean</td><td align="center">—</td><td align="center">false</td></tr><tr><td align="center">disabled</td><td align="center">Tooltip 是否可用</td><td align="center">Boolean</td><td align="center">—</td><td align="center">false</td></tr><tr><td align="center">offset</td><td align="center">出现位置的偏移量</td><td align="center">Number</td><td align="center">—</td><td align="center">0</td></tr><tr><td align="center">transition</td><td align="center">定义渐变动画</td><td align="center">String</td><td align="center">—</td><td align="center">el-fade-in-linear</td></tr><tr><td align="center">visible-arrow</td><td align="center">是否显示 Tooltip 箭头，更多参数可见<a href="https://github.com/element-component/vue-popper">Vue-popper</a></td><td align="center">Boolean</td><td align="center">—</td><td align="center">true</td></tr><tr><td align="center">popper-options</td><td align="center"><a href="https://popper.js.org/documentation.html">popper.js</a> 的参数</td><td align="center">Object</td><td align="center">参考 <a href="https://popper.js.org/documentation.html">popper.js</a> 文档</td><td align="center">{ boundariesElement: ‘body’, gpuAcceleration: false }</td></tr><tr><td align="center">open-delay</td><td align="center">延迟出现，单位毫秒</td><td align="center">Number</td><td align="center">—</td><td align="center">0</td></tr><tr><td align="center">manual</td><td align="center">手动控制模式，设置为 true 后，mouseenter 和 mouseleave 事件将不会生效</td><td align="center">Boolean</td><td align="center">—</td><td align="center">false</td></tr><tr><td align="center">popper-class</td><td align="center">为 Tooltip 的 popper 添加类名</td><td align="center">String</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">enterable</td><td align="center">鼠标是否可进入到 tooltip 中</td><td align="center">Boolean</td><td align="center">—</td><td align="center">true</td></tr><tr><td align="center">hide-after</td><td align="center">Tooltip 出现后自动隐藏延时，单位毫秒，为 0 则不会自动隐藏</td><td align="center">number</td><td align="center">—</td><td align="center">0</td></tr><tr><td align="center">tabindex</td><td align="center">Tooltip 组件的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex">tabindex</a></td><td align="center">number</td><td align="center">—</td><td align="center">0</td></tr></tbody></table><h4 id="标签3-gt-el-table-用于显示表格-目前主要是用这个"><a href="#标签3-gt-el-table-用于显示表格-目前主要是用这个" class="headerlink" title="标签3-&gt;el-table 用于显示表格,目前主要是用这个"></a>标签3-&gt;el-table 用于显示表格,目前主要是用这个</h4><p>Table Attributes</p><table><thead><tr><th align="center">参数</th><th align="center">说明</th><th align="center">类型</th><th align="center">可选值</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">data</td><td align="center">显示的数据</td><td align="center">array</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">height</td><td align="center">Table 的高度，默认为自动高度。如果 height 为 number 类型，单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式。</td><td align="center">string/number</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">max-height</td><td align="center">Table 的最大高度。合法的值为数字或者单位为 px 的高度。</td><td align="center">string/number</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">stripe</td><td align="center">是否为斑马纹 table</td><td align="center">boolean</td><td align="center">—</td><td align="center">false</td></tr><tr><td align="center">border</td><td align="center">是否带有纵向边框</td><td align="center">boolean</td><td align="center">—</td><td align="center">false</td></tr><tr><td align="center">size</td><td align="center">Table 的尺寸</td><td align="center">string</td><td align="center">medium / small / mini</td><td align="center">—</td></tr><tr><td align="center">fit</td><td align="center">列的宽度是否自撑开</td><td align="center">boolean</td><td align="center">—</td><td align="center">true</td></tr><tr><td align="center">show-header</td><td align="center">是否显示表头</td><td align="center">boolean</td><td align="center">—</td><td align="center">true</td></tr><tr><td align="center">highlight-current-row</td><td align="center">是否要高亮当前行</td><td align="center">boolean</td><td align="center">—</td><td align="center">false</td></tr><tr><td align="center">current-row-key</td><td align="center">当前行的 key，只写属性</td><td align="center">String,Number</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">row-class-name</td><td align="center">行的 className 的回调方法，也可以使用字符串为所有行设置一个固定的 className。</td><td align="center">Function({row, rowIndex})/String</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">row-style</td><td align="center">行的 style 的回调方法，也可以使用一个固定的 Object 为所有行设置一样的 Style。</td><td align="center">Function({row, rowIndex})/Object</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">cell-class-name</td><td align="center">单元格的 className 的回调方法，也可以使用字符串为所有单元格设置一个固定的 className。</td><td align="center">Function({row, column, rowIndex, columnIndex})/String</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">cell-style</td><td align="center">单元格的 style 的回调方法，也可以使用一个固定的 Object 为所有单元格设置一样的 Style。</td><td align="center">Function({row, column, rowIndex, columnIndex})/Object</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">header-row-class-name</td><td align="center">表头行的 className 的回调方法，也可以使用字符串为所有表头行设置一个固定的 className。</td><td align="center">Function({row, rowIndex})/String</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">header-row-style</td><td align="center">表头行的 style 的回调方法，也可以使用一个固定的 Object 为所有表头行设置一样的 Style。</td><td align="center">Function({row, rowIndex})/Object</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">header-cell-class-name</td><td align="center">表头单元格的 className 的回调方法，也可以使用字符串为所有表头单元格设置一个固定的 className。</td><td align="center">Function({row, column, rowIndex, columnIndex})/String</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">header-cell-style</td><td align="center">表头单元格的 style 的回调方法，也可以使用一个固定的 Object 为所有表头单元格设置一样的 Style。</td><td align="center">Function({row, column, rowIndex, columnIndex})/Object</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">row-key</td><td align="center">行数据的 Key，用来优化 Table 的渲染；在使用 reserve-selection 功能与显示树形数据时，该属性是必填的。类型为 String 时，支持多层访问：<code>user.info.id</code>，但不支持 <code>user.info[0].id</code>，此种情况请使用 <code>Function</code>。</td><td align="center">Function(row)/String</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">empty-text</td><td align="center">空数据时显示的文本内容，也可以通过 <code>slot=&quot;empty&quot;</code> 设置</td><td align="center">String</td><td align="center">—</td><td align="center">暂无数据</td></tr><tr><td align="center">default-expand-all</td><td align="center">是否默认展开所有行，当 Table 包含展开行存在或者为树形表格时有效</td><td align="center">Boolean</td><td align="center">—</td><td align="center">false</td></tr><tr><td align="center">expand-row-keys</td><td align="center">可以通过该属性设置 Table 目前的展开行，需要设置 row-key 属性才能使用，该属性为展开行的 keys 数组。</td><td align="center">Array</td><td align="center">—</td><td align="center"></td></tr><tr><td align="center">default-sort</td><td align="center">默认的排序列的 prop 和顺序。它的<code>prop</code>属性指定默认的排序的列，<code>order</code>指定默认排序的顺序</td><td align="center">Object</td><td align="center"><code>order</code>: ascending, descending</td><td align="center">如果只指定了<code>prop</code>, 没有指定<code>order</code>, 则默认顺序是ascending</td></tr><tr><td align="center">tooltip-effect</td><td align="center">tooltip <code>effect</code> 属性</td><td align="center">String</td><td align="center">dark/light</td><td align="center"></td></tr><tr><td align="center">show-summary</td><td align="center">是否在表尾显示合计行</td><td align="center">Boolean</td><td align="center">—</td><td align="center">false</td></tr><tr><td align="center">sum-text</td><td align="center">合计行第一列的文本</td><td align="center">String</td><td align="center">—</td><td align="center">合计</td></tr><tr><td align="center">summary-method</td><td align="center">自定义的合计计算方法</td><td align="center">Function({ columns, data })</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">span-method</td><td align="center">合并行或列的计算方法</td><td align="center">Function({ row, column, rowIndex, columnIndex })</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">select-on-indeterminate</td><td align="center">在多选表格中，当仅有部分行被选中时，点击表头的多选框时的行为。若为 true，则选中所有行；若为 false，则取消选择所有行</td><td align="center">Boolean</td><td align="center">—</td><td align="center">true</td></tr><tr><td align="center">indent</td><td align="center">展示树形数据时，树节点的缩进</td><td align="center">Number</td><td align="center">—</td><td align="center">16</td></tr><tr><td align="center">lazy</td><td align="center">是否懒加载子节点数据</td><td align="center">Boolean</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">load</td><td align="center">加载子节点数据的函数，lazy 为 true 时生效，函数第二个参数包含了节点的层级信息</td><td align="center">Function(row, treeNode, resolve)</td><td align="center">—</td><td align="center">—</td></tr><tr><td align="center">tree-props</td><td align="center">渲染嵌套数据的配置选项</td><td align="center">Object</td><td align="center">—</td><td align="center">{ hasChildren: ‘hasChildren’, children: ‘children’ }</td></tr></tbody></table><p><a href="https://element.eleme.cn/#/zh-CN/component/table#table-events">¶</a> Table Events</p><table><thead><tr><th align="center">事件名</th><th align="center">说明</th><th align="center">参数</th><th></th></tr></thead><tbody><tr><td align="center">select</td><td align="center">当用户手动勾选数据行的 Checkbox 时触发的事件</td><td align="center">selection, row</td><td></td></tr><tr><td align="center">select-all</td><td align="center">当用户手动勾选全选 Checkbox 时触发的事件</td><td align="center">selection</td><td></td></tr><tr><td align="center">selection-change</td><td align="center">当选择项发生变化时会触发该事件</td><td align="center">selection</td><td></td></tr><tr><td align="center">cell-mouse-enter</td><td align="center">当单元格 hover 进入时会触发该事件</td><td align="center">row, column, cell, event</td><td></td></tr><tr><td align="center">cell-mouse-leave</td><td align="center">当单元格 hover 退出时会触发该事件</td><td align="center">row, column, cell, event</td><td></td></tr><tr><td align="center">cell-click</td><td align="center">当某个单元格被点击时会触发该事件</td><td align="center">row, column, cell, event</td><td></td></tr><tr><td align="center">cell-dblclick</td><td align="center">当某个单元格被双击击时会触发该事件</td><td align="center">row, column, cell, event</td><td></td></tr><tr><td align="center">row-click</td><td align="center">当某一行被点击时会触发该事件</td><td align="center">row, column, event</td><td></td></tr><tr><td align="center">row-contextmenu</td><td align="center">当某一行被鼠标右键点击时会触发该事件</td><td align="center">row, column, event</td><td></td></tr><tr><td align="center">row-dblclick</td><td align="center">当某一行被双击时会触发该事件</td><td align="center">row, column, event</td><td></td></tr><tr><td align="center">header-click</td><td align="center">当某一列的表头被点击时会触发该事件</td><td align="center">column, event</td><td></td></tr><tr><td align="center">header-contextmenu</td><td align="center">当某一列的表头被鼠标右键点击时触发该事件</td><td align="center">column, event</td><td></td></tr><tr><td align="center">sort-change</td><td align="center">当表格的排序条件发生变化的时候会触发该事件</td><td align="center">{ column, prop, order }</td><td></td></tr><tr><td align="center">filter-change</td><td align="center">当表格的筛选条件发生变化的时候会触发该事件，参数的值是一个对象，对象的 key 是 column 的 columnKey，对应的 value 为用户选择的筛选条件的数组。</td><td align="center">filters</td><td></td></tr><tr><td align="center">current-change</td><td align="center">当表格的当前行发生变化的时候会触发该事件，如果要高亮当前行，请打开表格的 highlight-current-row 属性</td><td align="center">currentRow, oldCurrentRow</td><td></td></tr><tr><td align="center">header-dragend</td><td align="center">当拖动表头改变了列的宽度的时候会触发该事件</td><td align="center">newWidth, oldWidth, column, event</td><td></td></tr><tr><td align="center">expand-change</td><td align="center">当用户对某一行展开或者关闭的时候会触发该事件（展开行时，回调的第二个参数为 expandedRows；树形表格时第二参数为 expanded）</td><td align="center">row, (expandedRows \</td><td>expanded)</td></tr></tbody></table><p><a href="https://element.eleme.cn/#/zh-CN/component/table#table-methods">¶</a> Table Methods</p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th><th align="center">参数</th></tr></thead><tbody><tr><td align="center">clearSelection</td><td align="center">用于多选表格，清空用户的选择</td><td align="center">—</td></tr><tr><td align="center">toggleRowSelection</td><td align="center">用于多选表格，切换某一行的选中状态，如果使用了第二个参数，则是设置这一行选中与否（selected 为 true 则选中）</td><td align="center">row, selected</td></tr><tr><td align="center">toggleAllSelection</td><td align="center">用于多选表格，切换所有行的选中状态</td><td align="center">-</td></tr><tr><td align="center">toggleRowExpansion</td><td align="center">用于可展开表格与树形表格，切换某一行的展开状态，如果使用了第二个参数，则是设置这一行展开与否（expanded 为 true 则展开）</td><td align="center">row, expanded</td></tr><tr><td align="center">setCurrentRow</td><td align="center">用于单选表格，设定某一行为选中行，如果调用时不加参数，则会取消目前高亮行的选中状态。</td><td align="center">row</td></tr><tr><td align="center">clearSort</td><td align="center">用于清空排序条件，数据会恢复成未排序的状态</td><td align="center">—</td></tr><tr><td align="center">clearFilter</td><td align="center">不传入参数时用于清空所有过滤条件，数据会恢复成未过滤的状态，也可传入由columnKey组成的数组以清除指定列的过滤条件</td><td align="center">columnKey</td></tr><tr><td align="center">doLayout</td><td align="center">对 Table 进行重新布局。当 Table 或其祖先元素由隐藏切换为显示时，可能需要调用此方法</td><td align="center">—</td></tr><tr><td align="center">sort</td><td align="center">手动对 Table 进行排序。参数<code>prop</code>属性指定排序列，<code>order</code>指定排序顺序。</td><td align="center">prop: string, order: string</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE初级教程</title>
      <link href="1664911364.html"/>
      <url>1664911364.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://caibaojian.com/fetching-data-with-vue-js.html">使用Vue.js和Axios从第三方API获取请求数据</a></p><p><a href="https://www.cnblogs.com/jianxian/p/11938752.html">axios之Vue请求初始化数据放在Created还是Mounted？</a></p><h2 id="axios介绍"><a href="#axios介绍" class="headerlink" title="axios介绍"></a>axios介绍</h2><p>基于Promise的HTTP客户端，用于浏览器和node.js <a href="https://github.com/axios/axios">axios-github</a></p><ul><li>制作<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">的XMLHttpRequest</a>从浏览器</li><li>让<a href="http://nodejs.org/api/http.html">HTTP</a>从node.js的请求</li><li>支持<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>JSON数据的自动转换</li><li>客户端支持以防止<a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h3 id="vue的初始化过程"><a href="#vue的初始化过程" class="headerlink" title="vue的初始化过程"></a>vue的初始化过程</h3><p><a href="../img/lifecycle.png"><img src="../img/lifecycle.png" alt="lifecycle"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var app &#x3D; new Vue(&#123;        el: &quot;#app&quot;,        data: &#123;            num: 0        &#125;,        beforeCreate() &#123;                console.log(&quot;创建前&quot;)        &#125;,        created() &#123;            console.log(&quot;创建&quot;)        &#125;,        beforeMount() &#123;            console.log(&quot;计数前&quot;)        &#125;,        mounted() &#123;            console.log(&quot;计数了&quot;)        &#125;,    &#125;)</span><br></pre></td></tr></table></figure><h2 id="之前赋值不到vue的data里"><a href="#之前赋值不到vue的data里" class="headerlink" title="之前赋值不到vue的data里"></a>之前赋值不到vue的data里</h2><p>最开始放在 created(),mounted()都可以赋值过去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var mydata&#x3D;&quot;&quot; ;var app &#x3D; new Vue(&#123;        el: &quot;#app&quot;,        data: &#123;            num: 0,            tableDataA:mydata        &#125;,        beforeCreate() &#123;                console.log(&quot;创建前&quot;)        &#125;,        created() &#123;            console.log(&quot;创建&quot;)        &#125;,        beforeMount() &#123;            console.log(&quot;计数前&quot;)        &#125;,        mounted() &#123;            console.log(&quot;计数了&quot;)        &#125;,    &#125;)</span><br><span class="line">axios.get(&#39;http:&#x2F;&#x2F;localhost:8081&#x2F;BackSpace&#x2F;test&#39;)    .then(function (response) &#123;    &#x2F;&#x2F; mydata&#x3D;response.data 刚开始使用的这个 但是一直赋值不过去        &#x2F;&#x2F;这个方法也不行,this不能指代当前这个app对象    this.tableDataA&#x3D;response.data&#125;)    .catch(function (error) &#123;    console.log(error);&#125;);</span><br></pre></td></tr></table></figure><p>成功的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#39;http:&#x2F;&#x2F;localhost:8081&#x2F;BackSpace&#x2F;test&#39;).then(response &#x3D;&gt; &#123;this.tableDataA&#x3D;response.data&#125;).catch(function (error) &#123;console.log(error);&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode优化和插件推荐</title>
      <link href="2425517015.html"/>
      <url>2425517015.html</url>
      
        <content type="html"><![CDATA[<h4 id="Auto-Close-Tag-自动闭合标签"><a href="#Auto-Close-Tag-自动闭合标签" class="headerlink" title="Auto Close Tag 自动闭合标签"></a>Auto Close Tag 自动闭合标签</h4><h4 id="Auto-Rename-Tag-尾部闭合标签同步修改"><a href="#Auto-Rename-Tag-尾部闭合标签同步修改" class="headerlink" title="Auto Rename Tag 尾部闭合标签同步修改"></a>Auto Rename Tag 尾部闭合标签同步修改</h4><h4 id="Live-Server-实时预览"><a href="#Live-Server-实时预览" class="headerlink" title="Live Server 实时预览"></a>Live Server 实时预览</h4><h4 id="Bracket-Pair-Colorizer-用不同颜色高亮显示匹配的括号"><a href="#Bracket-Pair-Colorizer-用不同颜色高亮显示匹配的括号" class="headerlink" title="Bracket Pair Colorizer 用不同颜色高亮显示匹配的括号"></a>Bracket Pair Colorizer 用不同颜色高亮显示匹配的括号</h4><h4 id="Highlight-Matching-Tag-高亮显示匹配标签"><a href="#Highlight-Matching-Tag-高亮显示匹配标签" class="headerlink" title="Highlight Matching Tag 高亮显示匹配标签"></a>Highlight Matching Tag 高亮显示匹配标签</h4><h4 id="Vscode-icons-VSCode-文件图标"><a href="#Vscode-icons-VSCode-文件图标" class="headerlink" title="Vscode-icons VSCode 文件图标"></a>Vscode-icons VSCode 文件图标</h4><h3 id="优化字段的字体"><a href="#优化字段的字体" class="headerlink" title="优化字段的字体"></a>优化字段的字体</h3><p> 需要编辑 Editor: Font Family 下我的设置<strong>‘Droid Sans Mono’, ‘monospace’, monospace, ‘Droid Sans Fallback’</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下搭建vue环境以及出现No command &#39;vue&#39;found</title>
      <link href="3693735390.html"/>
      <url>3693735390.html</url>
      
        <content type="html"><![CDATA[<h3 id="搭建nodejs环境"><a href="#搭建nodejs环境" class="headerlink" title="搭建nodejs环境"></a>搭建nodejs环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 下载node的Linux版2. 解压后放在&#x2F;user&#x2F;local&#x2F; 下或者其他位置3. 设置国内的淘宝源  </span><br><span class="line">npm config set registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org  </span><br><span class="line">或者使用</span><br><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">安装完成后同样要建软链接，否则在使用     </span><br><span class="line">cnpm时会报No command &#39;cnpm&#39; found的错误。sudo ln -s &#x2F;home&#x2F;formularoom&#x2F;env&#x2F;node-v8.1.2-linux-x64&#x2F;bin&#x2F;cnpm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cnpm</span><br></pre></td></tr></table></figure><p>常见npm设置命令 npm config get/set xxxx ,其中xxx代指prefix ,registry等,其对于的配置文件地址 ~/.npmrc</p><h3 id="下载vuejs"><a href="#下载vuejs" class="headerlink" title="下载vuejs"></a>下载vuejs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><h3 id="出现-No-command-‘vue’found"><a href="#出现-No-command-‘vue’found" class="headerlink" title="出现 No command ‘vue’found"></a>出现 No command ‘vue’found</h3><p>由于 /usr/local/bin下面没有对于命令所以显示找不到这个命令,需要建立软链接</p><p>sudo ln -s /usr/local/node-v8.9.3-linux-x64/bin/vue /usr/local/bin/vue</p><p><a href="https://blog.csdn.net/FormulaRoom/article/details/73920741">Linux下Vue开发环境搭建一篇全搞定</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提交文件MultipartFile后ZipEntry.size一直为-1</title>
      <link href="3269460028.html"/>
      <url>3269460028.html</url>
      
        <content type="html"><![CDATA[<p>先看一下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">importModels</span> <span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException, InvalidFormatException </span>&#123;</span><br><span class="line">     ZipInputStream zipInputStream = <span class="keyword">new</span> ZipInputStream(file.getInputStream(), Charset.defaultCharset());</span><br><span class="line">     BufferedInputStream bs = <span class="keyword">new</span> BufferedInputStream(zipInputStream);</span><br><span class="line">     Map&lt;String, Map&gt; stringMapMap;</span><br><span class="line">     Map&lt;String, String&gt; modelJsons = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">     ZipEntry zipEntry;</span><br><span class="line">     String zipFileName;</span><br><span class="line">     <span class="keyword">while</span> ((zipEntry = zipInputStream.getNextEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (zipEntry.isDirectory()) &#123;                <span class="comment">// do nothing  </span></span><br><span class="line"></span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zipEntry.getName().endsWith(<span class="string">&quot;json&quot;</span>)) &#123;</span><br><span class="line">             String name = zipEntry.getName();</span><br><span class="line"></span><br><span class="line">             <span class="keyword">long</span> size = zipEntry.getSize();</span><br><span class="line">             <span class="keyword">if</span> (size == -<span class="number">1</span>) &#123;</span><br><span class="line">                 ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                 <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                     <span class="keyword">int</span> bytes = zipInputStream.read();</span><br><span class="line">                     <span class="keyword">if</span> (bytes == -<span class="number">1</span>) &#123;</span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                     baos.write(bytes);</span><br><span class="line">                 &#125;</span><br><span class="line">                 baos.close();</span><br><span class="line">                 System.out.println(String.format(<span class="string">&quot;Name:%s,Content:%s&quot;</span>, name, <span class="keyword">new</span> String(baos.toByteArray())));</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123; <span class="comment">// ZipEntry的size正常     </span></span><br><span class="line">                 <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) zipEntry.getSize()];</span><br><span class="line">                 zipInputStream.read(bytes, <span class="number">0</span>, (<span class="keyword">int</span>) zipEntry.getSize());</span><br><span class="line">                 System.out.println(String.format(<span class="string">&quot;Name:%s,Content:%s&quot;</span>, name, <span class="keyword">new</span> String(bytes)));</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zipEntry.getName().endsWith(<span class="string">&quot;xlxs&quot;</span>)) &#123;               <span class="comment">//do other things      </span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="文件提交后台"><a href="#文件提交后台" class="headerlink" title="文件提交后台"></a>文件提交后台</h2><p>是提交后天后文件并不是在本地,网上之前有提供zipfile后读取在我这边是不可能实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">while ((ze &#x3D; zin.getNextEntry()) !&#x3D; null) &#123;</span><br><span class="line">               BufferedReader bufferedReader &#x3D; new BufferedReader(new InputStreamReader(zin));</span><br><span class="line">               BufferedReader reader &#x3D; new BufferedReader(new InputStreamReader(file.getInputStream()));</span><br><span class="line">               String str;</span><br><span class="line">               while ((str &#x3D; reader.readLine()) !&#x3D; null) &#123;</span><br><span class="line">                   System.out.println(str);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>上面的读取的是整个Zip文件,和要求不符</p><p><a href="http://cxis.me/2018/03/03/%E4%B8%8A%E4%BC%A0Zip%E6%96%87%E4%BB%B6%E4%B8%8D%E8%A7%A3%E5%8E%8B%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%97%B6ZipEntry%E7%9A%84size%E4%B8%BA-1%E7%9A%84%E9%97%AE%E9%A2%98/">上传Zip文件不解压读取文件内容时ZipEntry的size为-1的问题</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu导致不能复制剪切板</title>
      <link href="3534202997.html"/>
      <url>3534202997.html</url>
      
        <content type="html"><![CDATA[<h3 id="剪切板不能共享"><a href="#剪切板不能共享" class="headerlink" title="剪切板不能共享"></a>剪切板不能共享</h3><p> 以Ubuntu为主机(host)的系统,在vmware的虚拟机(guest)一直无法复制剪切板上的文字,网上看到的都是给Linux的虚拟机安装 vmware tools 的过程,刚开始以为是Linux主机导致 vmware workspace无法安装</p><p> 因为我看到所有Windows安装VMware Workstation的软件在有vmware tools后都有重新安装 tools的<a href="../img/vm.png"><img src="../img/vm.png" alt="img"></a></p><p>所以后面我都以为是系统缘故导致的</p><h3 id="确定原因和解决方案"><a href="#确定原因和解决方案" class="headerlink" title="确定原因和解决方案"></a>确定原因和解决方案</h3><p>最近有不文档需要复制,我就准备重新下载安装VMware Workstation<a href="https://my.vmware.com/cn/web/vmware/details?downloadGroup=WKST-1551-LX&productId=799&rPId=39514">链接地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name: VMware-Workstation-Full-15.5.1-15018445.x86_64.bundle发行日期: 2019-11-12内部版本号: 15018445This Workstation bundle includes the full product and VMware Tools for Linux 64-bit operating systems.MD5SUM: dfaa7c3b858df839db6d006437142e98SHA1SUM: c82e66f28fb5cc6fac4c38c55727cc45b916d107SHA256SUM: 490f8fe8d874c27601c155c1b2c0055ad0d4f14feb32fa9f18643659a147d3c6</span><br></pre></td></tr></table></figure><p>发现其实是附带了tools,然后我就找到<a href="https://my.vmware.com/web/vmware/details?downloadGroup=VMTOOLS10310&productId=742">Download VMware Tools 10.3.10</a> 的链接,然后下载解压下面是目录结构</p><p><a href="../img/1583206861166.png"><img src="../img/1583206861166.png" alt="1583206861166"></a></p><p>给对于虚拟机安装上后就可以复制了下面是 <a href="https://docs.vmware.com/en/VMware-Workstation-Pro/15.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html">Linux的安装步骤方法1</a> <a href="https://www.jianshu.com/p/34e85ad3cfad">Linux的安装步骤方法2</a></p><p>需要注意的的tools安装文件已经在上面压缩包里面都有了,所以直接解压执行省略步骤方法前面的几个步骤</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>activiti用法和结构</title>
      <link href="745403789.html"/>
      <url>745403789.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://imlike.cc/3807663978.html">activiti零零碎碎的记录</a> 包括processengineConfiguration -&gt;processEngine-&gt;respositoryService 下面的各个类和方法</p><h3 id="支持的事件类型"><a href="#支持的事件类型" class="headerlink" title="支持的事件类型"></a>支持的事件类型</h3><p>​    下面是引擎中可能出现的所有activiti事件类型。每个类型都对应<code>org.activiti.engine.delegate.event.ActivitiEventType</code>中的一个枚举值。</p><p>Table 3.2. 支持的事件**</p><table><thead><tr><th align="center">事件名称</th><th align="left">描述</th><th align="center">事件类型</th></tr></thead><tbody><tr><td align="center">ENGINE_CREATED</td><td align="left">监听器监听的流程引擎已经创建完毕，并准备好接受API调用。</td><td align="center"><code>org.activiti...ActivitiEvent</code></td></tr><tr><td align="center">ENGINE_CLOSED</td><td align="left">监听器监听的流程引擎已经关闭，不再接受API调用。</td><td align="center"><code>org.activiti...ActivitiEvent</code></td></tr><tr><td align="center">ENTITY_CREATED</td><td align="left">创建了一个新实体。实体包含在事件中。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">ENTITY_INITIALIZED</td><td align="left">创建了一个新实体，初始化也完成了。如果这个实体的创建会包含子实体的创建，这个事件会在子实体都创建/初始化完成后被触发，这是与<code>ENTITY_CREATED</code>的区别。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">ENTITY_UPDATED</td><td align="left">更新了已存在的实体。实体包含在事件中。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">ENTITY_DELETED</td><td align="left">删除了已存在的实体。实体包含在事件中。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">ENTITY_SUSPENDED</td><td align="left">暂停了已存在的实体。实体包含在事件中。会被ProcessDefinitions, ProcessInstances 和 Tasks抛出。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">ENTITY_ACTIVATED</td><td align="left">激活了已存在的实体，实体包含在事件中。会被ProcessDefinitions, ProcessInstances 和 Tasks抛出。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">JOB_EXECUTION_SUCCESS</td><td align="left">作业执行成功。job包含在事件中。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">JOB_EXECUTION_FAILURE</td><td align="left">作业执行失败。作业和异常信息包含在事件中。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code> and <code>org.activiti...ActivitiExceptionEvent</code></td></tr><tr><td align="center">JOB_RETRIES_DECREMENTED</td><td align="left">因为作业执行失败，导致重试次数减少。作业包含在事件中。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">TIMER_FIRED</td><td align="left">触发了定时器。job包含在事件中。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">JOB_CANCELED</td><td align="left">取消了一个作业。事件包含取消的作业。作业可以通过API调用取消， 任务完成后对应的边界定时器也会取消，在新流程定义发布时也会取消。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">ACTIVITY_STARTED</td><td align="left">一个节点开始执行</td><td align="center"><code>org.activiti...ActivitiActivityEvent</code></td></tr><tr><td align="center">ACTIVITY_COMPLETED</td><td align="left">一个节点成功结束</td><td align="center"><code>org.activiti...ActivitiActivityEvent</code></td></tr><tr><td align="center">ACTIVITY_SIGNALED</td><td align="left">一个节点收到了一个信号</td><td align="center"><code>org.activiti...ActivitiSignalEvent</code></td></tr><tr><td align="center">ACTIVITY_MESSAGE_RECEIVED</td><td align="left">一个节点收到了一个消息。在节点收到消息之前触发。收到后，会触发<code>ACTIVITY_SIGNAL</code>或<code>ACTIVITY_STARTED</code>，这会根据节点的类型（边界事件，事件子流程开始事件）</td><td align="center"><code>org.activiti...ActivitiMessageEvent</code></td></tr><tr><td align="center">ACTIVITY_ERROR_RECEIVED</td><td align="left">一个节点收到了一个错误事件。在节点实际处理错误之前触发。 事件的<code>activityId</code>对应着处理错误的节点。 这个事件后续会是<code>ACTIVITY_SIGNALLED</code>或<code>ACTIVITY_COMPLETE</code>， 如果错误发送成功的话。</td><td align="center"><code>org.activiti...ActivitiErrorEvent</code></td></tr><tr><td align="center">UNCAUGHT_BPMN_ERROR</td><td align="left">抛出了未捕获的BPMN错误。流程没有提供针对这个错误的处理器。 事件的<code>activityId</code>为空。</td><td align="center"><code>org.activiti...ActivitiErrorEvent</code></td></tr><tr><td align="center">ACTIVITY_COMPENSATE</td><td align="left">一个节点将要被补偿。事件包含了将要执行补偿的节点id。</td><td align="center"><code>org.activiti...ActivitiActivityEvent</code></td></tr><tr><td align="center">VARIABLE_CREATED</td><td align="left">创建了一个变量。事件包含变量名，变量值和对应的分支或任务（如果存在）。</td><td align="center"><code>org.activiti...ActivitiVariableEvent</code></td></tr><tr><td align="center">VARIABLE_UPDATED</td><td align="left">更新了一个变量。事件包含变量名，变量值和对应的分支或任务（如果存在）。</td><td align="center"><code>org.activiti...ActivitiVariableEvent</code></td></tr><tr><td align="center">VARIABLE_DELETED</td><td align="left">删除了一个变量。事件包含变量名，变量值和对应的分支或任务（如果存在）。</td><td align="center"><code>org.activiti...ActivitiVariableEvent</code></td></tr><tr><td align="center">TASK_ASSIGNED</td><td align="left">任务被分配给了一个人员。事件包含任务。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">TASK_CREATED</td><td align="left">创建了新任务。它位于<code>ENTITY_CREATE</code>事件之后。当任务是由流程创建时， 这个事件会在TaskListener执行之前被执行。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">TASK_COMPLETED</td><td align="left">任务被完成了。它会在<code>ENTITY_DELETE</code>事件之前触发。当任务是流程一部分时，事件会在流程继续运行之前， 后续事件将是<code>ACTIVITY_COMPLETE</code>，对应着完成任务的节点。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">TASK_TIMEOUT</td><td align="left">任务已超时，在<code>TIMER_FIRED</code>事件之后，会触发用户任务的超时事件， 当这个任务分配了一个定时器的时候。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">PROCESS_COMPLETED</td><td align="left">流程已结束。在最后一个节点的<code>ACTIVITY_COMPLETED</code>事件之后触发。 当流程到达的状态，没有任何后续连线时， 流程就会结束。</td><td align="center"><code>org.activiti...ActivitiEntityEvent</code></td></tr><tr><td align="center">MEMBERSHIP_CREATED</td><td align="left">用户被添加到一个组里。事件包含了用户和组的id。</td><td align="center"><code>org.activiti...ActivitiMembershipEvent</code></td></tr><tr><td align="center">MEMBERSHIP_DELETED</td><td align="left">用户被从一个组中删除。事件包含了用户和组的id。</td><td align="center"><code>org.activiti...ActivitiMembershipEvent</code></td></tr><tr><td align="center">MEMBERSHIPS_DELETED</td><td align="left">所有成员被从一个组中删除。在成员删除之前触发这个事件，所以他们都是可以访问的。 因为性能方面的考虑，不会为每个成员触发单独的<code>MEMBERSHIP_DELETED</code>事件。</td><td align="center"><code>org.activiti...ActivitiMembershipEvent</code></td></tr></tbody></table><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>​    业务流程是软件项目的一部分，它也应该和普通的业务流程一样进行测试： 使用单元测试。 因为Activiti是一个嵌入式的java引擎， 为业务流程编写单元测试和写普通单元测试完全一样。</p><p>​    Activiti支持JUnit 3和4进行单元测试。使用JUnit 3时， 必须集成<code>org.activiti.engine.test.ActivitiTestCase</code>。 它通过保护的成员变量提供ProcessEngine和服务， 在测试的<code>setup()</code>中， 默认会使用classpath下的<code>activiti.cfg.xml</code>初始化流程引擎。 想使用不同的配置文件，可以重写*getConfigurationResource()*方法。 如果配置文件相同的话，对应的流程引擎会被静态缓存， 就可以用于多个单元测试。</p><p>​    继承了<code>ActivitiTestCase</code>你，可以在测试方法上使用 <code>org.activiti.engine.test.Deployment</code>注解。 测试执行前，与测试类在同一个包下的， 格式为<code>testClassName.testMethod.bpmn20.xml</code>的资源文件，会被部署。 测试结束后，发布包也会被删除，包括所有相关的流程实例，任务，等等。 <code>Deployment</code>注解也可以直接设置资源的位置。 参考<a href="http://www.mossle.com/docs/javadocs/org/activiti/engine/test/Deployment.html">Javadocs</a>获得更多信息。</p><p>​    把这些放在一起，JUnit 3测试看起来像这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class MyBusinessProcessTest extends ActivitiTestCase &#123;</span><br><span class="line">    @Deployment</span><br><span class="line">    public void testSimpleProcess() &#123;</span><br><span class="line">        runtimeService.startProcessInstanceByKey(&quot;simpleProcess&quot;);</span><br><span class="line">        Task task &#x3D; taskService.createTaskQuery().singleResult();</span><br><span class="line">        assertEquals(&quot;My Task&quot;, task.getName());</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">        assertEquals(0, runtimeService.createProcessInstanceQuery().count());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    要想在使用JUnit 4编写单元测试时获得同样的功能， 可以使用<code>org.activiti.engine.test.ActivitiRule</code>。 通过它，可以通过getter方法获得流程引擎和各种服务。 和 <code>ActivitiTestCase</code>一样（参考上面章节），使用这个<code>Rule</code> 也会启用<code>org.activiti.engine.test.Deployment</code>注解（参考上面章节使用和配置的介绍）， 它会在classpath下查找默认的配置文件。 如果配置文件相同的话，对应的流程引擎会被静态缓存， 就可以用于多个单元测试。</p><p>​    下面的代码演示了JUnit 4单元测试并使用了<code>ActivitiRule</code>的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class MyBusinessProcessTest &#123;</span><br><span class="line">    @Rule</span><br><span class="line">    public ActivitiRule activitiRule &#x3D; new ActivitiRule();</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Deployment</span><br><span class="line">    public void ruleUsageExample() &#123;</span><br><span class="line">        RuntimeService runtimeService &#x3D; activitiRule.getRuntimeService();</span><br><span class="line">        runtimeService.startProcessInstanceByKey(&quot;ruleUsage&quot;);</span><br><span class="line">        TaskService taskService &#x3D; activitiRule.getTaskService();</span><br><span class="line">        Task task &#x3D; taskService.createTaskQuery().singleResult();</span><br><span class="line">        assertEquals(&quot;My Task&quot;, task.getName());</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">        assertEquals(0, runtimeService.createProcessInstanceQuery().count());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    当集成Spring时，使用标准的<a href="http://www.mossle.com/docs/activiti/index.html#apiUnitTesting">Activiti测试工具类</a>是非常容易的对业务流程进行测试。 下面的例子展示了如何在一个典型的基于Spring单元测试测试业务流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Rule;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&quot;classpath:org&#x2F;activiti&#x2F;spring&#x2F;test&#x2F;junit4&#x2F;springTypicalUsageTest-context.xml&quot;)</span><br><span class="line">public class MyBusinessProcessTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RuntimeService runtimeService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private TaskService taskService;</span><br><span class="line">    @Autowired</span><br><span class="line">    @Rule</span><br><span class="line">    public ActivitiRule activitiSpringRule;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Deployment</span><br><span class="line">    public void simpleProcessTest() &#123;</span><br><span class="line">        runtimeService.startProcessInstanceByKey(&quot;simpleProcess&quot;);</span><br><span class="line">        Task task &#x3D; taskService.createTaskQuery().singleResult();</span><br><span class="line">        assertEquals(&quot;My Task&quot;, task.getName());</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">        assertEquals(0, runtimeService.createProcessInstanceQuery().count());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>activiti数据库的分类</title>
      <link href="2197510555.html"/>
      <url>2197510555.html</url>
      
        <content type="html"><![CDATA[<p>Activiti数据库表结构</p><p> Activiti工作流总共包含23张数据表，所有的表名默认以“<strong>ACT_</strong>”开头。</p><p>并且表名的第二部分用两个字母表明表的用例，而这个用例也基本上跟Service API匹配。</p><ul><li><p> <strong>ACT_GE_*</strong> : “GE”代表“General”（通用），用在各种情况下；</p></li><li><p> <strong>ACT_HI_*</strong> : “HI”代表“History”（历史），这些表中保存的都是历史数据，比如执行过的流程实例、变量、任务，等等。Activit默认提供了4种历史级别：</p></li><li><p><strong>none</strong>: 不保存任何历史记录，可以提高系统性能；</p></li><li><p> <strong>activity</strong>：保存所有的流程实例、任务、活动信息；</p></li><li><p> <strong>audit</strong>：也是Activiti的<strong>默认</strong>级别，保存所有的流程实例、任务、活动、表单属性；</p></li><li><p> <strong>full</strong>：最完整的历史记录，除了包含<strong>audit</strong>级别的信息之外还能保存详细，例如：流程变量。</p></li></ul><p>对于几种级别根据对功能的要求选择，如果需要日后跟踪详细可以开启<strong>full</strong>。</p><ul><li><p> <strong>ACT_ID_*</strong> : “ID”代表“Identity”（身份），这些表中保存的都是身份信息，如用户和组以及两者之间的关系。如果Activiti被集成在某一系统当中的话，这些表可以不用，可以直接使用现有系统中的用户或组信息；</p></li><li><p> <strong>ACT_RE_*</strong> : “RE”代表“Repository”（仓库），这些表中保存一些‘静态’信息，如流程定义和流程资源（如图片、规则等）；</p></li><li><p><strong>ACT_RU_*</strong> : “RU”代表“Runtime”（运行时），这些表中保存一些流程实例、用户任务、变量等的运行时数据。Activiti只保存流程实例在执行过程中的运行时数据，并且当流程结束后会立即移除这些数据，这是为了保证运行时表尽量的小并运行的足够快；</p></li></ul><h3 id="Activiti数据表清单"><a href="#Activiti数据表清单" class="headerlink" title="Activiti数据表清单:"></a>Activiti数据表清单:</h3><table><thead><tr><th align="center"><strong>表分类</strong></th><th align="center"><strong>表名</strong></th><th align="center"><strong>解释</strong></th></tr></thead><tbody><tr><td align="center">一般数据</td><td align="center">ACT_GE_BYTEARRAY</td><td align="center">通用的流程定义和流程资源</td></tr><tr><td align="center">ACT_GE_PROPERTY</td><td align="center">系统相关属性</td><td align="center"></td></tr><tr><td align="center">流程历史记录</td><td align="center">ACT_HI_ACTINST</td><td align="center">历史的流程实例</td></tr><tr><td align="center">ACT_HI_ATTACHMENT</td><td align="center">历史的流程附件</td><td align="center"></td></tr><tr><td align="center">ACT_HI_COMMENT</td><td align="center">历史的说明性信息</td><td align="center"></td></tr><tr><td align="center">ACT_HI_DETAIL</td><td align="center">历史的流程运行中的细节信息</td><td align="center"></td></tr><tr><td align="center">ACT_HI_IDENTITYLINK</td><td align="center">历史的流程运行过程中用户关系</td><td align="center"></td></tr><tr><td align="center">ACT_HI_PROCINST</td><td align="center">历史的流程实例</td><td align="center"></td></tr><tr><td align="center">ACT_HI_TASKINST</td><td align="center">历史的任务实例</td><td align="center"></td></tr><tr><td align="center">ACT_HI_VARINST</td><td align="center">历史的流程运行中的变量信息</td><td align="center"></td></tr><tr><td align="center">用户用户组表</td><td align="center">ACT_ID_GROUP</td><td align="center">身份信息-组信息</td></tr><tr><td align="center">ACT_ID_INFO</td><td align="center">身份信息-组信息</td><td align="center"></td></tr><tr><td align="center">ACT_ID_MEMBERSHIP</td><td align="center">身份信息-用户和组关系的中间表</td><td align="center"></td></tr><tr><td align="center">ACT_ID_USER</td><td align="center">身份信息-用户信息</td><td align="center"></td></tr><tr><td align="center">流程定义表</td><td align="center">ACT_RE_DEPLOYMENT</td><td align="center">部署单元信息</td></tr><tr><td align="center">ACT_RE_MODEL</td><td align="center">模型信息</td><td align="center"></td></tr><tr><td align="center">ACT_RE_PROCDEF</td><td align="center">已部署的流程定义</td><td align="center"></td></tr><tr><td align="center">运行实例表</td><td align="center">ACT_RU_EVENT_SUBSCR</td><td align="center">运行时事件</td></tr><tr><td align="center">ACT_RU_EXECUTION</td><td align="center">运行时流程执行实例</td><td align="center"></td></tr><tr><td align="center">ACT_RU_IDENTITYLINK</td><td align="center">运行时用户关系信息</td><td align="center"></td></tr><tr><td align="center">ACT_RU_JOB</td><td align="center">运行时作业</td><td align="center"></td></tr><tr><td align="center">ACT_RU_TASK</td><td align="center">运行时任务</td><td align="center"></td></tr><tr><td align="center">ACT_RU_VARIABLE</td><td align="center">运行时变量表</td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机内部连vpn</title>
      <link href="571302738.html"/>
      <url>571302738.html</url>
      
        <content type="html"><![CDATA[<p> 最近由于众所周知的原因,目前只能在家里远程办公,由于目前主力系统是Ubuntu,使用vmware horizon client 连接公司Windows虚拟主机会闪退,地址 : <strong>/tmp/vmware-USERNAME/vmware-horizon-client-xxxx.log</strong>,网上搜了一下看不到解决方案,那就只有退而求其次在虚拟机上连接.</p><p> 使用虚拟机一直创建vpn一直报619错误,我之前本地主机连接是没问题的,现在连不上以为我用的win7系统的某些服务是不是没开启,看了一下都开启</p><p><a href="../img/windows_services_list.png"><img src="../img/windows_services_list.png" alt="1580780841225"></a> 后面是我本地主机连上vpn,然后虚拟主机使用这个连接vmware horizon client,同时我发现可能是我VMware workspace软件配置的网卡有问题,所以将网卡由NAT转为桥接</p><p><a href="../img/1580781244753.png"><img src="../img/1580781244753.png" alt="1580781244753"></a></p><p><a href="https://blog.csdn.net/yang5726685/article/details/78566213">参考链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZUUL转发后导致文件乱码</title>
      <link href="230759535.html"/>
      <url>230759535.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Netflix/zuul/wiki/How-it-Works">spring zuul how it works</a></p><p><a href="https://blog.wangqi.love/articles/Spring-Cloud/Zuul%E6%8E%A2%E7%A9%B6(%E4%BA%8C)%E2%80%94%E2%80%94Zuul%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html">Zuul探究(二——Zuul的工作原理</a></p><p><a href="https://www.okcode.net/article/37549">ZuulServlet的执行流程分析</a></p><p><a href="https://taccisum.github.io/source/zuul/architecture.html">zuul源码解析 —— zuul整体架构</a></p><p><a href="https://juejin.im/post/5c2db228e51d451be35e74da">Spring Cloud Netflix Zuul源码分析之请求处理篇-上</a></p><p>dispatcherservlet -&gt; doDispatch( -&gt; getHandler(HandlerExecutionChain) {</p><p>该过程会通过getHandlerInternal方法根据 lookupPath(请求路径)、request(请求)调用ZuulHandlerMapping.lookupHandler方法查找匹配的handler。如果没有</p><p>} ) -&gt;doService</p><p>SimpleControllerHandlerAdapter.handle</p><p>zuulcontroller .handleRequest</p><p>ZuulServlet.service{<br>//Zuul的主要流程发生在ZuulServlet中，它的调用流程如下：</p><p>DispatcherServlet.doService<br>DispatcherServlet.doDispatch<br>SimpleControllerHandlerAdapter.handle<br>ZuulController.handleRequest<br>ServletWrappingController.handleRequestInternal<br>ZuulServlet.service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RibbonRoutingFilterpublic Object run() &#123;RequestContext context &#x3D; RequestContext.getCurrentContext();this.helper.addIgnoredHeaders();try &#123;RibbonCommandContext commandContext &#x3D; buildCommandContext(context);ClientHttpResponse response &#x3D; forward(commandContext);setResponse(response);return response;&#125;catch (ZuulException ex) &#123;throw new ZuulRuntimeException(ex);&#125;catch (Exception ex) &#123;throw new ZuulRuntimeException(ex);&#125;&#125;</span><br></pre></td></tr></table></figure><p>栈信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Thread.State: RUNNABLE  at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.getRequestBody(RibbonRoutingFilter.java:199)  at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.buildCommandContext(RibbonRoutingFilter.java:126)  at org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter.run(RibbonRoutingFilter.java:105)  at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:112)  at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193)  at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157)  at com.netflix.zuul.FilterProcessor.route(FilterProcessor.java:118)  at com.netflix.zuul.ZuulRunner.route(ZuulRunner.java:96)  at com.netflix.zuul.http.ZuulServlet.route(ZuulServlet.java:116)  at com.netflix.zuul.http.ZuulServlet.service(ZuulServlet.java:81)  at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:157)  at org.springframework.cloud.netflix.zuul.web.ZuulController.handleRequest(ZuulController.java:44)  at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:50)  at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)  at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)  at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)  at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)  at javax.servlet.http.HttpServlet.service(HttpServlet.java:648)  at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)  at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:108)  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at cn.com.betasoft.dxm.sso.ext.client.filter.SessionValidationFilter.doFilter(SessionValidationFilter.java:98)  at cn.com.betasoft.btrm.portal.config.ExcludeSupportFilter.doFilter(ExcludeSupportFilter.java:21)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.jasig.cas.client.util.AssertionThreadLocalFilter.doFilter(AssertionThreadLocalFilter.java:54)  at cn.com.betasoft.btrm.portal.config.ExcludeSupportFilter.doFilter(ExcludeSupportFilter.java:21)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.jasig.cas.client.util.HttpServletRequestWrapperFilter.doFilter(HttpServletRequestWrapperFilter.java:75)  at cn.com.betasoft.btrm.portal.config.ExcludeSupportFilter.doFilter(ExcludeSupportFilter.java:21)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.jasig.cas.client.authentication.AuthenticationFilter.doFilter(AuthenticationFilter.java:107)  at cn.com.betasoft.btrm.portal.config.ExcludeSupportFilter.doFilter(ExcludeSupportFilter.java:21)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.jasig.cas.client.validation.AbstractTicketValidationFilter.doFilter(AbstractTicketValidationFilter.java:201)  at cn.com.betasoft.btrm.portal.config.ExcludeSupportFilter.doFilter(ExcludeSupportFilter.java:21)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.jasig.cas.client.session.SingleSignOutFilter.doFilter(SingleSignOutFilter.java:76)  at cn.com.betasoft.btrm.portal.config.ExcludeSupportFilter.doFilter(ExcludeSupportFilter.java:21)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)  at cn.com.betasoft.btrm.portal.config.ExcludeSupportFilter.doFilter(ExcludeSupportFilter.java:21)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at cn.com.betasoft.btrm.common.serviceconfig.ServiceAssertionConfig$1.doFilter(ServiceAssertionConfig.java:53)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106)  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)  at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474)  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)  at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783)  at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)  at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:798)  at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1434)  at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)  - locked &lt;0x2a0d&gt; (a org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)  at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)  at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 读取外部文件</title>
      <link href="1470057129.html"/>
      <url>1470057129.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/51883955/how-to-specify-external-location-for-image-store-in-spring-boot-2-0-web-app">external location for image store in Spring Boot 2.0 web app?</a></p><p>之前有个需求是需要有个urlpatren像 staticFiles/xxx.pdf 请求的url 对应服务器端的某个文件夹可以直接访问,</p><p>WebMvcConfigurer 需要实现或者继承WebMvcConfigurerAdapter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Configurationpublic class MvcConfig extends WebMvcConfigurerAdapter  &#123;    @Override    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;       registry               .addResourceHandler(&quot;&#x2F;btrm&#x2F;framework&#x2F;item&#x2F;static&#x2F;**&quot;)               .addResourceLocations(&quot;file:D:\\SVNCODE\\btrm\\&quot;)               .setCachePeriod(200);        super.addResourceHandlers(registry);    &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申请教育邮箱和使用微软 OneDrive API 和腾讯云 SCF 免费搭建个人网盘</title>
      <link href="18764620.html"/>
      <url>18764620.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.4spaces.org/apply-edu-email/#comment-977">参考注册地址</a> 注册的学校是(Red Rocks Community College官网)注册申请时需要用到</p><p><a href="https://www.moerats.com/archives/879/">参考注册地址2</a> 国西南学院(<code>Southwestern College</code>)</p><p>为什么要申请教育邮箱优点如下</p><ul><li><p>$ 15 <strong>Amazon AWS</strong> 优惠券</p></li><li><p>50美元的 <strong>Digital Ocean</strong> 优惠券。它会在添加到您的帐户（仅限新帐户）后的12个月内过期。</p></li><li><p><strong>Bitnami</strong>：提供为期一年的Business 3计划，通常每月收费49美元。</p></li><li><p><strong>Crowdflower</strong>：访问Crowdflower平台。</p></li><li><p><strong>DNSimple</strong>：提供两年的个人托管DNS计划，通常每月收取5美元。</p></li><li><p><strong>GitHub</strong>：在您还是学生时提供无限的私人存储库。通常，GitHub每月收费7美元。</p></li><li><p>25美元的<strong>HackHands</strong>信用， <strong>这</strong>是一项实时的编程帮助，每天24/7可用。</p></li><li><p>一套 <strong>Microsoft Azure云服务</strong> 和开发人员工具：学生期间，Microsoft Azure，Visual Studio社区和其他Microsoft开发人员工具。</p></li><li><p><strong>NameCheap.com</strong>：提供为期一年的.ME域名注册，每年费用为18.99美元–以及为期一年的SSL证书，费用为每年10美元。</p></li><li><p><strong>Orchestrate</strong>：当您是学生时，访问每月费用为49美元的开发者帐户。它是一个完整的数据库产品组合，包括通过API进行的搜索，时间序列事件，地理位置和图形查询。</p></li><li><p><strong>SendGrid</strong>：当您是学生时，每月为学生计划提供15,000封免费电子邮件。</p></li><li><p><strong>Travis CI</strong>：当您是学生时，访问每月收费69美元的Private版本。</p></li><li><h3 id="LastPass"><a href="#LastPass" class="headerlink" title="LastPass"></a><strong>LastPass</strong></h3></li><li><p>Apple .EDU电子邮件地址从Apple购买产品，可以帮助您节省很多钱。</p></li></ul><h2 id="微软-OneDrive-API-和腾讯云-SCF-免费"><a href="#微软-OneDrive-API-和腾讯云-SCF-免费" class="headerlink" title="微软 OneDrive API 和腾讯云 SCF 免费"></a>微软 OneDrive API 和腾讯云 SCF 免费</h2><p>目前可以使用onedrive 5t 使用软件搭建自己网盘</p><p><a href="https://logi.ml/back-end/scf-onedrive-filelistor.html">oneDrive搭建个人网盘</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> onedrive </tag>
            
            <tag> 腾讯云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gnome插件安装和优化</title>
      <link href="2127448358.html"/>
      <url>2127448358.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y sudo apt install gnome-tweak-tool sudo apt install gnome-shell-extensions sudo apt install chrome-gnome-shell sudo apt install gtk2-engines-pixbuf sudo apt install libxml2-utils</span><br></pre></td></tr></table></figure><p>之前一直都是安装在~/.local/share/gnome-shell/extensions 之前都是从github 下载后 手动安装</p><p>现在有些插件安装后 优化工具一直没有显示 ,之前 使用 ~/.local/share/gnome-shell/extensions</p><p>没有权限 sudo chmod 777 extensions 给予权限 不然无法使用chrome插件(GNOME Shell integration ) 来安装</p><p>现在chrome插件安装 (GNOME Shell integration)</p><ul><li><p>对于 Google Chrome、Chromium 和 Vivaldi： <a href="https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep">Chrome Web 商店</a></p></li><li><p>对于 Firefox： <a href="https://addons.mozilla.org/en/firefox/addon/gnome-shell-integration/">Mozilla Addons</a></p></li><li><p>对于 Opera： <a href="https://addons.opera.com/en/extensions/details/gnome-shell-integration/">Opera Addons</a></p><p><a href="../img/105330tx3hptbrx55h5i1i.jpg"><img src="../img/105330tx3hptbrx55h5i1i.jpg" alt="How to install GNOME Shell Extensions"></a></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“尽管 GNOME Shell 集成扩展正在运行，但未检测到本地主机连接器。请参阅文档以获取有关安装连接器的信息。”sudo apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure><p>安装玩后访问 <a href="https://extensions.gnome.org/extension">https://extensions.gnome.org/extension</a> 就会有选择按钮了</p><p><a href="../img/1569134580875.png"><img src="../img/1569134580875.png" alt="1569134580875"></a></p><h3 id="农历插件"><a href="#农历插件" class="headerlink" title="农历插件"></a>农历插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update安装依赖sudo apt-get install gir1.2-lunar-date-2.0</span><br></pre></td></tr></table></figure><p><a href="../img/1569134876250.png"><img src="../img/1569134876250.png" alt="1569134876250"></a></p><h2 id="拓展的列表和"><a href="#拓展的列表和" class="headerlink" title="拓展的列表和"></a>拓展的列表和</h2><p><a href="../img/28027856634_5a328b1376_b.jpg"><img src="../img/28027856634_5a328b1376_b.jpg" alt="img"></a></p><h3 id="2-1-安装-Dash-to-dock"><a href="#2-1-安装-Dash-to-dock" class="headerlink" title="2.1 安装 Dash to dock ."></a>2.1 安装 Dash to dock .</h3><ul><li><strong>Hide top bar ——全屏自动隐藏顶栏,缺少这个 GNOME3 没法用</strong></li><li><strong>Clipboard Indicator —— 剪切板</strong></li><li><strong>Media player indicator —— 显示音乐播放器的状态</strong></li><li><strong>Battery status —— 显示电池电量的百分比</strong></li><li><strong>Netspeed ——在顶栏上显示网速</strong></li><li><strong>Workspace indicator —— 在顶栏显示当前示工作区的序号</strong></li><li><strong>Activities-configurator ——活动，顶栏颜色，透明等</strong></li><li><strong>User themes ——启用自定义的 shell 主题</strong></li><li><strong>Lunar Calendar ——阴历(依赖 typelib-1_0-LunarDate-2_0)</strong></li><li><strong>Openweather ——天气</strong></li><li><strong>System-monitor ——资源监控 (依赖 NetworkManager-devel libgtop-devel)</strong></li><li>topicon plus —— 通知图标</li></ul><h3 id="2-2通知栏的效果"><a href="#2-2通知栏的效果" class="headerlink" title="2.2通知栏的效果"></a>2.2通知栏的效果</h3><p>[<img src="../img/2019-09-22%2014-48-58%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="1569135029991">](../img/2019-09-22 14-48-58 的屏幕截图.png)</p><h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3 字体"></a>3 字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单独放在一个文件夹里(fonts),然后sudo cp -r 连着文件夹复制到&#x2F;usr&#x2F;share&#x2F;fonts,(sudo cp -r xxx&#x2F;fonts &#x2F;usr&#x2F;share&#x2F;fonts (xxx请换为路径))再 chmod 755 -R &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;fonts , 最后依次执行:sudo mkfontscalesudo mkfontdirsudo fc-cache</span><br></pre></td></tr></table></figure><ul><li>[<a href="https://biluohc.github.io/articles/xie-gei-ru-keng-da-xi-yi-qie-xuan-ze-gnomede-xiao-bai.html">写给入坑大蜥蜴且选择GNOME的小白]</a>)</li><li><a href="https://www.peijun.me/gnome-config.html">Gnome 配置</a></li><li><a href="https://linux.cn/article-9447-1.html">如何使用 GNOME Shell 扩展</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> gnome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下安装和初始化postgres</title>
      <link href="18764621.html"/>
      <url>18764621.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装postgres"><a href="#安装postgres" class="headerlink" title="安装postgres"></a>安装postgres</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get  updatesudp apt-get postgresql postgresql-contrib</span><br></pre></td></tr></table></figure><ul><li>PostgreSQL安装完成后默认是已经启动的，但是也可以通过下面的方式来手动启动服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;postgresql start  开启sudo &#x2F;etc&#x2F;init.d&#x2F;postgresql stop  关闭sudo &#x2F;etc&#x2F;init.d&#x2F;postgresql restart  重启</span><br></pre></td></tr></table></figure><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul><li>创建数据库用户ricky，并指定为超级用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres createuser --superuser username</span><br></pre></td></tr></table></figure><ul><li>配置用户的密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql  进入控制台</span><br></pre></td></tr></table></figure><ul><li><p>为刚创建的用户创建数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres createdb --owner&#x3D;dbname</span><br></pre></td></tr></table></figure></li><li><p>登录数据库</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -U username -d dbname -h 127.0.0.1 -p 5432</span><br></pre></td></tr></table></figure><h3 id="修改用户数据"><a href="#修改用户数据" class="headerlink" title="修改用户数据"></a>修改用户数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改用户密码    1.  sudo -u postgres psql    2.  ALTER USER username  WITH PASSWORD &#96;&#96;&#39;postgres&#39;&#96;&#96;;tips:        密码postgres要用引号引起来        命令最后有分号</span><br></pre></td></tr></table></figure><h3 id="修改linux系统postgres用户的密码"><a href="#修改linux系统postgres用户的密码" class="headerlink" title="修改linux系统postgres用户的密码"></a>修改linux系统postgres用户的密码</h3><p>PostgreSQL会创建一个默认的linux用户postgres，修改该用户密码的方法如下：</p><p>步骤一：删除用户postgres的密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;sudo&#96;  &#96;passwd&#96; &#96;-d postgres&#96;</span><br></pre></td></tr></table></figure><p>步骤二：设置用户postgres的密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;sudo&#96; &#96;-u postgres &#96;&#96;passwd&#96;</span><br></pre></td></tr></table></figure><p>系统提示输入新的密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;Enter new UNIX password:&#96;&#96;Retype new UNIX password:&#96;&#96;passwd&#96;&#96;: password updated successfully&#96;</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/kaituorensheng/p/4735191.html">参考文档</a></li><li><a href="https://www.howtoing.com/how-to-install-and-use-postgresql-on-ubuntu-18-04">参考文档</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aria2使用rpc下载百度云</title>
      <link href="3861112470.html"/>
      <url>3861112470.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载并安装"><a href="#1-下载并安装" class="headerlink" title="1.下载并安装"></a>1.下载并安装</h3><p>github地址-&gt;<a href="https://github.com/aria2/aria2">https://github.com/aria2/aria2</a></p><p>这边提供一下deb 包的下载地址 <a href="https://ugetdm.com/go/ubuntu-64-bionic-aria2-download">https://ugetdm.com/go/ubuntu-64-bionic-aria2-download</a></p><p>或者 sudo apt-get install aria2</p><p>可以尝试在命令行 使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c  --conf-path&#x3D;&lt;配置地址&gt; -D        # aria2c -c -s 5 http:&#x2F;&#x2F;example.org&#x2F;mylinux.iso        -c : 断点续传        -s : 使用线程数        2、Download from 2 sources        # aria2c http:&#x2F;&#x2F;a&#x2F;f.iso   ftp:&#x2F;&#x2F;b&#x2F;f.iso</span><br></pre></td></tr></table></figure><p>下载相关的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、Download from WEB <span class="comment"># aria2c -c -s 5 http://example.org/mylinux.iso-c : 断点续传-s : 使用线程数2、Download from 2 sources# aria2c http://a/f.iso   ftp://b/f.iso3、Download using 2 connections per host# aria2c -x2 http://a/f.iso4、BitTorrent Magnet URI# aria2c &#x27;magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C&#x27;5、Metalink# aria2c http://example.org/mylinux.metalink6、Download URIs found in text file# aria2c -i uris.txt7、BT# aria2c /tmp/CentOS-6.3-i386-bin-DVD1to2.torrent# aria2c http://mirrors.163.com/centos/6.6/isos/x86_64/CentOS-6.6-x86_64-minimal.torrent</span></span><br></pre></td></tr></table></figure><h2 id="2-配置Aria2"><a href="#2-配置Aria2" class="headerlink" title="2.配置Aria2"></a>2.配置Aria2</h2><p>一般地址是在 ~/.aria2/aria2.conf</p><p>rpc设置为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#用户名</span><br><span class="line">#rpc-user&#x3D;user</span><br><span class="line">#密码</span><br><span class="line">#rpc-passwd&#x3D;passwd</span><br><span class="line">#上面的认证方式不建议使用,建议使用下面的token方式</span><br><span class="line">#设置加密的密钥</span><br><span class="line">#rpc-secret&#x3D;token</span><br><span class="line">#允许rpc</span><br><span class="line">enable-rpc&#x3D;true</span><br><span class="line">#允许所有来源, web界面跨域权限需要</span><br><span class="line">rpc-allow-origin-all&#x3D;true</span><br><span class="line">#允许外部访问，false的话只监听本地端口</span><br><span class="line">rpc-listen-all&#x3D;true</span><br><span class="line">#RPC端口, 仅当默认端口被占用时修改</span><br><span class="line">rpc-listen-port&#x3D;6800</span><br><span class="line">#最大同时下载数(任务数), 路由建议值: 3</span><br><span class="line">max-concurrent-downloads&#x3D;5</span><br><span class="line">#断点续传</span><br><span class="line">continue&#x3D;true</span><br><span class="line">#同服务器连接数</span><br><span class="line">max-connection-per-server&#x3D;16</span><br><span class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class="line">min-split-size&#x3D;10M</span><br><span class="line">#单文件最大线程数, 路由建议值: 5</span><br><span class="line">split&#x3D;10</span><br><span class="line">#下载速度限制</span><br><span class="line">max-overall-download-limit&#x3D;0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-download-limit&#x3D;0</span><br><span class="line">#上传速度限制</span><br><span class="line">max-overall-upload-limit&#x3D;0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-upload-limit&#x3D;0</span><br><span class="line">#断开速度过慢的连接</span><br><span class="line">#lowest-speed-limit&#x3D;0</span><br><span class="line">#验证用，需要1.16.1之后的release版本</span><br><span class="line">#referer&#x3D;*</span><br><span class="line">#文件保存路径, 默认为当前启动位置</span><br><span class="line">dir&#x3D;&#x2F;home&#x2F;leek&#x2F;save&#x2F;download</span><br><span class="line">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span><br><span class="line">#disk-cache&#x3D;0</span><br><span class="line">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span><br><span class="line">#enable-mmap&#x3D;true</span><br><span class="line">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span><br><span class="line">#所需时间 none &lt; falloc ? trunc « prealloc, falloc和trunc需要文件系统和内核支持</span><br><span class="line">file-allocation&#x3D;prealloc</span><br><span class="line">bt-tracker&#x3D;udp:&#x2F;&#x2F;62.138.0.158:6969&#x2F;announce,udp:&#x2F;&#x2F;188.241.58.209:6969&#x2F;announce,udp:&#x2F;&#x2F;93.158.213.92:1337&#x2F;announce,udp:&#x2F;&#x2F;62.210.97.59:1337&#x2F;announce,udp:&#x2F;&#x2F;151.80.120.113:2710&#x2F;announce,udp:&#x2F;&#x2F;151.80.120.113:2710&#x2F;announce,udp:&#x2F;&#x2F;165.231.0.116:80&#x2F;announce,udp:&#x2F;&#x2F;208.83.20.20:6969&#x2F;announce,udp:&#x2F;&#x2F;37.235.174.46:2710&#x2F;announce,udp:&#x2F;&#x2F;185.181.60.67:80&#x2F;announce,udp:&#x2F;&#x2F;54.37.235.149:6969&#x2F;announce,udp:&#x2F;&#x2F;89.234.156.205:451&#x2F;announce,udp:&#x2F;&#x2F;35.156.19.129:6969&#x2F;announce,udp:&#x2F;&#x2F;159.100.245.181:6969&#x2F;announce,udp:&#x2F;&#x2F;51.15.40.114:80&#x2F;announce,udp:&#x2F;&#x2F;142.44.243.4:1337&#x2F;announce,udp:&#x2F;&#x2F;176.113.71.19:6961&#x2F;announce,udp:&#x2F;&#x2F;5.206.54.49:6969&#x2F;announce,udp:&#x2F;&#x2F;184.105.151.164:6969&#x2F;announce,http:&#x2F;&#x2F;184.105.151.164:6969&#x2F;announce,udp:&#x2F;&#x2F;51.254.249.186:6969&#x2F;announce,udp:&#x2F;&#x2F;185.83.215.123:6969&#x2F;announce,udp:&#x2F;&#x2F;194.182.176.251:6969&#x2F;announce,udp:&#x2F;&#x2F;212.1.226.176:2710&#x2F;announce,udp:&#x2F;&#x2F;212.47.227.58:6969&#x2F;announce,udp:&#x2F;&#x2F;95.211.168.204:2710&#x2F;announce,udp:&#x2F;&#x2F;46.148.18.250:2710&#x2F;announce,udp:&#x2F;&#x2F;165.227.0.51:6969&#x2F;announce,udp:&#x2F;&#x2F;91.217.91.21:3218&#x2F;announce,udp:&#x2F;&#x2F;190.146.242.80:7070&#x2F;announce,udp:&#x2F;&#x2F;149.129.65.231:2710&#x2F;announce,udp:&#x2F;&#x2F;15.188.67.15:6969&#x2F;announce,udp:&#x2F;&#x2F;185.97.255.30:6969&#x2F;announce,udp:&#x2F;&#x2F;51.15.134.218:2710&#x2F;announce,udp:&#x2F;&#x2F;52.58.128.163:6969&#x2F;announce,udp:&#x2F;&#x2F;45.86.70.144:6969&#x2F;announce,udp:&#x2F;&#x2F;109.72.83.214:80&#x2F;announce,udp:&#x2F;&#x2F;217.76.183.53:80&#x2F;announce,udp:&#x2F;&#x2F;46.148.18.254:2710&#x2F;announce,udp:&#x2F;&#x2F;23.95.32.130:6969&#x2F;announce,udp:&#x2F;&#x2F;207.241.231.226:6969&#x2F;announce,udp:&#x2F;&#x2F;207.241.226.111:6969&#x2F;announce,udp:&#x2F;&#x2F;207.180.241.35:2710&#x2F;announce,https:&#x2F;&#x2F;47.240.44.4:443&#x2F;announce,http:&#x2F;&#x2F;79.133.36.244:6969&#x2F;announce,http:&#x2F;&#x2F;91.217.91.21:3218&#x2F;announce,http:&#x2F;&#x2F;93.158.213.92:1337&#x2F;announce,http:&#x2F;&#x2F;51.15.134.218:2710&#x2F;announce,http:&#x2F;&#x2F;153.92.6.117:80&#x2F;announce,http:&#x2F;&#x2F;139.99.45.37:80&#x2F;announce,http:&#x2F;&#x2F;78.30.254.12:2710&#x2F;announce,http:&#x2F;&#x2F;91.207.136.85:80&#x2F;announce,http:&#x2F;&#x2F;52.203.65.11:80&#x2F;announce,udp:&#x2F;&#x2F;95.211.168.204:2710&#x2F;announce,udp:&#x2F;&#x2F;176.113.68.67:6961&#x2F;announce,udp:&#x2F;&#x2F;104.244.79.229:6969&#x2F;announce,udp:&#x2F;&#x2F;51.15.3.74:6969&#x2F;announce,udp:&#x2F;&#x2F;218.5.42.53:2710&#x2F;announce,udp:&#x2F;&#x2F;185.83.214.123:6969&#x2F;announce,udp:&#x2F;&#x2F;80.211.26.119:9696&#x2F;announce,udp:&#x2F;&#x2F;139.99.100.97:8080&#x2F;announce,https:&#x2F;&#x2F;212.237.22.141:443&#x2F;announce,http:&#x2F;&#x2F;182.150.53.61:8080&#x2F;announce,http:&#x2F;&#x2F;95.107.48.115:80&#x2F;announce,http:&#x2F;&#x2F;37.235.174.46:2710&#x2F;announce,http:&#x2F;&#x2F;176.113.71.19:6961&#x2F;announce,http:&#x2F;&#x2F;176.113.68.67:6961&#x2F;announce,http:&#x2F;&#x2F;34.92.10.197:6789&#x2F;announce,http:&#x2F;&#x2F;95.216.171.255:6969&#x2F;announce,http:&#x2F;&#x2F;62.210.202.61:80&#x2F;announce,http:&#x2F;&#x2F;104.244.79.229:80&#x2F;announce,http:&#x2F;&#x2F;176.123.5.118:80&#x2F;announce,http:&#x2F;&#x2F;51.79.71.167:80&#x2F;announce,http:&#x2F;&#x2F;185.83.214.123:6969&#x2F;announce,http:&#x2F;&#x2F;62.210.177.88:1096&#x2F;announce,http:&#x2F;&#x2F;51.68.122.172:80&#x2F;announce</span><br><span class="line">## BT&#x2F;PT下载相关 ##</span><br><span class="line"></span><br><span class="line"># 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true</span><br><span class="line">#follow-torrent&#x3D;true</span><br><span class="line"># BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span><br><span class="line">listen-port&#x3D;51413</span><br><span class="line"># 单个种子最大连接数, 默认:55</span><br><span class="line">#bt-max-peers&#x3D;55</span><br><span class="line"># 打开DHT功能, PT需要禁用, 默认:true</span><br><span class="line">enable-dht&#x3D;false</span><br><span class="line"># 打开IPv6 DHT功能, PT需要禁用</span><br><span class="line">#enable-dht6&#x3D;false</span><br><span class="line"># DHT网络监听端口, 默认:6881-6999</span><br><span class="line">#dht-listen-port&#x3D;6881-6999</span><br><span class="line"># 本地节点查找, PT需要禁用, 默认:false</span><br><span class="line">#bt-enable-lpd&#x3D;false</span><br><span class="line"># 种子交换, PT需要禁用, 默认:true</span><br><span class="line">enable-peer-exchange&#x3D;false</span><br><span class="line"># 每个种子限速, 对少种的PT很有用, 默认:50K</span><br><span class="line">#bt-request-peer-speed-limit&#x3D;50K</span><br><span class="line"># 客户端伪装, PT需要</span><br><span class="line">peer-id-prefix&#x3D;-TR2770-</span><br><span class="line">user-agent&#x3D;Transmission&#x2F;2.77</span><br><span class="line">peer-agent&#x3D;Transmission&#x2F;2.77</span><br><span class="line"># 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0</span><br><span class="line">seed-ratio&#x3D;0</span><br><span class="line"># 强制保存会话, 即使任务已经完成, 默认:false</span><br><span class="line"># 较新的版本开启后会在任务完成后依然保留.aria2文件</span><br><span class="line">#force-save&#x3D;false</span><br><span class="line"># BT校验相关, 默认:true</span><br><span class="line">#bt-hash-check-seed&#x3D;true</span><br><span class="line"># 继续之前的BT任务时, 无需再次校验, 默认:false</span><br><span class="line">bt-seed-unverified&#x3D;true</span><br><span class="line"># 保存磁力链接元数据为种子文件(.torrent文件), 默认:false</span><br><span class="line">bt-save-metadata&#x3D;true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-rpc调用-下载百度云"><a href="#3-rpc调用-下载百度云" class="headerlink" title="3.rpc调用 下载百度云"></a>3.rpc调用 下载百度云</h2><p>测试 rpc可用性</p><p><a href="http://127.0.0.1:6800/jsonrpc?jsoncallback=1">http://127.0.0.1:6800/jsonrpc?jsoncallback=1</a></p><p>有返回既能用否则可能是服务没有起起来</p><p>使用的chrome 油猴插件 百度网盘超级助手选择pandownload -&gt; 调用baiduwp.com 的下载接口直接下载 -&gt; 点击具体文件后选择使用Aria2下载</p><p><a href="../img/1567683581804.png"><img src="../img/1567683581804.png" alt="1567683581804"></a></p><p>参考链接</p><ul><li><a href="http://ivo-wang.github.io/2019/04/18/%E5%85%B3%E4%BA%8Earia2%E6%9C%80%E5%AE%8C%E6%95%B4%E7%9A%84%E4%B8%80%E7%AF%87/">关于aria2最完整的一篇</a></li><li><a href="https://binux.blog/2012/12/aria2-examples/">https://binux.blog/2012/12/aria2-examples/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>floccus利用坚果云WebDAV跨浏览器同步数据</title>
      <link href="4202359184.html"/>
      <url>4202359184.html</url>
      
        <content type="html"><![CDATA[<h3 id="floccus介绍"><a href="#floccus介绍" class="headerlink" title="floccus介绍"></a>floccus介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Floccus 是一款可以通过 Nextcloud，WebDAV 或本地文件（以及任何文件同步解决方案）跨浏览器同步书签的插件，支持 Chrome、Firefox、Kiwi 等浏览器（不支持 iOS）项目地址: https:&#x2F;&#x2F;github.com&#x2F;marcelklehr&#x2F;floccusWebDAV ：目前支持 「坚果云、nextcloud &#x2F; owncloud，box」 等 WebDAV 服务器Nextcloud 书签 ：利用 Nextcloud 自带的书签应用程序进行同步，可通过 Web 访问。(需要nextcloud v12 以上版本)。本地文件同步 ：利用 LoFloccus 4 软件将书签同步到本地, 再利用 Dropbox，Syncthing，rsync 等进行跨设备同步。</span><br></pre></td></tr></table></figure><h3 id="配置坚果云"><a href="#配置坚果云" class="headerlink" title="配置坚果云"></a>配置坚果云</h3><p><a href="../img/1567081469042.png"><img src="../img/1567081469042.png" alt="1567081469042"></a></p><p>尽量和<strong>和我的坚果云文件夹</strong>同级为了后面填写书签同步路径,然后上传一个bookmarks.xbel文件到刚才新建的文件夹里面，没有的<a href="https://upyuncc.naibabiji.com/wp-content/uploads/2019/05/bookmarks.zip">点这里下载</a>。</p><p>接着坚果云“账户信息”-“安全选项”-“第三方应用管理”，创建一个WebDAV应用，获取密码</p><p><a href="../img/1567080871435.png"><img src="../img/1567080871435.png" alt="1567080871435"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 安装Firefox chrome 插件</span><br></pre></td></tr></table></figure><p><a href="https://chrome.google.com/webstore/detail/floccus/fnaicdffflnofjppbagibeoednhnbjhg">Chrome扩展地址</a>（<a href="https://crx.yougaoji.com/crx_download/151">离线地址</a>）、<a href="https://addons.mozilla.org/en-US/firefox/addon/floccus/">Firefox扩展地址</a></p><p><a href="../img/1567080794015.png"><img src="../img/1567080794015.png" alt="1567080794015"></a></p><p><a href="../img/1567080971630.png"><img src="../img/1567080971630.png" alt="1567080971630"></a></p><h3 id="最后一个注意的"><a href="#最后一个注意的" class="headerlink" title="最后一个注意的"></a>最后一个注意的</h3><p><a href="../img/1567081020328.png"><img src="../img/1567081020328.png" alt="1567081020328"></a></p><p>不然只能同步一部分的</p><p><a href="javascript:;"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> webdav </tag>
            
            <tag> 坚果云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POST与PUT区别RESTFUL风格中</title>
      <link href="4265857413.html"/>
      <url>4265857413.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-HTTP协议详解"><a href="#1-HTTP协议详解" class="headerlink" title="1 HTTP协议详解"></a><strong>1 HTTP协议详解</strong></h3><p>转载地址 <strong><a href="http://blog.yikaiba.com/Home/Article/index/id/156.html">http://blog.yikaiba.com/Home/Article/index/id/156.html</a></strong></p><p>HTTP是HyperText Transfer Protocol（超文本传输协议）的缩写。它的发展是万维网协会（WorldWide Web Consortium）和Internet工作小组IETF（Internet Engineering Task Force）合作的结果，（他们）最终发布了一系列的RFC，RFC 1945定义了HTTP/1.0版本。其中最著名的就是RFC 2616。RFC 2616定义了今天普遍使用的一个版本——HTTP 1.1。</p><p>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是用于从WWW服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。</p><p>HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。如下图所示：</p><p><a href="../img/8732AF49534540D8AFCD804A4335A2D2.png"><img src="../img/8732AF49534540D8AFCD804A4335A2D2.png" alt="img"></a></p><p>默认HTTP的端口号为80，HTTPS的端口号为443。</p><p>HTTP协议永远都是客户端发起请求，服务器回送响应。见下图：</p><p><a href="../img/65E389D17A3F4C6AA8A5B6F542DB58AA.png"><img src="../img/65E389D17A3F4C6AA8A5B6F542DB58AA.png" alt="img"></a></p><p>这样就限制了使用HTTP协议，无法实现在客户端没有发起请求的时候，服务器将消息推送给客户端。</p><p>HTTP协议是一个无状态的协议，同一个客户端的这次请求和上次请求是没有对应关系。</p><p><strong>一次HTTP操作称为一个事务，其工作过程可分为四步：</strong></p><p>1）首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作开始。</p><p>2）建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。</p><p>3）服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。</p><p>4）客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。</p><p>如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端，有显示屏输出。对于用户来说，这些过程是由HTTP自己完成的，用户只要用鼠标点击，等待信息显示就可以了。</p><p><strong>2 HTTP协议详解之请求篇</strong></p><p>http请求由三部分组成，分别是：请求行、消息报头、请求正文</p><p>请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本，格式如下：Method Request-URIHTTP-Version CRLF</p><p>其中 Method表示请求方法；Request-URI是一个统一资源标识符；HTTP-Version表示请求的HTTP协议版本；CRLF表示回车和换行（除了作为结尾的CRLF外，不允许出现单独的CR或LF字符）。</p><p><strong>请求方法（所有方法全为大写）有多种，各个方法的解释如下：</strong></p><p>GET 请求获取Request-URI所标识的资源</p><p>POST 在Request-URI所标识的资源后附加新的数据</p><p>HEAD 请求获取由Request-URI所标识的资源的响应消息报头</p><p>PUT 请求服务器存储一个资源，并用Request-URI作为其标识</p><p>DELETE 请求服务器删除Request-URI所标识的资源</p><p>TRACE 请求服务器回送收到的请求信息，主要用于测试或诊断</p><p>CONNECT 保留将来使用</p><p>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求</p><p>应用举例：</p><p>GET方法：在浏览器的地址栏中输入网址的方式访问网页时，浏览器采用GET方法向服务器获取资源，eg:GET /form.html HTTP/1.1 (CRLF)</p><p>POST方法要求被请求服务器接受附在请求后面的数据，常用于提交表单。</p><p>HEAD方法与GET方法几乎是一样的，对于HEAD请求的回应部分来说，它的HTTP头部中包含的信息与通过GET请求所得到的信息是相同的。利用这个方法，不必传输整个资源内容，就可以得到Request-URI所标识的资源的信息。该方法常用于测试超链接的有效性，是否可以访问，以及最近是否更新。</p><p><strong>3 HTTP协议详解之响应篇</strong></p><p>在接收和解释请求消息后，服务器返回一个HTTP响应消息。</p><p>HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文</p><p><strong>1、状态行格式如下：</strong></p><p>HTTP-VersionStatus-Code Reason-Phrase CRLF</p><p>其中，HTTP-Version表示服务器HTTP协议的版本；Status-Code表示服务器发回的响应状态代码；Reason-Phrase表示状态代码的文本描述。</p><p>状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：</p><p>1xx：指示信息–表示请求已接收，继续处理</p><p>2xx：成功–表示请求已被成功接收、理解、接受</p><p>3xx：重定向–要完成请求必须进行更进一步的操作</p><p>4xx：客户端错误–请求有语法错误或请求无法实现</p><p>5xx：服务器端错误–服务器未能实现合法的请求</p><p><strong>2、常见状态代码、状态描述、说明：</strong></p><p><strong>请求收到，继续处理</strong></p><p>100——客户必须继续发出请求</p><p>101——客户要求服务器根据请求转换HTTP协议版本</p><p><strong>操作成功收到，分析、接受</strong></p><p>200——交易成功</p><p>201——提示知道新文件的URL</p><p>202——接受和处理、但处理未完成</p><p>203——返回信息不确定或不完整</p><p>204——请求收到，但返回信息为空</p><p>205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</p><p>206——服务器已经完成了部分用户的GET请求</p><p><strong>完成此请求必须进一步处理</strong></p><p>300——请求的资源可在多处得到</p><p>301——删除请求数据</p><p>302——在其他地址发现了请求数据</p><p>303——建议客户访问其他URL或访问方式</p><p>304——客户端已经执行了GET，但文件未变化</p><p>305——请求的资源必须从服务器指定的地址得到</p><p>306——前一版本HTTP中使用的代码，现行版本中不再使用</p><p>307——申明请求的资源临时性删除</p><p><strong>请求包含一个错误语法或不能完成</strong></p><p>400——错误请求，如语法错误</p><p>401——未授权</p><p>HTTP 401.1 - 未授权：登录失败</p><p>　　 HTTP 401.2 - 未授权：服务器配置问题导致登录失败</p><p>　　 HTTP 401.3 - ACL 禁止访问资源</p><p>　　 HTTP 401.4 - 未授权：授权被筛选器拒绝</p><p>HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败</p><p>402——保留有效ChargeTo头响应</p><p>403——禁止访问</p><p>HTTP 403.1 禁止访问：禁止可执行访问</p><p>　　 HTTP 403.2 - 禁止访问：禁止读访问</p><p>　　 HTTP 403.3 - 禁止访问：禁止写访问</p><p>　　 HTTP 403.4 - 禁止访问：要求 SSL</p><p>　　 HTTP 403.5 - 禁止访问：要求 SSL128</p><p>　　 HTTP 403.6 - 禁止访问：IP 地址被拒绝</p><p>　　 HTTP 403.7 - 禁止访问：要求客户证书</p><p>　　 HTTP 403.8 - 禁止访问：禁止站点访问</p><p>　　 HTTP 403.9 - 禁止访问：连接的用户过多</p><p>　　 HTTP 403.10 - 禁止访问：配置无效</p><p>　　 HTTP 403.11 - 禁止访问：密码更改</p><p>　　 HTTP 403.12 - 禁止访问：映射器拒绝访问</p><p>　　 HTTP 403.13 - 禁止访问：客户证书已被吊销</p><p>　　 HTTP 403.15 - 禁止访问：客户访问许可过多</p><p>　　 HTTP 403.16 - 禁止访问：客户证书不可信或者无效</p><p>HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效</p><p>404——没有发现文件、查询或URl</p><p>405——用户在Request-Line字段定义的方法不允许</p><p>406——根据用户发送的Accept拖，请求资源不可访问</p><p>407——类似401，用户必须首先在代理服务器上得到授权</p><p>408——客户端没有在用户指定的饿时间内完成请求</p><p>409——对当前资源状态，请求不能完成</p><p>410——服务器上不再有此资源且无进一步的参考地址</p><p>411——服务器拒绝用户定义的Content-Length属性请求</p><p>412——一个或多个请求头字段在当前请求中错误</p><p>413——请求的资源大于服务器允许的大小</p><p>414——请求的资源URL长于服务器允许的长度</p><p>415——请求资源不支持请求项目格式</p><p>416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</p><p>417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</p><p><strong>服务器执行一个完全有效请求失败</strong></p><p>　　 HTTP 500 - 内部服务器错误</p><p>　　 HTTP 500.100 - 内部服务器错误 -ASP 错误</p><p>　　 HTTP 500-11 服务器关闭</p><p>　　 HTTP 500-12 应用程序重新启动</p><p>　　 HTTP 500-13 - 服务器太忙</p><p>　　 HTTP 500-14 - 应用程序无效</p><p>　　 HTTP 500-15 - 不允许请求 global.asa</p><p>　　 Error 501 - 未实现</p><p> HTTP 502 - 网关错误</p><p>　　 <em>HTTP 500.100 - 内部服务器错误 -ASP 错误</em></p><p>　　 <em>HTTP 500-11 服务器关闭</em></p><p>　　 <em>HTTP 500-12 应用程序重新启动</em></p><p>　　 <em>HTTP 500-13 - 服务器太忙</em></p><p>　　 <em>HTTP 500-14 - 应用程序无效</em></p><p>　　 <em>HTTP 500-15 - 不允许请求 global.asa</em></p><p>　　 <em>Error 501 - 未实现</em></p><p> <em>HTTP 502 - 网关错误</em></p><p><strong>4 API设计的基本要求</strong></p><p>一个被普遍承认和遵守：RESTful设计原则。它被Roy Felding提出（在他的”基于网络的软件架构“论文中第五章）。而REST的核心原则是将你的API拆分为逻辑上的资源。这些资源通过http被操作（GET ,POST,PUT,DELETE）。</p><p> 显然从API用户的角度来看，”资源“应该是个名词。即使你的内部数据模型和资源已经有了很好的对应，API设计的时候你仍然不需要把它们一对一的都暴露出来。这里的关键是隐藏内部资源，暴露必需的外部资源。</p><p> 一旦定义好了要暴露的资源，你可以定义资源上允许的操作，以及这些操作和你的API的对应关系：</p><p>· GET /tickets # 获取ticket列表</p><p>· GET /tickets/12 # 查看某个具体的ticket</p><p>· POST /tickets # 新建一个ticket</p><p>· PUT /tickets/12 # 更新ticket 12.</p><p>· DELETE /tickets/12 #删除ticekt 12</p><p> 可以看出使用REST的好处在于可以充分利用http的强大实现对资源的CURD功能。而这里你只需要一个endpoint：/tickets,再没有其他什么命名规则和url规则了，cool！</p><p> 但是有的endpoint，需要使用复数使得你的URL更加规整。这让API使用者更加容易理解，对开发者来说也更容易实现。</p><p>如何处理关联？关于如何处理资源之间的管理REST原则也有相关的描述：</p><p>· GET /tickets/12/messages- Retrieves list of messages forticket #12</p><p>· GET /tickets/12/messages/5- Retrieves message #5 forticket #12</p><p>· POST /tickets/12/messages- Creates a new message inticket #12</p><p>· PUT /tickets/12/messages/5- Updates message #5 for ticket#12</p><p>· PATCH /tickets/12/messages/5- Partially updates message#5 for ticket #12</p><p>· DELETE /tickets/12/messages/5- Deletes message #5 forticket #12</p><p> 其中，如果这种关联和资源独立，那么我们可以在资源的输出表示中保存相应资源的endpoint。然后API的使用者就可以通过点击链接找到相关的资源。如果关联和资源联系紧密。资源的输出表示就应该直接保存相应资源信息。（例如这里如果message资源是独立存在的，那么上面 GET/tickets/12/messages就会返回相应message的链接；相反的如果message不独立存在，他和ticket依附存在，则上面的API调用返回直接返回message信息）</p><p><strong>5 get和post区别</strong></p><p> 常用的请求方式是GET和POST.</p><p>GET方式：是以实体的方式得到由请求URI所指定资源的信息，如果请求URI只是一个数据产生过程，那么最终要在响应实体中返回的是处理过程的结果所指向的资源，而不是处理过程的描述。</p><p>POST方式：用来向目的服务器发出请求，要求它接受被附在请求后的实体，并把它当作请求队列中请求URI所指定资源的附加新子项，Post被设计成用统一的方法实现下列功能：</p><p>1）对现有资源的解释；</p><p>2）向电子公告栏、新闻组、邮件列表或类似讨论组发信息；</p><p>3）提交数据块；</p><p>4）通过附加操作来扩展数据库 。</p><p>从上面描述可以看出，Get是向服务器发索取数据的一种请求；而Post是向服务器提交数据的一种请求，要提交的数据位于信息头后面的实体中。</p><p>GET与POST方法有以下区别：</p><p>1） 在客户端，Get方式在通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTMLHEADER内提交。</p><p>2） GET方式提交的数据最多只能有1024字节，而POST则没有此限制。</p><p>3） 安全性问题。正如在（1）中提到，使用 Get 的时候，参数会显示在地址栏上，而 Post 不会。所以，如果这些数据是中文数据而且是非敏感数据，那么使用 get；如果用户输入的数据不是中文字符而且包含敏感数据，那么还是使用 post为好。</p><p>4） 安全的和幂等的。所谓安全的意味着该操作用于获取信息而非修改信息。幂等的意味着对同一 URL 的多个请求应该返回同样的结果。完整的定义并不像看起来那样严格。换句话说，GET 请求一般不应产生副作用。从根本上讲，其目标是当用户打开一个链接时，她可以确信从自身的角度来看没有改变资源。比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。反之亦然。POST 请求就不那么轻松了。POST 表示可能改变服务器上的资源的请求。仍然以新闻站点为例，读者对文章的注解应该通过 POST 请求实现，因为在注解提交之后站点已经不同了（比方说文章下面出现一条注解）。</p><p><strong>6 put和post区别</strong></p><p>有的观点认为，应该用POST来创建一个资源，用PUT来更新一个资源；有的观点认为，应该用PUT来创建一个资源，用POST来更新一个资源；还有的观点认为可以用PUT和POST中任何一个来做创建或者更新一个资源。这些观点都只看到了风格，争论起来也只是争论哪种风格更好，其实，用PUT还是POST，不是看这是创建还是更新资源的动作，这不是风格的问题，而是语义的问题。</p><p>举一个简单的例子，假如有一个博客系统提供一个Web API，模式是这样<a href="http://superblogging/blogs/%7Bblog-name%7D%EF%BC%8C%E5%BE%88%E7%AE%80%E5%8D%95%EF%BC%8C%E5%B0%86%7Bblog-name%7D">http://superblogging/blogs/{blog-name}，很简单，将{blog-name}</a></p><p>替换为我们的blog名字，往这个URI发送一个HTTP PUT或者POST请求，HTTP的body部分就是博文，这是一个很简单的REST API例子。我们应该用</p><p>PUT方法还是POST方法？取决于这个REST服务的行为是否是idempotent的，假如我们发送两个<a href="http://superblogging/blogs/post/Sample%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%9C%8D">http://superblogging/blogs/post/Sample请求，服</a></p><p>务器端是什么样的行为？如果产生了两个博客帖子，那就说明这个服务不是idempotent的，因为多次使用产生了副作用了嘛；如果后一个请求把第一个</p><p>请求覆盖掉了，那这个服务就是idempotent的。前一种情况，应该使用POST方法，后一种情况，应该使用PUT方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> post </tag>
            
            <tag> put </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费短信接码网站</title>
      <link href="124395117.html"/>
      <url>124395117.html</url>
      
        <content type="html"><![CDATA[<h2 id="国内平台展开目录"><a href="#国内平台展开目录" class="headerlink" title="国内平台展开目录"></a>国内平台展开目录</h2><ul><li><a href="https://www.pdflibr.com/">https://www.pdflibr.com</a></li><li><a href="https://www.visitorsms.com/cn">https://www.visitorsms.com/cn</a></li><li><a href="https://www.becmd.com/">https://www.becmd.com</a></li><li><a href="http://www.114sim.com/">http://www.114sim.com</a></li><li><a href="https://yunduanxin.net/">https://yunduanxin.net</a></li><li><a href="http://www.smszk.com/">http://www.smszk.com</a></li><li><a href="http://z-sms.com/">http://z-sms.com</a></li><li><a href="http://www.shejiinn.com/">http://www.shejiinn.com</a></li><li><a href="https://sms.cngrok.com/">https://sms.cngrok.com</a></li></ul><h2 id="国外平台展开目录"><a href="#国外平台展开目录" class="headerlink" title="国外平台展开目录"></a>国外平台展开目录</h2><ul><li><a href="https://ch.freephonenum.com/">https://ch.freephonenum.com</a></li><li><a href="https://smsreceivefree.com/">https://smsreceivefree.com</a></li><li><a href="https://zh.mytrashmobile.com/">https://zh.mytrashmobile.com</a></li><li><a href="https://www.receive-sms-online.info/">https://www.receive-sms-online.info</a></li><li><a href="https://receiveasms.com/">https://receiveasms.com</a></li><li><a href="https://sms-online.co/receive-free-sms">https://sms-online.co/receive-free-sms</a></li><li><a href="https://receive-sms.com/">https://receive-sms.com</a></li></ul><p><a href="https://hao.su/2495/?from=dalao.ru">引用链接</a></p><h2 id="在线邮箱展开目录"><a href="#在线邮箱展开目录" class="headerlink" title="在线邮箱展开目录"></a>在线邮箱展开目录</h2><blockquote><p>9em</p></blockquote><p><a href="https://9em.org/">https://9em.org</a></p><p>9em.org 来自不死鸟微信群内大佬，这是一个 10 分钟邮箱服务，邮箱后缀为 [<code>@9em.org](mailto:</code>@9em.org)` 9em 取自 九条命 Email</p><p>在屏幕右上角输入一个你想要的邮箱前缀，就能收取邮件需要注意的是这个邮箱对所有人都是公开的，并且邮件仅在服务器保存十分钟，十分钟后会自动删除</p><blockquote><p>maildrop</p></blockquote><p><a href="https://maildrop.cc/">https://maildrop.cc</a></p><p>打开 maildrop 会自动生成一个临时的邮箱，如果你不想更改地址，可以直接点右上角的 Go 进入收件箱页面，也可以在右上角修改邮箱前缀地址，在进入临时收件箱页面。</p><blockquote><p>bccto</p></blockquote><p><a href="http://bccto.me/">http://bccto.me</a></p><p>10 分钟邮箱，可以自定义也可以随机申请的 10 分钟临时邮箱，支持自定义域名，可以将自己的域名绑定 bccto 服务。</p><blockquote><p>10minutemail</p></blockquote><p><a href="https://10minutemail.net/">https://10minutemail.net</a></p><p>一个 10 分钟邮箱</p><blockquote><p>10minutemail</p></blockquote><p><a href="https://10minutemail.com/">https://10minutemail.com</a></p><p>10 分钟邮箱，老牌网站 07 年稳定至今。 小部分网站网站封锁了 10minutemail 的域名，可能无法接收，可以当作备用。</p><blockquote><p>666 临时邮箱</p></blockquote><p><a href="https://www.666email.com/">https://www.666email.com/</a></p><p>UI 很简洁，提供了 2 个域名选择，可以自定义也可以随机生成。</p><blockquote><p>anyalias</p></blockquote><p><a href="https://anyalias.com/">https://anyalias.com</a><br>anyalias 是一个可以保护隐私的邮箱服务，可以生成一个自定义的邮箱然后转发给你的真实邮箱，从而达到保护隐私的效果，更多介绍查看 <a href="https://hao.su/1474/">anyalias.com：无限制的免费电子邮件地址</a></p><blockquote><p>eskiimo</p></blockquote><p><a href="https://eskiimo.com/">https://eskiimo.com</a></p><p>匿名发送邮件给任何人</p><h2 id="在线办公展开目录"><a href="#在线办公展开目录" class="headerlink" title="在线办公展开目录"></a>在线办公展开目录</h2><p><a href="https://shimo.im/">https://shimo.im</a></p><p>石墨文档</p><p><a href="https://www.notion.so/">https://www.notion.so</a></p><p>notion</p><p><a href="https://yuque.com/">https://yuque.com</a></p><p>语雀</p><p><a href="https://docs.qq.com/">https://docs.qq.com</a></p><p>腾讯文档</p><p><a href="https://tableconvert.com/">https://tableconvert.com</a></p><p>一个免费的在线表格转换工具 TableConvert</p>]]></content>
      
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu开发软件安装</title>
      <link href="1625103035.html"/>
      <url>1625103035.html</url>
      
        <content type="html"><![CDATA[<ul><li>2020-06</li></ul><p>  <img src="../img/1592125467902.png" alt="1592125467902"></p><ul><li><p>2020-05-10</p><blockquote><p>sudo apt install fonts-wqy-microhei</p></blockquote><p><img src="../img/1589077114622.png" alt="1589077114622"></p></li><li><p>2020-03-20 Ubuntu开发软件安装</p></li></ul><p> <strong>kchmviewer</strong>是用与 查看 chm,Windows下是有各种软件Linux下下载过几个软件不是对中文支持不好或者就是容易崩溃的</p><p> DbVisualizer Pro 10.0.26 [Build #3028]是用与数据库连接客户端,相比比较dbevaer是各个自定义功能和方法还方便很多,就是显示信息也是很方便,免费版就是不能直接在表里编辑数据其他完全够用,需要激活我用的最新版找了好久<a href="https://github.com/xiaguliuxiang/dbvisualizer-agent">链接地址</a></p><p> ZSH这真的是个神器,在终端上编辑和检测输入语法会非常方便,各种插件自定义后完全可以发现全新的世界,同时可以考虑.</p><p> 酸酸乳ssr,v2ray连接工具之前用的是Qv2ray.v2.1.2.linux-x64.qt5.13.2.AppImage 好用非常方便用过的最好的连接工具了</p><hr><h3 id="Linux-版SecureCRT-SecureFX-8-5-4"><a href="#Linux-版SecureCRT-SecureFX-8-5-4" class="headerlink" title="Linux 版SecureCRT/SecureFX 8.5.4"></a>Linux 版SecureCRT/SecureFX 8.5.4</h3><p>1）下载secureCRT和secureFX**<br>官网下载地址：<a href="https://www.vandyke.com/download/index.html">https://www.vandyke.com/download/index.html</a><br>scrt-sfx-8.5.4-1942.ubuntu16-64.x86_64.deb secureCRT和secureFX 前面是ssh连接 后面是FTP的连接</p><p><strong>2）进行安装</strong></p><p>sudo dpkg -i scrt-sfx-8.5.4-1942.ubuntu16-64.x86_64.deb<br>如果安装过程中因为缺少依赖而安装失败，只需要通过命令：<strong>apt-get install -f</strong>即可完成依赖的安装</p><p><strong>3）secureCRT和secureFX的License破解</strong><br><strong>破解文件下载：<a href="https://share.weiyun.com/5Mc38uB">https://share.weiyun.com/5Mc38uB</a> 密码：yetp32</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**sudo  perl securecrt_forgeek_crack.pl &#x2F;usr&#x2F;bin&#x2F;SecureCRT**启动SecureCRT，根据执行结果填写license信息即可3.1) 运行破解secureFX脚本**sudo perl securefx_forgeek_crack.pl &#x2F;usr&#x2F;bin&#x2F;SecureFX**启动SecureFX，根据执行结果填写license信息即可</span><br></pre></td></tr></table></figure><p><a href="https://www.52pojie.cn/thread-1000970-1-1.html">参考连接</a> 找了好久我这个算是比较新的 网上的大部分都不行 用的一个是都激活不了secureFX 现在可以</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo提交百度和Google收录站点</title>
      <link href="3423376587.html"/>
      <url>3423376587.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用sitemap-提交网站"><a href="#使用sitemap-提交网站" class="headerlink" title="使用sitemap 提交网站"></a>使用sitemap 提交网站</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装插件</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">l# 自动生成_config.ym</span><br><span class="line">sitemapsitemap:  path: sitemap.xml</span><br><span class="line">baidusitemap:  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h3 id="1-百度提交"><a href="#1-百度提交" class="headerlink" title="1 百度提交"></a>1 百度提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ziyuan.baidu.com&#x2F;linksubmit&#x2F;index浏览器打开   your-url&#x2F;baidusitemap.xml   看下有没有文件</span><br></pre></td></tr></table></figure><p><a href="../img/1565098183259.png"><img src="../img/1565098183259.png" alt="1565098183259"></a></p><h3 id="2-Google提交"><a href="#2-Google提交" class="headerlink" title="2 Google提交"></a>2 Google提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;search.google.com&#x2F;search-console&#x2F;sitemaps浏览器打开</span><br><span class="line">your-url&#x2F;sitemap.xml  看下有没有文件提交站点地图</span><br></pre></td></tr></table></figure><h2 id="使用-hexo-baidu-url-submit-自动提交"><a href="#使用-hexo-baidu-url-submit-自动提交" class="headerlink" title="使用 hexo-baidu-url-submit 自动提交"></a>使用 hexo-baidu-url-submit 自动提交</h2><p> <a href="https://github.com/huiwang/hexo-baidu-url-submit">github地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br><span class="line">baidu_url_submit:  count: 1000 </span><br><span class="line">## 提交最新的一个链接  </span><br><span class="line">host: alili.tech</span><br><span class="line">## 在百度站长平台中注册的域名  </span><br><span class="line">token: xxxxx </span><br><span class="line">## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! </span><br><span class="line">path: baidu_urls.txt </span><br><span class="line">## 文本文档的地址， 新链接会保存在此文本文档里deploy 配置</span><br><span class="line">deploy:- type: baidu_url_submitter </span><br><span class="line"># 百度在上面的图片点击自动提交 接口调用地址： http:&#x2F;&#x2F;data.zz.baidu.com&#x2F;urls?site&#x3D;XXX &amp;token&#x3D;XXX前面XXX是你的网站 后面XXX是token的值</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令记录</title>
      <link href="2125313135.html"/>
      <url>2125313135.html</url>
      
        <content type="html"><![CDATA[<p>最近常用的Linux 命令</p><h3 id="查询相关"><a href="#查询相关" class="headerlink" title="查询相关"></a>查询相关</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find .|xargs grep -ri <span class="string">&quot;XXX&quot;</span> -l    </span><br><span class="line">查找目录下的所有文件中包含某个字符串 XXX 1   lsof  -i:端口号 </span><br><span class="line"><span class="comment"># lsof -i:8000        COMMAND   PID USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME        nodejs  26993 root   10u  IPv4 37999514      0t0  TCP *:8000 (LISTEN)        2  netstat -tunlp | grep 端口号            -t (tcp) 仅显示tcp相关选项            -u (udp)仅显示udp相关选项            -n 拒绝显示别名，能显示数字的全部转化为数字            -l 仅列出在Listen(监听)的服务状态            -p 显示建立相关链接的程序名</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建云播基于cloud-torrent</title>
      <link href="1352061511.html"/>
      <url>1352061511.html</url>
      
        <content type="html"><![CDATA[<h3 id="基于Aria2-搭建离线云播"><a href="#基于Aria2-搭建离线云播" class="headerlink" title="基于Aria2 搭建离线云播"></a>基于Aria2 搭建离线云播</h3><p>之前撸了个谷歌云的服务器都没怎么用 现在突然记起来了随便搭建了 刚开始是想搭建基于<a href="https://blog.liyuans.com/archives/yunbt.html">参考链接</a> 离线技术来自于 Aria2</p><p>但是没有安装成功我是 Debian9 没有能安装 脚本里面的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">安装锐速 serverspeeder-all.sh</span><br></pre></td></tr></table></figure><p>而且启动里面的 mysql 还有thinkPHP 所以不上去是不是有什么其他错误</p><h3 id="换一种搭建方案基于cloud-torrent"><a href="#换一种搭建方案基于cloud-torrent" class="headerlink" title="换一种搭建方案基于cloud-torrent"></a>换一种搭建方案基于<strong>cloud-torrent</strong></h3><p>后面是想看看还有没有其他的搭建方案 搜了一下果然是有比较完善和封装比较好的服务</p><p><a href="https://www.moerats.com/archives/291/">参考链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;cloudt.sh &amp;&amp; chmod +x cloudt.sh &amp;&amp; bash cloudt.sh</span><br></pre></td></tr></table></figure><p><a href="https://github.com/jpillora/cloud-torrent">github地址</a></p><p>说一下中间的坑 因为选择想有绑定时有域名和IP的两种选项我刚好有域名就绑了个子域名后面等后面安装后启动就一直报</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can&#39;t assign requested address</span><br></pre></td></tr></table></figure><p>我以为是端口占用 杀了对于进程但是不行 我就卸载了对于软件 重新安装 在绑定端口时选择了8080 但是还是不星 但是8080是没有服务占用的</p><p>所以我换成我服务器的IP地址就行了 应该是它需要监听域名的请求但是和本机IP 不能绑定 目前的将我子域名直接解析到对于的云播地址就了</p><p>速度不错</p><p><a href="../img/2019-08-04_19-49.png"><img src="../img/2019-08-04_19-49.png" alt="img"></a></p><p>最后分享应该安卓端也可用的<a href="http://jufengxiazai.com/">点我下载</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 云播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建orientDB</title>
      <link href="2702077458.html"/>
      <url>2702077458.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get update apt-get default_jrecd &#x2F;opt</span><br><span class="line">wget https:&#x2F;&#x2F;s3.us-east-2.amazonaws.com&#x2F;orientdb3&#x2F;releases&#x2F;3.0.22&#x2F;orientdb-3.0.22.tar.gz </span><br><span class="line">tar zxvf  3.0.22&#x2F;orientdb-3.0.22.tar.gz cp -r 3.0.22&#x2F;orientdb-3.0.22.tar.gz  orientDB  </span><br><span class="line">cd orientDB  cd bin  .&#x2F;server.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> orientDb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>折腾几个小时的Ubuntu启动出错</title>
      <link href="3716506550.html"/>
      <url>3716506550.html</url>
      
        <content type="html"><![CDATA[<h3 id="Ubuntu出错"><a href="#Ubuntu出错" class="headerlink" title="Ubuntu出错"></a>Ubuntu出错</h3><p>今天莫名其妙的Ubuntu 出错 ,刚开始显示错误如下</p><p>刚开始显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“Couldn’t get size: 0x800000000000000e”加载一段时间后显示 failed start kernel   吓到我了以为关机前是有过升级的 不知道有没有升级内核补丁</span><br></pre></td></tr></table></figure><p>就被这个误导了查了好久</p><p><a href="../img/20190729215017.jpg"><img src="../img/20190729215017.jpg" alt="微信图片_20190729215017"></a></p><h3 id="引导恢复"><a href="#引导恢复" class="headerlink" title="引导恢复"></a>引导恢复</h3><p>这个弄完后就是</p><p>使用 boot-repair</p><p>但是按照网上的添加源后 使用apt-get安装完全不行一直提示什么Pakage万能安装成功提示 apt -get update 莫名其妙 准备直接找 boot-repair.deb 包千辛万苦找到后不能安装 真的是醉了</p><p>后面也是人肉在网上找的关联包 gawk_4.1.3+dfsg-0.1_amd64.deb 先安装这个后面再安装boot-repair_4ppa65_all.deb 对了我的是用U盘进的Ubuntu16</p><p>所以<a href="https://www.lanzous.com/i58030b">下载链接</a></p><h3 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h3><p>其实不是上述问题 在看到有 emergency mode 后我尝试在网搜了一下 原来是我fsb 文件的问题 仔细看打印的日志也正好是这个意思 我的某个分区没有成功挂载 ctrl+d 后直接指明的对应的分区</p><p>我是注释掉了 /etc/fstab 文件里的出错的分区 不知道是什么时候添加的 好坑</p><p><a href="https://www.jianshu.com/p/7433e0bb38e9">参考博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo优化</title>
      <link href="878762119.html"/>
      <url>878762119.html</url>
      
        <content type="html"><![CDATA[<h3 id="hexo-的-themes文件夹下存在git等文件导致URI-malformed"><a href="#hexo-的-themes文件夹下存在git等文件导致URI-malformed" class="headerlink" title="hexo 的 themes文件夹下存在git等文件导致URI malformed"></a>hexo 的 themes文件夹下存在git等文件导致URI malformed</h3><p><a href="https://blog.liexing.me/2015/09/01/oh-my-hexo/">参考链接</a></p><p>遇到过生成页面后出现一堆代码，或者是 CSS 错误，或者类似 URIError: URI malformed 这样的错误，查了半天，发现是<br>vim 修改了 ejs 文件后，自动生成了带 ~ 后缀的备份文件，这将导致 Hexo 生成的时候一起包含进去出错。删掉所有的备份文件即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">URIError: URI malformed</span><br><span class="line">    at decodeURIComponent (&lt;anonymous&gt;)</span><br><span class="line">    at &#x2F;home&#x2F;leek&#x2F;bei&#x2F;make-blog&#x2F;node_modules&#x2F;hexo-server&#x2F;lib&#x2F;middlewares&#x2F;route.js:17:28</span><br><span class="line">    at call (&#x2F;home&#x2F;leek&#x2F;bei&#x2F;make-blog&#x2F;node_modules&#x2F;connect&#x2F;index.js:239:7)</span><br><span class="line">    at next (&#x2F;home&#x2F;leek&#x2F;bei&#x2F;make-blog&#x2F;node_modules&#x2F;connect&#x2F;index.js:183:5)</span><br><span class="line">    at &#x2F;home&#x2F;leek&#x2F;bei&#x2F;make-blog&#x2F;node_modules&#x2F;hexo-server&#x2F;lib&#x2F;middlewares&#x2F;header.js:9:5</span><br><span class="line">    at call (&#x2F;home&#x2F;leek&#x2F;bei&#x2F;make-blog&#x2F;node_modules&#x2F;connect&#x2F;index.js:239:7)</span><br><span class="line">    at next (&#x2F;home&#x2F;leek&#x2F;bei&#x2F;make-blog&#x2F;node_modules&#x2F;connect&#x2F;index.js:183:5)</span><br><span class="line">    at Function.handle (&#x2F;home&#x2F;leek&#x2F;bei&#x2F;make-blog&#x2F;node_modules&#x2F;connect&#x2F;index.js:186:3)</span><br><span class="line">    at Server.app (&#x2F;home&#x2F;leek&#x2F;bei&#x2F;make-blog&#x2F;node_modules&#x2F;connect&#x2F;index.js:51:37)</span><br><span class="line">    at Server.emit (events.js:310:20)</span><br><span class="line">    at parserOnIncoming (_http_server.js:784:12)</span><br><span class="line">    at HTTPParser.parserOnHeadersComplete (_http_common.js:119:17)</span><br></pre></td></tr></table></figure><p>需要在hexo的配置文件添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">- daohang&#x2F;*</span><br><span class="line">- .git&#x2F;*</span><br></pre></td></tr></table></figure><p>如果还存在问题可以考虑 对于markdown文件中备注代码块格式加了ejs的备注</p><h3 id="tags-多标签-multi-category-and-multi-tag-2020年3月31日"><a href="#tags-多标签-multi-category-and-multi-tag-2020年3月31日" class="headerlink" title="tags 多标签 multi category and multi tag -2020年3月31日"></a>tags 多标签 multi category and multi tag -2020年3月31日</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;文章标签，可空，多标签请用格式[tag1,tag2,tag3]，如下，注意!!&quot;tags:&quot;后面有个空格tags: [tag1, tag2, tag3, ...]&#x2F;&#x2F; 下面这种方式似乎仅限于hexo 3.0tags:- npm  - vue</span><br></pre></td></tr></table></figure><p>注意tags: 后面不要有空格,-与标签名之间应该有空格</p><p><a href="https://github.com/hexojs/hexo/issues/1520">How about supporting multi category and multi tag</a></p><hr><h3 id="设置date的格式"><a href="#设置date的格式" class="headerlink" title="设置date的格式"></a>设置date的格式</h3><table><thead><tr><th align="center">变量</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>:year</code></td><td align="center">文章的发表年份（4 位数）</td></tr><tr><td align="center"><code>:month</code></td><td align="center">文章的发表月份（2 位数）</td></tr><tr><td align="center"><code>:i_month</code></td><td align="center">文章的发表月份（去掉开头的零）</td></tr><tr><td align="center"><code>:day</code></td><td align="center">文章的发表日期 (2 位数)</td></tr><tr><td align="center"><code>:i_day</code></td><td align="center">文章的发表日期（去掉开头的零）</td></tr><tr><td align="center"><code>:title</code></td><td align="center">文件名称</td></tr><tr><td align="center"><code>:post_title</code></td><td align="center">文章标题</td></tr><tr><td align="center"><code>:id</code></td><td align="center">文章 ID</td></tr><tr><td align="center"><code>:category</code></td><td align="center">分类。如果文章没有分类，则是 <code>default_category</code> 配置信息</td></tr></tbody></table><p><a href="https://github.com/Rozbo/hexo-abbrlink">github地址</a> 可以参考一下代码风格</p><h3 id="为网页设置统一风格的URL"><a href="#为网页设置统一风格的URL" class="headerlink" title="为网页设置统一风格的URL"></a>为网页设置统一风格的URL</h3><p><a href="https://github.com/Rozbo/hexo-abbrlink">github地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save 安装 该插件 后将_config.yml permalink: :abbrlink.html   # 生成唯一链接  永久链接（Permalinks）abbrlink:  alg: crc32  # 算法：crc16(default) and crc32  rep: dec    # 进制：dec(default) and hex    permalink_defaults: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;   默认是是这样拼接URL</span><br></pre></td></tr></table></figure><p><a href="https://liziczh.com/hexo-submit.html">参考链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检查Ubuntu开机的相关操作</title>
      <link href="2802364883.html"/>
      <url>2802364883.html</url>
      
        <content type="html"><![CDATA[<p> 开机启动软件都会放在这个目录下/etc/init.d/</p><p> systemd-analyze blame 可以分析开机占用时间比较多点 进程</p><p> sudo systemd-analyze plot &gt; boot.svg 可以想数据导出成 svg 文件</p><p>或者直接查看 开机日志 /var/log/boot.log</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜狗输入法linux版  两个图标在托盘 tray</title>
      <link href="7f98c9f2.html"/>
      <url>7f98c9f2.html</url>
      
        <content type="html"><![CDATA[<h3 id="托盘水平"><a href="#托盘水平" class="headerlink" title="托盘水平"></a>托盘水平</h3><p><a href="../img/1563915951910.png"><img src="../img/1563915951910.png" alt="img"></a></p><p><a href="../img/1563915998744.png"><img src="../img/1563915998744.png" alt="1563915998744"></a></p><p>起初是因为 fcitx和搜狗冲突了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 .)ps -rf |grep fcitx kill -9 对应进程  2.) killall fcitx 开机后就还行</span><br></pre></td></tr></table></figure><p>然后准备加到开机启动脚本里面 查了一下 可以是 /etc/ini.d 或者local.c 下 然后着手开始干,但是注销用户登录后还是不行,当时就蒙了主要是后面调用不出来搜狗了 有应该是fcitx 上面的汉语输入法 而且很丑,然后就接着查找资料</p><p>最后发现有人的教程里面提到fcitx的配置文件(fcitx-config-gtk3) 可以设置取消界面,就压根不知道为什么要这么配置<a href="https://www.jianshu.com/p/c936a8a2180e">参考链接</a></p><p><a href="../img/2019-07-24_04-58.png"><img src="../img/2019-07-24_04-58.png" alt="img"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 搜狗输入法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决deepin-wine 下微信黑窗口问题</title>
      <link href="835633961.html"/>
      <url>835633961.html</url>
      
        <content type="html"><![CDATA[<p> 之前一直是有deepin-wine 下微信黑窗口问题 一直拖着没解决　比较不知道怎么去解决当时是有写过一个临时优化的<a href="https://bigleek.ml/2019/03/27/ubuntu%E4%BC%98%E5%8C%963/">点击链接</a> <a href="https://yundantianchang.github.io/blogs/2018/1015-1.html">参考的的链接</a>当实现的效果是可以但是有反复 后面就没怎么弄 一直是在输入666 这可以可以消除 但是每次弹出来好烦 看到留言区的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim  /opt/deepinwine/apps/Deepin-WeChat/run.sh</span><br><span class="line">向下面追加</span><br><span class="line">wmctrl -l -G -p -x | grep wechat.exe.Wine | grep -v 微信| awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -r -i xdotool windowunmap &#123;&#125;</span><br></pre></td></tr></table></figure><p><a href="../img/1563888126000.png"><img src="../img/1563888126000.png" alt="1563888126000"></a></p><p>我修改后是可以跑通的</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p><a href="https://github.com/wszqkzqk/deepin-wine-ubuntu/issues/72#issuecomment-486963557">参考链接</a></p><p>注意要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.  sudo chmod +x /opt/deepinwine/apps/Deepin-WeChat/runrun.sh  </span><br><span class="line">给执行权限2. 根据deepin-wine 的配置和路径来</span><br></pre></td></tr></table></figure><p>我这边是没成功的不知道为什么</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 简单使用</title>
      <link href="4262021452.html"/>
      <url>4262021452.html</url>
      
        <content type="html"><![CDATA[<h1 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h1><h2 id="docker-依赖检测失败-centos7"><a href="#docker-依赖检测失败-centos7" class="headerlink" title="docker 依赖检测失败 centos7"></a>docker 依赖检测失败 centos7</h2><p>rpm -ivp *.rpm </p><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>但一直报 依赖检测失败以为是系统版本不对用命令查询 cat /etc/redhat-release</p><p>但是都是centos7 小版本有区别,这边之前都是在本地虚拟机上安装没出现这样的问题,以为是真的依赖不上,但是我使用的命令为</p><p>yum download –downloadonly=/root/download  docker </p><p>这个命令应该是会把所有依赖的软件都下载下来的</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>rpm -ivh  –nodeps –force  *.rpm </p><p>强制执行</p><h1 id="完全卸载docker"><a href="#完全卸载docker" class="headerlink" title="完全卸载docker"></a>完全卸载docker</h1><h3 id="如果已安装不想要docker、docker-engine、docker-ce相关的软件包，则卸载掉："><a href="#如果已安装不想要docker、docker-engine、docker-ce相关的软件包，则卸载掉：" class="headerlink" title="如果已安装不想要docker、docker-engine、docker-ce相关的软件包，则卸载掉："></a>如果已安装不想要docker、docker-engine、docker-ce相关的软件包，则卸载掉：</h3><p>sudo yum -y remove docker docker-common docker-selinux docker-engine docker-engine-selinux container-selinux docker-ce</p><p>#删除所有的镜像、容器、数据卷、配置文件等<br>sudo rm -rf /var/lib/docker</p><h2 id="如果已安装不想要docker、docker-engine、docker-ce相关的软件包"><a href="#如果已安装不想要docker、docker-engine、docker-ce相关的软件包" class="headerlink" title="如果已安装不想要docker、docker-engine、docker-ce相关的软件包"></a>如果已安装不想要docker、docker-engine、docker-ce相关的软件包</h2><p>则卸载掉：<br>sudo yum -y remove docker docker-common docker-selinux docker-engine docker-engine-selinux container-selinux docker-ce</p><p>#删除所有的镜像、容器、数据卷、配置文件等<br>sudo rm -rf /var/lib/docker</p><p>rpm -qa|grep docker</p><p>yum list installed|grep docker</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习笔记</title>
      <link href="1439793898.html"/>
      <url>1439793898.html</url>
      
        <content type="html"><![CDATA[<h2 id="PHP学习笔记"><a href="#PHP学习笔记" class="headerlink" title="PHP学习笔记"></a>PHP学习笔记</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP（全称：PHP：Hypertext Preprocessor，即“PHP：超文本预处理器”）是一种开源的通用计算机脚本语言，尤其适用于网络开发并可嵌入HTML中使用。PHP的语法借鉴吸收C语言、Java和Perl等流行计算机语言的特点，易于一般程序员学习。PHP的主要目标是允许网络开发人员快速编写动态页面，但PHP也被用于其他很多领域。[1]PHP最初是由勒多夫在1995年开始开发的；现在PHP的标准由the PHP Group[2]维护。PHP以PHP License作为许可协议，不过因为这个协议限制了PHP名称的使用，所以和开放源代码许可协议GPL不兼容。[3]PHP的应用范围相当广泛，尤其是在网页程序的开发上。一般来说PHP大多运行在网页服务器上，透过运行PHP代码来产生用户浏览的网页。PHP可以在多数的服务器和操作系统上运行，而且使用PHP完全是免费的。根据2013年4月的统计数据，PHP已经被安装在超过2亿4400万个网站和210万台服务器上[4]。PHP在Windows上有专门的官方移植编译项目，并且分多个VC编译器版本和线程安全特性来提供不同的版本支持。----维基百科</span><br></pre></td></tr></table></figure><p><a href="https://www.kancloud.cn/yangweijie/yang_book/30731">引用链接</a></p><p>PHP常见错误，我认为主要分为3块：</p><h2 id="1、语法错误"><a href="#1、语法错误" class="headerlink" title="1、语法错误"></a>1、语法错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parse error: syntax error, unexpected T_VARIABLE in E:\gstbook\user.php on line 268</span><br></pre></td></tr></table></figure><p>一般是少分号，在上一行或者下一行都有可能<br><code>Parse error: syntax error, unexpected &#39;.&#39; in F:\www\blog\article.php on line 100</code></p><p>多个“.”，类似的还有多个“;”等等</p><p><code>Notice: Undefined variable: a in ...</code><br>使用了一个没有被定义的变量a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parse error: syntax error, unexpected T_ELSE in</span><br></pre></td></tr></table></figure><p>if else if else 句式逻辑错误</p><p><code>Parse error: syntax error, unexpected $end in</code><br>一般是大括号不匹配</p><p><code>Parse error: syntax error, unexpected T_STRING in</code><br>一般是忘了写句末分号</p><p><code>Parse error: syntax error, unexpected T_PRIVATE in</code><br>一般是private函数位置写到了调用自己函数的内部</p><p><code>Warning: Invalid argument supplied for foreach() in</code><br>foreach 的第一个参数必须是一个数组</p><p><code>Warning: Wrong parameter count for a in</code><br>函数参数个数不对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: session_start() [function.session-start]: Cannot send session cache limiter - headers already sent (output started at F:\www\blog\index.php:10) in F:\www\blog\incl?s\config.inc.php on line 10Warning: annot modify header information - headers already sent by (output started at F:\www\blog\index.php:10) in F:\www\blog\incl?s\config.inc.php on line 12</span><br></pre></td></tr></table></figure><p>session前面不能有输出，同意的cookie也是这样的</p><p><code>Fatal error: Cannot redeclare</code><br>函数已经定义过，不能重新再定义；类也不能同名</p><h2 id="2、SQL语句错误"><a href="#2、SQL语句错误" class="headerlink" title="2、SQL语句错误"></a>2、SQL语句错误</h2><p><code>Warning: mysql_fetch_assoc(): supplied argument is not a valid MySQL result resource in</code><br>说明前面执行SQL 返回失败，一般可能是SQL语句错误 ，如分析不出来，可以Mysql_error () 看具体是哪个地方错了</p><p><code>No database selected</code><br>一般是没有连接数据库</p><p><code>Warning: mysql_connect() [function.mysql-connect]: Access denied for user ‘root’@&#39;localhost’ (using password: YES) in ….. on line 3Access denied for user ‘root’@&#39;localhost’ (using password: YES)</code><br>数据库用户名的密码错误</p><p><code>Unknown database ‘cms07261′</code><br>数据库不存在</p><p><code>Table ‘cms0726.test’ doesn’t exist</code><br>表不存在</p><p><code>Unknown column ‘abc’ in ‘field list’</code><br>字段不存在</p><p><code>Column count doesn’t match val count at row 1</code><br>sql语句中 字段值的个数比字段名个数不一样</p><h2 id="3、模板错误"><a href="#3、模板错误" class="headerlink" title="3、模板错误"></a>3、模板错误</h2><p><code>Fatal error: Smarty error: [in message_list.html line 22]: syntax error: ‘foreach: item’ must be a variable name (literal string)</code><br>foreach 后面的item 后面必须跟一个变量名，不加$，是一个字符串</p><p><code>Fatal error: Smarty error: [in admin/tpl/class_detail.html line 14]: syntax error: unrecognized tag: cs.st?nt_id (Smarty_Compiler.class.php, line 436) in D:\www\web\xmphp\inc\smarty\Smarty.class.php on line 1088</code><br>smarty语法错误：循环数组的时候，少$</p><p><code>Warning: Smarty error: unable to read resource: “message_list1.html” in</code><br>模板文件找不到，看是否是文件名写错或文件存放到别的目录中去了。</p><p><code>Fatal error: Smarty error: [in order_detail.html line 171]: syntax error: unclosed tag \&#123;elseif&#125; (opened line 157). (Smarty_Compiler.class.php, line 317) in F:\www\gstbook\xmphp\inc\smarty\Smarty.class.php on line 1088</code><br>html页面语法错误，少结束标签&lt;%/if%&gt;<br>以后遇到问题，我会及时更新！</p><p>附上PHP错误报表:</p><p>序号代码错误报告</p><table><thead><tr><th align="center">1</th><th align="center">error_reporting(Integer)</th><th align="center">此设置是每个脚本默认错误报告设置。它的参数可以是这里列出的任意常量，表示所有错误的E_ALL或者类似E_ALL&amp;E_NOTICE的一个逻辑表达式。</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">display_error(Boolean)</td><td align="center">此设置控制错误是否作为PHP输出的一部分显示出来，默认设置是on。</td></tr><tr><td align="center">3</td><td align="center">display_startup_errors(Boolean)</td><td align="center">此设置控制在PHP启动时是否显示错误，默认设置是off，而且是用来调试C扩展。</td></tr><tr><td align="center">4</td><td align="center">error_prepend_string(String)</td><td align="center">这个字符串在浏览器中显示错误信息之前直接显示出来。</td></tr><tr><td align="center">5</td><td align="center">track_errors(Boolean)</td><td align="center">当这个设置开启时，一旦一个错误出现，变量$php_errormsg在PHP作用域中被定义。这个变量包含错误信息。</td></tr><tr><td align="center">6</td><td align="center">html_errors(Boolean)</td><td align="center">此设置控制是否在错误信息中采用HTML格式。默认情况下显示的是HTML错误，CLI版本的PHP除外。</td></tr><tr><td align="center">7</td><td align="center">xmlrpc_erroes(Boolean)</td><td align="center">此设置控制错误信息是否启用作为XML－RPC故障显示。</td></tr><tr><td align="center">8</td><td align="center">xmlrpc_error_number(Integer)</td><td align="center">这个XML-RPC故障代码是启用xmlrpc_errors时使用的。</td></tr><tr><td align="center">9</td><td align="center">log_errors(Boolean)</td><td align="center">此设置控制错误是否记录。日志的地址是通过error_log设置决定的。默认情况下，错误被记录到Web服务器的错误日志中。</td></tr><tr><td align="center">10</td><td align="center">log_error_max_len(Integer)</td><td align="center">此设置是当启用log_errors时控制记录的错误信息的最大长度。超过这个长度的信息也会被记录下来，但是会被截断。</td></tr><tr><td align="center">11</td><td align="center">error_log(String)</td><td align="center">此设置决定错误记录的地方。在默认情况下，它们被传送到Web服务器的错误记录机制中，但必须指定一个文件名，或者指定Syslog让系统日志来记录。</td></tr><tr><td align="center">12</td><td align="center">ignore_report_errors(Boolean)</td><td align="center">当启用它时，这个设置让PHP不在同一行中重复显示一样的错误信息。</td></tr><tr><td align="center">13</td><td align="center">ignore_repeated_source(Boolean)</td><td align="center">当启用时，PHP将不显示与前一个显示的错误来自同一个文件同一行错误。如果它没有被启用，它就不起作用。</td></tr></tbody></table><p>2 、PHP错误是通过错误级别进行划分的，范围从通告到严重错误，这个错误级别报告错误的严重性。大部分错误可以用常用的错误处理器来获取，但其中一些则不可恢复。</p><p>PHP错误级别表</p><table><thead><tr><th align="center">序号</th><th align="center">错误代码</th><th align="center">错误级别</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">E_ERROR</td><td align="center">严重错误，不可恢复。例如内存不足、位置异常或类重复声明错误</td></tr><tr><td align="center">2</td><td align="center">E_WARNING</td><td align="center">一个经常发生的错误类型。表示一些操作错误。例如丢失函数参数，连接数据库失败，除数为0等错误。</td></tr><tr><td align="center">3</td><td align="center">E_PARSE</td><td align="center">编译时发生的解析错误，会导致在PHP执行前退出。意味着如果一个文件因为解析错误运行失败，程序将停止运行。</td></tr><tr><td align="center">4</td><td align="center">E_STRICT</td><td align="center">错误级别是唯一不包含在E_ALL常量中。这是为了让PHP4到PHP5的迁移更加容易；你可以在PHP5软件系统中运行PHP4代码。</td></tr><tr><td align="center">5</td><td align="center">E_NOTICE</td><td align="center">运行代码在操作一些未知的动作，例如读取为定义的变量。</td></tr><tr><td align="center">6</td><td align="center">E_CORE_ERROR</td><td align="center">内部错误，扩展启动失败导致的，会导致PHP运行退出。</td></tr><tr><td align="center">7</td><td align="center">E_COMPILE_ERROR</td><td align="center">编译错误，与E_PARSE不同，这个错误会导致PHP运行退出。</td></tr><tr><td align="center">8</td><td align="center">E_WARNING_ERROR</td><td align="center">编译时的警告，可能是使用者发生语法错误。</td></tr><tr><td align="center">9</td><td align="center">E_USER_ERROR</td><td align="center">用户定义错误导致PHP退出执行。用户定义错误(E_USER_*)不是来自PHP本身，而是包含在脚本中。</td></tr><tr><td align="center">10</td><td align="center">E_USER_WARNING</td><td align="center">用户定义错误不会导致PHP退出执行。脚本可以使用它来通知一个执行失败，执行失败PHP也会用E_WARNING来通知。</td></tr><tr><td align="center">11</td><td align="center">E_USER_NOTICE</td><td align="center">用户定义的通告可以用来在脚本中可能存在错误。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我目前的Ubuntu软件</title>
      <link href="78752914.html"/>
      <url>78752914.html</url>
      
        <content type="html"><![CDATA[<p>整理一下我用了这么久后觉得还可以使用的软件</p><p>目前这台电脑没有用与实际开发但是开发工具还是都有的而且还有deb包的,方便;)</p><p>浏览器: chrome firefox (常见插件包括 tempermonkey ,ublock , stylus ,SwitchyOmega, https everywhere )</p><p>开发工具 : IDEA, VScode, VMware ZSH, sublime_text ,DBeaver ,SSH(securet )+ftp(secureFX)</p><p>截屏工具 livepath(录屏软件),flamesflash(截屏),peek(录GIF)</p><p>办公工具 : Xmind WPS typore,foxit(PDF)</p><p>同步工具 onenote 坚果云</p><p>影音播放: spotify(推荐 版权多) 网易云音乐, VLC(要自己找主题和配置快捷键不然真的是反人类)</p><p>下载工具 uget(已经不行了 arai) ,motrix ,Xtreme download,</p><p>其他: ciliber(电子书编辑和阅读) xchm(chm阅读) ,搜狗 deepin-wine(安装 微信 迅雷),SSR(electrol ssr),安卓模拟器(Genymotion 选择个人用户)</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu优化－onedrive</title>
      <link href="1097254589.html"/>
      <url>1097254589.html</url>
      
        <content type="html"><![CDATA[<p>之前是准备用onedrive-dev 但是涉及到太多的以来还有步骤很复杂</p><p>有看到其他</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Easy to configure:</span><br><span class="line"></span><br><span class="line">$ cat ~&#x2F;.config&#x2F;onedrive&#x2F;config</span><br><span class="line">sync_dir &#x3D; &quot;~&#x2F;OneDrive&quot;</span><br><span class="line">skip_file &#x3D; &quot;.*|~*|thumbs.db|Games&#x2F;*.iso&quot;</span><br><span class="line">skip_dir &#x3D; &quot;.*|Music|Movies&#x2F;FullHD&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">So simple, You already know how to use it:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ onedrive -h</span><br><span class="line">Usage: onedrive [OPTION]...</span><br><span class="line">no optionSync and exit.</span><br><span class="line">-m--monitorKeep monitoring for local and remote changes.</span><br><span class="line">--resyncForget the last saved state, perform a full sync.</span><br><span class="line">-v--verbosePrint more details, useful for debugging.</span><br><span class="line">-h--helpThis help information.</span><br></pre></td></tr></table></figure><p>配置也很简单 onedrive –download 获取授权链接 登录 onedrive的账号就行了 将返回的URL贴到命令行后 火车如果长时间没相应可以直接ctrc+c 后重新运行</p><p>记录一下chmod的用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">查看linux文件的权限：ls -l 文件名称</span><br><span class="line"></span><br><span class="line">查看linux文件夹的权限：ls -ld 文件夹名称（所在目录）</span><br><span class="line"></span><br><span class="line">修改文件及文件夹权限：</span><br><span class="line"></span><br><span class="line">sudo chmod -（代表类型）×××（所有者）×××（组用户）×××（其他用户）</span><br><span class="line"></span><br><span class="line">常用修改权限的命令：</span><br><span class="line"></span><br><span class="line">sudo chmod 600 ××× （只有所有者有读和写的权限）</span><br><span class="line"></span><br><span class="line">sudo chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）</span><br><span class="line"></span><br><span class="line">sudo chmod 700 ××× （只有所有者有读和写以及执行的权限）</span><br><span class="line"></span><br><span class="line">sudo chmod 666 ××× （每个人都有读和写的权限）</span><br><span class="line"></span><br><span class="line">sudo chmod 777 ××× （每个人都有读和写以及执行的权限）查看linux文件的权限：ls -l 文件名称</span><br><span class="line"></span><br><span class="line">查看linux文件夹的权限：ls -ld 文件夹名称（所在目录）</span><br><span class="line"></span><br><span class="line">修改文件及文件夹权限：</span><br><span class="line"></span><br><span class="line">sudo chmod -（代表类型）×××（所有者）×××（组用户）×××（其他用户）</span><br><span class="line"></span><br><span class="line">常用修改权限的命令：</span><br><span class="line"></span><br><span class="line">sudo chmod 600 ××× （只有所有者有读和写的权限）</span><br><span class="line"></span><br><span class="line">sudo chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）</span><br><span class="line"></span><br><span class="line">sudo chmod 700 ××× （只有所有者有读和写以及执行的权限）</span><br><span class="line"></span><br><span class="line">sudo chmod 666 ××× （每个人都有读和写的权限）</span><br><span class="line"></span><br><span class="line">sudo chmod 777 ××× （每个人都有读和写以及执行的权限）</span><br></pre></td></tr></table></figure><h3 id="aria-下载"><a href="#aria-下载" class="headerlink" title="aria 下载"></a>aria 下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aria2c -c -s10 -k1M -x16 --enable-rpc&#x3D;false -o &#39;要保存的文件名&#39; --header &quot;User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;61.0.3163.100 Safari&#x2F;537.36&quot; --header &quot;Cookie: 你的cookie内容&quot; &quot;文件的下载地址&quot;</span><br><span class="line"></span><br><span class="line">使用cookie 来实现百度云下载,想一些网站会识别cookie判断是否能下载</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>配置on-my-zsh</title>
      <link href="37058318.html"/>
      <url>37058318.html</url>
      
        <content type="html"><![CDATA[<p>补充 添加 找到 <code>~/.zshrc</code> 有一行 <code>plugins=(git)</code>，想加什么插件就把名字放里面就是了，</p><p>1.) autojump</p><p>按照<a href="https://github.com/wting/autojump">官方文档</a>介绍，需要使用如下命令安装，而不是一些博客中的介绍</p><p>~/.oh-my-zsh/plugins/autojump/autojump.plugin.zsh</p><p>安装好之后，记得<code>source ~/.zshrc</code>，然后你就可以通过<code>j+目录名</code>快速进行目录跳转。支持目录名的模糊匹配和自动补全。</p><ul><li><code>j -stat</code>：可以查看历史路径库</li></ul><p>2.) extract</p><p>解压文件用的，所有的压缩文件，都可以直接<code>x filename</code>，不用记忆参数</p><p>当然，如果你想要用<code>tar</code>命令，可以使用<code>tar -</code>加<code>tab</code>键，zsh会列出参数的含义。</p><hr><p>使用zsh 提交命令行输入的输入效率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 安装 Zshsudo apt install zsh# 将 Zsh 设置为默认 Shellchsh -s &#x2F;bin&#x2F;zsh# 可以通过 echo $SHELL 查看当前默认的 Shell，如果没有改为 &#x2F;bin&#x2F;zsh，那么需要重启 Shell。</span><br></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><h2 id="9-zsh-也可以安装fish"><a href="#9-zsh-也可以安装fish" class="headerlink" title="9. zsh(也可以安装fish)"></a>9. zsh(也可以安装fish)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh# 切换到zshchsh -s &#x2F;bin&#x2F;zsh</span><br></pre></td></tr></table></figure><p>安装<code>Oh-my-zsh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(wget https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh -O -)&quot;</span><br></pre></td></tr></table></figure><p>安装插件<code>highlight</code>，高亮语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;pluginsgit clone git:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git</span><br></pre></td></tr></table></figure><p>在<code>Oh-my-zsh</code>的配置文件中<code>~/.zshrc</code>中添加插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins&#x3D;( [plugins...] zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure><p>最后使配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure><p>~/.oh-my-zsh</p><p>配置文件 ~/.zshrc</p><p>plugins=(git</p><p> autojump</p><p> zsh-syntax-highlighting<br>​ )</p><p>#</p><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><table><thead><tr><th align="center">快捷键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl + a</code></td><td align="center">移动光标到行首</td></tr><tr><td align="center"><code>Ctrl + e</code></td><td align="center">移动光标到行尾</td></tr><tr><td align="center"><code>Alt + b</code></td><td align="center">移动光标后退一个单词（词首）</td></tr><tr><td align="center"><code>Alt + f</code></td><td align="center">移动光标前进一个单词（词首）</td></tr><tr><td align="center"><code>Ctrl + f</code></td><td align="center">光标前进一个字母</td></tr><tr><td align="center"><code>Ctrl + b</code></td><td align="center">光标后退一个字母</td></tr><tr><td align="center"><code>Ctrl + xx</code></td><td align="center">当前位置与行首之间光标切换</td></tr></tbody></table><h2 id="剪切粘贴"><a href="#剪切粘贴" class="headerlink" title="剪切粘贴"></a>剪切粘贴</h2><table><thead><tr><th align="center">快捷键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl + k</code></td><td align="center">删除从光标到行尾</td></tr><tr><td align="center"><code>Ctrl + u</code></td><td align="center">删除从光标到行首</td></tr><tr><td align="center"><code>Ctrl + w</code></td><td align="center">从光标向前删除一个单词</td></tr><tr><td align="center"><code>Alt + d</code></td><td align="center">从光标向后删除一个单词</td></tr><tr><td align="center"><code>Ctrl + d</code></td><td align="center">删除光标下一个字母</td></tr><tr><td align="center"><code>Ctrl + h</code></td><td align="center">删除光标前一个字母</td></tr><tr><td align="center"><code>Alt + t</code></td><td align="center">swap(当前单词, 上一个单词)</td></tr><tr><td align="center"><code>Ctrl + t</code></td><td align="center">swap(当前字母, 上一个字母)</td></tr><tr><td align="center"><code>Ctrl + y</code></td><td align="center">粘贴上一次删除的文本</td></tr></tbody></table><h1 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h1><table><thead><tr><th align="center">快捷键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl + r</code></td><td align="center">向后搜索历史命令</td></tr><tr><td align="center"><code>Ctrl + g</code></td><td align="center">退出搜索</td></tr><tr><td align="center"><code>Ctrl + p</code></td><td align="center">历史中上一个命令</td></tr><tr><td align="center"><code>Ctrl + n</code></td><td align="center">历史中下一个命令</td></tr><tr><td align="center"><code>Alt + .</code></td><td align="center">上一个命令的最后一个单词</td></tr></tbody></table><h2 id="终端指令"><a href="#终端指令" class="headerlink" title="终端指令"></a>终端指令</h2><table><thead><tr><th align="center">快捷键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl + l</code></td><td align="center">清屏</td></tr><tr><td align="center"><code>Ctrl + s</code></td><td align="center">停止输出（在Zsh中为向前搜索历史命令）</td></tr><tr><td align="center"><code>Ctrl + q</code></td><td align="center">继续输出</td></tr><tr><td align="center"><code>Ctrl + c</code></td><td align="center">终止当前命令</td></tr><tr><td align="center"><code>Ctrl + z</code></td><td align="center">挂起当前命令</td></tr><tr><td align="center"><code>Ctrl + d</code></td><td align="center">结束输入（产生一个EOF）</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下 intellj idea maven下载</title>
      <link href="3350959125.html"/>
      <url>3350959125.html</url>
      
        <content type="html"><![CDATA[<p>bindsym XF86AudioNext exec playerctl next</p><p>xmodmap -pke | grep XF86Audio </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mdbus2</span><br><span class="line"></span><br><span class="line">dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/JAVA_XCNH/article/details/102486030">转载来自 –解决Ubuntu和idea快捷键冲突</a></p><p>1、Gnome 快捷键修改<br><strong>Ctrl + Alt + ←</strong><br><strong>Ctrl + Alt + →</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.gnome.desktop.wm.keybindings switch-to-workspace-right <span class="string">&quot;[]&quot;</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.desktop.wm.keybindings switch-to-workspace-left <span class="string">&quot;[]&quot;</span></span><br></pre></td></tr></table></figure><p>2、Fcitx 输入法快捷键修改<br><strong>Ctrl + Alt + B</strong><br><strong>Ctrl + Alt + S</strong><br>点击右上角语言栏，点配置 &gt; 全局配置 &gt; 显示高级选项，点选冲突按键，按 Esc 即可。</p><p>opt/apache-maven-3.6.0/bin/mvn dependency:resolve -Dclassifier=sources</p><p>直接使用本机自己的maven 该问题应该是idea 调用 maven出来问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> intellj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常见命令</title>
      <link href="3173742102.html"/>
      <url>3173742102.html</url>
      
        <content type="html"><![CDATA[<p>npm install hexo-generator-feed –save 生成 RSS组件</p><p>npm install hexo-wordcount –save 统计字数</p><p>npm install hexo-deployer-git –save git 出现 error deployer not found:git 的错误处理</p><p>留言部分的多说和畅眼都有自己的问题不是很好用 hexo中的这个valine 第三方留言还是比较稳定比gtiment也要好</p><ol><li>npm install leancloud-storage –save # Install leancloud’s js-sdk</li><li>npm install valine –save</li></ol><p>hexot添加valine留言系统,之前的留言系统包括多说,畅言都有一部分问题很不好用,valine算比较好用而且好操作的的</p><p><a href="https://valine.js.org/hexo.html">hexot添加valine留言</a></p><p>hexo clean &amp;&amp; hexo d -g` 部署和清理缓存</p><p>hexo new *** “标题名”* 是保存地址 会自动生成一个markdown文件</p><p>开头是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo常见命令</span><br><span class="line">date: 2019-04-13 12:37:35</span><br><span class="line">tags: hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at出现上述问题是YAML格式:后面是必须要有空格的title: Hexo</span><br><span class="line">hexo new page *** 可以生成对应的页面 如about pags</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu优化--smb局域网分享</title>
      <link href="2693474031.html"/>
      <url>2693474031.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/root0/p/9275118.html">samba实现文件共享</a></p><p>Linux系统与Windows系统之间共享文件资源，小文件可以使用lrzsz，大文件可以使用samba。</p><p>Ubuntu是有自带的文件分享的 分享后</p><p>我是在vmvare上装了Windows的虚拟机经常需要两个局域网上共享文件 用Linux的分享手机也可以使用samba 协议的APP访问局域网 内的文件，还可以正常流媒体在线播放还是比较方便的的</p><p>netstat -an | grep 3306</p><p>tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN<br>tcp 0 0 127.0.0.1:3306 127.0.0.1:52102 ESTABLISHED<br>tcp 0 0 127.0.0.1:3306 127.0.0.1:52104 ESTABLISHED<br>tcp6 0 0 127.0.0.1:52104 127.0.0.1:3306 ESTABLISHED<br>tcp6 0 0 127.0.0.1:52102 127.0.0.1:3306 ESTABLISHED</p><p>bind-address = 127.0.0.1 原本的是这样的</p><p>bind-addres = 0.0.0.0 后面有人说需要 其实主要上面的这个的就行了</p><p>/etc/mysql/mysql.conf.d/mysqld.cnf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu折腾--优化wine 微信小黑框处理</title>
      <link href="3419088444.html"/>
      <url>3419088444.html</url>
      
        <content type="html"><![CDATA[<h3 id="解决gnome-dash-duck部分软件不能添加入收藏"><a href="#解决gnome-dash-duck部分软件不能添加入收藏" class="headerlink" title="解决gnome-dash-duck部分软件不能添加入收藏"></a>解决gnome-dash-duck部分软件不能添加入收藏</h3><p>命令行输入启动gnome</p><p>gsettings get org.gnome.shell favorite-apps</p><p>后可以在dash栏直接添加当前运行的问</p><h3 id="wine-微信小黑框处理-chatcontactmenu"><a href="#wine-微信小黑框处理-chatcontactmenu" class="headerlink" title="wine 微信小黑框处理 chatcontactmenu"></a>wine 微信小黑框处理 chatcontactmenu</h3><p>wmctrl -l -G -p -x 显示当前窗口</p><p>xdotool windowunmap 0x0340000a 异常对应的窗口</p><p>0x01a0000a 0 2415 0 0 1920 1080 desktop_window.Nautilus lee-XPS 桌面<br>0x02400084 0 2992 2734 -12 595 434 gedit.Gedit lee-XPS *note (~/桌面) - gedit<br>0x0340000a 0 3200 0 56 1 1 wechat.exe.Wine lee-XPS ChatContactMenu<br>0x0340000c 0 3200 1860 1020 60 60 wechat.exe.Wine lee-XPS<br>0x03400009 0 3200 1220 56 1231 1052 wechat.exe.Wine lee-XPS 微信</p><hr><h3 id="flameshot-的截屏软件"><a href="#flameshot-的截屏软件" class="headerlink" title="flameshot 的截屏软件"></a>flameshot 的截屏软件</h3><p>/usr/bin/flameshot gui<br>gnome-screenshot -ac</p><p>更新 Linux压缩包乱码</p><p>压缩文件乱码的解决方案 指定编码解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -O GBK zip  或者unzip -O cp936</span><br></pre></td></tr></table></figure><p>本质问题还是zip格式的缺陷，没有字段标志出文件名的编码格式。ZIP在压缩与解压缩的时候默认使用了系统的本地编码，如windows中文环境下为GBK， 日文 环境下是JIS，linux默认编码为UTF8等；那么在不同系统环境下，只要压缩与解压缩的编码不一致，就会出现乱码。</p><h3 id="构建desktop文件"><a href="#构建desktop文件" class="headerlink" title="构建desktop文件"></a>构建desktop文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version&#x3D;1.0</span><br><span class="line">Name&#x3D;Firefox Web Browser</span><br><span class="line">Name[ar]&#x3D;متصفح الويب فَيَرفُكْس</span><br><span class="line">Name[ast]&#x3D;Restolador web Firefox</span><br><span class="line">Name[bn]&#x3D;ফায়ারফক্স ওয়েব ব্রাউজার</span><br><span class="line">Name[ca]&#x3D;Navegador web Firefox</span><br><span class="line">Name[cs]&#x3D;Firefox Webový prohlížeč</span><br><span class="line">Name[da]&#x3D;Firefox - internetbrowser</span><br><span class="line">Name[el]&#x3D;Περιηγητής Firefox</span><br><span class="line">Name[es]&#x3D;Navegador web Firefox</span><br><span class="line">Name[et]&#x3D;Firefoxi veebibrauser</span><br><span class="line">Name[fa]&#x3D;مرورگر اینترنتی Firefox</span><br><span class="line">Name[fi]&#x3D;Firefox-selain</span><br><span class="line">Name[fr]&#x3D;Navigateur Web Firefox</span><br><span class="line">Name[gl]&#x3D;Navegador web Firefox</span><br><span class="line">Name[he]&#x3D;דפדפן האינטרנט Firefox</span><br><span class="line">Name[hr]&#x3D;Firefox web preglednik</span><br><span class="line">Name[hu]&#x3D;Firefox webböngésző</span><br><span class="line">Name[it]&#x3D;Firefox Browser Web</span><br><span class="line">Name[ja]&#x3D;Firefox ウェブ・ブラウザ</span><br><span class="line">Name[ko]&#x3D;Firefox 웹 브라우저</span><br><span class="line">Name[ku]&#x3D;Geroka torê Firefox</span><br><span class="line">Name[lt]&#x3D;Firefox interneto naršyklė</span><br><span class="line">Name[nb]&#x3D;Firefox Nettleser</span><br><span class="line">Name[nl]&#x3D;Firefox webbrowser</span><br><span class="line">Name[nn]&#x3D;Firefox Nettlesar</span><br><span class="line">Name[no]&#x3D;Firefox Nettleser</span><br><span class="line">Name[pl]&#x3D;Przeglądarka WWW Firefox</span><br><span class="line">Name[pt]&#x3D;Firefox Navegador Web</span><br><span class="line">Name[pt_BR]&#x3D;Navegador Web Firefox</span><br><span class="line">Name[ro]&#x3D;Firefox – Navigator Internet</span><br><span class="line">Name[ru]&#x3D;Веб-браузер Firefox</span><br><span class="line">Name[sk]&#x3D;Firefox - internetový prehliadač</span><br><span class="line">Name[sl]&#x3D;Firefox spletni brskalnik</span><br><span class="line">Name[sv]&#x3D;Firefox webbläsare</span><br><span class="line">Name[tr]&#x3D;Firefox Web Tarayıcısı</span><br><span class="line">Name[ug]&#x3D;Firefox توركۆرگۈ</span><br><span class="line">Name[uk]&#x3D;Веб-браузер Firefox</span><br><span class="line">Name[vi]&#x3D;Trình duyệt web Firefox</span><br><span class="line">Name[zh_CN]&#x3D;Firefox 网络浏览器</span><br><span class="line">Name[zh_TW]&#x3D;Firefox 網路瀏覽器</span><br><span class="line">Comment&#x3D;Browse the World Wide Web</span><br><span class="line">Comment[ar]&#x3D;تصفح الشبكة العنكبوتية العالمية</span><br><span class="line">Comment[ast]&#x3D;Restola pela Rede</span><br><span class="line">Comment[bn]&#x3D;ইন্টারনেট ব্রাউজ করুন</span><br><span class="line">Comment[ca]&#x3D;Navegueu per la web</span><br><span class="line">Comment[cs]&#x3D;Prohlížení stránek World Wide Webu</span><br><span class="line">Comment[da]&#x3D;Surf på internettet</span><br><span class="line">Comment[de]&#x3D;Im Internet surfen</span><br><span class="line">Comment[el]&#x3D;Μπορείτε να περιηγηθείτε στο διαδίκτυο (Web)</span><br><span class="line">Comment[es]&#x3D;Navegue por la web</span><br><span class="line">Comment[et]&#x3D;Lehitse veebi</span><br><span class="line">Comment[fa]&#x3D;صفحات شبکه جهانی اینترنت را مرور نمایید</span><br><span class="line">Comment[fi]&#x3D;Selaa Internetin WWW-sivuja</span><br><span class="line">Comment[fr]&#x3D;Naviguer sur le Web</span><br><span class="line">Comment[gl]&#x3D;Navegar pola rede</span><br><span class="line">Comment[he]&#x3D;גלישה ברחבי האינטרנט</span><br><span class="line">Comment[hr]&#x3D;Pretražite web</span><br><span class="line">Comment[hu]&#x3D;A világháló böngészése</span><br><span class="line">Comment[it]&#x3D;Esplora il web</span><br><span class="line">Comment[ja]&#x3D;ウェブを閲覧します</span><br><span class="line">Comment[ko]&#x3D;웹을 돌아 다닙니다</span><br><span class="line">Comment[ku]&#x3D;Li torê bigere</span><br><span class="line">Comment[lt]&#x3D;Naršykite internete</span><br><span class="line">Comment[nb]&#x3D;Surf på nettet</span><br><span class="line">Comment[nl]&#x3D;Verken het internet</span><br><span class="line">Comment[nn]&#x3D;Surf på nettet</span><br><span class="line">Comment[no]&#x3D;Surf på nettet</span><br><span class="line">Comment[pl]&#x3D;Przeglądanie stron WWW</span><br><span class="line">Comment[pt]&#x3D;Navegue na Internet</span><br><span class="line">Comment[pt_BR]&#x3D;Navegue na Internet</span><br><span class="line">Comment[ro]&#x3D;Navigați pe Internet</span><br><span class="line">Comment[ru]&#x3D;Доступ в Интернет</span><br><span class="line">Comment[sk]&#x3D;Prehliadanie internetu</span><br><span class="line">Comment[sl]&#x3D;Brskajte po spletu</span><br><span class="line">Comment[sv]&#x3D;Surfa på webben</span><br><span class="line">Comment[tr]&#x3D;İnternet&#39;te Gezinin</span><br><span class="line">Comment[ug]&#x3D;دۇنيادىكى توربەتلەرنى كۆرگىلى بولىدۇ</span><br><span class="line">Comment[uk]&#x3D;Перегляд сторінок Інтернету</span><br><span class="line">Comment[vi]&#x3D;Để duyệt các trang web</span><br><span class="line">Comment[zh_CN]&#x3D;浏览互联网</span><br><span class="line">Comment[zh_TW]&#x3D;瀏覽網際網路</span><br><span class="line">GenericName&#x3D;Web Browser</span><br><span class="line">GenericName[ar]&#x3D;متصفح ويب</span><br><span class="line">GenericName[ast]&#x3D;Restolador Web</span><br><span class="line">GenericName[bn]&#x3D;ওয়েব ব্রাউজার</span><br><span class="line">GenericName[ca]&#x3D;Navegador web</span><br><span class="line">GenericName[cs]&#x3D;Webový prohlížeč</span><br><span class="line">GenericName[da]&#x3D;Webbrowser</span><br><span class="line">GenericName[el]&#x3D;Περιηγητής διαδικτύου</span><br><span class="line">GenericName[es]&#x3D;Navegador web</span><br><span class="line">GenericName[et]&#x3D;Veebibrauser</span><br><span class="line">GenericName[fa]&#x3D;مرورگر اینترنتی</span><br><span class="line">GenericName[fi]&#x3D;WWW-selain</span><br><span class="line">GenericName[fr]&#x3D;Navigateur Web</span><br><span class="line">GenericName[gl]&#x3D;Navegador Web</span><br><span class="line">GenericName[he]&#x3D;דפדפן אינטרנט</span><br><span class="line">GenericName[hr]&#x3D;Web preglednik</span><br><span class="line">GenericName[hu]&#x3D;Webböngésző</span><br><span class="line">GenericName[it]&#x3D;Browser web</span><br><span class="line">GenericName[ja]&#x3D;ウェブ・ブラウザ</span><br><span class="line">GenericName[ko]&#x3D;웹 브라우저</span><br><span class="line">GenericName[ku]&#x3D;Geroka torê</span><br><span class="line">GenericName[lt]&#x3D;Interneto naršyklė</span><br><span class="line">GenericName[nb]&#x3D;Nettleser</span><br><span class="line">GenericName[nl]&#x3D;Webbrowser</span><br><span class="line">GenericName[nn]&#x3D;Nettlesar</span><br><span class="line">GenericName[no]&#x3D;Nettleser</span><br><span class="line">GenericName[pl]&#x3D;Przeglądarka WWW</span><br><span class="line">GenericName[pt]&#x3D;Navegador Web</span><br><span class="line">GenericName[pt_BR]&#x3D;Navegador Web</span><br><span class="line">GenericName[ro]&#x3D;Navigator Internet</span><br><span class="line">GenericName[ru]&#x3D;Веб-браузер</span><br><span class="line">GenericName[sk]&#x3D;Internetový prehliadač</span><br><span class="line">GenericName[sl]&#x3D;Spletni brskalnik</span><br><span class="line">GenericName[sv]&#x3D;Webbläsare</span><br><span class="line">GenericName[tr]&#x3D;Web Tarayıcı</span><br><span class="line">GenericName[ug]&#x3D;توركۆرگۈ</span><br><span class="line">GenericName[uk]&#x3D;Веб-браузер</span><br><span class="line">GenericName[vi]&#x3D;Trình duyệt Web</span><br><span class="line">GenericName[zh_CN]&#x3D;网络浏览器</span><br><span class="line">GenericName[zh_TW]&#x3D;網路瀏覽器</span><br><span class="line">Keywords&#x3D;Internet;WWW;Browser;Web;Explorer</span><br><span class="line">Keywords[ar]&#x3D;انترنت;إنترنت;متصفح;ويب;وب</span><br><span class="line">Keywords[ast]&#x3D;Internet;WWW;Restolador;Web;Esplorador</span><br><span class="line">Keywords[ca]&#x3D;Internet;WWW;Navegador;Web;Explorador;Explorer</span><br><span class="line">Keywords[cs]&#x3D;Internet;WWW;Prohlížeč;Web;Explorer</span><br><span class="line">Keywords[da]&#x3D;Internet;Internettet;WWW;Browser;Browse;Web;Surf;Nettet</span><br><span class="line">Keywords[de]&#x3D;Internet;WWW;Browser;Web;Explorer;Webseite;Site;surfen;online;browsen</span><br><span class="line">Keywords[el]&#x3D;Internet;WWW;Browser;Web;Explorer;Διαδίκτυο;Περιηγητής;Firefox;Φιρεφοχ;Ιντερνετ</span><br><span class="line">Keywords[es]&#x3D;Explorador;Internet;WWW</span><br><span class="line">Keywords[fi]&#x3D;Internet;WWW;Browser;Web;Explorer;selain;Internet-selain;internetselain;verkkoselain;netti;surffaa</span><br><span class="line">Keywords[fr]&#x3D;Internet;WWW;Browser;Web;Explorer;Fureteur;Surfer;Navigateur</span><br><span class="line">Keywords[he]&#x3D;דפדפן;אינטרנט;רשת;אתרים;אתר;פיירפוקס;מוזילה;</span><br><span class="line">Keywords[hr]&#x3D;Internet;WWW;preglednik;Web</span><br><span class="line">Keywords[hu]&#x3D;Internet;WWW;Böngésző;Web;Háló;Net;Explorer</span><br><span class="line">Keywords[it]&#x3D;Internet;WWW;Browser;Web;Navigatore</span><br><span class="line">Keywords[is]&#x3D;Internet;WWW;Vafri;Vefur;Netvafri;Flakk</span><br><span class="line">Keywords[ja]&#x3D;Internet;WWW;Web;インターネット;ブラウザ;ウェブ;エクスプローラ</span><br><span class="line">Keywords[nb]&#x3D;Internett;WWW;Nettleser;Explorer;Web;Browser;Nettside</span><br><span class="line">Keywords[nl]&#x3D;Internet;WWW;Browser;Web;Explorer;Verkenner;Website;Surfen;Online</span><br><span class="line">Keywords[pt]&#x3D;Internet;WWW;Browser;Web;Explorador;Navegador</span><br><span class="line">Keywords[pt_BR]&#x3D;Internet;WWW;Browser;Web;Explorador;Navegador</span><br><span class="line">Keywords[ru]&#x3D;Internet;WWW;Browser;Web;Explorer;интернет;браузер;веб;файрфокс;огнелис</span><br><span class="line">Keywords[sk]&#x3D;Internet;WWW;Prehliadač;Web;Explorer</span><br><span class="line">Keywords[sl]&#x3D;Internet;WWW;Browser;Web;Explorer;Brskalnik;Splet</span><br><span class="line">Keywords[tr]&#x3D;İnternet;WWW;Tarayıcı;Web;Gezgin;Web sitesi;Site;sörf;çevrimiçi;tara</span><br><span class="line">Keywords[uk]&#x3D;Internet;WWW;Browser;Web;Explorer;Інтернет;мережа;переглядач;оглядач;браузер;веб;файрфокс;вогнелис;перегляд</span><br><span class="line">Keywords[vi]&#x3D;Internet;WWW;Browser;Web;Explorer;Trình duyệt;Trang web</span><br><span class="line">Keywords[zh_CN]&#x3D;Internet;WWW;Browser;Web;Explorer;网页;浏览;上网;火狐;Firefox;ff;互联网;网站;</span><br><span class="line">Keywords[zh_TW]&#x3D;Internet;WWW;Browser;Web;Explorer;網際網路;網路;瀏覽器;上網;網頁;火狐</span><br><span class="line">Exec&#x3D;firefox %u</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">X-MultipleArgs&#x3D;false</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Icon&#x3D;firefox</span><br><span class="line">Categories&#x3D;GNOME;GTK;Network;WebBrowser;</span><br><span class="line">MimeType&#x3D;text&#x2F;html;text&#x2F;xml;application&#x2F;xhtml+xml;application&#x2F;xml;application&#x2F;rss+xml;application&#x2F;rdf+xml;image&#x2F;gif;image&#x2F;jpeg;image&#x2F;png;x-scheme-handler&#x2F;http;x-scheme-handler&#x2F;https;x-scheme-handler&#x2F;ftp;x-scheme-handler&#x2F;chrome;video&#x2F;webm;application&#x2F;x-xpinstall;</span><br><span class="line">StartupNotify&#x3D;true</span><br><span class="line">Actions&#x3D;new-window;new-private-window;</span><br><span class="line"></span><br><span class="line">[Desktop Action new-window]</span><br><span class="line">Name&#x3D;Open a New Window</span><br><span class="line">Name[ar]&#x3D;افتح نافذة جديدة</span><br><span class="line">Name[ast]&#x3D;Abrir una ventana nueva</span><br><span class="line">Name[bn]&#x3D;Abrir una ventana nueva</span><br><span class="line">Name[ca]&#x3D;Obre una finestra nova</span><br><span class="line">Name[cs]&#x3D;Otevřít nové okno</span><br><span class="line">Name[da]&#x3D;Åbn et nyt vindue</span><br><span class="line">Name[de]&#x3D;Ein neues Fenster öffnen</span><br><span class="line">Name[el]&#x3D;Νέο παράθυρο</span><br><span class="line">Name[es]&#x3D;Abrir una ventana nueva</span><br><span class="line">Name[fi]&#x3D;Avaa uusi ikkuna</span><br><span class="line">Name[fr]&#x3D;Ouvrir une nouvelle fenêtre</span><br><span class="line">Name[gl]&#x3D;Abrir unha nova xanela</span><br><span class="line">Name[he]&#x3D;פתיחת חלון חדש</span><br><span class="line">Name[hr]&#x3D;Otvori novi prozor</span><br><span class="line">Name[hu]&#x3D;Új ablak nyitása</span><br><span class="line">Name[it]&#x3D;Apri una nuova finestra</span><br><span class="line">Name[ja]&#x3D;新しいウィンドウを開く</span><br><span class="line">Name[ko]&#x3D;새 창 열기</span><br><span class="line">Name[ku]&#x3D;Paceyeke nû veke</span><br><span class="line">Name[lt]&#x3D;Atverti naują langą</span><br><span class="line">Name[nb]&#x3D;Åpne et nytt vindu</span><br><span class="line">Name[nl]&#x3D;Nieuw venster openen</span><br><span class="line">Name[pt]&#x3D;Abrir nova janela</span><br><span class="line">Name[pt_BR]&#x3D;Abrir nova janela</span><br><span class="line">Name[ro]&#x3D;Deschide o fereastră nouă</span><br><span class="line">Name[ru]&#x3D;Новое окно</span><br><span class="line">Name[sk]&#x3D;Otvoriť nové okno</span><br><span class="line">Name[sl]&#x3D;Odpri novo okno</span><br><span class="line">Name[sv]&#x3D;Öppna ett nytt fönster</span><br><span class="line">Name[tr]&#x3D;Yeni pencere aç</span><br><span class="line">Name[ug]&#x3D;يېڭى كۆزنەك ئېچىش</span><br><span class="line">Name[uk]&#x3D;Відкрити нове вікно</span><br><span class="line">Name[vi]&#x3D;Mở cửa sổ mới</span><br><span class="line">Name[zh_CN]&#x3D;新建窗口</span><br><span class="line">Name[zh_TW]&#x3D;開啟新視窗</span><br><span class="line">Exec&#x3D;firefox -new-window</span><br><span class="line"></span><br><span class="line">[Desktop Action new-private-window]</span><br><span class="line">Name&#x3D;Open a New Private Window</span><br><span class="line">Name[ar]&#x3D;افتح نافذة جديدة للتصفح الخاص</span><br><span class="line">Name[ca]&#x3D;Obre una finestra nova en mode d&#39;incògnit</span><br><span class="line">Name[cs]&#x3D;Otevřít nové anonymní okno</span><br><span class="line">Name[de]&#x3D;Ein neues privates Fenster öffnen</span><br><span class="line">Name[el]&#x3D;Νέο ιδιωτικό παράθυρο</span><br><span class="line">Name[es]&#x3D;Abrir una ventana privada nueva</span><br><span class="line">Name[fi]&#x3D;Avaa uusi yksityinen ikkuna</span><br><span class="line">Name[fr]&#x3D;Ouvrir une nouvelle fenêtre de navigation privée</span><br><span class="line">Name[he]&#x3D;פתיחת חלון גלישה פרטית חדש</span><br><span class="line">Name[hu]&#x3D;Új privát ablak nyitása</span><br><span class="line">Name[it]&#x3D;Apri una nuova finestra anonima</span><br><span class="line">Name[nb]&#x3D;Åpne et nytt privat vindu</span><br><span class="line">Name[ru]&#x3D;Новое приватное окно</span><br><span class="line">Name[sl]&#x3D;Odpri novo okno zasebnega brskanja</span><br><span class="line">Name[sv]&#x3D;Öppna ett nytt privat fönster</span><br><span class="line">Name[tr]&#x3D;Yeni bir pencere aç</span><br><span class="line">Name[uk]&#x3D;Відкрити нове вікно у потайливому режимі</span><br><span class="line">Name[zh_TW]&#x3D;開啟新隱私瀏覽視窗</span><br><span class="line">Exec&#x3D;&#x2F;opt&#x2F;firefox&#x2F;firefox</span><br><span class="line"># Exec&#x3D;&#x2F;home&#x2F;leek&#x2F;soft&#x2F;firefox&#x2F;firefox %u</span><br><span class="line"># Exec&#x3D;&#x2F;home&#x2F;leek&#x2F;soft&#x2F;firefox&#x2F;firefox -new-window</span><br><span class="line"># Exec&#x3D;&#x2F;home&#x2F;leek&#x2F;soft&#x2F;firefox&#x2F;firefox -private-window</span><br></pre></td></tr></table></figure><p>Firefox.com 官网下载国际版 解压后可直接运行Firefox 文件夹下的firefox</p><p>bin 添加对应的脚步文件 打开</p><ul><li>ubuntu 安装开机界面</li><li>Linux 下载神器 motrix</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> wine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现图片压缩</title>
      <link href="3632233999.html"/>
      <url>3632233999.html</url>
      
        <content type="html"><![CDATA[<p>开始时是直接对流进行处理但是会有异常,虽然thumbnailator可以填写<br>，而图片对于现在的很多手机来说，拍摄出来的都是高清图片，分辨率也是相当的高，当然占用的存储空间也就大了,但不同的场景是需要不同的,微信的图片显示就是先显示压缩图然后可以选着看原图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--图片压缩--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;net.coobird&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;thumbnailator&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;0.4.8&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F; 由于直接对流进行操作导致问题 所以是保存文件到本地后压缩</span><br><span class="line">        File fileSize2 &#x3D; new File(path_store + &quot;&#x2F;size2&#x2F;&quot; + &quot;m2&quot; + fileName);</span><br><span class="line">        File fileSize3 &#x3D; new File(path_store + &quot;&#x2F;small&#x2F;&quot; + &quot;m3&quot; + fileName);</span><br><span class="line">        File fileSize4 &#x3D; new File(path_store + &quot;&#x2F;size4&#x2F;&quot; + &quot;m4&quot; + fileName);</span><br><span class="line">        String size2 &#x3D; fileSize2.toString();</span><br><span class="line">        String size3 &#x3D; fileSize3.toString();</span><br><span class="line">        String size4 &#x3D; fileSize4.toString();</span><br><span class="line">&#x2F;&#x2F;通过session保存值 </span><br><span class="line">        request.getSession().setAttribute(&quot;size2&quot;,size2);</span><br><span class="line">        request.getSession().setAttribute(&quot;size3&quot;,size3);</span><br><span class="line">        request.getSession().setAttribute(&quot;size4&quot;,size4);</span><br><span class="line"></span><br><span class="line">        Thumbnails.of(st).scale(0.2f).toFile(fileSize2);</span><br><span class="line">        Thumbnails.of(st).scale(0.5f).toFile(fileSize3);</span><br><span class="line">        Thumbnails.of(st).scale(1f).toFile(fileSize4);</span><br><span class="line">        String rimage &#x3D; &quot;img&#x2F;product&#x2F;product&#x2F;&quot; + fileName;</span><br><span class="line">        request.getSession().setAttribute(&quot;rimge&quot;, rimage);</span><br><span class="line">        &#x2F;&#x2F;删除临时文件</span><br><span class="line">        item.delete();</span><br><span class="line">        &#x2F;&#x2F;  response.getWriter().write(&quot;success&quot;+rimage);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax运用的归纳整理</title>
      <link href="6f432c85.html"/>
      <url>6f432c85.html</url>
      
        <content type="html"><![CDATA[<p>Ajax请求包括常见三种 本人日常使用是完整版,但是最近发现ajax中发post请求也是很快的而且很方便,将多种方法都试一遍线顺便整理一下</p><ol><li>| GET请求 | <code>$.get(url,[data],[callback],[type])</code> |</li><li>| POST请求 | <code>$.post(url,[data],[callback],[type])</code> |</li><li>| AJAX请求 | `$.ajax([settings])</li></ol><h1 id="POST请求语法格式"><a href="#POST请求语法格式" class="headerlink" title="POST请求语法格式"></a>POST请求语法格式</h1><p>$.post(url, [data], [callback], [type])<br>其中，参数说明如下：<br>| 参数| 说明 |<br>| url| 请求的服务器端url地址 |<br>|data|发送给服务器端的请求参数，格式可以是key=value也可以是js对象|<br>|callback| 当请求成功后的回掉函数，可以在函数体中编写我们的逻辑代码|<br>|type| 预期的返回数据的类型，取值可以是 xml, html, script, json, text, _defaul等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;user&#x2F;login&quot;,&#x2F;&#x2F;请求地址</span><br><span class="line">   $(&quot;#loginForm&quot;).serialize(),&#x2F;&#x2F;表单所有数据</span><br><span class="line">   function (resultInfo) &#123;</span><br><span class="line">      if(resultInfo.flag)&#123;</span><br><span class="line">          &#x2F;&#x2F;登录成功，跳转到首页</span><br><span class="line">         location.href&#x3D;&quot;index.html&quot;;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">          &#x2F;&#x2F;失败，显示消息</span><br><span class="line">                           $(&quot;#errorMsg&quot;).text(resultInfo.errorMsg);</span><br><span class="line">      &#125; &#125;,</span><br><span class="line">   &quot;json&quot;</span><br><span class="line">);$(&quot;#errorMsg&quot;).text(&quot;请输入用户名或密码&quot;);</span><br></pre></td></tr></table></figure><p>现在感觉发post请求,同这个会更简单且更加清晰,只需要url,[data],[callback],[type]),清晰明了,各个部分以’,’分开,</p><h1 id="AJAX请求"><a href="#AJAX请求" class="headerlink" title="AJAX请求"></a>AJAX请求</h1><p>我之前是完全的ajax请求格式太多但是功能也更加全面</p><p><a href="http://www.w3school.com.cn/jquery/ajax_ajax.asp">引用自w3school jQuery ajax</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> 类型：Object</span><br><span class="line"></span><br><span class="line">    可选。AJAX 请求设置。所有选项都是可选的。</span><br><span class="line">async</span><br><span class="line"></span><br><span class="line">    类型：Boolean</span><br><span class="line"></span><br><span class="line">    默认值: true。默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。</span><br><span class="line"></span><br><span class="line">    注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。</span><br><span class="line">beforeSend(XHR)</span><br><span class="line"></span><br><span class="line">    类型：Function</span><br><span class="line"></span><br><span class="line">    发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。</span><br><span class="line"></span><br><span class="line">    XMLHttpRequest 对象是唯一的参数。</span><br><span class="line"></span><br><span class="line">    这是一个 Ajax 事件。如果返回 false 可以取消本次 ajax 请求。</span><br><span class="line">cache</span><br><span class="line"></span><br><span class="line">    类型：Boolean</span><br><span class="line"></span><br><span class="line">    默认值: true，dataType 为 script 和 jsonp 时默认为 false。设置为 false 将不缓存此页面。</span><br><span class="line"></span><br><span class="line">    jQuery 1.2 新功能。</span><br><span class="line">complete(XHR, TS)</span><br><span class="line"></span><br><span class="line">    类型：Function</span><br><span class="line"></span><br><span class="line">    请求完成后回调函数 (请求成功或失败之后均调用)。</span><br><span class="line"></span><br><span class="line">    参数： XMLHttpRequest 对象和一个描述请求类型的字符串。</span><br><span class="line"></span><br><span class="line">    这是一个 Ajax 事件。</span><br><span class="line">contentType</span><br><span class="line"></span><br><span class="line">    类型：String</span><br><span class="line"></span><br><span class="line">    默认值: &quot;application&#x2F;x-www-form-urlencoded&quot;。发送信息至服务器时内容编码类型。</span><br><span class="line"></span><br><span class="line">    默认值适合大多数情况。如果你明确地传递了一个 content-type 给 $.ajax() 那么它必定会发送给服务器（即使没有数据要发送）。</span><br><span class="line">context</span><br><span class="line"></span><br><span class="line">    类型：Object</span><br><span class="line"></span><br><span class="line">    这个对象用于设置 Ajax 相关回调函数的上下文。也就是说，让回调函数内 this 指向这个对象（如果不设定这个参数，那么 this 就指向调用本次 AJAX 请求时传递的 options 参数）。比如指定一个 DOM 元素作为 context 参数，这样就设置了 success 回调函数的上下文为这个 DOM 元素。</span><br><span class="line"></span><br><span class="line">$.ajax(&#123; url: &quot;test.html&quot;, context: document.body, success: function()&#123;</span><br><span class="line">        $(this).addClass(&quot;done&quot;);</span><br><span class="line">      &#125;&#125;);</span><br></pre></td></tr></table></figure><p>route</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  var cid&#x3D;getParameter(&quot;cid&quot;)</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:&quot;&#x2F;route&#x2F;showPage&quot;,&#x2F;&#x2F;请求路径</span><br><span class="line">        data:&#123;&quot;currentPage&quot;:currentPage,</span><br><span class="line">              &quot;cid&quot;:cid&#125;,&#x2F;&#x2F;发送参数</span><br><span class="line">        dataType:&quot;json&quot;, &#x2F;&#x2F;接收类型确认</span><br><span class="line">        success:function (res) &#123;</span><br><span class="line">            toShowRouteDetail(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">ShowRoute(1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;显示旅游线路</span><br><span class="line">function toShowRouteDetail(res)  &#123;</span><br><span class="line">    $(&quot;#show2Route&quot;).empty()</span><br><span class="line">    for(var i&#x3D;0;i&lt;res.listRoute.length;i++)&#123;</span><br><span class="line">        var temp&#x3D;$(&quot;&lt;li&gt;\n&quot; +</span><br><span class="line">            &quot;                            &lt;div class&#x3D;\&quot;img\&quot;&gt;&lt;img width&#x3D;&#39;290px&#39; src&#x3D;\&quot;&quot;+res.listRoute[i].rimage+&quot;\&quot; alt&#x3D;\&quot;\&quot;&gt;&lt;&#x2F;div&gt;\n&quot; +</span><br><span class="line">            &quot;                            &lt;div class&#x3D;\&quot;text1\&quot;&gt;\n&quot; +</span><br><span class="line">            &quot;                                &lt;p&gt;&quot;+res.listRoute[i].rname+&quot;&lt;&#x2F;p&gt;\n&quot; +</span><br><span class="line">            &quot;                                &lt;br&#x2F;&gt;\n&quot; +</span><br><span class="line">            &quot;                                &lt;p&gt;&quot;+res.listRoute[i].routeIntroduce+&quot;&lt;&#x2F;p&gt;\n&quot; +</span><br><span class="line">            &quot;                            &lt;&#x2F;div&gt;\n&quot; +</span><br><span class="line">            &quot;                            &lt;div class&#x3D;\&quot;price\&quot;&gt;\n&quot; +</span><br><span class="line">            &quot;                                &lt;p class&#x3D;\&quot;price_num\&quot;&gt;\n&quot; +</span><br><span class="line">            &quot;                                    &lt;span&gt;&amp;yen;&lt;&#x2F;span&gt;\n&quot; +</span><br><span class="line">            &quot;                                    &lt;span&gt;&quot;+res.listRoute[i].price+&quot;&lt;&#x2F;span&gt;\n&quot; +</span><br><span class="line">            &quot;                                    &lt;span&gt;起&lt;&#x2F;span&gt;\n&quot; +</span><br><span class="line">            &quot;                                &lt;&#x2F;p&gt;\n&quot; +</span><br><span class="line">            &quot;                                &lt;p&gt;&lt;a href&#x3D;\&quot;&#x2F;route_detail.html?rid&#x3D;&quot;+res.listRoute[i].rid+&quot;\&quot;&gt;查看详情&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;\n&quot; +</span><br><span class="line">            &quot;                            &lt;&#x2F;div&gt;\n&quot; +</span><br><span class="line">            &quot;                        &lt;&#x2F;li&gt;&quot;);</span><br><span class="line">        $(&quot;#show2Route&quot;).append(temp)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h1><p>$.get(url,[data],[callback],[type data<br>方式一：key=value&amp;key=value<br>方式二：{key:value,key:value…}<br>| callback | 回调函数：当请求成功后触发的函数 |<br>|type|返回参数类型：取值可以是xml,html,script, json,text,_defaul等 |</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ajaxGetFn() &#123;&#x2F;&#x2F;Ajax的GET请求：</span><br><span class="line">    &#x2F;&#x2F;方式一：key&#x3D;value&amp;key&#x3D;value形式传值</span><br><span class="line">    &#x2F;&#x2F; $.get(&quot;&#x2F;getDemo&quot;,&quot;name&#x3D;&#39;张三&#39;&amp;age&#x3D;18&quot;,function (res) &#123;</span><br><span class="line">    &#x2F;&#x2F;     &#x2F;&#x2F;处理响应数据,并在浏览器上显示</span><br><span class="line">    &#x2F;&#x2F;     alert(res);</span><br><span class="line">    &#x2F;&#x2F; &#125;,&quot;text&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;方式二：&#123;key:value,key:value&#125;形式传值</span><br><span class="line">    $.get(&quot;&#x2F;getDemo&quot;,&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;,function   (res) &#123;</span><br><span class="line">        &#x2F;&#x2F;处理响应数据</span><br><span class="line">        alert(res);</span><br><span class="line">    &#125;,&quot;text&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>S6新特性 和VUE的个人理解</title>
      <link href="4288700677.html"/>
      <url>4288700677.html</url>
      
        <content type="html"><![CDATA[<p>es6新特性<br><a href="https://www.jianshu.com/p/b3f3afcae230/">ES6新特性介绍</a><br><a href="http://es6.ruanyifeng.com/?search=reduce&x=0&y=0#README">阮一峰的翻译的ECMAScript 6 入门-图书</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">增加了 const let修饰</span><br><span class="line">还有map reduce  indexof的替换者includes</span><br><span class="line">包括template(模板字符串（template string）是增强版的字符串，)在模    </span><br></pre></td></tr></table></figure><p>板字符串中嵌入变量，需要将变量名写在${}之中<br>​ 结构{temp.feid}<br>​ array.forEach(v = &gt; console.log(v));箭头表达式<br>​ 反引号 ` 来创建字符串反问号创建字符串<br>​ 美元符号加花括号包裹的变量${vraible}<br>​<br>​ 遍历器（Iterator）遍历的是一种规则数据的部署</p><p>使用for…of循环，遍历某种数据结构时，该循环会自动去寻找Iterator接口。在ES6中，有三类数据结构原生具备Iterator接口：数组、某些类似数组的对象、Set和Map结构。</p><p>S6模块通过export命令显式指定输出的代码，输入时也采用静态命令的形式。<br>​ export xxx from xxx<br>​ import xxxx from xxxx<br>如果只是需要key:value的数据结构，记得使用Map，因为Map有内建的遍历机制。<br>使用import取代require，使用export取代module.exports。这样可以在编译时就完成模块编译，效率要比CommonJS模块高。</p><hr><ul><li><p>// CommonJS模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; stat, exists, readFile &#125;&#x2F;&#x2F; 等同于let _fs &#x3D; require(&#39;fs&#39;);let stat &#x3D; _fs.stat;let exists &#x3D; _fs.exists;let readfile &#x3D; _fs.readfile;</span><br></pre></td></tr></table></figure></li><li><p>无序列表// ES6模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; stat, exists, readFile &#125; from &#39;fs&#39;;</span><br></pre></td></tr></table></figure></li></ul><p>vue子模块</p><p>vue是基于MVVM设计的js框架.需要注意子模块和父模块的使用<br>而点vue文件需要在webpack是<br>Data 是将将原本的值以变成了方法一return来实现值处理和返回值 还有<br>保证在其他引用的方法的部分不会随着变化独立性更高</p><p>vue包括vue vue-cli vuex</p><p>而vue是可以<br>首先是是它的生命周期包括create,mount<br>注意<br>在html里面可以用v-if foreach</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eldatacomputemethodswatch包括组件元素vue.componet(&quot;name&quot;,&#123;    template &#125;)var a&#x3D;(&#123;template:return &#123;&#123; xx:kkkk &#125;&#125;)</span><br></pre></td></tr></table></figure><p>将你输入的值遍历你的值是&lt;里面 :name=”值”&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      现在我们为每个 todo-item 提供 todo 对象</span><br><span class="line">      todo 对象是变量，即其内容可以是动态的。</span><br><span class="line">      我们也需要为每个组件提供一个“key”，稍后再</span><br><span class="line">      作详细解释。</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;todo-item</span><br><span class="line">      v-for&#x3D;&quot;item in groceryList&quot;</span><br><span class="line">      v-bind:todo&#x3D;&quot;item&quot;</span><br><span class="line">      v-bind:key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">    &lt;&#x2F;todo-item&gt;</span><br><span class="line">  &lt;&#x2F;ol&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&#39;todo-item&#39;, &#123;</span><br><span class="line">  props: [&#39;todo&#39;],</span><br><span class="line">  template: &#39;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app7 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-7&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    groceryList: [</span><br><span class="line">      &#123; id: 0, text: &#39;蔬菜&#39; &#125;,</span><br><span class="line">      &#123; id: 1, text: &#39;奶酪&#39; &#125;,</span><br><span class="line">      &#123; id: 2, text: &#39;随便其它什么人吃的东西&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>还包括后面是变量或者表达式没加冒号,后米娜是字符串<br>v-bind 绑定了vue数据不是普通字符串 :xxx 比如class<br>v-on:xxx 绑定事件 @click=””<br>_ dirname 是绝对路径绑定时<br>v-model<br>_直接取值使用(或$是在vue实例中因为vue内部与API冲突<br>./ 可以解释为组件能导入<br>@/是webpack设置的路径别名<br>在外界使用组件时需要注册组件 vueload</p><p>1、父组件可以使用 props 把数据传给子组件。<br>2、子组件可以使用 $emit 触发父组件的自定义事件。</p><p>vm.$emit( event, arg ) //触发当前实例上的事件</p><p>vm.$on( event, fn );//监听event事件后运行 fn；<br><a href="https://www.tangshuang.net/3507.html">https://www.tangshuang.net/3507.html</a><br>v-bind用于绑定html元素上的attribution 不是双向绑定<br>v-model主要是用在表单元素中，它实现了双向绑定。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="2527336709.html"/>
      <url>2527336709.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://i.loli.net/2018/10/17/5bc6a508557d1.png"><img src="https://i.loli.net/2018/10/17/5bc6a508557d1.png" alt="eureka"></a><br>补充eureka闭源的消息<br><a href="https://i.loli.net/2018/10/17/5bc6a57753f6b.png"><img src="https://i.loli.net/2018/10/17/5bc6a57753f6b.png" alt="dubbo与springcloud对比"></a><br>添加dubbo与springcloud对比</p><p>关于<a href="https://bigleek.github.io/#/user/blog/details/da5fd6d8f37943864ac1cc817a90db72">之前关于SpringBoot的介绍</a>是关于SpringBoot的概述</p><blockquote><p>Spring boot专注于快速、方便集成的单个个体，Spring Cloud是关注全局的服务治理框架；spring boot使用了默认大于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置，Spring Cloud很大的一部分是基于Spring boot来实现。<a href="https://www.zhihu.com/question/47304987/answer/169239519">来自纯洁的微笑</a></p></blockquote><p>##SpringCloud<br>官网介绍<br>Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态）用于微服务时各个系统的同步和相互通信确保一致性.</p><p>目前的版本情况<br>| Component | Edgware.SR5 | Finchley.SR1 | Finchley.BUILD-SNAPSHOT |<br>| ————————- | ————– | ————- | ———————– |<br>| spring-cloud-aws | 1.2.3.RELEASE | 2.0.0.RELEASE | 2.0.1.BUILD-SNAPSHOT |<br>| spring-cloud-bus | 1.3.3.RELEASE | 2.0.0.RELEASE | 2.0.1.BUILD-SNAPSHOT |<br>| spring-cloud-cli | 1.4.1.RELEASE | 2.0.0.RELEASE | 2.0.1.BUILD-SNAPSHOT |<br>| spring-cloud-commons | 1.3.5.RELEASE | 2.0.1.RELEASE | 2.0.2.BUILD-SNAPSHOT |<br>| spring-cloud-contract | 1.2.6.RELEASE | 2.0.1.RELEASE | 2.0.2.BUILD-SNAPSHOT |<br>| spring-cloud-config | 1.4.5.RELEASE | 2.0.1.RELEASE | 2.0.2.BUILD-SNAPSHOT |<br>| spring-cloud-netflix | 1.4.6.RELEASE | 2.0.1.RELEASE | 2.0.2.BUILD-SNAPSHOT |<br>| spring-cloud-security | 1.2.3.RELEASE | 2.0.0.RELEASE | 2.0.1.BUILD-SNAPSHOT |<br>| spring-cloud-cloudfoundry | 1.1.2.RELEASE | 2.0.0.RELEASE | 2.0.1.BUILD-SNAPSHOT |<br>| spring-cloud-consul | 1.3.5.RELEASE | 2.0.1.RELEASE | 2.0.2.BUILD-SNAPSHOT |<br>| spring-cloud-sleuth | 1.3.5.RELEASE | 2.0.1.RELEASE | 2.0.2.BUILD-SNAPSHOT |<br>| spring-cloud-stream | Ditmars.SR4 | Elmhurst.SR1 | Elmhurst.BUILD-SNAPSHOT |<br>| spring-cloud-zookeeper | 1.2.2.RELEASE | 2.0.0.RELEASE | 2.0.1.BUILD-SNAPSHOT |<br>| spring-boot | 1.5.16.RELEASE | 2.0.4.RELEASE | 2.0.4.BUILD-SNAPSHOT |<br>| spring-cloud-task | 1.2.3.RELEASE | 2.0.0.RELEASE | 2.0.1.BUILD-SNAPSHOT |<br>| spring-cloud-vault | 1.1.2.RELEASE | 2.0.1.RELEASE | 2.0.2.BUILD-SNAPSHOT |<br>| spring-cloud-gateway | 1.0.2.RELEASE | 2.0.1.RELEASE | 2.0.2.BUILD-SNAPSHOT |<br>| spring-cloud-openfeign | | 2.0.1.RELEASE | 2.0.2.BUILD-SNAPSHOT |<br>| spring-cloud-function | 1.0.1.RELEASE | 1.0.0.RELEASE | 1.0.1.BUILD-SNAPSHOT |</p><h2 id="配置spring微服务"><a href="#配置spring微服务" class="headerlink" title="配置spring微服务"></a>配置spring微服务</h2><p>springcloud是spring提供的一台服务<br>而spring boot是简化配置文件统一版本提高开发效率能快速开启<br>配置信息可以在application.yml中配置类似脚手架<br>也能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.@ConfigurationProperties(locations&#x3D;“classpath:config&#x2F;user.properties”, prefix&#x3D;“XXX”)将配置文件导入,</span><br><span class="line">2.选择@PropertySource导入外部文件</span><br><span class="line">3.@EnableConfigurationProperties这个注解注释调，不让springboot自动配置，使用我们的手动配置</span><br></pre></td></tr></table></figure><p>@ComponentScan(“com.lee.sh.mapper”)添加组件扫描<br>component service controller</p><h2 id="SpringCould认识"><a href="#SpringCould认识" class="headerlink" title="SpringCould认识"></a>SpringCould认识</h2><p>SpringCould中涉及到涉及的组件来自于netflix的eureka ribbon hystrix zuul<br>都是在application.yml上面可以完成,然后在启动器上面要开启,<br>就可以完成 可以实现集群解决访问量大的问题实现master 还是要<strong>辨析eureka和zookeeper的用途差异</strong></p><h3 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud Zookeeper"></a>Spring Cloud Zookeeper</h3><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><h3 id="Netflix-Eureka"><a href="#Netflix-Eureka" class="headerlink" title="Netflix Eureka"></a>Netflix Eureka</h3><p>服务中心，云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。这个可是springcloud最牛鼻的小弟，服务中心，任何小弟需要其它小弟支持什么都需要从这里来拿，同样的你有什么独门武功的都赶紧过报道，方便以后其它小弟来调用；它的好处是你不需要直接找各种什么小弟支持，只需要到服务中心来领取，也不需要知道提供支持的其它小弟在哪里，还是几个小弟来支持的，反正拿来用就行，服务中心来保证稳定性和质量。</p><p>情况来说目</p>]]></content>
      
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu优化-输入中文和deepin-Win</title>
      <link href="2878480242.html"/>
      <url>2878480242.html</url>
      
        <content type="html"><![CDATA[<p>将Deepin-ThunderSpeed ，Deepin-Wechart上在/usr/share/application 完善添加管理员权限</p><p>同时 、vi /etc/sudoers 将对于是sh脚本授予管理员权限</p><p>使用的deepin-wine</p><p>deepin-wine 可以直接使用IDM 目前市面所有的下载工具 Linux可以寥寥无几像　Ｕget XMD　的用过之后还是不行，但是windows版<br>安装和都很不方便,目前只使用 微信和迅雷 但是下载方面还是很慢 最近突然发现手里还珍藏了之前绿色版的IDM 赶紧的试试不错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Desktop Entry]</span><br><span class="line">Name&#x3D;IdeaIU</span><br><span class="line">Comment&#x3D;IdeaIU</span><br><span class="line">Exec&#x3D;&#x2F;home&#x2F;admin-m&#x2F;soft&#x2F;idea2&#x2F;idea-IU-172.3317.76&#x2F;bin&#x2F;idea.sh</span><br><span class="line">Icon&#x3D;&#x2F;home&#x2F;admin-m&#x2F;soft&#x2F;idea2&#x2F;idea-IU-172.3317.76&#x2F;bin&#x2F;idea.png</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Categories&#x3D;Application;Development;</span><br><span class="line"></span><br><span class="line">[Desktop Entry]   每个desktop文件都以这个标签开始，说明这是一个Desktop Entry文件</span><br><span class="line">Version &#x3D; 1.0      标明Desktop Entry的版本（可选）</span><br><span class="line">Name &#x3D; IdeaIU    程序名称（必须），这里以创建一个idea的快捷方式为例</span><br><span class="line">GenericName &#x3D; IdeaIU       程序通用名称（可选）</span><br><span class="line">Comment &#x3D;IdeaIU       程序描述（可选）</span><br><span class="line">Exec &#x3D;       程序的启动命令（必选），可以带参数运行</span><br><span class="line">Icon &#x3D;     设置快捷方式的图标（可选），当Type为Application，此项有效</span><br><span class="line">Terminal &#x3D; false   是否在终端中运行（可选），当Type为Application，此项有效</span><br><span class="line">Type &#x3D; Application   desktop的类型（必选），常见值有“Application”和“Link”</span><br><span class="line">Categories &#x3D; GNOME;Application;Network; &#x2F;&#x2F;注明在菜单栏中显示的类别（可选）</span><br><span class="line"></span><br><span class="line">完成   desktop 需要在权限上显示</span><br></pre></td></tr></table></figure><p>不要懒，完成好计划好的 提升效率，多想想法子</p><p>sh wechat下面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export XMODIFIERS&#x3D;&quot;@im&#x3D;fcitx&quot;export GTK_IM_MODULE&#x3D;&quot;fcitx&quot;export QT_IM_MODULE&#x3D;&quot;fcitx&quot;</span><br></pre></td></tr></table></figure><p>设置开机主题</p><p>针对Ubuntu18 部分通知没有 可以使用 topicons plus 实现wine通知的</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装软件部分</title>
      <link href="2690029183.html"/>
      <url>2690029183.html</url>
      
        <content type="html"><![CDATA[<p> 系统安装完后后面肯定就是安装软件，开始是在谷歌中国上安装chrome，之后是安装最新的Firefox，安装是搜狗了，这种跟着晚上的步骤就可以了，同时可以添加host你懂的加速，然后是撤换国内的镜像源提升下载速度，完成后可以安装markdownd的软件，下载uget添加aira的插件，在chrome 和Firefox上安装配套的插件就可以调用uget下载速度反正比浏览器的速度要快的，这里主要如果没配置好的的话浏览器是不能调用uget的<br>1，） 出现 unable connect 这个是uget的解决方案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">原因：缺少uget-integrator，出错在设置uGet为chrome的默认下载插件1 </span><br><span class="line">sudo add-apt-repository ppa:slgobinath/uget-chrome-wrapper2 sudo apt update3 </span><br><span class="line">sudo apt install uget-chrome-wrapper</span><br><span class="line">楼主也遇见了这个问题，经过多方查找发现：2018/5/10更新2018年uGet团队已将</span><br><span class="line">uget-chrome-wrapper采用官方插件并重新命名为</span><br><span class="line">uget-integrator 因此新的uget-extension插件不再支持uget-chrome-wrapper 解决方案：</span><br><span class="line">Ubuntu和Linux Mint1 sudo add-apt-repository ppa:uget-team/ppa2 </span><br><span class="line">sudo apt update3 sudo apt install uget-integrator</span><br><span class="line">wget https://raw.githubusercontent.com/ugetdm/ugetintegrator/master/install/linux/install_uget_integrator.sh2 chmod +x install_uget_integrator.sh3 ./install_uget_integrator.sh</span><br></pre></td></tr></table></figure><p>2，）如果是搜狗看不到图标可以使用 在终端收入fcitx 查看启动情况，工开始出现有事搜狗启动异常的情况，要切换我就直接卸载了很多次然后又是安装了一大堆，都是一大堆问题，如果你是和我一样的话可以试试我的方法，先将下载fcitx 然后安装搜狗，必要的话按住Ctrl+h键将有sogou和fcitx的删掉，如果又不显示<br>3，）对于网易云音乐安装是比较简单的 就是会出现不能自动登录的情况，每次都要启动都要登录我是参考这个<a href="https://www.zhihu.com/question/277330447/answer/478510195">链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有些用户有登录不能保持的情况（打开需要重新登录），这种情况多半是sudo方法后的后遗症：使得配置文件的权限属于root。网易云音乐配置文件存在于两个地方，正常情况下的权限如下图：</span><br><span class="line">~&#x2F;.config&#x2F;netease-cloud-music   (~ 代表当前用户的家目录)</span><br><span class="line">~&#x2F;.cache&#x2F;netease-cloud-music  （这是缓存目录，是可以直接删的）</span><br><span class="line">友情提示，如果你没有 ll 命令，可以 ls -al 代替其中fancy是我的用户名，如果你的文件权限是root，那么就需要修改为你可以访问的状态，执行下面的命令就行啦：# 修改文件的所属用户和组，以及权限</span><br><span class="line">find ~&#x2F;.config&#x2F;netease-cloud-music -exec </span><br><span class="line">sudo chown $USER:$USER &#123;&#125; +find ~&#x2F;.config&#x2F;netease-cloud-music -exec sudo chmod 755 &#123;&#125; + find ~&#x2F;.cache&#x2F;netease-cloud-music  -exec sudo chown $USER:$USER &#123;&#125; +find ~&#x2F;.cache&#x2F;netease-cloud-music  -exec sudo chmod 755 &#123;&#125; +</span><br></pre></td></tr></table></figure><p>时候就可以保持登录状态了<br>4，）就是安装deepin-wine了参考了<a href="https://github.com/wszqkzqk/deepin-wine-ubuntu">这位兄弟</a> 这里<strong>有个地方要主要</strong><br>提供上面的下载链接是有问题的安装时会出现安装包损坏，用下面那个链接我出现安装后点图标没有后面是在 /opt/deepinwine/apps/Deepin-WeChat 这个路径下运行的</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea配置同步</title>
      <link href="4293079570.html"/>
      <url>4293079570.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>项目目录</p><ol><li>.idea 目录和 demo.iml 和我们开发无关，是IDEA工具自己使用的</li><li>out 目录是存储编译后的.class文件</li><li>src 目录是存储我们编写的.java源文件</li><li>右单击模块,show in explorer :快速进入代码所在文件夹</li></ol></li><li><p>常用快捷键</p><ol><li>Alt+Enter 导入包，自动修正代码(重要)</li><li>Ctrl+Y 删除光标所在行</li><li>Ctrl+D 复制光标所在行的内容，插入光标位置下面</li><li>Ctrl+Alt+L 格式化代码 (重要)</li><li>Ctrl+/ 单行注释(记住)</li><li>Ctrl+Shift+/ 选中代码注释，多行注释，再按取消注释(记住)</li><li>Alt+Ins 自动生成代码，toString，get，set等方法</li><li>Alt+Shift+上下箭头 移动当前代码行</li></ol><ul><li>当前用的到的</li></ul><ol><li>psvm: main方法的快捷生成方式</li><li>sout: 输出语句</li><li>fori: for语句</li><li>100.for : for (int i = 0; i &lt; 100; i++)</li></ol></li><li><p>修改快捷键</p><ol><li>在IDEA工具中， Ctrl+空格 的快捷键，可以帮助我们补全代码，但是这个快捷键和Windows中的输入法切换快捷键冲突，需要修改IDEA中的快捷键。</li><li>File-&gt;Settings-&gt;keymap-&gt;Main menu-&gt;code-&gt;Completion-&gt;Basic</li></ol></li><li><p>导入和关闭项目</p><ol><li>关闭IDEA中已经存在的项目， File-&gt;Close Project</li><li>在IDEA的启动界面上，点击 OPEN ，选择项目目录即可</li><li>因为以后大家要看老师的代码,最好专门建立一个文件夹,存放</li></ol></li><li><p>方法</p><ol><li>回顾-方法的定义和调用<ol><li>9*9乘法表</li></ol></li><li>概念:方法也可以称为函数,是完成特定功能的代码块.(25m)</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> intellj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kibana完成的对Elasticsraech的处理</title>
      <link href="9bad30c2.html"/>
      <url>9bad30c2.html</url>
      
        <content type="html"><![CDATA[<p>创建索引,然后才能对索引进行映射配置包括映射配置的映射字段,查看映射关系,字段属性的详解<br>PUT demo/_mapping/log<br>{<br>“properties”: {<br> “name”:{<br> “type”:”text”,<br> “index”: true,<br> “store”: true,<br> “analyzer”: “standard”<br> },<br> “images”: {<br> “type”: “keyword”,<br> “index”: “false”<br> },<br> “price”: {<br> “type”: “float”<br> }<br>}<br>}<br>PUT demo<br>{<br>“settings”: {<br> “number_of_replicas”: 1,<br> “number_of_shards”: 5<br>}<br>}<br>POST demo/log<br>{<br>“name”:”王大海”,<br>“images”:”<a href="http://image.leyou.com/12479122.jpg&quot;">http://image.leyou.com/12479122.jpg&quot;</a>,<br> “price”:2699.00,<br> “hobby”:” 大 桌球 “<br>}<br>GET _search<br>{<br>“query”: {<br> “match_all”: {}<br>}<br>}<br>GET demo/_mapping</p>]]></content>
      
      
      
        <tags>
            
            <tag> kibana </tag>
            
            <tag> elasticsraech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring 整合回顾</title>
      <link href="857262000000000.html"/>
      <url>857262000000000.html</url>
      
        <content type="html"><![CDATA[<h1 id="spring-整合回顾"><a href="#spring-整合回顾" class="headerlink" title="spring 整合回顾"></a>spring 整合回顾</h1><p>注意spring的对bean的管理必须是建立在你声明的情况下,不然是不会管理的,还有针对配置文件必须要将给类使用也是必须要注解声明<br>在spring整合中要注意包括<br>webapp下的web,xml需要配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dispatch 服务启动时要跟着启动</span><br><span class="line">拦截器保证你拦截到.do或者其他的值(在springmvc配置文件中)</span><br><span class="line">中文乱码</span><br><span class="line">确保能读取spring-xxx.xml的这类文件</span><br></pre></td></tr></table></figure><p>!!配置监听器过程启动时启动ioc容器!!</p><p>将重要的文件什么会员才能下载的jsp文件都需要放在WEB-INF下面,确保能完成,还有一部分静态资源可以放在static文件夹下面,html的话可以放在主路径下面,</p><p>然后就是核心配置文件的配置包括<br>resource下面spring核心配置文件 注入DataSource bean<br>开启配置文件扫描</p><p>spring_MVC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">配置文件:开启扫描 原本是在WEB-INF下面现在是都放在web下面</span><br><span class="line">注解开启   </span><br><span class="line">配置拦截路径和指向哪里 .jsp 还有静态文件全部放</span><br><span class="line">在controller下开启restcontroller respestMapping</span><br><span class="line"></span><br><span class="line">&lt;!--重要别忘了解决静态资源被拦截的问题--&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    转换器啊cover</span><br><span class="line">    &lt;mvc:annotation-driven&gt;</span><br><span class="line">    &lt;mvc:message-converters&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">            &lt;constructor-arg name&#x3D;&quot;defaultCharset&quot; value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;&#x2F;mvc:message-converters&gt;</span><br><span class="line">&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure><p>mybatis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">导入数据库连接池的bean </span><br><span class="line">开启包扫描 </span><br><span class="line">注解开启   </span><br><span class="line">注解开发</span><br><span class="line">扫描mybatis sql的文件</span><br><span class="line"> sql必须要1),名字和接口名一样</span><br><span class="line">        2),@paremater提供</span><br><span class="line">        3).对象里面还有对象的复杂模型</span><br><span class="line">        4).</span><br></pre></td></tr></table></figure><p>!! 配置基包!!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mybatis导入插件</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin interceptor&#x3D;&quot;com.github.pagehelper.PageInterceptor&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;plugin interceptor&#x3D;&quot;com.github.abel533.mapperhelper.MapperInterceptor&quot;&gt;</span><br><span class="line">        &lt;!--指定主键自增回写方法,默认值MYSQL,详细说明请看文档 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;IDENTITY&quot; value&#x3D;&quot;MYSQL&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--通用Mapper接口，多个通用接口用逗号隔开 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;mappers&quot; value&#x3D;&quot;com.github.abel533.mapper.Mapper&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springAOP使用动态代理的简单实现</title>
      <link href="2810139133.html"/>
      <url>2810139133.html</url>
      
        <content type="html"><![CDATA[<p>动态代理以及.Cglib动态代理通过动态代理和cglib来理解spring的AOP(Aspect Orient Programing)动态</p><hr><p>动态代理以及.Cglib动态代理<br>通过动态代理和cglib来理解spring的AOP(Aspect Orient Programing)动态代理是通过JDK实现了反射是<br>–出现的</p><hr><p>1). 代理设计模式：为其他对象提供一种代理以控制对这个对象的访问。</p><ol><li><p>类加载器</p><ol><li>概述<ol><li>JDK 提供的代码.<ol><li>运行时代码. 引导类加载器<ol><li>扩展代码. 扩展类加载器</li><li>自己编写的代码.（以及第三方包) 应用类加载器</li></ol></li></ol></li><li>三种类加载器<ol><li>引导类加载器（Bootstrap ClassLoader）<ol><li>负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类</li></ol></li><li>扩展类加载器（Extension ClassLoader）<ol><li>负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar（jre/lib/ext)</li></ol></li><li>应用类加载器：（Application ClassLoader）<ol><li>加载编写的代码</li></ol></li></ol></li><li>继承关系<ol><li>引导类加载器由C++实现，不是ClassLoader子类（属于JVM的一部分）</li><li>扩展类加载器是引导类加载器子类</li><li>应用类加载器是扩展类加载器子类</li></ol></li><li>双亲委托机制: 一个class文件只会加载一次，在内存有且只有一个Class对象<ol><li>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器</li><li>只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。</li></ol></li></ol></li></ol></li><li><p>动态代理</p><ol><li>在运行时动态的创建代理类对象（无需定义一个代理类）<ol><li>java动态代理机制以巧妙的方式实现了代理模式的设计理念</li><li>作用：在被调用方法时，对委托者（被代理对象）进行 拦截和控制</li><li></li></ol></li></ol></li><li><p>结构</p><ol><li>代理类对象 proxy （本质是一个匿名类对象）</li><li>委托类对象（被代理的对象）<ol><li>接口（必须要有），被拦截的是接口中的方法</li></ol></li></ol></li><li><p>代码含义</p><ol><li>Proxy.newProxyInstance(loader, interfaces, new InvocationHandler(){}）；<ol><li>参数loader：代理类对象是运行时动态创建的，因为代理类在代码中并没有定义，需要在运行时动态加载，故需要类加载器（和被代理类加载器一样即可）</li><li>参数interfaces：接口用来动态的创建代理类，本质上这个代理类（匿名类）是接口的实现类，拥有接口中的所有方法（这个参数是复数，一般将委托类实现的所有接口传入）</li><li>InvocationHandler：调用处理器，本质是接口回调<br>2.重写 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {</li><li>proxy：代理类对象本身（几乎没作用）</li><li>method：当前代理类对象执行的方法（拦截）</li><li>args：当前方法所需要的参数</li><li>返回值：当前方法的返回值</li></ol></li></ol><p>final CustomerDao customerDao= new CustomerDaoImpl();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classLoader &#x3D; customerDao.getClass().getClassLoader();</span><br><span class="line">Class&lt;?&gt;[] interfaces &#x3D; customerDao.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">InvocationHandler h &#x3D;new InvocationHandler() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        System.out.print(method.getName()+&quot;  &quot;);</span><br><span class="line">       if(args&#x3D;&#x3D;null)&#123;</span><br><span class="line">           System.out.println(&quot;没有参数不增强&quot;);</span><br><span class="line">       &#125;else &#123;</span><br><span class="line"></span><br><span class="line">           Object invoke &#x3D; method.invoke(customerDao, args);</span><br><span class="line">           System.out.println(&quot;方法增强&quot;);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CustomerDao case &#x3D;(CustomerDao) Proxy.newProxyInstance(classLoader, interfaces,h);</span><br><span class="line">case.update();</span><br></pre></td></tr></table></figure></li></ol><p>2).Cglib动态代理<br>​ 本质是生成这个目标类的子类实现功能<br>final CustomerDao customerDao=new CustomerDaoImpl();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classLoader &#x3D; customerDao.getClass().getClassLoader();</span><br><span class="line">Class&lt;?&gt;[] interfaces &#x3D; customerDao.getClass().getInterfaces();</span><br><span class="line"></span><br><span class="line">InvocationHandler h &#x3D;new InvocationHandler() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        Annotation[] annos &#x3D; method.getAnnotations();</span><br><span class="line">        for (Annotation anno : annos) &#123;</span><br><span class="line">            if (anno.equals(&quot;Deprecated&quot;))&#123;</span><br><span class="line">                System.out.println(&quot;注解标注增强功能&quot;);</span><br><span class="line">                method.invoke(customerDao, args);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CustomerDao case &#x3D;(CustomerDao) Proxy.newProxyInstance(classLoader, interfaces,h);</span><br><span class="line">case.change(&quot;ff&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot搭建</title>
      <link href="1278275595.html"/>
      <url>1278275595.html</url>
      
        <content type="html"><![CDATA[<p>Spring将很多魔法带入了Spring应用程序的开发之中，其中最重要的是以下四个核心。<br><a href="http://tengj.top/2017/02/26/springboot1/">Spring Boot干货系列</a><br>这位博主上面有不少干货</p><ul><li>自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置</li><li>起步依赖：告诉Spring Boot需要什么功能，它就能引入需要的库。</li><li>命令行界面：这是Spring Boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建。</li><li>Actuator：让你能够深入运行中的Spring Boot应用程序，一探究竟。<br>详细的我们就不展开，等你爱上后自然会去深入的了解，后续章节我们会一一展开介绍。接下来让我们开搞吧。我已经迫不及待的要尝尝Spring Boot的味道了</li></ul><p>现在就将我把问题记录一下</p><p>1).报missing servletwebServerFactory bean</p><p><a href="https://i.loli.net/2018/09/26/5bab642b9f157.png"><img src="https://i.loli.net/2018/09/26/5bab642b9f157.png" alt="报missing servletwebServerFactory bean"></a><br>是我将pom.xml配置文件打乱了我的文件,开始以为是技术论坛中大家常说的应用入口类缺少@SpringBootApplication标注，或者是Spring bean缺少@EnableAutoConfiguration标注等问题。maven的依赖问题没弄好.有冲突导致的问题</p><p>2.)配置properties时IDEA报错</p><p><a href="https://i.loli.net/2018/09/26/5bab65ec7c3dd.png"><img src="https://i.loli.net/2018/09/26/5bab65ec7c3dd.png" alt="配置properties时IDEA报错"></a><br>这个由于idea预先读取配置文件中未出现前缀为jdbc的所以一直报错,且默认读取application.ym;(properties),要解决只能通过</p><p>1.@ConfigurationProperties(locations=”classpath:config/user.properties”, prefix=”XXX”)将配置文件导入,<br>2.选择@PropertySource导入外部文件<br>3.@EnableConfigurationProperties这个注解注释调，不让springboot自动配置，使用我们的手动配置</p>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring处理响应的过程</title>
      <link href="3343205230.html"/>
      <url>3343205230.html</url>
      
        <content type="html"><![CDATA[<p>springMVC<br>的运行原理梳理是将 将浏览器发送过来信息处理已Model Vever Conctroller 将不同功能区分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dispacherServlet</span><br><span class="line">handlermapperning</span><br><span class="line">handlerAdapater  --&gt;handler(Controller)</span><br><span class="line">Viewer</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu优化-修改软件权限挂着磁盘</title>
      <link href="1312199450.html"/>
      <url>1312199450.html</url>
      
        <content type="html"><![CDATA[<p>sublime_text</p><p>sudo chmod +x subl shell脚步 /usr/bin/subl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exec&#x3D;bash -c &quot;LD_PRELOAD&#x3D;&#x2F;opt&#x2F;sublime_text&#x2F;libsublime-imfix.so exec &#x2F;opt&#x2F;sublime_text&#x2F;sublime_text -n&quot;</span><br></pre></td></tr></table></figure><p>完善</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;dev&#x2F;nvme0n1p1:beiUUID&#x3D;&quot;31777183-00e9-459a-898f-4405b03e2c1e&quot; PARTUUID&#x3D;&quot;a174f198-ae87-4ca7-b340-f4a6e8fda28f&quot; UUID&#x3D;31777183-00e9-459a-898f-4405b03e2c1e &#x2F;home&#x2F;leek&#x2F;device   ext4    defaults         0      1</span><br></pre></td></tr></table></figure><p>sudo mount -a /etc/fstab</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;fs spec&gt; &lt;fs file&gt; &lt;fs vfstype&gt; &lt;fs mntops&gt; &lt;fs freq&gt; &lt;fs passno&gt;</span><br><span class="line">具体说明，以挂载&#x2F;dev&#x2F;sdb1为例：</span><br><span class="line">&lt;fs spec&gt;：分区定位，可以给UUID或LABEL，例如：UUID&#x3D;6E9ADAC29ADA85CD或LABEL&#x3D;software</span><br><span class="line">&lt;fs file&gt;：具体挂载点的位置，例如：&#x2F;data</span><br><span class="line">&lt;fs vfstype&gt;：挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs</span><br><span class="line">&lt;fs mntops&gt;：挂载参数，一般为defaults</span><br><span class="line">&lt;fs freq&gt;：磁盘检查，默认为0</span><br><span class="line">&lt;fs passno&gt;：磁盘检查，默认为0，不需要检查</span><br><span class="line"></span><br><span class="line">作者：a11en0</span><br><span class="line">链接：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;336758411dbf</span><br><span class="line">来源：简书</span><br><span class="line">简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用fileupload</title>
      <link href="7e2892da.html"/>
      <url>7e2892da.html</url>
      
        <content type="html"><![CDATA[<p>使用commons-fileupload插件来帮我们处理上传后的数据而让我们自己手动处理的话,也是可以的,但是十分麻烦,因为我们需要将所有的请求体获取到,</p><hr><p>首先maven下载fileupload和commons-io可以这两个类可以对浏览器的发送请求头保存,并能实现结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--upload 文件--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>浏览器端的代码</p><p>#html #</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&gt;</span><br><span class="line">&lt;!--&lt;form enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;--&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;modal-header&quot;&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;close&quot; data-dismiss&#x3D;&quot;modal&quot; aria-label&#x3D;&quot;Close&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;times;&lt;&#x2F;span&gt;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;h4 class&#x3D;&quot;modal-title&quot; id&#x3D;&quot;myModalLabel&quot;&gt;拖入文件上传&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">&lt;input id&#x3D;&quot;file-1&quot; type&#x3D;&quot;file&quot; class&#x3D;&quot;file&quot; data-overwrite-initial&#x3D;&quot;false&quot;</span><br><span class="line">data-min-file-count&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;文件上传</span><br><span class="line">   $(&quot;#file-1&quot;).fileinput(&#123;</span><br><span class="line">       language: &#39;zh&#39;, &#x2F;&#x2F;设置语言</span><br><span class="line">       uploadUrl: &quot;adminAddRoute?methodName&#x3D;updatePic&quot;, &#x2F;&#x2F;上传的地址</span><br><span class="line">       showUpload: true, &#x2F;&#x2F;是否显示上传按钮</span><br><span class="line">       showCaption: true,&#x2F;&#x2F;是否显示标题</span><br><span class="line">       browseClass: &quot;btn btn-primary&quot;, &#x2F;&#x2F;按钮样式 previewId, index</span><br><span class="line">       uploadExtraData: function () &#123;</span><br><span class="line">           var data &#x3D; &#123;</span><br><span class="line">               parentId: $(&quot;#fileType&quot;).val()</span><br><span class="line">           &#125;;</span><br><span class="line">           return data;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#39;theme&#39;: &#39;explorer&#39;,</span><br><span class="line">       maxFileCount: 1, &#x2F;&#x2F;表示允许同时上传的最大文件个数</span><br><span class="line">       enctype: &#39;multipart&#x2F;form-data&#39;,</span><br><span class="line">       validateInitialCount: true,</span><br><span class="line">       msgFilesTooMany: &quot;选择上传的文件数量(&#123;n&#125;) 超过允许的最大数值&#123;m&#125;！&quot;,</span><br><span class="line">       allowedFileExtensions : [&#39;jpg&#39;, &#39;png&#39;,&#39;gif&#39;],</span><br><span class="line">       overwriteInitial: false,</span><br><span class="line">       maxFileSize: 1000,</span><br><span class="line">       maxFilesNum: 1,</span><br><span class="line">       &#x2F;&#x2F;allowedFileTypes: [&#39;image&#39;, &#39;video&#39;, &#39;flash&#39;],</span><br><span class="line">       slugCallback: function(filename) &#123;</span><br><span class="line">           return filename.replace(&#39;(&#39;, &#39;_&#39;).replace(&#39;]&#39;, &#39;_&#39;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>将html文档放在需要实现的地方即可</p><h1 id="java后台实现"><a href="#java后台实现" class="headerlink" title="java后台实现"></a>java后台实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">String path_temp &#x3D; this.getServletContext().getRealPath(&quot;temp&quot;);</span><br><span class="line">       &#x2F;&#x2F;DiskFileItemFactory factory &#x3D; new DiskFileItemFactory(1024*1024, new File(path_temp));</span><br><span class="line">       DiskFileItemFactory factory &#x3D; new DiskFileItemFactory();</span><br><span class="line">       factory.setSizeThreshold(1024*1024);</span><br><span class="line">       factory.setRepository(new File(path_temp));</span><br><span class="line">       &#x2F;&#x2F;2、创建文件上传的核心类</span><br><span class="line">       ServletFileUpload upload &#x3D; new ServletFileUpload(factory);</span><br><span class="line">       &#x2F;&#x2F;设置上传文件的名称的编码</span><br><span class="line">       upload.setHeaderEncoding(&quot;UTF-8&quot;);</span><br><span class="line">       List&lt;FileItem&gt; fileItems &#x3D; upload.parseRequest(request);</span><br><span class="line">       FileItem item &#x3D; fileItems.get(0);</span><br><span class="line">       &#x2F;&#x2F;文件上传项</span><br><span class="line">       &#x2F;&#x2F;文件的名</span><br><span class="line">       String fileName1 &#x3D; item.getName();</span><br><span class="line">       System.out.println(&quot;上传文件名称 &#x3D; &quot; + fileName1);</span><br><span class="line">       String uuid &#x3D; UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">       String fileName &#x3D; uuid + &quot;.jpg&quot;;</span><br><span class="line">       &#x2F;&#x2F;获得上传文件的内容</span><br><span class="line">       InputStream in &#x3D; item.getInputStream();</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F;设置图片保存名字和路径</span><br><span class="line">       String path_store &#x3D; this.getServletContext().getRealPath(&quot;img&#x2F;product&quot;);</span><br><span class="line">           &#x2F;&#x2F;                            if(path_store)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       String st &#x3D; path_store + &quot;&#x2F;&quot; + fileName;</span><br><span class="line">       OutputStream outSize2 &#x3D; new FileOutputStream(st);</span><br><span class="line">       &#x2F;&#x2F;        OutputStream outSize4 &#x3D; new FileOutputStream(path_store+&quot;&#x2F;size4&#x2F;&quot;+fileName);</span><br><span class="line">       &#x2F;&#x2F;        OutputStream outSize3 &#x3D; new FileOutputStream(path_store+&quot;&#x2F;size3&#x2F;&quot;+fileName);</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F;保存文件</span><br><span class="line">       IOUtils.copy(in, outSize2);</span><br><span class="line">       in.close();</span><br><span class="line">       outSize2.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建个人静态博客</title>
      <link href="1573622544.html"/>
      <url>1573622544.html</url>
      
        <content type="html"><![CDATA[<p>参考的博客地址包括<a href="https://wsgzao.github.io/post/hexo-guide/">使用github搭建个人博客</a></p><ul><li><a href="http://suericze.github.io/2016/03/21/%E5%8F%B2%E4%B8%8A%E6%9C%80%E6%96%B0%E7%89%88GitHub+Hexo%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-Hexo%E9%85%8D%E7%BD%AE-%E4%B8%80/">史上最新版GitHub+Hexo配置系列教程-Hexo配置1</a><br>-<a href="http://suericze.github.io/2016/03/21/%E5%8F%B2%E4%B8%8A%E6%9C%80%E6%96%B0%E7%89%88GitHub+Hexo%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-GitHub%E9%85%8D%E7%BD%AE-%E4%BA%8C/">史上最新版GitHub+Hexo配置系列教程-Hexo配置2</a><br>-<a href="http://suericze.github.io/2016/03/21/%E5%8F%B2%E4%B8%8A%E6%9C%80%E6%96%B0%E7%89%88GitHub-Hexo%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-Hexo-GitHub%E5%85%B3%E8%81%94-%E4%B8%89/">史上最新版GitHub+Hexo配置系列教程-Hexo配置3</a><br>类似于jekyll、Octopress、Wordpress，我们可以用hexo创建自己的博客，托管到github或Heroku上，绑定自己的域名，用markdown写文章。本博客即使用hexo创建并托管在github上。<br>先上效果图<br><a href="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvrymfi3vxj31gv0uc76h.jpg"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvrymfi3vxj31gv0uc76h.jpg" alt="效果图"></a></li></ul><ol><li><p>首先是按照文章开头提供的链接安装node.js 通过NPM安装需要的各种js文件还有hexo 在你新建的文件夹hexo init初始化一下就会有文件夹和配置文件</p><p><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvryrmfpddj30hs0b3wfs.jpg" alt="img"></p><p>然后下载hexo需要的js文件通过NPM</p><p><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvrysrk2lsj30dh0k9adb.jpg" alt="img"></p><p>hexo generate生成静态网站</p><p>然后运行hexo server启动hexo服务,如果报错就修改一下配置文件是 _config.yml,这个配置文件可以修改很多东西,但是要和你安装的主题匹配不然就可能不兼容无法启动</p><p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fvryua2f9kj30sy0fk0tr.jpg" alt="img"></p><p>有个source/_posts是放你写的博客你可以将写好的md文件放在这里</p><p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fvryzjd6tyj30ii0hp0tm.jpg" alt="img"></p><p>在网上也可以比较方便的找到hexo支持的主题</p><p><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvrz0hehuej30ii0hp0tm.jpg" alt="img"></p><p>我初始的主题是这样的</p></li></ol><p>   将_config.yml上面的</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: anatole</span><br></pre></td></tr></table></figure><p>修改为themes中对于的文件夹,我用的主题链接为<a href="https://github.com/Ben02/hexo-theme-Anatole/tree/master/source">hexo-theme-Anatole</a><br><a href="https://github.com/bigleek/hexo">本人hexo的文件在这里</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vue-cli脚手架</title>
      <link href="46994988.html"/>
      <url>46994988.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用vue-cli脚手架"><a href="#使用vue-cli脚手架" class="headerlink" title="使用vue-cli脚手架"></a>使用vue-cli脚手架</h1><p>创建vue初始化项目<br>感觉vue init webpack-simple这样的方式适合小项目，vue init webpack这样的方式适合中大型项目，两种方式初始化Vue-Cli的项目的目录差别比较大，你可以发现使用vue init webpack这样的方式来初始化项目，默认提供了很多的webpack的配置，也更加的方便你对代理(跨域)、最终打包资源放到服务器什么目录、以及js、css、img和项目在打包过程等优化的配置等等</p><p>当 Vue Loader 编译单文件组件中的 块时，它也会将所有遇到的资源 URL 转换为 webpack 模块请求。<br>webpack 和 Vue Loader 的结合为你提供了一个现代、灵活且极其强大的前端工作流，来帮助撰写 Vue.js 应用。<a href="https://vue-loader.vuejs.org/zh/">vue-loader</a></p><h1 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h1><p>资源 URL 转换会遵循如下规则：</p><ol><li>有序列表如果路径是绝对路径 (例如 /images/foo.png)，会原样保留。</li><li>有序列表如果路径以 . 开头，将会被看作相对的模块依赖，并按照你的本地文件系统上的目录结构进行解析。</li><li>有序列表如果路径以 ~ 开头，其后的部分将会被看作模块依赖。这意味着你可以用该特性来引用一个 Node 依赖中的资源：</li><li>有序列表如果路径以 @ 开头，也会被看作模块依赖。如果你的 webpack 配置中给 @ 配置了 alias，这就很有用了。所有 vue-cli 创建的项目都默认配置了将 @ 指向 /src。<br>在导入模块和文件的简写要注意还包括./这种是有特殊含义的</li></ol><h2 id="浅谈Vue-use"><a href="#浅谈Vue-use" class="headerlink" title="浅谈Vue.use"></a>浅谈Vue.use</h2><p>写一个组件命名part.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;loading-box&quot;&gt;</span><br><span class="line">       我是组件</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>在js中引入上面这个组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入组件</span><br><span class="line">import LoadingComponent from &#39;.&#x2F;part.vue&#39;</span><br><span class="line">&#x2F;&#x2F; 定义 Loading 对象</span><br><span class="line">const Loading&#x3D;&#123;</span><br><span class="line">    &#x2F;&#x2F; install 是默认的方法。当外界在 use 这个组件的时候，就会调用本身的 install 方法，同时传一个 Vue 这个类的参数。</span><br><span class="line">    install:function(Vue)&#123;</span><br><span class="line">        Vue.component(&#39;Loading&#39;,LoadingComponent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 导出</span><br><span class="line">export default Loading</span><br></pre></td></tr></table></figure><p>注意如果 在其他地方用上面的index.js就必须要申明Vue.use(Loading)<br>当外界在 use 这个组件的时候，就会调用本身的 install 方法，同时传一个 Vue 这个类的参数。<a href="https://www.jianshu.com/p/89a05706917a">参考地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网上收集的关于spring特点的总结和spring介绍</title>
      <link href="fd8471fb.html"/>
      <url>fd8471fb.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/u013256816/article/details/51386182">朱小厮CNDS</a></p><ol><li>Spring框架的作用<br> 轻量：Spring是轻量级的，基本的版本大小为2MB<br> 控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。<br> 面向切面的编程AOP:Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。<br> 容器：Spring包含并管理应用中对象的生命周期和配置<br> MVC框架： Spring-MVC<br> 事务管理：Spring提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务JTA<br> 异常处理：Spring提供方便的API把具体技术相关的异常</li><li>Spring的组成</li></ol><p>这里写图片描述</p><p>Spring由7个模块组成：<br> Spring Core: 核心容器提供 Spring 框架的基本功能。核心容器的主要组件是BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。<br> Spring 上下文：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。<br> Spring AOP：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。<br> Spring DAO：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。<br> Spring ORM：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。<br> Spring Web 模块：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。<br> Spring MVC 框架：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</p><ol><li>Spring容器</li></ol><p>Sping的容器可以分为两种类型</p><ol><li>BeanFactory：（org.springframework.beans.factory.BeanFactory接口定义）是最简答的容器，提供了基本的DI支持。最常用的BeanFactory实现就是XmlBeanFactory类，它根据XML文件中的定义加载beans，该容器从XML文件读取配置元数据并用它去创建一个完全配置的系统或应用。</li><li>ApplicationContext应用上下文：（org.springframework.context.ApplicationContext）基于BeanFactory之上构建，并提供面向应用的服务。</li><li>ApplicationContext通常的实现<br> ClassPathXmlApplicationContext：从类路径下的XML配置文件中加载上下文定义，把应用上下文定义文件当做类资源。<br> FileSystemXmlApplicationContext：读取文件系统下的XML配置文件并加载上下文定义。<br> XmlWebApplicationContext：读取Web应用下的XML配置文件并装载上下文定义。<br>ApplicationContext context = new ClassPathXmlApplicationContext(“applicationContext.xml”);</li><li>IOC &amp; DI</li></ol><p>Inversion of Control， 一般分为两种类型：依赖注入DI(Dependency Injection)和依赖查找（Dependency Lookup）.依赖注入应用比较广泛。</p><p>Spring IOC负责创建对象，管理对象（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><p>优点：把应用的代码量降到最低。容器测试，最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。</p><p>DI依赖注入是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用床架对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述组件需要哪些服务，之后一个IOC容器辅助把他们组装起来。</p><p>IOC的注入方式：1. 构造器依赖注入；2. Setter方法注入。</p><ol><li>如何给spring容器提供配置元数据<br> XML配置文件<br> 基于注解的配置<br> 基于Java的配置@Configuration, @Bean</li><li>bean标签中的属性：</li></ol><p>id</p><p>name</p><p>class</p><p>init-method：Bean实例化后会立刻调用的方法</p><p>destory-method:Bean从容器移除和销毁前，会调用的方法</p><p>factory-method:运行我们调用一个指定的静态方法，从而代替构造方法来创建一个类的实例。</p><p>scope：Bean的作用域，包括singleton(默认)，prototype(每次调用都创建一个实例), request,session, global-session（注意spring中的单例bean不是线程安全的）</p><p>autowired:自动装配 byName, byType, constructor, autodetect(首先阐释使用constructor自动装配，如果没有发现与构造器相匹配的Bean时，Spring将尝试使用byType自动装配)</p><ol><li>beans标签中相关属性</li></ol><p>default-init-method</p><p>default-destory-method</p><p>default-autowire：默认为none，应用于Spring配置文件中的所有Bean，注意这里不是指Spring应用上下文，因为你可以定义多个配置文件</p><ol><li>Bean的生命周期</li></ol><ol><li><p>创建Bean的实例(factory-method, autowireConstrutor)</p></li><li><p>属性注入(autowireByName, autowireByType)</p></li><li><p>初始化Bean</p></li></ol><p>3.1 激活Aware方法：（invokeAwaresMethods）Spring中提供了一些Aware相关接口，比如BeanNameAware, BeanFactoryAware, ApplicationContextAware等，实现这些Aware接口的bean在被初始化之后，可以取得一些相对应的资源。</p><p>private void invokeAwareMethods(final String beanName, final Object bean){ if(bean instanceof Aware) { if(bean instanceof BeanNameAware){ ((BeanNameAware) bean).setBeanName(beanName); } if(bean instanceof BeanClassLoaderAware){ ((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader()); } if(bean instanceof BeanFactoryAware){ ((BeanFactoryAware) bean).setBeanFactory(AbstactAutowire CapableBeanFactory.this); } } }</p><p>3.2 处理器的应用(BeanPostProcessor接口)：调用客户自定义初始化方法前以及调用自定义初始化方法后分别会调用BeanPostProcessor的postProcessBeforeInitialization和postProcessAfterInitialization方法，使用户可以根据自己的业务需求进行响应的处理。</p><p>3.3 激活自定义的init方法（init-method &amp; 自定义实现InitializingBean接口）</p><p>protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinetion mbd){ if(System.getSecurityManager() != null){ AccessController.doPrivileged(new PrivilegedAction(){ @Override public Object run() { invokeAwareMethods(beanName,bean); return null; } }); } else{ //对特殊的bean处理：Aware, BeanClassLoaderAware, BeanFactoryAware invokeAwareMethods(beanName,bean); } Object wrappedBean = bean; if(mbd == null !! !mbd.isSynthetic()){ wrappedBean = applyBeanPostProcessorsBeforeInitialization(wappedBean,beanName); } try{ invokeInitMethods(beanName, wappedBean, mbd); } catch(Throwable ex){ throw new BeanCreationException((mbd != null ? mbd.getResourceDescription():null),beanName,”Invocation of init method failed”,ex); } if(mbd == null || ！mbd.isSynthetic()){ wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName); } return wappedBean; }</p><ol start="4"><li><p>使用Bean。 驻留在应用的上下文中，直到该应用上下文被销毁。</p></li><li><p>销毁(destory-mthod &amp; 实现DisposableBean接口)</p></li></ol><p>Or represent like this:</p><ol><li>Bean的构造</li><li>调用setXXX()方法设置Bean的属性</li><li>调用BeanNameAware的setBeanName()</li><li>调用BeanFactoryAware的setBeanFactory()方法</li><li>调用BeanPostProcessor的postProcessBeforeInitialization()方法</li><li>调用InitializingBean的afterPropertiesSet()方法</li><li>调用自定义的初始化方法</li><li>调用BeanPostProcessor类的postProcessAfterInitialization()方法</li><li>调用DisposableBean的destroy()方法</li><li>调用自定义的销毁方法</li><li>Spring中注入集合</li><li>允许值相同</li><li>不允许值相同</li><li>键和值都可以为任意类型，key, key-ref, value-ref, value可以任意搭配</li><li>XXX键和值都只能是String类型</li><li>装配空值</li></ol><ol><li>自动装配(autowiring)</li></ol><p>有助于减少甚至消除配置和元素，让Spring自动识别如何装配Bean的依赖关系。<a href="context:annotation-config/">context:annotation-config/</a></p><p>与之对应的是：自动检测(autodiscovery)，比自动装配更近了一步，让Spring能够自动识别哪些类需要被配置成SpringBean，从而减少对元素的使用。<a href="context:component-scan">context:component-scan</a></p><ol><li>注解</li></ol><p>Spring容器默认禁用注解装配。最简单的开启方式<a href="context:annotation-config/">context:annotation-config/</a>。</p><p>Spring支持的几种不同的用于自动装配的注解：<br> Spring自带的@Autowired注解<br> JSR-330的@Inject注解<br> JSR-250的@Resource注解</p><ol><li>@Autowired</li></ol><p>@Autowired具有强契约特征，其所标注的属性或参数必须是可装配的。如果没有Bean可以装配到@Autowired所标注的属性或参数中，自动装配就会失败，抛出NoSuchBeanDefinitionException.</p><p>属性不一定非要装配，null值也是可以接受的。在这种场景下可以通过设置@Autowired的required属性为false来配置自动装配是可选的，如：</p><p>@Autowired(required=false) private Object obj;</p><p>注意required属性可以用于@Autowired注解所使用的任意地方。但是当使用构造器装配时，只有一个构造器可以将@Autowired的required属性设置为true。其他使用@Autowired注解所标注的构造器只能将required属性设置为false。此外，当使用@Autowired标注多个构造器时，Spring就会从所有满足装配条件的构造器中选择入参最多的那个构造器。</p><p>可以使用@Qualifier明确指定要装配的Bean.如下：</p><p>@Autowired @Qualifier(“objName”) private Object obj;</p><ol><li>自定义的限定器</li></ol><p>@Target({ElementType.FIELF, ElementType.PARAMETER, ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Qualifier public @Interface SpecialQualifier{}</p><p>此时，可以通过自定义的@SpecialQualifier注解来代替@Qualifier来标注，也可以和@Autowired一起使用：</p><p>@Autowired @SpecialQualifier private Object obj;</p><p>此时,Spring会把自动装配的范围缩小到被@SpecialQualifier标注的Bean中。如果被@SpecialQualifier标注的Bean有多个，我们还可以通过自定义的另一个限定器@SpecialQualifier2来进一步缩小范围。</p><ol><li>@Autowired优缺点</li></ol><p>Spring的@Autowired注解是减少Spring XML配置的一种方式。但是它的类会映入对Spring的特定依赖（即使依赖只是一个注解）。</p><ol><li>@Inject</li></ol><p>和@Autowired注解一样，@Inject可以用来自动装配属性、方法和构造器；与@Autowired不同的是，@Inject没有required属性。因此@Inject注解所标注的依赖关系必须存在，如果不存在，则会抛出异常。</p><ol><li>@Named</li></ol><p>相对于@Autowired对应的Qualifier，@Inject所对应的是@Named注解。</p><p>@Inject @Named(“objName”) private Object obj;</p><ol><li>SpEL表达式</li></ol><p>语法形式在#{}中使用表达式,如：</p><ol><li>@Value</li></ol><p>@Value是一个新的装配注解，可以让我们使用注解装配String类型的值和基本类型的值，如int, boolean。我们可以通过@Value直接标注某个属性，方法或者方法参数，并传入一个String类型的表达式来装配属性，如：</p><p>@Value(“Eruption”) private String song;</p><p>@Value可以配合SpEL表达式一起使用，譬如有些情况下需要读取properties文件中的内容，可以使用：</p><p>@Value(“#{configProperties[‘ora_driver’]}”)</p><p>详细可以参考Spring+Mybatis多数据源配置（三）——Spring如何获取Properties文件的信息</p><ol><li>自动检测Bean</li></ol><p><a href="context:component-scan">context:component-scan</a>元素除了完成与<a href="context:annotation-config">context:annotation-config</a>一样的工作，还允许Spring自动检测Bean和定义Bean.<a href="context:component-scan">context:component-scan</a>元素会扫描指定的包和其所有子包，如下：</p><p>&lt;context:component-scan base-package=”com.zzh.dao” /&gt;</p><ol><li>为自动检测标注Bean</li></ol><p>默认情况下，查找使用构造型（stereotype）注解所标注的类，这些特殊的注解如下：</p><ul><li>@Component：通用的构造型注解，标志此类为Spring组件</li><li>@Controller：标识将该类定义为SpringMVC controller</li><li>@Repository：标识将该类定义为数据仓库</li><li>@Service：标识将该类定义为服务</li></ul><p>以@Component为例：</p><p>@Component public class Guitar implements Intrument{}</p><p>这里@Component会自动注册Guitar 为Spring Bean，并设置默认的Bean的Id为guitar，首字母大写变小写。注意如果第一个和第二个字母都是大写，默认的Bean的id会有特殊处理。</p><p>也可以指定Bean的Id如：</p><p>@Component(“guitarOne”) public class Guitar implements Intrument{}</p><ol><li>AOP</li></ol><p>面向切面的编程AOP，是一种编程技术，允许程序模块化横向切割关注点，或横切典型的责任划分，如日志和事务管理。</p><p>AOP的核心是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在SpringAOP中，切面通过带有@Aspect注解的类实现。</p><p>关注点是应用中的一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。</p><p>横切关注点一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</p><p>连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。</p><p>切点是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点。</p><p>引入运行我们在已存在的类中添加新的方法和属性。</p><ol><li>AOP通知</li></ol><p>通知是个在方法执行前后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码</p><p>Spring切面可以应用五种类型的通知：</p><p>before：前置通知，在一个方法执行前被调用。@Before</p><p>after: 在方法执行之后调用的通知，无论方法执行是否成功。@After</p><p>after-returning: 仅当方法成功完成后执行的通知。@AfterReturning</p><p>after-throwing: 在方法抛出异常退出时执行的通知。@AfterThrowing</p><p>around: 在方法执行之前和之后调用的通知。@Around</p><ol><li>Spring的事务类型</li></ol><p>编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</p><p>声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</p><ol><li>ACID</li><li>Atomic原子性：事务是由一个或多个活动所组成的一个工作单元。原子性确保事务中的所有操作全部发生或者全部不发生。</li><li>Consistent一致性：一旦事务完成，系统必须确保它所建模的业务处于一致的状态</li><li>Isolated隔离线：事务允许多个用户对象头的数据进行操作，每个用户的操作不会与其他用户纠缠在一起。</li><li>Durable持久性：一旦事务完成，事务的结果应该持久化，这样就能从任何的系统崩溃中恢复过来。</li><li>JDBC事务</li></ol><p>如果在应用程序中直接使用JDBC来进行持久化，譬如博主采用的是Mybatis，DataSourceTransactionManager会为你处理事务边界。譬如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp.BasicDataSource&quot;         destroy-method&#x3D;&quot;close&quot;&gt;         &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;driver&#125;&quot; &#x2F;&gt;         &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot; &#x2F;&gt;         &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;zzh&quot; &#x2F;&gt;         &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;zzh&quot; &#x2F;&gt;         &lt;property name&#x3D;&quot;validationQuery&quot; value&#x3D;&quot;SELECT 1&quot;&#x2F;&gt;     &lt;&#x2F;bean&gt;     &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;         &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;     &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><ol><li>JTA事务</li></ol><p>如果你的事务需要跨多个事务资源（例如：两个或多个数据库；或者如Sping+ActiveMQ整合需要将ActiveMQ和数据库的事务整合起来），就需要使用JtaTransactionManager:</p><p>&lt;bean id=”jtaTransactionManager”class=”org.springframework.transaction.jta.JtaTransactionManager”/&gt;<br>JtaTransactionManager将事务管理的职责委托给了一个JTA的实现。JTA规定了应用程序与一个或多个数据源之间协调事务的标准API。transactionManagerName属性指明了要在JNDI上查找的JTA事务管理器。</p><p>\29. 声明式事务</p><p>\1. 隔离级别(isolation) ISOLATION_DEFAULT: 使用底层数据库预设的隔离层级 ISOLATION_READ_COMMITTED: 允许事务读取其他并行的事务已经送出（Commit）的数据字段，可以防止Dirty read问题 ISOLATION_READ_UNCOMMITTED: 允许事务读取其他并行的事务还没送出的数据，会发生Dirty、Nonrepeatable、Phantom read等问题 ISOLATION_REPEATABLE_READ: 要求多次读取的数据必须相同，除非事务本身更新数据，可防止Dirty、Nonrepeatable read问题 ISOLATION_SERIALIZABLE: 完整的隔离层级，可防止Dirty、Nonrepeatable、Phantom read等问题，会锁定对应的数据表格，因而有效率问题2. 传播行为(propagation) PROPAGATION_REQUIRED–支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 PROPAGATION_SUPPORTS–支持当前事务，如果当前没有事务，就以非事务方式执行。 PROPAGATION_MANDATORY–支持当前事务，如果当前没有事务，就抛出异常。 PROPAGATION_REQUIRES_NEW–新建事务，如果当前存在事务，把当前事务挂起。 PROPAGATION_NOT_SUPPORTED–以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 PROPAGATION_NEVER–以非事务方式执行，如果当前存在事务，则抛出异常。 PROPAGATION_NESTED–如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。3. 只读(read-only)</p><p>\4. 事务超时(timeout)</p><p>\5. 回滚规则(rollback-for, no-rollback-for)：rollback-for指事务对于那些检查型异常应当回滚而不提交；no-rollback-for指事务对于那些异常应当继续运行而不回滚。默认情况下，Spring声明事务对所有的运行时异常都进行回滚。</p><p>\6. SpringMVC</p><p>核心架构的具体流程：9. 首先用户发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；10. DispatcherServlet——&gt;HandlerMapping， HandlerMapping将会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象、多个HandlerInterceptor拦截器）对象，通过这种策略模式，很容易添加新的映射策略；11. DispatcherServlet——&gt;HandlerAdapter，HandlerAdapter将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；12. HandlerAdapter——&gt;处理器功能处理方法的调用，HandlerAdapter将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView对象（包含模型数据、逻辑视图名）；13. ModelAndView的逻辑视图名——&gt; ViewResolver， ViewResolver将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；14. View——&gt;渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；15. 返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。16. DispatcherServlet</p><p>viewspace org.springframework.web.servlet.DispatcherServlet 2</p><p>接下来，必须申明DispatcherServlet处理那些URL：</p><p>通过将DispatcherServlet映射到/，声明了它会作为默认的servlet并且会处理所有的请求，包括对静态资源的请求。</p><p>&lt;mvc:resources mapping=”/images/“ location=”/js/“ cache-period=”31556926” /&gt; &lt;mvc:resources mapping=”/css/**” location=”/css/“ cache-period=”31556926” /&gt;</p><p>\32. 配置HandlerMapping</p><p>&lt;mvc:annotation-driven /&gt;</p><p>在构建控制器的时候，我们还需要使用注解将请求参数绑定到控制器的方法参数上进行校验以及信息转换。提供注解驱动的特性。</p><ol><li>配置HandlerAdapter</li></ol><ol start="2"><li>配置视图</li></ol><p>在SpringMVC中大量使用了约定优于配置的开发模式。InternalResourceViewResolver就是一个面向约定的元素。它将逻辑视图名称解析为View对象，而该对象将渲染的任务委托给Web应用程序上下文中的一个模板。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置视图解析器，将ModelAndView及字符串解析为具体的页面 --&gt;     &lt;bean         class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;         &lt;property name&#x3D;&quot;viewClass&quot;             value&#x3D;&quot;org.springframework.web.servlet.view.JstlView&quot; &#x2F;&gt;         &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;         &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;     &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>当DispatcherServlet要求InternalResourceViewResolver解析视图的时候，它将获取一个逻辑视图名称，添加”/WEB-INF/jsp/”前缀和”.jsp”后缀。等待的结果就是渲染输出的JSP路径。在内部，InternalResourceViewResolver接下来会将这个路径传递给View对象，View对象将请求传递给JSP.</p><p>持续更新<del>~</del></p><p>请保留转载连接~<br>参考文献</p><ol><li>《Sping In Action》 Craig Walls.</li><li>69道Spring面试题和答案</li><li>Sping+ActiveMQ整合<br>欢迎支持笔者新书：《RabbitMQ实战指南》以及关注微信公众号：Kafka技术专栏。</li></ol><p>这里写图片描述</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近折腾Ubuntu16的过程记录</title>
      <link href="3642578636.html"/>
      <url>3642578636.html</url>
      
        <content type="html"><![CDATA[<p>上周到了一台戴尔的xps13，考虑win10喜欢频繁升级和对高分辨的显示不算好的支持，所以觉得折腾一下Ubuntu，其实很久之前就折腾过也尝试过将它设为主力系统，其实当时陆陆续续已经出现时网易云音乐和WPS已经类似于IDM的uget 当时还是不算好用，同时当时没怎么涉及到开发，现在算是比较合适与我开发。<br>先说一下安装的情况，刚开始由于没有课BIOS硬盘的acid的设置导致，启动盘不能识别硬盘不能继续安装，后面是一安装重启就出现,在grub引导后都没有出现登录见面，当时就很慌 ，以为是安装过程中BIOS到处出现安装出的问题吧BIOS全部折腾几遍，又安装又TMD的是黑屏–晚上看了看都是登录时后面出现黑屏，是NVIDIA和Intel的集成显卡的问题，我照着网上先是尝试在grub前面编辑一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">启动黑屏</span><br><span class="line">在启动Ubuntu的时候出现黑屏的情况，是因为升级了内核导致显卡不兼容，启动的时候应该告诉内核不要加载显卡：</span><br><span class="line"></span><br><span class="line">在引导界面，按e进入grub编辑界面，在quiet splash后面添加nomodeset</span><br><span class="line">按F10接着引导启动</span><br><span class="line">进入登录界面，输入用户名和密码发现闪一下又跳回登录界面 </span><br><span class="line">先不用着急解决登录界面循环的问题，前面的grub配置文件的修改只是暂时的，现在需要永久性的修改 </span><br><span class="line">Ctrl+Alt+（F1-F6）进入命令行tty界面，登录之后，</span><br><span class="line">sudo vi &#x2F;etc&#x2F;default&#x2F;grub</span><br><span class="line">1</span><br><span class="line">找到quiet splash并在后面添加nomodeset。然后输入</span><br><span class="line"></span><br><span class="line">sudo update-grub</span><br><span class="line">1</span><br><span class="line">更新了grub配置文件后，重启即可。 </span><br><span class="line">对于在tty命令行界面中文乱码的问题可以参考博客：http:&#x2F;&#x2F;blog.csdn.net&#x2F;VictoriaW&#x2F;article&#x2F;details&#x2F;56484552</span><br><span class="line">--------------------- </span><br><span class="line">作者：CodeTutor </span><br><span class="line">来源：CSDN </span><br><span class="line">原文：https:&#x2F;&#x2F;blog.csdn.net&#x2F;VictoriaW&#x2F;article&#x2F;details&#x2F;56484119 </span><br><span class="line">版权声明：本文为博主原创文章，转载请附上博文链接！</span><br></pre></td></tr></table></figure><p>没想到不行当时就检查一遍又一遍看，又在安装一遍然后设置不安装显卡的驱动，避开还是不行搞到两点没看到头绪<br>第二天我先可能是我这边是我安装引导文件的问题，然后选择try ubuntu 进入系统安装引导修复文件Boot-Repair. 试了一遍也不行真的是心灰意冷了，最后将启动盘工具<br>universal usb installer这个工具换成软碟通，搞完后就成功了，就是这个工具的问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES相关的知识总结一</title>
      <link href="3632233998.html"/>
      <url>3632233998.html</url>
      
        <content type="html"><![CDATA[<p>1）type</p><p>Elasticsearch中支持的数据类型非常丰富：</p><ul><li>String类型，又分两种：<ul><li>text：可分词，不可参与聚合</li><li>keyword：不可分词，数据会作为完整字段进行匹配，可以参与聚合</li></ul></li><li>Numerical：数值类型，分两类<ul><li>基本数据类型：long、interger、short、byte、double、float、half_float</li><li>浮点数的高精度类型：scaled_float<ul><li>需要指定一个精度因子，比如10或100。elasticsearch会把真实值乘以这个因子后存储，取出时再还原。</li></ul></li></ul></li><li>Date：日期类型<br>elasticsearch可以对日期格式化为字符串存储，但是建议我们存储为毫秒值，存储为long，节省空间。</li></ul><p>2）index</p><p>index影响字段的索引情况。</p><ul><li>true：字段会被索引，则可以用来进行搜索。默认值就是true</li><li>false：字段不会被索引，不能用来搜索</li></ul><p>index的默认值就是true，也就是说你不进行任何配置，所有字段都会被索引。</p><p>但是有些字段是我们不希望被索引的，比如商品的图片信息，就需要手动设置index为false。</p><p>3）store</p><p>是否将数据进行额外存储。_source</p><p>在学习lucene和solr时，我们知道如果一个字段的store设置为false，那么在文档列表中就不会有这个字段的值，用户的搜索结果中不会显示出来。</p><p>但是在Elasticsearch中，即便store设置为false，也可以搜索到结果。</p><p>原因是Elasticsearch在创建文档索引时，会将文档中的原始数据备份，保存到一个叫做_source的属性中。最终我们查询数据是从_source中来取值，所以可以通过过滤_source来选择哪些要显示，哪些不显示。</p><p>而如果设置store为true，就会在_source以外额外存储一份数据，多余，因此一般我们都会将store设置为false，事实上，store的默认值就是false。</p><p>4）boost</p><p>激励因子，这个与lucene中一样</p><p>其它的不再一一讲解，用的不多，大家参考官方文档：</p><p>还有查询的更多东西(mathch all)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;heima&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">​ “query”:&#123;</span><br><span class="line">​ “match_all”: &#123;&#125;</span><br><span class="line">​ &#125;</span><br><span class="line">&#125;</span><br><span class="line">匹配查询(match)</span><br><span class="line">GET &#x2F;heima&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">​ “query”:&#123;</span><br><span class="line">​ “match”:&#123;</span><br><span class="line">​ “title”:”小米电视”</span><br><span class="line">​ &#125;</span><br><span class="line">​ &#125;</span><br><span class="line">&#125;</span><br><span class="line">多字段查询(multi_match)</span><br><span class="line">GET &#x2F;heima&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">​ “query”:&#123;</span><br><span class="line">​ “multi_match”: &#123;</span><br><span class="line">​ “query”: “小米”,</span><br><span class="line">​ “fields”: [ “title”, “subTitle” ]</span><br><span class="line">​ &#125;</span><br><span class="line">​ &#125;</span><br><span class="line">&#125;</span><br><span class="line">词条匹配(term)</span><br><span class="line">GET &#x2F;heima&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">​ “query”:&#123;</span><br><span class="line">​ “term”:&#123;</span><br><span class="line">​ “price”:2699.00</span><br><span class="line">​ &#125;</span><br><span class="line">​ &#125;</span><br><span class="line">&#125;</span><br><span class="line">多词条精确匹配(terms)</span><br><span class="line">GET &#x2F;heima&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">​ “query”:&#123;</span><br><span class="line">​ “terms”:&#123;</span><br><span class="line">​ “price”:[2699.00,2899.00,3899.00]</span><br><span class="line">​ &#125;</span><br><span class="line">​ &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果过滤</p><p>默认情况下，elasticsearch在搜索的结果中，会把文档中保存在_source的所有字段都返回。</p><p>如果我们只想获取其中的部分字段，我们可以添加_source的过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;heima&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">“_source”: [“title”,”price”],&#x3D;&#x3D;&#x3D;&#x3D;&gt;includi exclud</span><br><span class="line">“query”: &#123;</span><br><span class="line">​ “term”: &#123;</span><br><span class="line">​ “price”: 2699</span><br><span class="line">​ &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES相关的知识总结二</title>
      <link href="3632233997.html"/>
      <url>3632233997.html</url>
      
        <content type="html"><![CDATA[<p>聚合aggregations</p><p>聚合可以让我们极其方便的实现对数据的统计、分析。例如：<br>Elasticsearch中的聚合，包含多种类型，最常用的两种，一个叫桶，一个叫度量：</p><p>桶（bucket）,阿里文档称之为存储单元</p><p>桶的作用，是按照某种方式对数据进行分组，每一组数据在ES中称为一个桶， 例如我们根据国籍对人划分，可以得到中国桶、英国桶，日本桶……或者我们按照年龄段对人进行划分：0<del>10,10</del>20,20<del>30,30</del>40等。</p><p>Elasticsearch中提供的划分桶的方式有很多：</p><ul><li>Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一个存储单元</li><li>Histogram Aggregation：根据数值阶梯分组，与日期类似</li><li>Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一个存储单元</li><li>Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分</li><li>……</li></ul><p>综上所述，我们发现bucket aggregations 只负责对数据进行分组，并不进行计算，因此往往bucket中往往会嵌套另一种聚合：metrics aggregations即度量</p><p>度量（metrics）</p><p>分组完成以后，我们一般会对组中的数据进行聚合运算，例如求平均值、最大、最小、求和等，这些在ES中称为度量</p><p>比较常用的一些聚合度量方式：</p><ul><li>Avg Aggregation：求平均值</li><li>Max Aggregation：求最大值</li><li>Min Aggregation：求最小值</li><li>Percentiles Aggregation：求百分比</li><li>Stats Aggregation：同时返回avg、max、min、sum、count等</li><li>Sum Aggregation：求和</li><li>Top hits Aggregation：求前几</li><li>Value Count Aggregation：求总数</li></ul><p>聚合为桶<br>GET /cars/_search<br>{<br>​ “size” : 10,<br>​ “aggs” : {<br>​ “popular_colors” : {<br>​ “terms” : {<br>​ “field” : “color”<br>​ }<br>​ }<br>​ }<br>}</p><ul><li>hits：查询结果为空，因为我们设置了size为0</li><li>aggregations：聚合的结果</li><li>popular_colors：我们定义的聚合名称</li><li>buckets：查找到的桶，每个不同的color字段值都会形成一个桶<ul><li>key：这个桶对应的color字段的值</li><li>doc_count：这个桶中的文档数量</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring定时任务</title>
      <link href="1075226630.html"/>
      <url>1075226630.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  &lt;bean id&#x3D;&quot;schedulerJobDetail&quot; class&#x3D;&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&gt;</span><br><span class="line">         &lt;property name&#x3D;&quot;targetObject&quot; ref&#x3D;&quot;scheduleInfoAction&quot;&#x2F;&gt;</span><br><span class="line">         &lt;property name&#x3D;&quot;targetMethod&quot; value&#x3D;&quot;simpleJobTest&quot;&#x2F;&gt;</span><br><span class="line">         &lt;property name&#x3D;&quot;concurrent&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;bean&gt;</span><br><span class="line">     &lt;bean id&#x3D;&quot;cronTrigger&quot; class&#x3D;&quot;org.springframework.scheduling.quartz.CronTriggerBean&quot; &gt;</span><br><span class="line">          &lt;property name&#x3D;&quot;jobDetail&quot; ref&#x3D;&quot;schedulerJobDetail&quot;&#x2F;&gt;</span><br><span class="line">          &lt;property name&#x3D;&quot;cronExpression&quot;&gt;</span><br><span class="line">              &lt;value&gt;0&#x2F;10 * * * * ?&lt;&#x2F;value&gt;</span><br><span class="line">          &lt;&#x2F;property&gt;</span><br><span class="line">      &lt;&#x2F;bean&gt;</span><br><span class="line">     &lt;bean id&#x3D;&quot;schedulerFactory&quot;     class&#x3D;&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;</span><br><span class="line">         &lt;property name&#x3D;&quot;triggers&quot;&gt;</span><br><span class="line">             &lt;list&gt;</span><br><span class="line">                 &lt;ref local&#x3D;&quot;cronTrigger&quot;&#x2F;&gt;</span><br><span class="line">             &lt;&#x2F;list&gt;</span><br><span class="line">         &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/liuling/archive/2013/01/31/liulinga.html">链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">定时任务</span><br><span class="line">每隔5秒执行一次：*&#x2F;5 * * * * ? </span><br><span class="line">每隔1分钟执行一次：0 *&#x2F;1 * * * ? </span><br><span class="line">每天23点执行一次：0 0 23 * * ? </span><br><span class="line">每天凌晨1点执行一次：0 0 1 * * ? </span><br><span class="line">每月1号凌晨1点执行一次：0 0 1 1 * ? </span><br><span class="line">每月最后一天23点执行一次：0 0 23 L * ? </span><br><span class="line">每周星期天凌晨1点实行一次：0 0 1 ? * L </span><br><span class="line">在26分、29分、33分执行一次：0 26,29,33 * * * ? </span><br><span class="line">每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/2fafcc32561f">参考链接</a></p><table><thead><tr><th align="center">特殊字符</th><th align="center"></th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center"></td><td align="center">表示所有值；</td></tr><tr><td align="center">?</td><td align="center"></td><td align="center">表示未说明的值，即不关心它为何值；</td></tr><tr><td align="center">-</td><td align="center"></td><td align="center">表示一个指定的范围；</td></tr><tr><td align="center">,</td><td align="center"></td><td align="center">表示附加一个可能值；</td></tr><tr><td align="center">/</td><td align="center"></td><td align="center">符号前表示开始时间，符号后表示每次递增的值；</td></tr><tr><td align="center">L(“last”)</td><td align="center"></td><td align="center">(“last”) “L” 用在day-of-month字段意思是 “这个月最后一天”；用在 day-of-week字段, 它简单意思是 “7” or “SAT”。如果在day-of-week字段里和数字联合使用，它的意思就是 “这个月的最后一个星期几” – 例如： “6L” means “这个月的最后一个星期五”. 当我们用“L”时，不指明一个列表值或者范围是很重要的，不然的话，我们会得到一些意想不到的结果。</td></tr><tr><td align="center">W(“weekday”)</td><td align="center"></td><td align="center">只能用在day-of-month字段。用来描叙最接近指定天的工作日（周一到周五）。例如：在day-of-month字段用“15W”指“最接近这个月第15天的工作日”，即如果这个月第15天是周六，那么触发器将会在这个月第14天即周五触发；如果这个月第15天是周日，那么触发器将会在这个月第16 天即周一触发；如果这个月第15天是周二，那么就在触发器这天触发。注意一点：这个用法只会在当前月计算值，不会越过当前月。“W”字符仅能在day- of-month指明一天，不能是一个范围或列表。也可以用“LW”来指定这个月的最后一个工作日。</td></tr><tr><td align="center">#</td><td align="center"></td><td align="center">只能用在day-of-week字段。用来指定这个月的第几个周几。例：在day-of-week字段用”6#3”指这个月第3个周五（6指周五，3指第3个）。如果指定的日期不存在，触发器就不会触发。</td></tr><tr><td align="center">C</td><td align="center"></td><td align="center">指和calendar联系后计算过的值。例：在day-of-month 字段用“5C”指在这个月第5天或之后包括calendar的第一天；在day-of-week字段用“1C”指在这周日或之后包括calendar的第一天。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于泛型和Java的伪泛型</title>
      <link href="4d077bfe.html"/>
      <url>4d077bfe.html</url>
      
        <content type="html"><![CDATA[<p>范型 就是在集合中为了将本来是object的数据进行限定但其实在编译以后还是object还有范型通配符<br>多态 为什么有多态和实现而多态却只能多重继承二实现却可以多实现并且<br>多线程还有正则表达式还有设计对象还有包括 预习数据库<br>异常 数组 多线程 （多线程安全包括同步锁）</p><h3 id="高内聚底耦合"><a href="#高内聚底耦合" class="headerlink" title="高内聚底耦合"></a>高内聚底耦合</h3><p>高内聚底耦合 单继承多实现高内聚第耦合 运行时的时间 但继承多实现<br>面试中问到的单例设计模式（单例模式，工厂模式，装饰着模式）<br>Seriablizable<br>Comparable<br>Charsequence final修改关于设计模式和</p><p>1)instanceof:实现了某接口的类的对象也是该接口的实例；某类的对象也是该类超类的实例。<br>　　 2)native()修饰的方法没有方法体，用一个分号”；”代替大括号。<br>　　3)main不是关键字。<br>　　4)System.exit(int value),也就是说，只要是int的，就能够使JVM退出System.exit(‘a’);同样的是合法的。<br>　　5)&amp;,|能用在int和boolean上，而^（异或）只能用在int上。<br>　　6）如果一个类和一个接口被定义在同一文件中，而且类被声明为public，则接口前什么都不能写，因为接口只能用public来修饰，而一个文件中又只能有一个public访问控制关键字。</p><p>　　 7）unreachable statement 下面的几种情况会出现unreachable statement</p><p>　　 （1）在reutrn语句后写语句。<br>　　 （2）在throw语句后写语句。<br>　　 （3）break、continue语句之后定义语句。<br>8）“\u10100”//合法，相当于‘\u1010’和字符串“0”</p><p>　　 9)移位运算符可以用于long int char short byte</p><p>　　 10)类的访问控制符可以是public或什么都不加.</p><p>　　 11)goto是保留字但不是关键字.then什么都不是.</p><p>　　 12)把超类的类型强制转换后赋给子类的对象时,编译无异常,但运行时会出现异常<br>Value值 field为属性</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
